strings? .*?resides? in memory assigned to the BerElement,? and must not be freed by the caller\.
    the string will reside in memory assigned to the BerElement, and must not be freed by the caller\.
    The ber_get_stringbv\(\) routine is used to read an octet string and its length into the provided struct berval \*\. If the alloc parameter is zero, the string will reside in memory assigned to the BerElement, and must not be freed by the caller\. If the alloc parameter is non-zero, the string will be copied into dynamically allocated space which should be returned using ber_memfree\(\)\.
    The string resides in memory assigned to the BerElement, and must not be freed by the caller\.
    Octet string\. A struct ber_val \* should be supplied, which upon return contains the octet string and its length\. The string resides in memory assigned to the BerElement, and must not be freed by the caller\.
    The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller\.
    Sequence of octet strings with lengths\. This is a generalized form of the previous three formats\. A void \*\* \(ptr\) should be supplied, followed by a ber_len_t \* \(len\) and a ber_len_t \(off\)\. Upon return \(ptr\) will point to a dynamically allocated array whose elements are all of size \(\*len\)\. A struct berval will be filled starting at offset \(off\) in each element\. The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller\. The array is terminated by a struct berval with a NULL bv_val string pointer\. NULL is returned if the sequence is empty\. The number of elements in the array is also stored in \(\*len\) on return\. The caller should free the returned array using ber_memfree\(\) \.
