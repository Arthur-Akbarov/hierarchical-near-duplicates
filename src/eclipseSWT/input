org.eclipse.swt.events
Class ArmEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.ArmEvent
All Implemented Interfaces:
java.io.Serializable


public final class ArmEvent extends TypedEvent
Instances of this class are sent as a result of a widget such as a menu item being armed.
See Also:
ArmListener, Sample code and further information, Serialized Form

Field Summary

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
ArmEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary

Methods inherited from class org.eclipse.swt.events.TypedEvent
toString

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

ArmEvent
public ArmEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information


org.eclipse.swt.events
Interface ArmListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
Functional Interface:
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.


@FunctionalInterface public interface ArmListener extends SWTEventListener
Classes which implement this interface provide a method that deals with the event that is generated when a widget, such as a menu item, is armed. After creating an instance of a class that implements this interface it can be added to a widget using the addArmListener method and removed using the removeArmListener method. When the widget is armed, the widgetArmed method will be invoked.
See Also:
ArmEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    widgetArmed(ArmEvent e)
Sent when a widget is armed, or 'about to be selected'.

Method Detail

widgetArmed
void widgetArmed(ArmEvent e)
Sent when a widget is armed, or 'about to be selected'.
Parameters:
e - an event containing information about the arm


org.eclipse.swt.internal
Class BidiUtil
java.lang.Object
org.eclipse.swt.internal.BidiUtil


public class BidiUtil extends java.lang.Object

Field Summary
Fields

Modifier and Type   Field and Description
static int  CLASS_ARABIC
static int  CLASS_HEBREW
static int  CLASS_LATINNUMBER
static int  CLASS_LOCALNUMBER
static int  CLASSIN
static int  GLYPHSHAPE
static int  KEYBOARD_BIDI
static int  KEYBOARD_NON_BIDI
static int  LIGATE
static int  LINKAFTER
static int  LINKBEFORE
static int  REORDER

Constructor Summary
Constructors

Constructor and Description
BidiUtil()

Method Summary
All Methods Static Methods Concrete Methods

Modifier and Type   Method and Description
static void addLanguageListener(Control control ,                    java.lang.Runna ble runnable)
static void addLanguageListener(long hwnd,                java.lang.Runnable ru nnable)
Adds a language listener.
static void drawGlyphs(GC gc,           char[]  renderBuffer,           int[] render Dx,           int x,           int y )
Wraps the ExtTextOut function.
static int  getFontBidiAttributes(GC gc)
Return bidi attribute information for the font in the specified gc.
static int  getKeyboardLanguage()
Return the active keyboard language type.
static void getOrderInfo(GC gc,             jav a.lang.String text,             int[ ] order,             byte[] classBuf fer,             int flags,     int[] offsets)
Return bidi ordering information for the given text.
static char[]   getRenderInfo(GC gc,              j ava.lang.String text,              i nt[] order,              byte[] clas sBuffer,              int[] dx,          int flags,              int [] offsets)
Return ordering and rendering information for the given text.
static boolean  isBidiPlatform()
Return whether or not the platform supports a bidi language.
static boolean  isKeyboardBidi()
Return whether or not the keyboard supports input of a bidi language.
static void removeLanguageListener(Control cont rol)
static void removeLanguageListener(long hwnd)
Removes the specified language listener.
static int  resolveTextDirection(java.lang.Stri ng text)
Determine the base direction for the given text.
static void setKeyboardLanguage(int language)
Switch the keyboard language to the specified language type.
static boolean  setOrientation(Control control,            int orientation)
static boolean  setOrientation(long hwnd,      int orientation)
Sets the orientation (writing order) of the specified control.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Field Detail

KEYBOARD_NON_BIDI
public static final int KEYBOARD_NON_BIDI
See Also:
Constant Field Values

KEYBOARD_BIDI
public static final int KEYBOARD_BIDI
See Also:
Constant Field Values

CLASSIN
public static final int CLASSIN
See Also:
Constant Field Values

LINKBEFORE
public static final int LINKBEFORE
See Also:
Constant Field Values

LINKAFTER
public static final int LINKAFTER
See Also:
Constant Field Values

CLASS_HEBREW
public static final int CLASS_HEBREW
See Also:
Constant Field Values

CLASS_ARABIC
public static final int CLASS_ARABIC
See Also:
Constant Field Values

CLASS_LOCALNUMBER
public static final int CLASS_LOCALNUMBER
See Also:
Constant Field Values

CLASS_LATINNUMBER
public static final int CLASS_LATINNUMBER
See Also:
Constant Field Values

REORDER
public static final int REORDER
See Also:
Constant Field Values

LIGATE
public static final int LIGATE
See Also:
Constant Field Values

GLYPHSHAPE
public static final int GLYPHSHAPE
See Also:
Constant Field Values

Constructor Detail

BidiUtil
public BidiUtil()

Method Detail

addLanguageListener
public static void addLanguageListener(long hwnd,
                                       java.lang.Runnable runnable)
Adds a language listener. The listener will get notified when the language of the keyboard changes (via Alt-Shift on Win platforms). Do this by creating a window proc for the Control so that the window messages for the Control can be monitored.
Parameters:
hwnd - the handle of the Control that is listening for keyboard language changes
runnable - the code that should be executed when a keyboard language change occurs

addLanguageListener
public static void addLanguageListener(Control control,
                                       java.lang.Runnable runnable)

drawGlyphs
public static void drawGlyphs(GC gc,
                              char[] renderBuffer,
                              int[] renderDx,
                              int x,
                              int y)
Wraps the ExtTextOut function.
Parameters:
gc - the gc to use for rendering
renderBuffer - the glyphs to render as an array of characters
renderDx - the width of each glyph in renderBuffer
x - x position to start rendering
y - y position to start rendering

getRenderInfo
public static char[] getRenderInfo(GC gc,
                                   java.lang.String text,
                                   int[] order,
                                   byte[] classBuffer,
                                   int[] dx,
                                   int flags,
                                   int[] offsets)
Return ordering and rendering information for the given text. Wraps the GetFontLanguageInfo and GetCharacterPlacement functions.
Parameters:
gc - the GC to use for measuring of this line, input parameter
text - text that bidi data should be calculated for, input parameter
order - an array of integers representing the visual position of each character in the text array, output parameter
classBuffer - an array of integers representing the type (e.g., ARABIC, HEBREW, LOCALNUMBER) of each character in the text array, input/output parameter
dx - an array of integers representing the pixel width of each glyph in the returned glyph buffer, output parameter
flags - an integer representing rendering flag information, input parameter
offsets - text segments that should be measured and reordered separately, input parameter. See org.eclipse.swt.custom.BidiSegmentEvent for details.
Returns:
buffer with the glyphs that should be rendered for the given text

getOrderInfo
public static void getOrderInfo(GC gc,
                                java.lang.String text,
                                int[] order,
                                byte[] classBuffer,
                                int flags,
                                int[] offsets)
Return bidi ordering information for the given text. Does not return rendering information (e.g., glyphs, glyph distances). Use this method when you only need ordering information. Doing so will improve performance. Wraps the GetFontLanguageInfo and GetCharacterPlacement functions.
Parameters:
gc - the GC to use for measuring of this line, input parameter
text - text that bidi data should be calculated for, input parameter
order - an array of integers representing the visual position of each character in the text array, output parameter
classBuffer - an array of integers representing the type (e.g., ARABIC, HEBREW, LOCALNUMBER) of each character in the text array, input/output parameter
flags - an integer representing rendering flag information, input parameter
offsets - text segments that should be measured and reordered separately, input parameter. See org.eclipse.swt.custom.BidiSegmentEvent for details.

getFontBidiAttributes
public static int getFontBidiAttributes(GC gc)
Return bidi attribute information for the font in the specified gc.
Parameters:
gc - the gc to query
Returns:
bitwise OR of the REORDER, LIGATE and GLYPHSHAPE flags defined by this class.

getKeyboardLanguage
public static int getKeyboardLanguage()
Return the active keyboard language type.
Returns:
an integer representing the active keyboard language (KEYBOARD_BIDI, KEYBOARD_NON_BIDI)

isBidiPlatform
public static boolean isBidiPlatform()
Return whether or not the platform supports a bidi language. Determine this by looking at the languages that are installed.
Returns:
true if bidi is supported, false otherwise. Always false on Windows CE.

isKeyboardBidi
public static boolean isKeyboardBidi()
Return whether or not the keyboard supports input of a bidi language. Determine this by looking at the languages that are installed for the keyboard.
Returns:
true if bidi is supported, false otherwise.

removeLanguageListener
public static void removeLanguageListener(long hwnd)
Removes the specified language listener.
Parameters:
hwnd - the handle of the Control that is listening for keyboard language changes

removeLanguageListener
public static void removeLanguageListener(Control control)

resolveTextDirection
public static int resolveTextDirection(java.lang.String text)
Determine the base direction for the given text. The direction is derived from that of the first strong bidirectional character. In case the text doesn't contain any strong characters, the base direction is to be derived from a higher-level protocol (e.g. the widget orientation).
Parameters:
text - Text base direction should be resolved for.
Returns:
SWT#LEFT_RIGHT or SWT#RIGHT_TO_LEFT if the text contains strong characters and thus the direction can be resolved, SWT#NONE otherwise.
since. :
3.105

setKeyboardLanguage
public static void setKeyboardLanguage(int language)
Switch the keyboard language to the specified language type. We do not distinguish between multiple bidi or multiple non-bidi languages, so set the keyboard to the first language of the given type.
Parameters:
language - integer representing language. One of KEYBOARD_BIDI, KEYBOARD_NON_BIDI.

setOrientation
public static boolean setOrientation(long hwnd,
                                     int orientation)
Sets the orientation (writing order) of the specified control. Text will be right aligned for right to left writing order.
Parameters:
hwnd - the handle of the Control to change the orientation of
orientation - one of SWT.RIGHT_TO_LEFT or SWT.LEFT_TO_RIGHT
Returns:
true if the orientation was changed, false if the orientation could not be changed

setOrientation
public static boolean setOrientation(Control control,
                                     int orientation)


org.eclipse.swt.widgets
Class Button
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Button
All Implemented Interfaces:
Drawable


public class Button extends Control
Instances of this class represent a selectable user interface object that issues notification when pressed and released.
Styles:
ARROW, CHECK, PUSH, RADIO, TOGGLE, FLAT, WRAP
UP, DOWN, LEFT, RIGHT, CENTER
Events:
Selection
Note: Only one of the styles ARROW, CHECK, PUSH, RADIO, and TOGGLE may be specified.
Note: Only one of the styles LEFT, RIGHT, and CENTER may be specified.
Note: Only one of the styles UP, DOWN, LEFT, and RIGHT may be specified when the ARROW style is specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
Button snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Button(Composite parent,       int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface.
int getAlignment()
Returns a value which describes the position of the text or image in the receiver.
Color   getBackground()
Returns the receiver's background color.
boolean getGrayed()
Returns true if the receiver is grayed, and false otherwise.
Image   getImage()
Returns the receiver's image if it has one, or null if it does not.
boolean getSelection()
Returns true if the receiver is selected, and false otherwise.
java.lang.String    getText()
Returns the receiver's text, which will be an empty string if it has never been set or if the receiver is an ARROW button.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
void    setAlignment(int alignment)
Controls how text, images and arrows will be displayed in the receiver.
void    setBackground(Color color)
Sets the button's background color to the color specified by the argument, or to the default system color for the control if the argument is null.
boolean setFocus()
Causes the receiver to have the keyboard focus, such that all keyboard events will be delivered to it.
void    setGrayed(boolean grayed)
Sets the grayed state of the receiver.
void    setImage(Image image)
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
void    setSelection(boolean selected)
Sets the selection state of the receiver, if it is of type CHECK, RADIO, or TOGGLE.
void    setText(java.lang.String string)
Sets the receiver's text.

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setFont, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

Button
public Button(Composite parent,
              int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.ARROW, SWT.CHECK, SWT.PUSH, SWT.RADIO, SWT.TOGGLE, SWT.FLAT, SWT.UP, SWT.DOWN, SWT.LEFT, SWT.RIGHT, SWT.CENTER, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface. widgetSelected is called when the control is selected by the user. widgetDefaultSelected is not called.
When the SWT.RADIO style bit is set, the widgetSelected method is also called when the receiver loses selection because another item in the same radio group was selected by the user. During widgetSelected the application can use getSelection() to determine the current selected state of the receiver.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

getAlignment
public int getAlignment()
Returns a value which describes the position of the text or image in the receiver. The value will be one of LEFT, RIGHT or CENTER unless the receiver is an ARROW button, in which case, the alignment will indicate the direction of the arrow (one of LEFT, RIGHT, UP or DOWN).
Returns:
the alignment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getBackground
public Color getBackground()
Description copied from class: Control
Returns the receiver's background color. Note: This operation is a hint and may be overridden by the platform. For example, on some versions of Windows the background of a TabFolder, is a gradient rather than a solid color.
Overrides:
getBackground in class Control
Returns:
the background color

getGrayed
public boolean getGrayed()
Returns true if the receiver is grayed, and false otherwise. When the widget does not have the CHECK style, return false.
Returns:
the grayed state of the checkbox
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

getImage
public Image getImage()
Returns the receiver's image if it has one, or null if it does not.
Returns:
the receiver's image
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelection
public boolean getSelection()
Returns true if the receiver is selected, and false otherwise. When the receiver is of type CHECK or RADIO, it is selected when it is checked. When it is of type TOGGLE, it is selected when it is pushed in. If the receiver is of any other type, this method returns false.
Returns:
the selection state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getText
public java.lang.String getText()
Returns the receiver's text, which will be an empty string if it has never been set or if the receiver is an ARROW button.
Returns:
the receiver's text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

setAlignment
public void setAlignment(int alignment)
Controls how text, images and arrows will be displayed in the receiver. The argument should be one of LEFT, RIGHT or CENTER unless the receiver is an ARROW button, in which case, the argument indicates the direction of the arrow (one of LEFT, RIGHT, UP or DOWN).
Parameters:
alignment - the new alignment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setBackground
public void setBackground(Color color)
Sets the button's background color to the color specified by the argument, or to the default system color for the control if the argument is null. Note: This is custom paint operation and only affects SWT.PUSH and SWT.TOGGLE buttons. If the native button has a 3D look an feel (e.g. Windows 7), this method will cause the button to look FLAT irrespective of the state of the SWT.FLAT style. For SWT.CHECK and SWT.RADIO buttons, this method delegates to Control.setBackground(Color).
Overrides:
setBackground in class Control
Parameters:
color - the new color (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setFocus
public boolean setFocus()
Description copied from class: Control
Causes the receiver to have the keyboard focus, such that all keyboard events will be delivered to it. Focus reassignment will respect applicable platform constraints.
Overrides:
setFocus in class Control
Returns:
true if the control got focus, and false if it was unable to.
See Also:
Control.forceFocus()

setImage
public void setImage(Image image)
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed. Note that a Button can display an image and text simultaneously on Windows (starting with XP), GTK+ and OSX. On other platforms, a Button that has an image and text set into it will display the image or text that was set most recently.
Parameters:
image - the image to display on the receiver (may be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the image has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setGrayed
public void setGrayed(boolean grayed)
Sets the grayed state of the receiver. This state change only applies if the control was created with the SWT.CHECK style.
Parameters:
grayed - the new grayed state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

setSelection
public void setSelection(boolean selected)
Sets the selection state of the receiver, if it is of type CHECK, RADIO, or TOGGLE. When the receiver is of type CHECK or RADIO, it is selected when it is checked. When it is of type TOGGLE, it is selected when it is pushed in.
Parameters:
selected - the new selection state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setText
public void setText(java.lang.String string)
Sets the receiver's text. This method sets the button label. The label may include the mnemonic character but must not contain line delimiters.
Mnemonics are indicated by an '&' that causes the next character to be the mnemonic. When the user presses a key sequence that matches the mnemonic, a selection event occurs. On most platforms, the mnemonic appears underlined but may be emphasized in a platform specific manner. The mnemonic indicator character '&' can be escaped by doubling it in the string, causing a single '&' to be displayed.
Note that a Button can display an image and text simultaneously on Windows (starting with XP), GTK+ and OSX. On other platforms, a Button that has an image and text set into it will display the image or text that was set most recently.
Also note, if control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Parameters:
string - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.internal
Class Callback
java.lang.Object
org.eclipse.swt.internal.Callback


public class Callback extends java.lang.Object
Instances of this class represent entry points into Java which can be invoked from operating system level callback routines. IMPORTANT: A callback is only valid when invoked on the thread which created it. The results are undefined (and typically bad) when a callback is passed out to the operating system (or other code) in such a way that the callback is called from a different thread.

Constructor Summary
Constructors

Constructor and Description
Callback(java.lang.Object object,         java.lang.String method,     int argCount)
Constructs a new instance of this class given an object to send the message to, a string naming the method to invoke and an argument count.
Callback(java.lang.Object object,         java.lang.String method,     int argCount,         boolean isArrayBased)
Constructs a new instance of this class given an object to send the message to, a string naming the method to invoke, an argument count and a flag indicating whether or not the arguments will be passed in an array.
Callback(java.lang.Object object,         java.lang.String method,     int argCount,         boolean isArrayBased,         long errorResult )
Constructs a new instance of this class given an object to send the message to, a string naming the method to invoke, an argument count, a flag indicating whether or not the arguments will be passed in an array and a value to return when an exception happens.
Callback(java.lang.Object object,         java.lang.String method,     java.lang.reflect.Type returnType,         java.lang.reflect.Type[]  arguments)
Register the java method to be a C callback.

Method Summary
All Methods Static Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    dispose()
Releases the native level resources associated with the callback, and removes all references between the callback and other objects.
long    getAddress()
Returns the address of a block of machine code which will invoke the callback represented by the receiver.
static boolean  getEnabled()
Returns whether or not callbacks which are triggered at the native level should cause the messages described by the matching Callback objects to be invoked.
static int  getEntryCount()
Returns the number of times the system has been recursively entered through a callback.
static java.lang.String getPlatform()
Returns the SWT platform name.
static void reset()
Immediately wipes out all native level state associated with all callbacks.
static void setEnabled(boolean enable)
Indicates whether or not callbacks which are triggered at the native level should cause the messages described by the matching Callback objects to be invoked.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

Callback
public Callback(java.lang.Object object,
                java.lang.String method,
                int argCount)
Constructs a new instance of this class given an object to send the message to, a string naming the method to invoke and an argument count. Note that, if the object is an instance of Class it is assumed that the method is a static method on that class. Note, do not use this if the method arguments have a double, as arguments will be shifted/corrupted. See Bug 510538. Instead use the following constructor:
Callback (Object, String, Type, Type [])
Parameters:
object - the object to send the message to
method - the name of the method to invoke
argCount - the number of arguments that the method takes

Callback
public Callback(java.lang.Object object,
                java.lang.String method,
                int argCount,
                boolean isArrayBased)
Constructs a new instance of this class given an object to send the message to, a string naming the method to invoke, an argument count and a flag indicating whether or not the arguments will be passed in an array. Note that, if the object is an instance of Class it is assumed that the method is a static method on that class. Note, do not use this if the method arguments have a double, as arguments will be shifted/corrupted. See Bug 510538. Instead use the following constructor:
Callback (Object, String, Type, Type [])
Parameters:
object - the object to send the message to
method - the name of the method to invoke
argCount - the number of arguments that the method takes
isArrayBased - true if the arguments should be passed in an array and false otherwise

Callback
public Callback(java.lang.Object object,
                java.lang.String method,
                int argCount,
                boolean isArrayBased,
                long errorResult)
Constructs a new instance of this class given an object to send the message to, a string naming the method to invoke, an argument count, a flag indicating whether or not the arguments will be passed in an array and a value to return when an exception happens. Note that, if the object is an instance of Class it is assumed that the method is a static method on that class. Note, do not use this if the method arguments have a double, as arguments will be shifted/corrupted. See Bug 510538. Instead use the following constructor:
Callback (Object, String, Type, Type [])
Parameters:
object - the object to send the message to
method - the name of the method to invoke
argCount - the number of arguments that the method takes
isArrayBased - true if the arguments should be passed in an array and false otherwise
errorResult - the return value if the java code throws an exception

Callback
public Callback(java.lang.Object object,
                java.lang.String method,
                java.lang.reflect.Type returnType,
                java.lang.reflect.Type[] arguments)
Register the java method to be a C callback. I.e, C will be able to make a call to this java method directly (through callback.c)
The other constructors hard-code int/long into the method signature:
long method (long ...)
Which is suitable for int/long and pointers.
This constructor is used if you need to use a different return/argument type, e.g double. See Bug 510538
Note:
Array support is not implemented/supported by this constructor. Use other constructors.
If the object is an instance of Class it is assumed that the method is a static method on that class.
Note, long types are converted to ints on 32 bit system automatically to account for smaller pointers. This means if you use 'long', you need to cast int next to it. like: long /*int*/
The following types are supported:

void (for return values only)
int
long
byte
char
double
float
short
boolean
For example if you want to link the following method:
void myMethod(long /*int*/ arg1, double arg2)
Then you would call this callback like:
Callback (this, "myMethod", void.class, new Type []{long.class, double.class});
Parameters:
object - the object to send the message to
method - method the name of the method to invoke
returnType - specify the type like void.class, long.class, double.class
arguments - specify the list of arguments like new Type [] {long.class, double.class }

Method Detail

dispose
public void dispose()
Releases the native level resources associated with the callback, and removes all references between the callback and other objects. This helps to prevent (bad) application code from accidentally holding onto extraneous garbage.

getAddress
public long getAddress()
Returns the address of a block of machine code which will invoke the callback represented by the receiver.
Returns:
the callback address

getPlatform
public static java.lang.String getPlatform()
Returns the SWT platform name.
Returns:
the platform name of the currently running SWT

getEntryCount
public static int getEntryCount()
Returns the number of times the system has been recursively entered through a callback. Note: This should not be called by application code.
Returns:
the entry count
since. :
2.1

setEnabled
public static final void setEnabled(boolean enable)
Indicates whether or not callbacks which are triggered at the native level should cause the messages described by the matching Callback objects to be invoked. This method is used to safely shut down SWT when it is run within environments which can generate spurious events. Note: This should not be called by application code.
Parameters:
enable - true if callbacks should be invoked

getEnabled
public static final boolean getEnabled()
Returns whether or not callbacks which are triggered at the native level should cause the messages described by the matching Callback objects to be invoked. This method is used to safely shut down SWT when it is run within environments which can generate spurious events. Note: This should not be called by application code.
Returns:
true if callbacks should not be invoked

reset
public static final void reset()
Immediately wipes out all native level state associated with all callbacks. WARNING: This operation is extremely dangerous, and should never be performed by application code.


org.eclipse.swt.widgets
Class Canvas
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.Composite
org.eclipse.swt.widgets.Canvas
All Implemented Interfaces:
Drawable
Direct Known Subclasses:
Decorations


public class Canvas extends Composite
Instances of this class provide a surface for drawing arbitrary graphics.
Styles:
(none)
Events:
(none)
This class may be subclassed by custom control implementors who are building controls that are not constructed from aggregates of other controls. That is, they are either painted using SWT graphics calls or are handled by native methods.
See Also:
Composite, Canvas snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Canvas(Composite parent,       int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    drawBackground(GC gc,  int x,               int y,        int width,               int  height)
Fills the interior of the rectangle specified by the arguments, with the receiver's background.
Caret   getCaret()
Returns the caret.
IME getIME()
Returns the IME.
void    scroll(int destX,       int destY,       int x,       int y,       int  width,       int height,       boole an all)
Scrolls a rectangular area of the receiver by first copying the source area to the destination and then causing the area of the source which is not covered by the destination to be repainted.
void    setCaret(Caret caret)
Sets the receiver's caret.
void    setFont(Font font)
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
void    setIME(IME ime)
Sets the receiver's IME.

Methods inherited from class org.eclipse.swt.widgets.Composite
changed, checkSubclass, drawBackground, getBackgroundMode, getChildren, getLayout, getLayoutDeferred, getTabList, isLayoutDeferred, layout, layout, layout, layout, layout, setBackgroundMode, setFocus, setLayout, setLayoutDeferred, setTabList

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

Canvas
public Canvas(Composite parent,
              int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
See Also:
SWT, Widget.getStyle()

Method Detail

drawBackground
public void drawBackground(GC gc,
                           int x,
                           int y,
                           int width,
                           int height)
Fills the interior of the rectangle specified by the arguments, with the receiver's background.
Parameters:
gc - the gc where the rectangle is to be filled
x - the x coordinate of the rectangle to be filled
y - the y coordinate of the rectangle to be filled
width - the width of the rectangle to be filled
height - the height of the rectangle to be filled
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the gc is null
ERROR_INVALID_ARGUMENT - if the gc has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

getCaret
public Caret getCaret()
Returns the caret. The caret for the control is automatically hidden and shown when the control is painted or resized, when focus is gained or lost and when an the control is scrolled. To avoid drawing on top of the caret, the programmer must hide and show the caret when drawing in the window any other time.
Returns:
the caret for the receiver, may be null
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getIME
public IME getIME()
Returns the IME.
Returns:
the IME
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

scroll
public void scroll(int destX,
                   int destY,
                   int x,
                   int y,
                   int width,
                   int height,
                   boolean all)
Scrolls a rectangular area of the receiver by first copying the source area to the destination and then causing the area of the source which is not covered by the destination to be repainted. Children that intersect the rectangle are optionally moved during the operation. In addition, all outstanding paint events are flushed before the source area is copied to ensure that the contents of the canvas are drawn correctly.
Parameters:
destX - the x coordinate of the destination
destY - the y coordinate of the destination
x - the x coordinate of the source
y - the y coordinate of the source
width - the width of the area
height - the height of the area
all - trueif children should be scrolled, and false otherwise
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setCaret
public void setCaret(Caret caret)
Sets the receiver's caret. The caret for the control is automatically hidden and shown when the control is painted or resized, when focus is gained or lost and when an the control is scrolled. To avoid drawing on top of the caret, the programmer must hide and show the caret when drawing in the window any other time.
Parameters:
caret - the new caret for the receiver, may be null
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the caret has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setFont
public void setFont(Font font)
Description copied from class: Control
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Overrides:
setFont in class Control
Parameters:
font - the new font (or null)

setIME
public void setIME(IME ime)
Sets the receiver's IME.
Parameters:
ime - the new IME for the receiver, may be null
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the IME has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4


org.eclipse.swt.widgets
Class Caret
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Caret


public class Caret extends Widget
Instances of this class provide an i-beam that is typically used as the insertion point for text.
Styles:
(none)
Events:
(none)
IMPORTANT: This class is not intended to be subclassed.
See Also:
Caret snippets, SWT Example: ControlExample, Canvas tab, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
Caret(Canvas parent,      int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
Rectangle   getBounds()
Returns a rectangle describing the receiver's size and location relative to its parent (or its display if its parent is null).
Font    getFont()
Returns the font that the receiver will use to paint textual information.
Image   getImage()
Returns the image that the receiver will use to paint the caret.
Point   getLocation()
Returns a point describing the receiver's location relative to its parent (or its display if its parent is null).
Canvas  getParent()
Returns the receiver's parent, which must be a Canvas.
Point   getSize()
Returns a point describing the receiver's size.
boolean getVisible()
Returns true if the receiver is visible, and false otherwise.
boolean isVisible()
Returns true if the receiver is visible and all of the receiver's ancestors are visible and false otherwise.
void    setBounds(int x,          int y,        int width,          int heigh t)
Sets the receiver's size and location to the rectangular area specified by the arguments.
void    setBounds(Rectangle rect)
Sets the receiver's size and location to the rectangular area specified by the argument.
void    setFont(Font font)
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
void    setImage(Image image)
Sets the image that the receiver will use to paint the caret to the image specified by the argument, or to the default which is a filled rectangle if the argument is null
void    setLocation(int x,            int y )
Sets the receiver's location to the point specified by the arguments which are relative to the receiver's parent (or its display if its parent is null).
void    setLocation(Point location)
Sets the receiver's location to the point specified by the argument which is relative to the receiver's parent (or its display if its parent is null).
void    setSize(int width,        int heigh t)
Sets the receiver's size to the point specified by the arguments.
void    setSize(Point size)
Sets the receiver's size to the point specified by the argument.
void    setVisible(boolean visible)
Marks the receiver as visible if the argument is true, and marks it invisible otherwise.

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

Caret
public Caret(Canvas parent,
             int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT, Widget.checkSubclass(), Widget.getStyle()

Method Detail

getBounds
public Rectangle getBounds()
Returns a rectangle describing the receiver's size and location relative to its parent (or its display if its parent is null).
Returns:
the receiver's bounding rectangle
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getFont
public Font getFont()
Returns the font that the receiver will use to paint textual information.
Returns:
the receiver's font
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getImage
public Image getImage()
Returns the image that the receiver will use to paint the caret.
Returns:
the receiver's image
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getLocation
public Point getLocation()
Returns a point describing the receiver's location relative to its parent (or its display if its parent is null).
Returns:
the receiver's location
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getParent
public Canvas getParent()
Returns the receiver's parent, which must be a Canvas.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSize
public Point getSize()
Returns a point describing the receiver's size.
Returns:
the receiver's size
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getVisible
public boolean getVisible()
Returns true if the receiver is visible, and false otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, this method may still indicate that it is considered visible even though it may not actually be showing.
Returns:
the receiver's visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

isVisible
public boolean isVisible()
Returns true if the receiver is visible and all of the receiver's ancestors are visible and false otherwise.
Returns:
the receiver's visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getVisible()

setBounds
public void setBounds(int x,
                      int y,
                      int width,
                      int height)
Sets the receiver's size and location to the rectangular area specified by the arguments. The x and y arguments are relative to the receiver's parent (or its display if its parent is null).
Parameters:
x - the new x coordinate for the receiver
y - the new y coordinate for the receiver
width - the new width for the receiver
height - the new height for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setBounds
public void setBounds(Rectangle rect)
Sets the receiver's size and location to the rectangular area specified by the argument. The x and y fields of the rectangle are relative to the receiver's parent (or its display if its parent is null).
Parameters:
rect - the new bounds for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setFont
public void setFont(Font font)
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Parameters:
font - the new font (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the font has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setImage
public void setImage(Image image)
Sets the image that the receiver will use to paint the caret to the image specified by the argument, or to the default which is a filled rectangle if the argument is null
Parameters:
image - the new image (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the image has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setLocation
public void setLocation(int x,
                        int y)
Sets the receiver's location to the point specified by the arguments which are relative to the receiver's parent (or its display if its parent is null).
Parameters:
x - the new x coordinate for the receiver
y - the new y coordinate for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setLocation
public void setLocation(Point location)
Sets the receiver's location to the point specified by the argument which is relative to the receiver's parent (or its display if its parent is null).
Parameters:
location - the new location for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setSize
public void setSize(int width,
                    int height)
Sets the receiver's size to the point specified by the arguments.
Parameters:
width - the new width for the receiver
height - the new height for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setSize
public void setSize(Point size)
Sets the receiver's size to the point specified by the argument.
Parameters:
size - the new extent for the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setVisible
public void setVisible(boolean visible)
Marks the receiver as visible if the argument is true, and marks it invisible otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, marking it visible may not actually cause it to be displayed.
Parameters:
visible - the new visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.graphics
Class Color
java.lang.Object
org.eclipse.swt.graphics.Resource
org.eclipse.swt.graphics.Color


public final class Color extends Resource
Instances of this class manage the operating system resources that implement SWT's RGB color model. To create a color you can either specify the individual color components as integers in the range 0 to 255 or provide an instance of an RGB or RGBA. Application code must explicitly invoke the Color.dispose() method to release the operating system resources managed by each instance when those instances are no longer required.
See Also:
RGB, RGBA, Device.getSystemColor(int), Color and RGB snippets, SWT Example: PaintExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
int handle
the handle to the OS color resource (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.

Constructor Summary
Constructors

Constructor and Description
Color(Device device,      int red,      int green,      int blue)
Constructs a new instance of this class given a device and the desired red, green and blue values expressed as ints in the range 0 to 255 (where 0 is black and 255 is full brightness).
Color(Device device,      int red,      int green,      int blue, int alpha)
Constructs a new instance of this class given a device and the desired red, green, blue & alpha values expressed as ints in the range 0 to 255 (where 0 is black and 255 is full brightness).
Color(Device device,      RGB rgb)
Constructs a new instance of this class given a device and an RGB describing the desired red, green and blue values.
Color(Device device,      RGBA rgba)
Constructs a new instance of this class given a device and an RGBA describing the desired red, green, blue & alpha values.
Color(Device device,      RGB rgb,      int alpha)
Constructs a new instance of this class given a device, an RGB describing the desired red, green and blue values, alpha specifying the level of transparency.

Method Summary
All Methods Static Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
int getAlpha()
Returns the amount of alpha in the color, from 0 (transparent) to 255 (opaque).
int getBlue()
Returns the amount of blue in the color, from 0 to 255.
int getGreen()
Returns the amount of green in the color, from 0 to 255.
int getRed()
Returns the amount of red in the color, from 0 to 255.
RGB getRGB()
Returns an RGB representing the receiver.
RGBA    getRGBA()
Returns an RGBA representing the receiver.
int hashCode()
Returns an integer hash code for the receiver.
boolean isDisposed()
Returns true if the color has been disposed, and false otherwise.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.
static Color    win32_new(Device device,          i nt handle)
Invokes platform specific functionality to allocate a new color.
static Color    win32_new(Device device,          i nt handle,          int alpha)
Invokes platform specific functionality to allocate a new color.

Methods inherited from class org.eclipse.swt.graphics.Resource
dispose, getDevice

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait

Field Detail

handle
public int handle
the handle to the OS color resource (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

Constructor Detail

Color
public Color(Device device,
             int red,
             int green,
             int blue)
Constructs a new instance of this class given a device and the desired red, green and blue values expressed as ints in the range 0 to 255 (where 0 is black and 255 is full brightness). On limited color devices, the color instance created by this call may not have the same RGB values as the ones specified by the arguments. The RGB values on the returned instance will be the color values of the operating system color. You must dispose the color when it is no longer required.
Parameters:
device - the device on which to allocate the color
red - the amount of red in the color
green - the amount of green in the color
blue - the amount of blue in the color
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_INVALID_ARGUMENT - if the red, green or blue argument is not between 0 and 255
See Also:
Resource.dispose()

Color
public Color(Device device,
             int red,
             int green,
             int blue,
             int alpha)
Constructs a new instance of this class given a device and the desired red, green, blue & alpha values expressed as ints in the range 0 to 255 (where 0 is black and 255 is full brightness). On limited color devices, the color instance created by this call may not have the same RGB values as the ones specified by the arguments. The RGB values on the returned instance will be the color values of the operating system color. You must dispose the color when it is no longer required.
Parameters:
device - the device on which to allocate the color
red - the amount of red in the color
green - the amount of green in the color
blue - the amount of blue in the color
alpha - the amount of alpha in the color. Currently, SWT only honors extreme values for alpha i.e. 0 (transparent) or 255 (opaque).
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_INVALID_ARGUMENT - if the red, green, blue or alpha argument is not between 0 and 255
since. :
3.104
See Also:
Resource.dispose()

Color
public Color(Device device,
             RGB rgb)
Constructs a new instance of this class given a device and an RGB describing the desired red, green and blue values. On limited color devices, the color instance created by this call may not have the same RGB values as the ones specified by the argument. The RGB values on the returned instance will be the color values of the operating system color. You must dispose the color when it is no longer required.
Parameters:
device - the device on which to allocate the color
rgb - the RGB values of the desired color
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if the rgb argument is null
ERROR_INVALID_ARGUMENT - if the red, green or blue components of the argument are not between 0 and 255
See Also:
Resource.dispose()

Color
public Color(Device device,
             RGBA rgba)
Constructs a new instance of this class given a device and an RGBA describing the desired red, green, blue & alpha values. On limited color devices, the color instance created by this call may not have the same RGBA values as the ones specified by the argument. The RGBA values on the returned instance will be the color values of the operating system color + alpha. You must dispose the color when it is no longer required.
Parameters:
device - the device on which to allocate the color
rgba - the RGBA values of the desired color. Currently, SWT only honors extreme values for alpha i.e. 0 (transparent) or 255 (opaque).
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if the rgba argument is null
ERROR_INVALID_ARGUMENT - if the red, green, blue or alpha components of the argument are not between 0 and 255
since. :
3.104
See Also:
Resource.dispose()

Color
public Color(Device device,
             RGB rgb,
             int alpha)
Constructs a new instance of this class given a device, an RGB describing the desired red, green and blue values, alpha specifying the level of transparency. On limited color devices, the color instance created by this call may not have the same RGB values as the ones specified by the argument. The RGB values on the returned instance will be the color values of the operating system color. You must dispose the color when it is no longer required.
Parameters:
device - the device on which to allocate the color
rgb - the RGB values of the desired color
alpha - the alpha value of the desired color. Currently, SWT only honors extreme values for alpha i.e. 0 (transparent) or 255 (opaque).
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if the rgb argument is null
ERROR_INVALID_ARGUMENT - if the red, green, blue or alpha components of the argument are not between 0 and 255
since. :
3.104
See Also:
Resource.dispose()

Method Detail

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

getAlpha
public int getAlpha()
Returns the amount of alpha in the color, from 0 (transparent) to 255 (opaque).
Returns:
the alpha component of the color
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.104

getBlue
public int getBlue()
Returns the amount of blue in the color, from 0 to 255.
Returns:
the blue component of the color
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getGreen
public int getGreen()
Returns the amount of green in the color, from 0 to 255.
Returns:
the green component of the color
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getRed
public int getRed()
Returns the amount of red in the color, from 0 to 255.
Returns:
the red component of the color
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getRGB
public RGB getRGB()
Returns an RGB representing the receiver.
Returns:
the RGB for the color
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getRGBA
public RGBA getRGBA()
Returns an RGBA representing the receiver.
Returns:
the RGBA for the color
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.104

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
See Also:
equals(java.lang.Object)

isDisposed
public boolean isDisposed()
Returns true if the color has been disposed, and false otherwise. This method gets the dispose state for the color. When a color has been disposed, it is an error to invoke any other method (except Resource.dispose()) using the color.
Specified by:
isDisposed in class Resource
Returns:
true when the color is disposed and false otherwise

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the receiver

win32_new
public static Color win32_new(Device device,
                              int handle)
Invokes platform specific functionality to allocate a new color. IMPORTANT: This method is not part of the public API for Color. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Parameters:
device - the device on which to allocate the color
handle - the handle for the color
Returns:
a new color object containing the specified device and handle

win32_new
public static Color win32_new(Device device,
                              int handle,
                              int alpha)
Invokes platform specific functionality to allocate a new color. IMPORTANT: This method is not part of the public API for Color. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Parameters:
device - the device on which to allocate the color
handle - the handle for the color
alpha - the int for the alpha content in the color
Returns:
a new color object containing the specified device and handle


org.eclipse.swt.widgets
Class ColorDialog
java.lang.Object
org.eclipse.swt.widgets.Dialog
org.eclipse.swt.widgets.ColorDialog


public class ColorDialog extends Dialog
Instances of this class allow the user to select a color from a predefined set of available colors.
Styles:
(none)
Events:
(none)
IMPORTANT: This class is not intended to be subclassed.
See Also:
SWT Example: ControlExample, Dialog tab, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
ColorDialog(Shell parent)
Constructs a new instance of this class given only its parent.
ColorDialog(Shell parent,            int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
RGB getRGB()
Returns the currently selected color in the receiver.
RGB[]   getRGBs()
Returns an array of RGBs which are the list of custom colors selected by the user in the receiver, or null if no custom colors were selected.
RGB open()
Makes the receiver visible and brings it to the front of the display.
void    setRGB(RGB rgb)
Sets the receiver's selected color to be the argument.
void    setRGBs(RGB[] rgbs)
Sets the receiver's list of custom colors to be the given array of RGBs, which may be null to let the platform select a default when open() is called.

Methods inherited from class org.eclipse.swt.widgets.Dialog
checkSubclass, getParent, getStyle, getText, setText

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

ColorDialog
public ColorDialog(Shell parent)
Constructs a new instance of this class given only its parent.
Parameters:
parent - a composite control which will be the parent of the new instance
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT, Widget.checkSubclass(), Widget.getStyle()

ColorDialog
public ColorDialog(Shell parent,
                   int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT, Widget.checkSubclass(), Widget.getStyle()

Method Detail

getRGB
public RGB getRGB()
Returns the currently selected color in the receiver.
Returns:
the RGB value for the selected color, may be null
See Also:
PaletteData.getRGBs()

getRGBs
public RGB[] getRGBs()
Returns an array of RGBs which are the list of custom colors selected by the user in the receiver, or null if no custom colors were selected.
Returns:
the array of RGBs, which may be null
since. :
3.8

open
public RGB open()
Makes the receiver visible and brings it to the front of the display.
Returns:
the selected color, or null if the dialog was cancelled, no color was selected, or an error occurred
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setRGB
public void setRGB(RGB rgb)
Sets the receiver's selected color to be the argument.
Parameters:
rgb - the new RGB value for the selected color, may be null to let the platform select a default when open() is called
See Also:
PaletteData.getRGBs()

setRGBs
public void setRGBs(RGB[] rgbs)
Sets the receiver's list of custom colors to be the given array of RGBs, which may be null to let the platform select a default when open() is called.
Parameters:
rgbs - the array of RGBs, which may be null
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if an RGB in the rgbs array is null
since. :
3.8


org.eclipse.swt.widgets
Class Combo
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.Composite
org.eclipse.swt.widgets.Combo
All Implemented Interfaces:
Drawable


public class Combo extends Composite
Instances of this class are controls that allow the user to choose an item from a list of items, or optionally enter a new value by typing it into an editable text field. Often, Combos are used in the same place where a single selection List widget could be used but space is limited. A Combo takes less space than a List widget and shows similar information. Note: since.  Combos can contain both a list and an editable text field, it is possible to confuse methods which access one versus the other (compare for example, clearSelection() and deselectAll()). The API documentation is careful to indicate either "the receiver's list" or the "the receiver's text field" to distinguish between the two cases.
Note that although this class is a subclass of Composite, it does not make sense to add children to it, or set a layout on it.
Styles:
DROP_DOWN, READ_ONLY, SIMPLE
Events:
DefaultSelection, Modify, Selection, Verify, OrientationChange
Note: Only one of the styles DROP_DOWN and SIMPLE may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
List, Combo snippets, SWT Example: ControlExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
static int  LIMIT
the operating system limit for the number of characters that the text field in an instance of this class can hold

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Combo(Composite parent,      int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    add(java.lang.String string)
Adds the argument to the end of the receiver's list.
void    add(java.lang.String string,    int  index)
Adds the argument to the receiver's list at the given zero-relative index.
void    addModifyListener(ModifyListener li stener)
Adds the listener to the collection of listeners who will be notified when the receiver's text is modified, by sending it one of the messages defined in the ModifyListener interface.
void    addSegmentListener(SegmentListener  listener)
Adds a segment listener.
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's selection, by sending it one of the messages defined in the SelectionListener interface.
void    addVerifyListener(VerifyListener li stener)
Adds the listener to the collection of listeners who will be notified when the receiver's text is verified, by sending it one of the messages defined in the VerifyListener interface.
protected void  checkSubclass()
Checks that this class can be subclassed.
void    clearSelection()
Sets the selection in the receiver's text field to an empty selection starting just before the first character.
void    copy()
Copies the selected text.
void    cut()
Cuts the selected text.
void    deselect(int index)
Deselects the item at the given zero-relative index in the receiver's list.
void    deselectAll()
Deselects all selected items in the receiver's list.
Point   getCaretLocation()
Returns a point describing the location of the caret relative to the receiver.
int getCaretPosition()
Returns the character position of the caret.
java.lang.String    getItem(int index)
Returns the item at the given, zero-relative index in the receiver's list.
int getItemCount()
Returns the number of items contained in the receiver's list.
int getItemHeight()
Returns the height of the area which would be used to display one of the items in the receiver's list.
java.lang.String[]  getItems()
Returns a (possibly empty) array of Strings which are the items in the receiver's list.
boolean getListVisible()
Returns true if the receiver's list is visible, and false otherwise.
int getOrientation()
Returns the orientation of the receiver.
Point   getSelection()
Returns a Point whose x coordinate is the character position representing the start of the selection in the receiver's text field, and whose y coordinate is the character position representing the end of the selection.
int getSelectionIndex()
Returns the zero-relative index of the item which is currently selected in the receiver's list, or -1 if no item is selected.
java.lang.String    getText()
Returns a string containing a copy of the contents of the receiver's text field, or an empty string if there are no contents.
int getTextHeight()
Returns the height of the receivers's text field.
int getTextLimit()
Returns the maximum number of characters that the receiver's text field is capable of holding.
int getVisibleItemCount()
Gets the number of items that are visible in the drop down portion of the receiver's list.
int indexOf(java.lang.String string)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item.
int indexOf(java.lang.String string,      int start)
Searches the receiver's list starting at the given, zero-relative index until an item is found that is equal to the argument, and returns the index of that item.
void    paste()
Pastes text from clipboard.
void    remove(int index)
Removes the item from the receiver's list at the given zero-relative index.
void    remove(int start,       int end)
Removes the items from the receiver's list which are between the given zero-relative start and end indices (inclusive).
void    remove(java.lang.String string)
Searches the receiver's list starting at the first item until an item is found that is equal to the argument, and removes that item from the list.
void    removeAll()
Removes all of the items from the receiver's list and clear the contents of receiver's text field.
void    removeModifyListener(ModifyListener  listener)
Removes the listener from the collection of listeners who will be notified when the receiver's text is modified.
void    removeSegmentListener(SegmentListen er listener)
Removes the listener from the collection of listeners who will be notified when the receiver's text is modified.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's selection.
void    removeVerifyListener(VerifyListener  listener)
Removes the listener from the collection of listeners who will be notified when the control is verified.
void    select(int index)
Selects the item at the given zero-relative index in the receiver's list.
void    setFont(Font font)
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
void    setItem(int index,        java.lang .String string)
Sets the text of the item in the receiver's list at the given zero-relative index to the string argument.
void    setItems(java.lang.String... items)
Sets the receiver's list to be the given array of items.
void    setListVisible(boolean visible)
Marks the receiver's list as visible if the argument is true, and marks it invisible otherwise.
void    setOrientation(int orientation)
Sets the orientation of the receiver, which must be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
void    setSelection(Point selection)
Sets the selection in the receiver's text field to the range specified by the argument whose x coordinate is the start of the selection and whose y coordinate is the end of the selection.
void    setText(java.lang.String string)
Sets the contents of the receiver's text field to the given string.
void    setTextLimit(int limit)
Sets the maximum number of characters that the receiver's text field is capable of holding to be the argument.
void    setVisibleItemCount(int count)
Sets the number of items that are visible in the drop down portion of the receiver's list.

Methods inherited from class org.eclipse.swt.widgets.Composite
changed, drawBackground, getBackgroundMode, getChildren, getLayout, getLayoutDeferred, getTabList, isLayoutDeferred, layout, layout, layout, layout, layout, setBackgroundMode, setFocus, setLayout, setLayoutDeferred, setTabList

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setForeground, setLayoutData, setLocation, setLocation, setMenu, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Field Detail

LIMIT
public static final int LIMIT
the operating system limit for the number of characters that the text field in an instance of this class can hold

Constructor Detail

Combo
public Combo(Composite parent,
             int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.DROP_DOWN, SWT.READ_ONLY, SWT.SIMPLE, Widget.checkSubclass(), Widget.getStyle()

Method Detail

add
public void add(java.lang.String string)
Adds the argument to the end of the receiver's list. Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Parameters:
string - the new item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
add(String,int)

add
public void add(java.lang.String string,
                int index)
Adds the argument to the receiver's list at the given zero-relative index. Note: To add an item at the end of the list, use the result of calling getItemCount() as the index or use add(String).
Also note, if control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Parameters:
string - the new item
index - the index for the item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
add(String)

addModifyListener
public void addModifyListener(ModifyListener listener)
Adds the listener to the collection of listeners who will be notified when the receiver's text is modified, by sending it one of the messages defined in the ModifyListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ModifyListener, removeModifyListener(org.eclipse.swt.events.ModifyListener)

addSegmentListener
public void addSegmentListener(SegmentListener listener)
Adds a segment listener. A SegmentEvent is sent whenever text content is being modified or a segment listener is added or removed. You can customize the appearance of text by indicating certain characters to be inserted at certain text offsets. This may be used for bidi purposes, e.g. when adjacent segments of right-to-left text should not be reordered relative to each other. E.g., multiple Java string literals in a right-to-left language should generally remain in logical order to each other, that is, the way they are stored.
Warning: This API is currently only implemented on Windows. SegmentEvents won't be sent on GTK and Cocoa.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.103
See Also:
SegmentEvent, SegmentListener, removeSegmentListener(org.eclipse.swt.events.SegmentListener)

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's selection, by sending it one of the messages defined in the SelectionListener interface. widgetSelected is called when the user changes the combo's list selection. widgetDefaultSelected is typically called when ENTER is pressed the combo's text area.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

addVerifyListener
public void addVerifyListener(VerifyListener listener)
Adds the listener to the collection of listeners who will be notified when the receiver's text is verified, by sending it one of the messages defined in the VerifyListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1
See Also:
VerifyListener, removeVerifyListener(org.eclipse.swt.events.VerifyListener)

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Composite

clearSelection
public void clearSelection()
Sets the selection in the receiver's text field to an empty selection starting just before the first character. If the text field is editable, this has the effect of placing the i-beam at the start of the text. Note: To clear the selected items in the receiver's list, use deselectAll().
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
deselectAll()

copy
public void copy()
Copies the selected text. The current selection is copied to the clipboard.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.1

cut
public void cut()
Cuts the selected text. The current selection is first copied to the clipboard and then deleted from the widget.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.1

deselect
public void deselect(int index)
Deselects the item at the given zero-relative index in the receiver's list. If the item at the index was already deselected, it remains deselected. Indices that are out of range are ignored.
Parameters:
index - the index of the item to deselect
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

deselectAll
public void deselectAll()
Deselects all selected items in the receiver's list. Note: To clear the selection in the receiver's text field, use clearSelection().
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
clearSelection()

getCaretLocation
public Point getCaretLocation()
Returns a point describing the location of the caret relative to the receiver.
Returns:
a point, the location of the caret
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.8

getCaretPosition
public int getCaretPosition()
Returns the character position of the caret. Indexing is zero based.
Returns:
the position of the caret
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.8

getItem
public java.lang.String getItem(int index)
Returns the item at the given, zero-relative index in the receiver's list. Throws an exception if the index is out of range.
Parameters:
index - the index of the item to return
Returns:
the item at the given index
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItemCount
public int getItemCount()
Returns the number of items contained in the receiver's list.
Returns:
the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItemHeight
public int getItemHeight()
Returns the height of the area which would be used to display one of the items in the receiver's list.
Returns:
the height of one item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItems
public java.lang.String[] getItems()
Returns a (possibly empty) array of Strings which are the items in the receiver's list. Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the items in the receiver's list
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getListVisible
public boolean getListVisible()
Returns true if the receiver's list is visible, and false otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, this method may still indicate that it is considered visible even though it may not actually be showing.
Returns:
the receiver's list's visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

setListVisible
public void setListVisible(boolean visible)
Marks the receiver's list as visible if the argument is true, and marks it invisible otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, marking it visible may not actually cause it to be displayed.
Parameters:
visible - the new visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

getOrientation
public int getOrientation()
Returns the orientation of the receiver.
Overrides:
getOrientation in class Control
Returns:
the orientation style
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.1.2

getSelection
public Point getSelection()
Returns a Point whose x coordinate is the character position representing the start of the selection in the receiver's text field, and whose y coordinate is the character position representing the end of the selection. An "empty" selection is indicated by the x and y coordinates having the same value. Indexing is zero based. The range of a selection is from 0..N where N is the number of characters in the widget.
Returns:
a point representing the selection start and end
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelectionIndex
public int getSelectionIndex()
Returns the zero-relative index of the item which is currently selected in the receiver's list, or -1 if no item is selected.
Returns:
the index of the selected item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getText
public java.lang.String getText()
Returns a string containing a copy of the contents of the receiver's text field, or an empty string if there are no contents.
Returns:
the receiver's text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getTextHeight
public int getTextHeight()
Returns the height of the receivers's text field.
Returns:
the text height
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getTextLimit
public int getTextLimit()
Returns the maximum number of characters that the receiver's text field is capable of holding. If this has not been changed by setTextLimit(), it will be the constant Combo.LIMIT.
Returns:
the text limit
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
LIMIT

getVisibleItemCount
public int getVisibleItemCount()
Gets the number of items that are visible in the drop down portion of the receiver's list. Note: This operation is a hint and is not supported on platforms that do not have this concept.
Returns:
the number of items that are visible
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

indexOf
public int indexOf(java.lang.String string)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item. If no item is found, returns -1.
Parameters:
string - the search item
Returns:
the index of the item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

indexOf
public int indexOf(java.lang.String string,
                   int start)
Searches the receiver's list starting at the given, zero-relative index until an item is found that is equal to the argument, and returns the index of that item. If no item is found or the starting index is out of range, returns -1.
Parameters:
string - the search item
start - the zero-relative index at which to begin the search
Returns:
the index of the item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

paste
public void paste()
Pastes text from clipboard. The selected text is deleted from the widget and new text inserted from the clipboard.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.1

remove
public void remove(int index)
Removes the item from the receiver's list at the given zero-relative index.
Parameters:
index - the index for the item
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

remove
public void remove(int start,
                   int end)
Removes the items from the receiver's list which are between the given zero-relative start and end indices (inclusive).
Parameters:
start - the start of the range
end - the end of the range
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if either the start or end are not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

remove
public void remove(java.lang.String string)
Searches the receiver's list starting at the first item until an item is found that is equal to the argument, and removes that item from the list.
Parameters:
string - the item to remove
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
ERROR_INVALID_ARGUMENT - if the string is not found in the list
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeAll
public void removeAll()
Removes all of the items from the receiver's list and clear the contents of receiver's text field.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeModifyListener
public void removeModifyListener(ModifyListener listener)
Removes the listener from the collection of listeners who will be notified when the receiver's text is modified.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ModifyListener, addModifyListener(org.eclipse.swt.events.ModifyListener)

removeSegmentListener
public void removeSegmentListener(SegmentListener listener)
Removes the listener from the collection of listeners who will be notified when the receiver's text is modified.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.103
See Also:
SegmentEvent, SegmentListener, addSegmentListener(org.eclipse.swt.events.SegmentListener)

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's selection.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

removeVerifyListener
public void removeVerifyListener(VerifyListener listener)
Removes the listener from the collection of listeners who will be notified when the control is verified.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1
See Also:
VerifyListener, addVerifyListener(org.eclipse.swt.events.VerifyListener)

select
public void select(int index)
Selects the item at the given zero-relative index in the receiver's list. If the item at the index was already selected, it remains selected. Indices that are out of range are ignored.
Parameters:
index - the index of the item to select
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setFont
public void setFont(Font font)
Description copied from class: Control
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Overrides:
setFont in class Control
Parameters:
font - the new font (or null)

setItem
public void setItem(int index,
                    java.lang.String string)
Sets the text of the item in the receiver's list at the given zero-relative index to the string argument.
Parameters:
index - the index for the item
string - the new text for the item
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setItems
public void setItems(java.lang.String... items)
Sets the receiver's list to be the given array of items.
Parameters:
items - the array of items
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the items array is null
ERROR_INVALID_ARGUMENT - if an item in the items array is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setOrientation
public void setOrientation(int orientation)
Sets the orientation of the receiver, which must be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
Overrides:
setOrientation in class Control
Parameters:
orientation - new orientation style
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.1.2

setSelection
public void setSelection(Point selection)
Sets the selection in the receiver's text field to the range specified by the argument whose x coordinate is the start of the selection and whose y coordinate is the end of the selection.
Parameters:
selection - a point representing the new selection start and end
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setText
public void setText(java.lang.String string)
Sets the contents of the receiver's text field to the given string. This call is ignored when the receiver is read only and the given string is not in the receiver's list.
Note: The text field in a Combo is typically only capable of displaying a single line of text. Thus, setting the text to a string containing line breaks or other special characters will probably cause it to display incorrectly.
Also note, if control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Parameters:
string - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setTextLimit
public void setTextLimit(int limit)
Sets the maximum number of characters that the receiver's text field is capable of holding to be the argument. To reset this value to the default, use setTextLimit(Combo.LIMIT). Specifying a limit value larger than Combo.LIMIT sets the receiver's limit to Combo.LIMIT.
Parameters:
limit - new text limit
Throws:
java.lang.IllegalArgumentException -
ERROR_CANNOT_BE_ZERO - if the limit is zero
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
LIMIT

setVisibleItemCount
public void setVisibleItemCount(int count)
Sets the number of items that are visible in the drop down portion of the receiver's list. Note: This operation is a hint and is not supported on platforms that do not have this concept.
Parameters:
count - the new number of items to be visible
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0


org.eclipse.swt.internal
Class Compatibility
java.lang.Object
org.eclipse.swt.internal.Compatibility


public final class Compatibility extends java.lang.Object
This class is a placeholder for utility methods commonly used on J2SE platforms but not supported on some J2ME profiles. It is part of our effort to provide support for both J2SE and J2ME platforms.
IMPORTANT: some of the methods have been modified from their J2SE parents. Refer to the description of each method for specific changes.
Exceptions thrown may differ since.  J2ME's set of exceptions is a subset of J2SE's one.
The range of the mathematic functions is subject to change.

Constructor Summary
Constructors

Constructor and Description
Compatibility()

Method Summary
All Methods Static Methods Concrete Methods

Modifier and Type   Method and Description
static int  ceil(int p,     int q)
Answers the most negative (i.e. closest to negative infinity) integer value which is greater than or equal to the number obtained by dividing the first argument p by the second argument q.
static void exec(java.lang.String[] prog,     j ava.lang.String[] envp,     java.lan g.String workingDir)
Execute prog[0] in a separate platform process if the underlying platform supports this.
static boolean  fileExists(java.lang.String parent,            java.lang.String child)
Answers whether the indicated file exists or not.
static java.lang.String getMessage(java.lang.String key)
Returns the NLS'ed message for the given argument.
static java.lang.String getMessage(java.lang.String key,         java.lang.Object[] args)
static int  pow2(int n)
Returns 2 raised to the power of the argument.
static int  round(int p,      int q)
Answers the result of rounding to the closest integer the number obtained by dividing the first argument p by the second argument q.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

Compatibility
public Compatibility()

Method Detail

ceil
public static int ceil(int p,
                       int q)
Answers the most negative (i.e. closest to negative infinity) integer value which is greater than or equal to the number obtained by dividing the first argument p by the second argument q.
Parameters:
p - numerator
q - denominator (must be different from zero)
Returns:
the ceiling of the rational number p / q.

fileExists
public static boolean fileExists(java.lang.String parent,
                                 java.lang.String child)
Answers whether the indicated file exists or not.
Parameters:
parent - the file's parent directory
child - the file's name
Returns:
true if the file exists

round
public static int round(int p,
                        int q)
Answers the result of rounding to the closest integer the number obtained by dividing the first argument p by the second argument q. IMPORTANT: the j2me version has an additional restriction on the arguments. p must be within the range 0 - 32767 (inclusive). q must be within the range 1 - 32767 (inclusive).
Parameters:
p - numerator
q - denominator (must be different from zero)
Returns:
the closest integer to the rational number p / q

pow2
public static int pow2(int n)
Returns 2 raised to the power of the argument.
Parameters:
n - an int value between 0 and 30 (inclusive)
Returns:
2 raised to the power of the argument
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the argument is not between 0 and 30 (inclusive)

exec
public static void exec(java.lang.String[] prog,
                        java.lang.String[] envp,
                        java.lang.String workingDir)
                 throws java.io.IOException
Execute prog[0] in a separate platform process if the underlying platform supports this. The new process inherits the environment of the caller.
Parameters:
prog - array containing the program to execute and its arguments
envp - array of strings, each element of which has environment variable settings in the format name=value
workingDir - the working directory of the new process, or null if the new process should inherit the working directory of the caller
Throws:
java.io.IOException - if the program cannot be executed
java.lang.SecurityException - if the current SecurityManager disallows program execution
since. :
3.6

getMessage
public static java.lang.String getMessage(java.lang.String key)
Returns the NLS'ed message for the given argument. This is only being called from SWT.
Parameters:
key - the key to look up
Returns:
the message for the given key
See Also:
SWT.getMessage(String)

getMessage
public static java.lang.String getMessage(java.lang.String key,
                                          java.lang.Object[] args)


org.eclipse.swt.widgets
Class Composite
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.Composite
All Implemented Interfaces:
Drawable
Direct Known Subclasses:
Canvas, Combo, CoolBar, DateTime, ExpandBar, Group, Spinner, TabFolder, Table, ToolBar, Tree


public class Composite extends Scrollable
Instances of this class are controls which are capable of containing other controls.
Styles:
NO_BACKGROUND, NO_FOCUS, NO_MERGE_PAINTS, NO_REDRAW_RESIZE, NO_RADIO_GROUP, EMBEDDED, DOUBLE_BUFFERED
Events:
(none)
Note: The NO_BACKGROUND, NO_FOCUS, NO_MERGE_PAINTS, and NO_REDRAW_RESIZE styles are intended for use with Canvas. They can be used with Composite if you are drawing your own, but their behavior is undefined if they are used with subclasses of Composite other than Canvas.
Note: The CENTER style, although undefined for composites, has the same value as EMBEDDED which is used to embed widgets from other widget toolkits into SWT. On some operating systems (GTK), this may cause the children of this composite to be obscured.
This class may be subclassed by custom control implementors who are building controls that are constructed from aggregates of other controls.
See Also:
Canvas, Composite snippets, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Composite(Composite parent,          int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods Deprecated Methods

Modifier and Type   Method and Description
void    changed(Control[] changed)
Deprecated.< /span>
use layout(Control[], int) instead
protected void  checkSubclass()
Checks that this class can be subclassed.
void    drawBackground(GC gc,  int x,               int y,        int width,               int  height,               int offsetX,              int offsetY)
Fills the interior of the rectangle specified by the arguments, with the receiver's background.
int getBackgroundMode()
Returns the receiver's background drawing mode.
Control[]   getChildren()
Returns a (possibly empty) array containing the receiver's children.
Layout  getLayout()
Returns layout which is associated with the receiver, or null if one has not been set.
boolean getLayoutDeferred()
Returns true if the receiver has deferred the performing of layout, and false otherwise.
Control[]   getTabList()
Gets the (possibly empty) tabbing order for the control.
boolean isLayoutDeferred()
Returns true if the receiver or any ancestor up to and including the receiver's nearest ancestor shell has deferred the performing of layouts.
void    layout()
If the receiver has a layout, asks the layout to lay out (that is, set the size and location of) the receiver's children.
void    layout(boolean changed)
If the receiver has a layout, asks the layout to lay out (that is, set the size and location of) the receiver's children.
void    layout(boolean changed,       boole an all)
If the receiver has a layout, asks the layout to lay out (that is, set the size and location of) the receiver's children.
void    layout(Control[] changed)
Forces a lay out (that is, sets the size and location) of all widgets that are in the parent hierarchy of the changed control up to and including the receiver.
void    layout(Control[] changed,       int  flags)
Forces a lay out (that is, sets the size and location) of all widgets that are in the parent hierarchy of the changed control up to and including the receiver.
void    setBackgroundMode(int mode)
Sets the background drawing mode to the argument which should be one of the following constants defined in class SWT: INHERIT_NONE, INHERIT_DEFAULT, INHERIT_FORCE.
boolean setFocus()
Causes the receiver to have the keyboard focus, such that all keyboard events will be delivered to it.
void    setLayout(Layout layout)
Sets the layout which is associated with the receiver to be the argument which may be null.
void    setLayoutDeferred(boolean defer)
If the argument is true, causes subsequent layout operations in the receiver or any of its children to be ignored.
void    setTabList(Control[] tabList)
Sets the tabbing order for the specified controls to match the order that they occur in the argument list.

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setFont, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

Composite
public Composite(Composite parent,
                 int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a widget which will be the parent of the new instance (cannot be null)
style - the style of widget to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
See Also:
SWT.NO_BACKGROUND, SWT.NO_FOCUS, SWT.NO_MERGE_PAINTS, SWT.NO_REDRAW_RESIZE, SWT.NO_RADIO_GROUP, SWT.EMBEDDED, SWT.DOUBLE_BUFFERED, Widget.getStyle()

Method Detail

changed
@Deprecated
public void changed(Control[] changed)
Deprecated. use layout(Control[], int) instead
Clears any data that has been cached by a Layout for all widgets that are in the parent hierarchy of the changed control up to and including the receiver. If an ancestor does not have a layout, it is skipped.
Parameters:
changed - an array of controls that changed state and require a recalculation of size
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the changed array is null any of its controls are null or have been disposed
ERROR_INVALID_PARENT - if any control in changed is not in the widget tree of the receiver
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Widget

drawBackground
public void drawBackground(GC gc,
                           int x,
                           int y,
                           int width,
                           int height,
                           int offsetX,
                           int offsetY)
Fills the interior of the rectangle specified by the arguments, with the receiver's background. The offsetX and offsetY are used to map from the gc origin to the origin of the parent image background. This is useful to ensure proper alignment of the image background.
Parameters:
gc - the gc where the rectangle is to be filled
x - the x coordinate of the rectangle to be filled
y - the y coordinate of the rectangle to be filled
width - the width of the rectangle to be filled
height - the height of the rectangle to be filled
offsetX - the image background x offset
offsetY - the image background y offset
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the gc is null
ERROR_INVALID_ARGUMENT - if the gc has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.6

getBackgroundMode
public int getBackgroundMode()
Returns the receiver's background drawing mode. This will be one of the following constants defined in class SWT: INHERIT_NONE, INHERIT_DEFAULT, INHERIT_FORCE.
Returns:
the background mode
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2
See Also:
SWT

getChildren
public Control[] getChildren()
Returns a (possibly empty) array containing the receiver's children. Children are returned in the order that they are drawn. The topmost control appears at the beginning of the array. Subsequent controls draw beneath this control and appear later in the array. Note: This is not the actual structure used by the receiver to maintain its list of children, so modifying the array will not affect the receiver.
Returns:
an array of children
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
Control.moveAbove(org.eclipse.swt.widgets.Control), Control.moveBelow(org.eclipse.swt.widgets.Control)

getLayout
public Layout getLayout()
Returns layout which is associated with the receiver, or null if one has not been set.
Returns:
the receiver's layout or null
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getTabList
public Control[] getTabList()
Gets the (possibly empty) tabbing order for the control.
Returns:
tabList the ordered list of controls representing the tab order
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setTabList(org.eclipse.swt.widgets.Control[])

getLayoutDeferred
public boolean getLayoutDeferred()
Returns true if the receiver has deferred the performing of layout, and false otherwise.
Returns:
the receiver's deferred layout state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1
See Also:
setLayoutDeferred(boolean), isLayoutDeferred()

isLayoutDeferred
public boolean isLayoutDeferred()
Returns true if the receiver or any ancestor up to and including the receiver's nearest ancestor shell has deferred the performing of layouts. Otherwise, false is returned.
Returns:
the receiver's deferred layout state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1
See Also:
setLayoutDeferred(boolean), getLayoutDeferred()

layout
public void layout()
If the receiver has a layout, asks the layout to lay out (that is, set the size and location of) the receiver's children. If the receiver does not have a layout, do nothing. Use of this method is discouraged since.  it is the least-efficient way to trigger a layout. The use of layout(true) discards all cached layout information, even from controls which have not changed. It is much more efficient to invoke Control.requestLayout() on every control which has changed in the layout than it is to invoke this method on the layout itself.
This is equivalent to calling layout(true).
Note: Layout is different from painting. If a child is moved or resized such that an area in the parent is exposed, then the parent will paint. If no child is affected, the parent will not paint.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

layout
public void layout(boolean changed)
If the receiver has a layout, asks the layout to lay out (that is, set the size and location of) the receiver's children. If the argument is true the layout must not rely on any information it has cached about the immediate children. If it is false the layout may (potentially) optimize the work it is doing by assuming that none of the receiver's children has changed state since.  the last layout. If the receiver does not have a layout, do nothing. It is normally more efficient to invoke Control.requestLayout() on every control which has changed in the layout than it is to invoke this method on the layout itself. Clients are encouraged to use Control.requestLayout() where possible instead of calling this method.
If a child is resized as a result of a call to layout, the resize event will invoke the layout of the child. The layout will cascade down through all child widgets in the receiver's widget tree until a child is encountered that does not resize. Note that a layout due to a resize will not flush any cached information (same as layout(false)).
Note: Layout is different from painting. If a child is moved or resized such that an area in the parent is exposed, then the parent will paint. If no child is affected, the parent will not paint.
Parameters:
changed - true if the layout must flush its caches, and false otherwise
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

layout
public void layout(boolean changed,
                   boolean all)
If the receiver has a layout, asks the layout to lay out (that is, set the size and location of) the receiver's children. If the changed argument is true the layout must not rely on any information it has cached about its children. If it is false the layout may (potentially) optimize the work it is doing by assuming that none of the receiver's children has changed state since.  the last layout. If the all argument is true the layout will cascade down through all child widgets in the receiver's widget tree, regardless of whether the child has changed size. The changed argument is applied to all layouts. If the all argument is false, the layout will not cascade down through all child widgets in the receiver's widget tree. However, if a child is resized as a result of a call to layout, the resize event will invoke the layout of the child. Note that a layout due to a resize will not flush any cached information (same as layout(false)). It is normally more efficient to invoke Control.requestLayout() on every control which has changed in the layout than it is to invoke this method on the layout itself. Clients are encouraged to use Control.requestLayout() where possible instead of calling this method.
Note: Layout is different from painting. If a child is moved or resized such that an area in the parent is exposed, then the parent will paint. If no child is affected, the parent will not paint.
Parameters:
changed - true if the layout must flush its caches, and false otherwise
all - true if all children in the receiver's widget tree should be laid out, and false otherwise
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

layout
public void layout(Control[] changed)
Forces a lay out (that is, sets the size and location) of all widgets that are in the parent hierarchy of the changed control up to and including the receiver. The layouts in the hierarchy must not rely on any information cached about the changed control or any of its ancestors. The layout may (potentially) optimize the work it is doing by assuming that none of the peers of the changed control have changed state since.  the last layout. If an ancestor does not have a layout, skip it. It is normally more efficient to invoke Control.requestLayout() on every control which has changed in the layout than it is to invoke this method on the layout itself. Clients are encouraged to use Control.requestLayout() where possible instead of calling this method.
Note: Layout is different from painting. If a child is moved or resized such that an area in the parent is exposed, then the parent will paint. If no child is affected, the parent will not paint.
Parameters:
changed - a control that has had a state change which requires a recalculation of its size
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the changed array is null any of its controls are null or have been disposed
ERROR_INVALID_PARENT - if any control in changed is not in the widget tree of the receiver
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

layout
public void layout(Control[] changed,
                   int flags)
Forces a lay out (that is, sets the size and location) of all widgets that are in the parent hierarchy of the changed control up to and including the receiver. The parameter flags may be a combination of:
SWT.ALL
all children in the receiver's widget tree should be laid out
SWT.CHANGED
the layout must flush its caches
SWT.DEFER
layout will be deferred
When the changed array is specified, the flags SWT.ALL and SWT.CHANGED have no effect. In this case, the layouts in the hierarchy must not rely on any information cached about the changed control or any of its ancestors. The layout may (potentially) optimize the work it is doing by assuming that none of the peers of the changed control have changed state since.  the last layout. If an ancestor does not have a layout, skip it.
When the changed array is not specified, the flag SWT.ALL indicates that the whole widget tree should be laid out. And the flag SWT.CHANGED indicates that the layouts should flush any cached information for all controls that are laid out.
The SWT.DEFER flag always causes the layout to be deferred by calling Composite.setLayoutDeferred(true) and scheduling a call to Composite.setLayoutDeferred(false), which will happen when appropriate (usually before the next event is handled). When this flag is set, the application should not call Composite.setLayoutDeferred(boolean).
Note: Layout is different from painting. If a child is moved or resized such that an area in the parent is exposed, then the parent will paint. If no child is affected, the parent will not paint.
Parameters:
changed - a control that has had a state change which requires a recalculation of its size
flags - the flags specifying how the layout should happen
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if any of the controls in changed is null or has been disposed
ERROR_INVALID_PARENT - if any control in changed is not in the widget tree of the receiver
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.6

setBackgroundMode
public void setBackgroundMode(int mode)
Sets the background drawing mode to the argument which should be one of the following constants defined in class SWT: INHERIT_NONE, INHERIT_DEFAULT, INHERIT_FORCE.
Parameters:
mode - the new background mode
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2
See Also:
SWT

setFocus
public boolean setFocus()
Description copied from class: Control
Causes the receiver to have the keyboard focus, such that all keyboard events will be delivered to it. Focus reassignment will respect applicable platform constraints.
Overrides:
setFocus in class Control
Returns:
true if the control got focus, and false if it was unable to.
See Also:
Control.forceFocus()

setLayout
public void setLayout(Layout layout)
Sets the layout which is associated with the receiver to be the argument which may be null.
Parameters:
layout - the receiver's new layout or null
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setLayoutDeferred
public void setLayoutDeferred(boolean defer)
If the argument is true, causes subsequent layout operations in the receiver or any of its children to be ignored. No layout of any kind can occur in the receiver or any of its children until the flag is set to false. Layout operations that occurred while the flag was true are remembered and when the flag is set to false, the layout operations are performed in an optimized manner. Nested calls to this method are stacked.
Parameters:
defer - the new defer state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1
See Also:
layout(boolean), layout(Control[])

setTabList
public void setTabList(Control[] tabList)
Sets the tabbing order for the specified controls to match the order that they occur in the argument list.
Parameters:
tabList - the ordered list of controls representing the tab order or null
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if a widget in the tabList is null or has been disposed
ERROR_INVALID_PARENT - if widget in the tabList is not in the same widget tree
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class Control
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
All Implemented Interfaces:
Drawable
Direct Known Subclasses:
Button, Label, Link, ProgressBar, Sash, Scale, Scrollable, Slider


public abstract class Control extends Widget implements Drawable
Control is the abstract superclass of all windowed user interface classes.
Styles:
BORDER
LEFT_TO_RIGHT, RIGHT_TO_LEFT, FLIP_TEXT_DIRECTION
Events:
DragDetect, FocusIn, FocusOut, Help, KeyDown, KeyUp, MenuDetect, MouseDoubleClick, MouseDown, MouseEnter, MouseExit, MouseHover, MouseUp, MouseMove, MouseWheel, MouseHorizontalWheel, MouseVerticalWheel, Move, Paint, Resize, Traverse
Only one of LEFT_TO_RIGHT or RIGHT_TO_LEFT may be specified.
IMPORTANT: This class is intended to be subclassed only within the SWT implementation.
See Also:
Control snippets, SWT Example: ControlExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
long    handle
the handle to the OS resource (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.

Constructor Summary
Constructors

Constructor and Description
Control(Composite parent,        int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addControlListener(ControlListener  listener)
Adds the listener to the collection of listeners who will be notified when the control is moved or resized, by sending it one of the messages defined in the ControlListener interface.
void    addDragDetectListener(DragDetectLis tener listener)
Adds the listener to the collection of listeners who will be notified when a drag gesture occurs, by sending it one of the messages defined in the DragDetectListener interface.
void    addFocusListener(FocusListener list ener)
Adds the listener to the collection of listeners who will be notified when the control gains or loses focus, by sending it one of the messages defined in the FocusListener interface.
void    addGestureListener(GestureListener  listener)
Adds the listener to the collection of listeners who will be notified when gesture events are generated for the control, by sending it one of the messages defined in the GestureListener interface.
void    addHelpListener(HelpListener listen er)
Adds the listener to the collection of listeners who will be notified when help events are generated for the control, by sending it one of the messages defined in the HelpListener interface.
void    addKeyListener(KeyListener listener )
Adds the listener to the collection of listeners who will be notified when keys are pressed and released on the system keyboard, by sending it one of the messages defined in the KeyListener interface.
void    addMenuDetectListener(MenuDetectLis tener listener)
Adds the listener to the collection of listeners who will be notified when the platform-specific context menu trigger has occurred, by sending it one of the messages defined in the MenuDetectListener interface.
void    addMouseListener(MouseListener list ener)
Adds the listener to the collection of listeners who will be notified when mouse buttons are pressed and released, by sending it one of the messages defined in the MouseListener interface.
void    addMouseMoveListener(MouseMoveListe ner listener)
Adds the listener to the collection of listeners who will be notified when the mouse moves, by sending it one of the messages defined in the MouseMoveListener interface.
void    addMouseTrackListener(MouseTrackLis tener listener)
Adds the listener to the collection of listeners who will be notified when the mouse passes or hovers over controls, by sending it one of the messages defined in the MouseTrackListener interface.
void    addMouseWheelListener(MouseWheelLis tener listener)
Adds the listener to the collection of listeners who will be notified when the mouse wheel is scrolled, by sending it one of the messages defined in the MouseWheelListener interface.
void    addPaintListener(PaintListener list ener)
Adds the listener to the collection of listeners who will be notified when the receiver needs to be painted, by sending it one of the messages defined in the PaintListener interface.
void    addTouchListener(TouchListener list ener)
Adds the listener to the collection of listeners who will be notified when touch events occur, by sending it one of the messages defined in the TouchListener interface.
void    addTraverseListener(TraverseListene r listener)
Adds the listener to the collection of listeners who will be notified when traversal events occur, by sending it one of the messages defined in the TraverseListener interface.
Point   computeSize(int wHint,            i nt hHint)
Returns the preferred size (in points) of the receiver.
Point   computeSize(int wHint,            i nt hHint,            boolean changed )
Returns the preferred size (in points) of the receiver.
boolean dragDetect(Event event)
Detects a drag and drop gesture.
boolean dragDetect(MouseEvent event)
Detects a drag and drop gesture.
boolean forceFocus()
Forces the receiver to have the keyboard focus, causing all keyboard events to be delivered to it.
Accessible  getAccessible()
Returns the accessible object for the receiver.
Color   getBackground()
Returns the receiver's background color.
Image   getBackgroundImage()
Returns the receiver's background image.
int getBorderWidth()
Returns the receiver's border width in points.
Rectangle   getBounds()
Returns a rectangle describing the receiver's size and location in points relative to its parent (or its display if its parent is null), unless the receiver is a shell.
Cursor  getCursor()
Returns the receiver's cursor, or null if it has not been set.
boolean getDragDetect()
Returns true if the receiver is detecting drag gestures, and false otherwise.
boolean getEnabled()
Returns true if the receiver is enabled, and false otherwise.
Font    getFont()
Returns the font that the receiver will use to paint textual information.
Color   getForeground()
Returns the foreground color that the receiver will use to draw.
java.lang.Object    getLayoutData()
Returns layout data which is associated with the receiver.
Point   getLocation()
Returns a point describing the receiver's location relative to its parent in points (or its display if its parent is null), unless the receiver is a shell.
Menu    getMenu()
Returns the receiver's pop up menu if it has one, or null if it does not.
Monitor getMonitor()
Returns the receiver's monitor.
int getOrientation()
Returns the orientation of the receiver, which will be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
Composite   getParent()
Returns the receiver's parent, which must be a Composite or null when the receiver is a shell that was created with null or a display for a parent.
Region  getRegion()
Returns the region that defines the shape of the control, or null if the control has the default shape.
Shell   getShell()
Returns the receiver's shell.
Point   getSize()
Returns a point describing the receiver's size in points.
int getTextDirection()
Returns the text direction of the receiver, which will be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
java.lang.String    getToolTipText()
Returns the receiver's tool tip text, or null if it has not been set.
boolean getTouchEnabled()
Returns true if this control is set to send touch events, or false if it is set to send gesture events instead.
boolean getVisible()
Returns true if the receiver is visible, and false otherwise.
void    internal_dispose_GC(long hDC,               GCData data)
Invokes platform specific functionality to dispose a GC handle.
long    internal_new_GC(GCData data)
Invokes platform specific functionality to allocate a new GC handle.
boolean isEnabled()
Returns true if the receiver is enabled and all ancestors up to and including the receiver's nearest ancestor shell are enabled.
boolean isFocusControl()
Returns true if the receiver has the user-interface focus, and false otherwise.
boolean isReparentable()
Returns true if the underlying operating system supports this reparenting, otherwise false
boolean isVisible()
Returns true if the receiver is visible and all ancestors up to and including the receiver's nearest ancestor shell are visible.
void    moveAbove(Control control)
Moves the receiver above the specified control in the drawing order.
void    moveBelow(Control control)
Moves the receiver below the specified control in the drawing order.
void    pack()
Causes the receiver to be resized to its preferred size.
void    pack(boolean changed)
Causes the receiver to be resized to its preferred size.
boolean print(GC gc)
Prints the receiver and all children.
void    redraw()
Causes the entire bounds of the receiver to be marked as needing to be redrawn.
void    redraw(int x,       int y,       in t width,       int height,       boo lean all)
Causes the rectangular area of the receiver specified by the arguments to be marked as needing to be redrawn.
void    removeControlListener(ControlListen er listener)
Removes the listener from the collection of listeners who will be notified when the control is moved or resized.
void    removeDragDetectListener(DragDetect Listener listener)
Removes the listener from the collection of listeners who will be notified when a drag gesture occurs.
void    removeFocusListener(FocusListener l istener)
Removes the listener from the collection of listeners who will be notified when the control gains or loses focus.
void    removeGestureListener(GestureListen er listener)
Removes the listener from the collection of listeners who will be notified when gesture events are generated for the control.
void    removeHelpListener(HelpListener lis tener)
Removes the listener from the collection of listeners who will be notified when the help events are generated for the control.
void    removeKeyListener(KeyListener liste ner)
Removes the listener from the collection of listeners who will be notified when keys are pressed and released on the system keyboard.
void    removeMenuDetectListener(MenuDetect Listener listener)
Removes the listener from the collection of listeners who will be notified when the platform-specific context menu trigger has occurred.
void    removeMouseListener(MouseListener l istener)
Removes the listener from the collection of listeners who will be notified when mouse buttons are pressed and released.
void    removeMouseMoveListener(MouseMoveLi stener listener)
Removes the listener from the collection of listeners who will be notified when the mouse moves.
void    removeMouseTrackListener(MouseTrack Listener listener)
Removes the listener from the collection of listeners who will be notified when the mouse passes or hovers over controls.
void    removeMouseWheelListener(MouseWheel Listener listener)
Removes the listener from the collection of listeners who will be notified when the mouse wheel is scrolled.
void    removePaintListener(PaintListener l istener)
Removes the listener from the collection of listeners who will be notified when the receiver needs to be painted.
void    removeTouchListener(TouchListener l istener)
Removes the listener from the collection of listeners who will be notified when touch events occur.
void    removeTraverseListener(TraverseList ener listener)
Removes the listener from the collection of listeners who will be notified when traversal events occur.
void    requestLayout()
Requests that this control and all of its ancestors be repositioned by their layouts at the earliest opportunity.
void    setBackground(Color color)
Sets the receiver's background color to the color specified by the argument, or to the default system color for the control if the argument is null.
void    setBackgroundImage(Image image)
Sets the receiver's background image to the image specified by the argument, or to the default system color for the control if the argument is null.
void    setBounds(int x,          int y,        int width,          int heigh t)
Sets the receiver's size and location in points to the rectangular area specified by the arguments.
void    setBounds(Rectangle rect)
Sets the receiver's size and location in points to the rectangular area specified by the argument.
void    setCapture(boolean capture)
If the argument is true, causes the receiver to have all mouse events delivered to it until the method is called with false as the argument.
void    setCursor(Cursor cursor)
Sets the receiver's cursor to the cursor specified by the argument, or to the default cursor for that kind of control if the argument is null.
void    setDragDetect(boolean dragDetect)
Sets the receiver's drag detect state.
void    setEnabled(boolean enabled)
Enables the receiver if the argument is true, and disables it otherwise.
boolean setFocus()
Causes the receiver to have the keyboard focus, such that all keyboard events will be delivered to it.
void    setFont(Font font)
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
void    setForeground(Color color)
Sets the receiver's foreground color to the color specified by the argument, or to the default system color for the control if the argument is null.
void    setLayoutData(java.lang.Object layo utData)
Sets the layout data associated with the receiver to the argument.
void    setLocation(int x,            int y )
Sets the receiver's location to the point specified by the arguments which are relative to the receiver's parent (or its display if its parent is null), unless the receiver is a shell.
void    setLocation(Point location)
Sets the receiver's location to the point specified by the arguments which are relative to the receiver's parent (or its display if its parent is null), unless the receiver is a shell.
void    setMenu(Menu menu)
Sets the receiver's pop up menu to the argument.
void    setOrientation(int orientation)
Sets the orientation of the receiver, which must be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
boolean setParent(Composite parent)
Changes the parent of the widget to be the one provided if the underlying operating system supports this feature.
void    setRedraw(boolean redraw)
If the argument is false, causes subsequent drawing operations in the receiver to be ignored.
void    setRegion(Region region)
Sets the shape of the control to the region specified by the argument.
void    setSize(int width,        int heigh t)
Sets the receiver's size to the point specified by the arguments.
void    setSize(Point size)
Sets the receiver's size to the point specified by the argument.
void    setTextDirection(int textDirection)
Sets the base text direction (a.k.a.
void    setToolTipText(java.lang.String str ing)
Sets the receiver's tool tip text to the argument, which may be null indicating that the default tool tip for the control will be shown.
void    setTouchEnabled(boolean enabled)
Sets whether this control should send touch events (by default controls do not).
void    setVisible(boolean visible)
Marks the receiver as visible if the argument is true, and marks it invisible otherwise.
Point   toControl(int x,          int y)
Returns a point which is the result of converting the argument, which is specified in display relative coordinates, to coordinates relative to the receiver.
Point   toControl(Point point)
Returns a point which is the result of converting the argument, which is specified in display relative coordinates, to coordinates relative to the receiver.
Point   toDisplay(int x,          int y)
Returns a point which is the result of converting the argument, which is specified in coordinates relative to the receiver, to display relative coordinates.
Point   toDisplay(Point point)
Returns a point which is the result of converting the argument, which is specified in coordinates relative to the receiver, to display relative coordinates.
boolean traverse(int traversal)
Based on the argument, perform one of the expected platform traversal action.
boolean traverse(int traversal,         Eve nt event)
Performs a platform traversal action corresponding to a KeyDown event.
boolean traverse(int traversal,         Key Event event)
Performs a platform traversal action corresponding to a KeyDown event.
void    update()
Forces all outstanding paint requests for the widget to be processed before this method returns.

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Field Detail

handle
public long handle
the handle to the OS resource (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

Constructor Detail

Control
public Control(Composite parent,
               int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.BORDER, SWT.LEFT_TO_RIGHT, SWT.RIGHT_TO_LEFT, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addControlListener
public void addControlListener(ControlListener listener)
Adds the listener to the collection of listeners who will be notified when the control is moved or resized, by sending it one of the messages defined in the ControlListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ControlListener, removeControlListener(org.eclipse.swt.events.ControlListener)

addDragDetectListener
public void addDragDetectListener(DragDetectListener listener)
Adds the listener to the collection of listeners who will be notified when a drag gesture occurs, by sending it one of the messages defined in the DragDetectListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3
See Also:
DragDetectListener, removeDragDetectListener(org.eclipse.swt.events.DragDetectListener)

addFocusListener
public void addFocusListener(FocusListener listener)
Adds the listener to the collection of listeners who will be notified when the control gains or loses focus, by sending it one of the messages defined in the FocusListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
FocusListener, removeFocusListener(org.eclipse.swt.events.FocusListener)

addGestureListener
public void addGestureListener(GestureListener listener)
Adds the listener to the collection of listeners who will be notified when gesture events are generated for the control, by sending it one of the messages defined in the GestureListener interface. NOTE: If setTouchEnabled(true) has previously been invoked on the receiver then setTouchEnabled(false) must be invoked on it to specify that gesture events should be sent instead of touch events.
Warning: This API is currently only implemented on Windows and Cocoa. SWT doesn't send Gesture or Touch events on GTK.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.7
See Also:
GestureListener, removeGestureListener(org.eclipse.swt.events.GestureListener), setTouchEnabled(boolean)

addHelpListener
public void addHelpListener(HelpListener listener)
Adds the listener to the collection of listeners who will be notified when help events are generated for the control, by sending it one of the messages defined in the HelpListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
HelpListener, removeHelpListener(org.eclipse.swt.events.HelpListener)

addKeyListener
public void addKeyListener(KeyListener listener)
Adds the listener to the collection of listeners who will be notified when keys are pressed and released on the system keyboard, by sending it one of the messages defined in the KeyListener interface. When a key listener is added to a control, the control will take part in widget traversal. By default, all traversal keys (such as the tab key and so on) are delivered to the control. In order for a control to take part in traversal, it should listen for traversal events. Otherwise, the user can traverse into a control but not out. Note that native controls such as table and tree implement key traversal in the operating system. It is not necessary to add traversal listeners for these controls, unless you want to override the default traversal.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
KeyListener, removeKeyListener(org.eclipse.swt.events.KeyListener)

addMenuDetectListener
public void addMenuDetectListener(MenuDetectListener listener)
Adds the listener to the collection of listeners who will be notified when the platform-specific context menu trigger has occurred, by sending it one of the messages defined in the MenuDetectListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3
See Also:
MenuDetectListener, removeMenuDetectListener(org.eclipse.swt.events.MenuDetectListener)

addMouseListener
public void addMouseListener(MouseListener listener)
Adds the listener to the collection of listeners who will be notified when mouse buttons are pressed and released, by sending it one of the messages defined in the MouseListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
MouseListener, removeMouseListener(org.eclipse.swt.events.MouseListener)

addMouseTrackListener
public void addMouseTrackListener(MouseTrackListener listener)
Adds the listener to the collection of listeners who will be notified when the mouse passes or hovers over controls, by sending it one of the messages defined in the MouseTrackListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
MouseTrackListener, removeMouseTrackListener(org.eclipse.swt.events.MouseTrackListener)

addMouseMoveListener
public void addMouseMoveListener(MouseMoveListener listener)
Adds the listener to the collection of listeners who will be notified when the mouse moves, by sending it one of the messages defined in the MouseMoveListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
MouseMoveListener, removeMouseMoveListener(org.eclipse.swt.events.MouseMoveListener)

addMouseWheelListener
public void addMouseWheelListener(MouseWheelListener listener)
Adds the listener to the collection of listeners who will be notified when the mouse wheel is scrolled, by sending it one of the messages defined in the MouseWheelListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3
See Also:
MouseWheelListener, removeMouseWheelListener(org.eclipse.swt.events.MouseWheelListener)

addPaintListener
public void addPaintListener(PaintListener listener)
Adds the listener to the collection of listeners who will be notified when the receiver needs to be painted, by sending it one of the messages defined in the PaintListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
PaintListener, removePaintListener(org.eclipse.swt.events.PaintListener)

addTouchListener
public void addTouchListener(TouchListener listener)
Adds the listener to the collection of listeners who will be notified when touch events occur, by sending it one of the messages defined in the TouchListener interface. NOTE: You must also call setTouchEnabled(true) to specify that touch events should be sent, which will cause gesture events to not be sent.
Warning: This API is currently only implemented on Windows and Cocoa. SWT doesn't send Gesture or Touch events on GTK.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.7
See Also:
TouchListener, removeTouchListener(org.eclipse.swt.events.TouchListener), setTouchEnabled(boolean)

addTraverseListener
public void addTraverseListener(TraverseListener listener)
Adds the listener to the collection of listeners who will be notified when traversal events occur, by sending it one of the messages defined in the TraverseListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
TraverseListener, removeTraverseListener(org.eclipse.swt.events.TraverseListener)

computeSize
public Point computeSize(int wHint,
                         int hHint)
Returns the preferred size (in points) of the receiver. The preferred size of a control is the size that it would best be displayed at. The width hint and height hint arguments allow the caller to ask a control questions such as "Given a particular width, how high does the control need to be to show all of the contents?" To indicate that the caller does not wish to constrain a particular dimension, the constant SWT.DEFAULT is passed for the hint.
Parameters:
wHint - the width hint (can be SWT.DEFAULT)
hHint - the height hint (can be SWT.DEFAULT)
Returns:
the preferred size of the control
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
Layout, getBorderWidth(), getBounds(), getSize(), pack(boolean), "computeTrim, getClientArea for controls that implement them"

computeSize
public Point computeSize(int wHint,
                         int hHint,
                         boolean changed)
Returns the preferred size (in points) of the receiver. The preferred size of a control is the size that it would best be displayed at. The width hint and height hint arguments allow the caller to ask a control questions such as "Given a particular width, how high does the control need to be to show all of the contents?" To indicate that the caller does not wish to constrain a particular dimension, the constant SWT.DEFAULT is passed for the hint.
If the changed flag is true, it indicates that the receiver's contents have changed, therefore any caches that a layout manager containing the control may have been keeping need to be flushed. When the control is resized, the changed flag will be false, so layout manager caches can be retained.
Parameters:
wHint - the width hint (can be SWT.DEFAULT)
hHint - the height hint (can be SWT.DEFAULT)
changed - true if the control's contents have changed, and false otherwise
Returns:
the preferred size of the control.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
Layout, getBorderWidth(), getBounds(), getSize(), pack(boolean), "computeTrim, getClientArea for controls that implement them"

dragDetect
public boolean dragDetect(Event event)
Detects a drag and drop gesture. This method is used to detect a drag gesture when called from within a mouse down listener. By default, a drag is detected when the gesture occurs anywhere within the client area of a control. Some controls, such as tables and trees, override this behavior. In addition to the operating system specific drag gesture, they require the mouse to be inside an item. Custom widget writers can use setDragDetect to disable the default detection, listen for mouse down, and then call dragDetect() from within the listener to conditionally detect a drag.
Parameters:
event - the mouse down event
Returns:
true if the gesture occurred, and false otherwise.
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT if the event is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3
See Also:
DragDetectListener, addDragDetectListener(org.eclipse.swt.events.DragDetectListener), getDragDetect(), setDragDetect(boolean)

dragDetect
public boolean dragDetect(MouseEvent event)
Detects a drag and drop gesture. This method is used to detect a drag gesture when called from within a mouse down listener. By default, a drag is detected when the gesture occurs anywhere within the client area of a control. Some controls, such as tables and trees, override this behavior. In addition to the operating system specific drag gesture, they require the mouse to be inside an item. Custom widget writers can use setDragDetect to disable the default detection, listen for mouse down, and then call dragDetect() from within the listener to conditionally detect a drag.
Parameters:
event - the mouse down event
Returns:
true if the gesture occurred, and false otherwise.
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT if the event is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3
See Also:
DragDetectListener, addDragDetectListener(org.eclipse.swt.events.DragDetectListener), getDragDetect(), setDragDetect(boolean)

forceFocus
public boolean forceFocus()
Forces the receiver to have the keyboard focus, causing all keyboard events to be delivered to it.
Returns:
true if the control got focus, and false if it was unable to.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setFocus()

getAccessible
public Accessible getAccessible()
Returns the accessible object for the receiver. If this is the first time this object is requested, then the object is created and returned. The object returned by getAccessible() does not need to be disposed.
Returns:
the accessible object
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0
See Also:
Accessible#addAccessibleListener, Accessible#addAccessibleControlListener

getBackground
public Color getBackground()
Returns the receiver's background color. Note: This operation is a hint and may be overridden by the platform. For example, on some versions of Windows the background of a TabFolder, is a gradient rather than a solid color.
Returns:
the background color
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getBackgroundImage
public Image getBackgroundImage()
Returns the receiver's background image.
Returns:
the background image
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

getBorderWidth
public int getBorderWidth()
Returns the receiver's border width in points.
Returns:
the border width
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getBounds
public Rectangle getBounds()
Returns a rectangle describing the receiver's size and location in points relative to its parent (or its display if its parent is null), unless the receiver is a shell. In this case, the location is relative to the display.
Returns:
the receiver's bounding rectangle
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getCursor
public Cursor getCursor()
Returns the receiver's cursor, or null if it has not been set. When the mouse pointer passes over a control its appearance is changed to match the control's cursor.
Returns:
the receiver's cursor or null
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3

getDragDetect
public boolean getDragDetect()
Returns true if the receiver is detecting drag gestures, and false otherwise.
Returns:
the receiver's drag detect state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3

getEnabled
public boolean getEnabled()
Returns true if the receiver is enabled, and false otherwise. A disabled control is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Returns:
the receiver's enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
isEnabled()

getFont
public Font getFont()
Returns the font that the receiver will use to paint textual information.
Returns:
the receiver's font
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getForeground
public Color getForeground()
Returns the foreground color that the receiver will use to draw.
Returns:
the receiver's foreground color
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getLayoutData
public java.lang.Object getLayoutData()
Returns layout data which is associated with the receiver.
Returns:
the receiver's layout data
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getLocation
public Point getLocation()
Returns a point describing the receiver's location relative to its parent in points (or its display if its parent is null), unless the receiver is a shell. In this case, the point is relative to the display.
Returns:
the receiver's location
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMenu
public Menu getMenu()
Returns the receiver's pop up menu if it has one, or null if it does not. All controls may optionally have a pop up menu that is displayed when the user requests one for the control. The sequence of key strokes, button presses and/or button releases that are used to request a pop up menu is platform specific.
Returns:
the receiver's menu
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMonitor
public Monitor getMonitor()
Returns the receiver's monitor.
Returns:
the receiver's monitor
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

getOrientation
public int getOrientation()
Returns the orientation of the receiver, which will be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
Returns:
the orientation style
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.7

getParent
public Composite getParent()
Returns the receiver's parent, which must be a Composite or null when the receiver is a shell that was created with null or a display for a parent.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getRegion
public Region getRegion()
Returns the region that defines the shape of the control, or null if the control has the default shape.
Returns:
the region that defines the shape of the shell (or null)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

getShell
public Shell getShell()
Returns the receiver's shell. For all controls other than shells, this simply returns the control's nearest ancestor shell. Shells return themselves, even if they are children of other shells.
Returns:
the receiver's shell
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getParent()

getSize
public Point getSize()
Returns a point describing the receiver's size in points. The x coordinate of the result is the width of the receiver. The y coordinate of the result is the height of the receiver.
Returns:
the receiver's size
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getTextDirection
public int getTextDirection()
Returns the text direction of the receiver, which will be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
Returns:
the text direction style
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.102

getToolTipText
public java.lang.String getToolTipText()
Returns the receiver's tool tip text, or null if it has not been set.
Returns:
the receiver's tool tip text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getTouchEnabled
public boolean getTouchEnabled()
Returns true if this control is set to send touch events, or false if it is set to send gesture events instead. This method also returns false if a touch-based input device is not detected (this can be determined with Display#getTouchEnabled()). Use setTouchEnabled(boolean) to switch the events that a control sends between touch events and gesture events.
Returns:
true if the control is set to send touch events, or false otherwise
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.7
See Also:
setTouchEnabled(boolean), Display.getTouchEnabled()

getVisible
public boolean getVisible()
Returns true if the receiver is visible, and false otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, this method may still indicate that it is considered visible even though it may not actually be showing.
Returns:
the receiver's visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

internal_new_GC
public long internal_new_GC(GCData data)
Invokes platform specific functionality to allocate a new GC handle. IMPORTANT: This method is not part of the public API for Control. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Specified by:
internal_new_GC in interface Drawable
Parameters:
data - the platform specific GC data
Returns:
the platform specific GC handle

internal_dispose_GC
public void internal_dispose_GC(long hDC,
                                GCData data)
Invokes platform specific functionality to dispose a GC handle. IMPORTANT: This method is not part of the public API for Control. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Specified by:
internal_dispose_GC in interface Drawable
Parameters:
hDC - the platform specific GC handle
data - the platform specific GC data

isEnabled
public boolean isEnabled()
Returns true if the receiver is enabled and all ancestors up to and including the receiver's nearest ancestor shell are enabled. Otherwise, false is returned. A disabled control is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Returns:
the receiver's enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getEnabled()

isFocusControl
public boolean isFocusControl()
Returns true if the receiver has the user-interface focus, and false otherwise.
Returns:
the receiver's focus state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

isReparentable
public boolean isReparentable()
Returns true if the underlying operating system supports this reparenting, otherwise false
Returns:
true if the widget can be reparented, otherwise false
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

isVisible
public boolean isVisible()
Returns true if the receiver is visible and all ancestors up to and including the receiver's nearest ancestor shell are visible. Otherwise, false is returned.
Returns:
the receiver's visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getVisible()

moveAbove
public void moveAbove(Control control)
Moves the receiver above the specified control in the drawing order. If the argument is null, then the receiver is moved to the top of the drawing order. The control at the top of the drawing order will not be covered by other controls even if they occupy intersecting areas.
Parameters:
control - the sibling control (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the control has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
moveBelow(org.eclipse.swt.widgets.Control), Composite.getChildren()

moveBelow
public void moveBelow(Control control)
Moves the receiver below the specified control in the drawing order. If the argument is null, then the receiver is moved to the bottom of the drawing order. The control at the bottom of the drawing order will be covered by all other controls which occupy intersecting areas.
Parameters:
control - the sibling control (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the control has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
moveAbove(org.eclipse.swt.widgets.Control), Composite.getChildren()

pack
public void pack()
Causes the receiver to be resized to its preferred size. For a composite, this involves computing the preferred size from its layout, if there is one.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
computeSize(int, int, boolean)

pack
public void pack(boolean changed)
Causes the receiver to be resized to its preferred size. For a composite, this involves computing the preferred size from its layout, if there is one. If the changed flag is true, it indicates that the receiver's contents have changed, therefore any caches that a layout manager containing the control may have been keeping need to be flushed. When the control is resized, the changed flag will be false, so layout manager caches can be retained.
Parameters:
changed - whether or not the receiver's contents have changed
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
computeSize(int, int, boolean)

print
public boolean print(GC gc)
Prints the receiver and all children.
Parameters:
gc - the gc where the drawing occurs
Returns:
true if the operation was successful and false otherwise
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the gc is null
ERROR_INVALID_ARGUMENT - if the gc has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

requestLayout
public void requestLayout()
Requests that this control and all of its ancestors be repositioned by their layouts at the earliest opportunity. This should be invoked after modifying the control in order to inform any dependent layouts of the change. The control will not be repositioned synchronously. This method is fast-running and only marks the control for future participation in a deferred layout.
Invoking this method multiple times before the layout occurs is an inexpensive no-op.
since. :
3.105

redraw
public void redraw()
Causes the entire bounds of the receiver to be marked as needing to be redrawn. The next time a paint request is processed, the control will be completely painted, including the background.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
update(), PaintListener, SWT.Paint, SWT.NO_BACKGROUND, SWT.NO_REDRAW_RESIZE, SWT.NO_MERGE_PAINTS, SWT.DOUBLE_BUFFERED

redraw
public void redraw(int x,
                   int y,
                   int width,
                   int height,
                   boolean all)
Causes the rectangular area of the receiver specified by the arguments to be marked as needing to be redrawn. The next time a paint request is processed, that area of the receiver will be painted, including the background. If the all flag is true, any children of the receiver which intersect with the specified area will also paint their intersecting areas. If the all flag is false, the children will not be painted.
Parameters:
x - the x coordinate of the area to draw
y - the y coordinate of the area to draw
width - the width of the area to draw
height - the height of the area to draw
all - true if children should redraw, and false otherwise
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
update(), PaintListener, SWT.Paint, SWT.NO_BACKGROUND, SWT.NO_REDRAW_RESIZE, SWT.NO_MERGE_PAINTS, SWT.DOUBLE_BUFFERED

removeControlListener
public void removeControlListener(ControlListener listener)
Removes the listener from the collection of listeners who will be notified when the control is moved or resized.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ControlListener, addControlListener(org.eclipse.swt.events.ControlListener)

removeDragDetectListener
public void removeDragDetectListener(DragDetectListener listener)
Removes the listener from the collection of listeners who will be notified when a drag gesture occurs.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3
See Also:
DragDetectListener, addDragDetectListener(org.eclipse.swt.events.DragDetectListener)

removeFocusListener
public void removeFocusListener(FocusListener listener)
Removes the listener from the collection of listeners who will be notified when the control gains or loses focus.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
FocusListener, addFocusListener(org.eclipse.swt.events.FocusListener)

removeGestureListener
public void removeGestureListener(GestureListener listener)
Removes the listener from the collection of listeners who will be notified when gesture events are generated for the control.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.7
See Also:
GestureListener, addGestureListener(org.eclipse.swt.events.GestureListener)

removeHelpListener
public void removeHelpListener(HelpListener listener)
Removes the listener from the collection of listeners who will be notified when the help events are generated for the control.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
HelpListener, addHelpListener(org.eclipse.swt.events.HelpListener)

removeKeyListener
public void removeKeyListener(KeyListener listener)
Removes the listener from the collection of listeners who will be notified when keys are pressed and released on the system keyboard.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
KeyListener, addKeyListener(org.eclipse.swt.events.KeyListener)

removeMenuDetectListener
public void removeMenuDetectListener(MenuDetectListener listener)
Removes the listener from the collection of listeners who will be notified when the platform-specific context menu trigger has occurred.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3
See Also:
MenuDetectListener, addMenuDetectListener(org.eclipse.swt.events.MenuDetectListener)

removeMouseTrackListener
public void removeMouseTrackListener(MouseTrackListener listener)
Removes the listener from the collection of listeners who will be notified when the mouse passes or hovers over controls.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
MouseTrackListener, addMouseTrackListener(org.eclipse.swt.events.MouseTrackListener)

removeMouseListener
public void removeMouseListener(MouseListener listener)
Removes the listener from the collection of listeners who will be notified when mouse buttons are pressed and released.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
MouseListener, addMouseListener(org.eclipse.swt.events.MouseListener)

removeMouseMoveListener
public void removeMouseMoveListener(MouseMoveListener listener)
Removes the listener from the collection of listeners who will be notified when the mouse moves.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
MouseMoveListener, addMouseMoveListener(org.eclipse.swt.events.MouseMoveListener)

removeMouseWheelListener
public void removeMouseWheelListener(MouseWheelListener listener)
Removes the listener from the collection of listeners who will be notified when the mouse wheel is scrolled.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3
See Also:
MouseWheelListener, addMouseWheelListener(org.eclipse.swt.events.MouseWheelListener)

removePaintListener
public void removePaintListener(PaintListener listener)
Removes the listener from the collection of listeners who will be notified when the receiver needs to be painted.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
PaintListener, addPaintListener(org.eclipse.swt.events.PaintListener)

removeTouchListener
public void removeTouchListener(TouchListener listener)
Removes the listener from the collection of listeners who will be notified when touch events occur.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.7
See Also:
TouchListener, addTouchListener(org.eclipse.swt.events.TouchListener)

removeTraverseListener
public void removeTraverseListener(TraverseListener listener)
Removes the listener from the collection of listeners who will be notified when traversal events occur.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
TraverseListener, addTraverseListener(org.eclipse.swt.events.TraverseListener)

setBackground
public void setBackground(Color color)
Sets the receiver's background color to the color specified by the argument, or to the default system color for the control if the argument is null. Note: This operation is a hint and may be overridden by the platform. For example, on MAC the background of a Button cannot be changed.
Parameters:
color - the new color (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setBackgroundImage
public void setBackgroundImage(Image image)
Sets the receiver's background image to the image specified by the argument, or to the default system color for the control if the argument is null. The background image is tiled to fill the available space. Note: This operation is a hint and may be overridden by the platform. For example, on Windows the background of a Button cannot be changed.
Parameters:
image - the new image (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
ERROR_INVALID_ARGUMENT - if the argument is not a bitmap
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

setBounds
public void setBounds(int x,
                      int y,
                      int width,
                      int height)
Sets the receiver's size and location in points to the rectangular area specified by the arguments. The x and y arguments are relative to the receiver's parent (or its display if its parent is null), unless the receiver is a shell. In this case, the x and y arguments are relative to the display. Note: Attempting to set the width or height of the receiver to a negative number will cause that value to be set to zero instead.
Note: On GTK, attempting to set the width or height of the receiver to a number higher or equal 2^14 will cause them to be set to (2^14)-1 instead.
Parameters:
x - the new x coordinate for the receiver
y - the new y coordinate for the receiver
width - the new width for the receiver
height - the new height for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setBounds
public void setBounds(Rectangle rect)
Sets the receiver's size and location in points to the rectangular area specified by the argument. The x and y fields of the rectangle are relative to the receiver's parent (or its display if its parent is null). Note: Attempting to set the width or height of the receiver to a negative number will cause that value to be set to zero instead.
Note: On GTK, attempting to set the width or height of the receiver to a number higher or equal 2^14 will cause them to be set to (2^14)-1 instead.
Parameters:
rect - the new bounds for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setCapture
public void setCapture(boolean capture)
If the argument is true, causes the receiver to have all mouse events delivered to it until the method is called with false as the argument. Note that on some platforms, a mouse button must currently be down for capture to be assigned.
Parameters:
capture - true to capture the mouse, and false to release it
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setCursor
public void setCursor(Cursor cursor)
Sets the receiver's cursor to the cursor specified by the argument, or to the default cursor for that kind of control if the argument is null. When the mouse pointer passes over a control its appearance is changed to match the control's cursor.
Parameters:
cursor - the new cursor (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setDragDetect
public void setDragDetect(boolean dragDetect)
Sets the receiver's drag detect state. If the argument is true, the receiver will detect drag gestures, otherwise these gestures will be ignored.
Parameters:
dragDetect - the new drag detect state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3

setEnabled
public void setEnabled(boolean enabled)
Enables the receiver if the argument is true, and disables it otherwise. A disabled control is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Parameters:
enabled - the new enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setFocus
public boolean setFocus()
Causes the receiver to have the keyboard focus, such that all keyboard events will be delivered to it. Focus reassignment will respect applicable platform constraints.
Returns:
true if the control got focus, and false if it was unable to.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
forceFocus()

setFont
public void setFont(Font font)
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Parameters:
font - the new font (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setForeground
public void setForeground(Color color)
Sets the receiver's foreground color to the color specified by the argument, or to the default system color for the control if the argument is null. Note: This operation is a hint and may be overridden by the platform.
Parameters:
color - the new color (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setLayoutData
public void setLayoutData(java.lang.Object layoutData)
Sets the layout data associated with the receiver to the argument.
Parameters:
layoutData - the new layout data for the receiver.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setLocation
public void setLocation(int x,
                        int y)
Sets the receiver's location to the point specified by the arguments which are relative to the receiver's parent (or its display if its parent is null), unless the receiver is a shell. In this case, the point is relative to the display.
Parameters:
x - the new x coordinate for the receiver
y - the new y coordinate for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setLocation
public void setLocation(Point location)
Sets the receiver's location to the point specified by the arguments which are relative to the receiver's parent (or its display if its parent is null), unless the receiver is a shell. In this case, the point is relative to the display.
Parameters:
location - the new location for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMenu
public void setMenu(Menu menu)
Sets the receiver's pop up menu to the argument. All controls may optionally have a pop up menu that is displayed when the user requests one for the control. The sequence of key strokes, button presses and/or button releases that are used to request a pop up menu is platform specific. Note: Disposing of a control that has a pop up menu will dispose of the menu. To avoid this behavior, set the menu to null before the control is disposed.
Parameters:
menu - the new pop up menu
Throws:
java.lang.IllegalArgumentException -
ERROR_MENU_NOT_POP_UP - the menu is not a pop up menu
ERROR_INVALID_PARENT - if the menu is not in the same widget tree
ERROR_INVALID_ARGUMENT - if the menu has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setOrientation
public void setOrientation(int orientation)
Sets the orientation of the receiver, which must be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
Parameters:
orientation - new orientation style
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.7

setRedraw
public void setRedraw(boolean redraw)
If the argument is false, causes subsequent drawing operations in the receiver to be ignored. No drawing of any kind can occur in the receiver until the flag is set to true. Graphics operations that occurred while the flag was false are lost. When the flag is set to true, the entire widget is marked as needing to be redrawn. Nested calls to this method are stacked. Note: This operation is a hint and may not be supported on some platforms or for some widgets.
Parameters:
redraw - the new redraw state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
redraw(int, int, int, int, boolean), update()

setRegion
public void setRegion(Region region)
Sets the shape of the control to the region specified by the argument. When the argument is null, the default shape of the control is restored.
Parameters:
region - the region that defines the shape of the control (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the region has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

setSize
public void setSize(int width,
                    int height)
Sets the receiver's size to the point specified by the arguments. Note: Attempting to set the width or height of the receiver to a negative number will cause that value to be set to zero instead.
Note: On GTK, attempting to set the width or height of the receiver to a number higher or equal 2^14 will cause them to be set to (2^14)-1 instead.
Parameters:
width - the new width in points for the receiver
height - the new height in points for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setSize
public void setSize(Point size)
Sets the receiver's size to the point specified by the argument. Note: Attempting to set the width or height of the receiver to a negative number will cause them to be set to zero instead.
Note: On GTK, attempting to set the width or height of the receiver to a number higher or equal 2^14 will cause them to be set to (2^14)-1 instead.
Parameters:
size - the new size in points for the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setTextDirection
public void setTextDirection(int textDirection)
Sets the base text direction (a.k.a. "paragraph direction") of the receiver, which must be one of the constants SWT.LEFT_TO_RIGHT, SWT.RIGHT_TO_LEFT, or SWT.AUTO_TEXT_DIRECTION. setOrientation would override this value with the text direction that is consistent with the new orientation.
Warning: This API is currently only implemented on Windows. It doesn't set the base text direction on GTK and Cocoa.
Parameters:
textDirection - the base text direction style
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.102
See Also:
SWT.LEFT_TO_RIGHT, SWT.RIGHT_TO_LEFT, SWT.AUTO_TEXT_DIRECTION, SWT.FLIP_TEXT_DIRECTION

setToolTipText
public void setToolTipText(java.lang.String string)
Sets the receiver's tool tip text to the argument, which may be null indicating that the default tool tip for the control will be shown. For a control that has a default tool tip, such as the Tree control on Windows, setting the tool tip text to an empty string replaces the default, causing no tool tip text to be shown. The mnemonic indicator (character '&') is not displayed in a tool tip. To display a single '&' in the tool tip, the character '&' can be escaped by doubling it in the string.
Parameters:
string - the new tool tip text (or null)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setTouchEnabled
public void setTouchEnabled(boolean enabled)
Sets whether this control should send touch events (by default controls do not). Setting this to false causes the receiver to send gesture events instead. No exception is thrown if a touch-based input device is not detected (this can be determined with Display#getTouchEnabled()).
Parameters:
enabled - the new touch-enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setVisible
public void setVisible(boolean visible)
Marks the receiver as visible if the argument is true, and marks it invisible otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, marking it visible may not actually cause it to be displayed.
Parameters:
visible - the new visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

toControl
public Point toControl(int x,
                       int y)
Returns a point which is the result of converting the argument, which is specified in display relative coordinates, to coordinates relative to the receiver. NOTE: To properly map a rectangle or a corner of a rectangle on a right-to-left platform, use Display.map(Control, Control, Rectangle).
Parameters:
x - the x coordinate in points to be translated
y - the y coordinate in points to be translated
Returns:
the translated coordinates
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.1

toControl
public Point toControl(Point point)
Returns a point which is the result of converting the argument, which is specified in display relative coordinates, to coordinates relative to the receiver. NOTE: To properly map a rectangle or a corner of a rectangle on a right-to-left platform, use Display.map(Control, Control, Rectangle).
Parameters:
point - the point to be translated (must not be null)
Returns:
the translated coordinates
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

toDisplay
public Point toDisplay(int x,
                       int y)
Returns a point which is the result of converting the argument, which is specified in coordinates relative to the receiver, to display relative coordinates. NOTE: To properly map a rectangle or a corner of a rectangle on a right-to-left platform, use Display.map(Control, Control, Rectangle).
Parameters:
x - the x coordinate to be translated
y - the y coordinate to be translated
Returns:
the translated coordinates
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.1

toDisplay
public Point toDisplay(Point point)
Returns a point which is the result of converting the argument, which is specified in coordinates relative to the receiver, to display relative coordinates. NOTE: To properly map a rectangle or a corner of a rectangle on a right-to-left platform, use Display.map(Control, Control, Rectangle).
Parameters:
point - the point to be translated (must not be null)
Returns:
the translated coordinates
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

traverse
public boolean traverse(int traversal)
Based on the argument, perform one of the expected platform traversal action. The argument should be one of the constants: SWT.TRAVERSE_ESCAPE, SWT.TRAVERSE_RETURN, SWT.TRAVERSE_TAB_NEXT, SWT.TRAVERSE_TAB_PREVIOUS, SWT.TRAVERSE_ARROW_NEXT, SWT.TRAVERSE_ARROW_PREVIOUS, SWT.TRAVERSE_PAGE_NEXT and SWT.TRAVERSE_PAGE_PREVIOUS.
Parameters:
traversal - the type of traversal
Returns:
true if the traversal succeeded
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

traverse
public boolean traverse(int traversal,
                        Event event)
Performs a platform traversal action corresponding to a KeyDown event. Valid traversal values are SWT.TRAVERSE_NONE, SWT.TRAVERSE_MNEMONIC, SWT.TRAVERSE_ESCAPE, SWT.TRAVERSE_RETURN, SWT.TRAVERSE_TAB_NEXT, SWT.TRAVERSE_TAB_PREVIOUS, SWT.TRAVERSE_ARROW_NEXT, SWT.TRAVERSE_ARROW_PREVIOUS, SWT.TRAVERSE_PAGE_NEXT and SWT.TRAVERSE_PAGE_PREVIOUS. If traversal is SWT.TRAVERSE_NONE then the Traverse event is created with standard values based on the KeyDown event. If traversal is one of the other traversal constants then the Traverse event is created with this detail, and its doit is taken from the KeyDown event.
Parameters:
traversal - the type of traversal, or SWT.TRAVERSE_NONE to compute this from event
event - the KeyDown event
Returns:
true if the traversal succeeded
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT if the event is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.6

traverse
public boolean traverse(int traversal,
                        KeyEvent event)
Performs a platform traversal action corresponding to a KeyDown event. Valid traversal values are SWT.TRAVERSE_NONE, SWT.TRAVERSE_MNEMONIC, SWT.TRAVERSE_ESCAPE, SWT.TRAVERSE_RETURN, SWT.TRAVERSE_TAB_NEXT, SWT.TRAVERSE_TAB_PREVIOUS, SWT.TRAVERSE_ARROW_NEXT, SWT.TRAVERSE_ARROW_PREVIOUS, SWT.TRAVERSE_PAGE_NEXT and SWT.TRAVERSE_PAGE_PREVIOUS. If traversal is SWT.TRAVERSE_NONE then the Traverse event is created with standard values based on the KeyDown event. If traversal is one of the other traversal constants then the Traverse event is created with this detail, and its doit is taken from the KeyDown event.
Parameters:
traversal - the type of traversal, or SWT.TRAVERSE_NONE to compute this from event
event - the KeyDown event
Returns:
true if the traversal succeeded
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT if the event is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.6

update
public void update()
Forces all outstanding paint requests for the widget to be processed before this method returns. If there are no outstanding paint request, this method does nothing. Note: This method does not cause a redraw.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
redraw(), redraw(int, int, int, int, boolean), PaintListener, SWT.Paint

setParent
public boolean setParent(Composite parent)
Changes the parent of the widget to be the one provided if the underlying operating system supports this feature. Returns true if the parent is successfully changed.
Parameters:
parent - the new parent for the control.
Returns:
true if the parent is changed and false otherwise.
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.events
Class ControlAdapter
java.lang.Object
org.eclipse.swt.events.ControlAdapter
All Implemented Interfaces:
java.util.EventListener, ControlListener, SWTEventListener


public abstract class ControlAdapter extends java.lang.Object implements ControlListener
This adapter class provides default implementations for the methods described by the ControlListener interface. Classes that wish to deal with ControlEvents can extend this class and override only the methods which they are interested in.
See Also:
ControlListener, ControlEvent, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
ControlAdapter()

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    controlMoved(ControlEvent e)
Sent when the location (x, y) of a control changes relative to its parent (or relative to the display, for Shells).
void    controlResized(ControlEvent e)
Sent when the size (width, height) of a control changes.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

ControlAdapter
public ControlAdapter()

Method Detail

controlMoved
public void controlMoved(ControlEvent e)
Sent when the location (x, y) of a control changes relative to its parent (or relative to the display, for Shells). The default behavior is to do nothing.
Specified by:
controlMoved in interface ControlListener
Parameters:
e - an event containing information about the move

controlResized
public void controlResized(ControlEvent e)
Sent when the size (width, height) of a control changes. The default behavior is to do nothing.
Specified by:
controlResized in interface ControlListener
Parameters:
e - an event containing information about the resize


org.eclipse.swt.events
Class ControlEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.ControlEvent
All Implemented Interfaces:
java.io.Serializable


public final class ControlEvent extends TypedEvent
Instances of this class are sent as a result of controls being moved or resized.
See Also:
ControlListener, Sample code and further information, Serialized Form

Field Summary

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
ControlEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary

Methods inherited from class org.eclipse.swt.events.TypedEvent
toString

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

ControlEvent
public ControlEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information


org.eclipse.swt.events
Interface ControlListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
All Known Implementing Classes:
ControlAdapter


public interface ControlListener extends SWTEventListener
Classes which implement this interface provide methods that deal with the events that are generated by moving and resizing controls. After creating an instance of a class that implements this interface it can be added to a control using the addControlListener method and removed using the removeControlListener method. When a control is moved or resized, the appropriate method will be invoked.
See Also:
ControlAdapter, ControlEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    controlMoved(ControlEvent e)
Sent when the location (x, y) of a control changes relative to its parent (or relative to the display, for Shells).
void    controlResized(ControlEvent e)
Sent when the size (width, height) of a control changes.

Method Detail

controlMoved
void controlMoved(ControlEvent e)
Sent when the location (x, y) of a control changes relative to its parent (or relative to the display, for Shells).
Parameters:
e - an event containing information about the move

controlResized
void controlResized(ControlEvent e)
Sent when the size (width, height) of a control changes.
Parameters:
e - an event containing information about the resize


org.eclipse.swt.internal
Class CoolBar
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.Composite
org.eclipse.swt.widgets.CoolBar
All Implemented Interfaces:
Drawable


public class CoolBar extends Composite
Instances of this class provide an area for dynamically positioning the items they contain. The item children that may be added to instances of this class must be of type CoolItem.
Note that although this class is a subclass of Composite, it does not make sense to add Control children to it, or set a layout on it.
Styles:
FLAT, HORIZONTAL, VERTICAL
Events:
(none)
Note: Only one of the styles HORIZONTAL and VERTICAL may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
CoolBar snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
CoolBar(Composite parent,        int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
protected void  checkSubclass()
Checks that this class can be subclassed.
CoolItem    getItem(int index)
Returns the item that is currently displayed at the given, zero-relative index.
int getItemCount()
Returns the number of items contained in the receiver.
int[]   getItemOrder()
Returns an array of zero-relative ints that map the creation order of the receiver's items to the order in which they are currently being displayed.
CoolItem[]  getItems()
Returns an array of CoolItems in the order in which they are currently being displayed.
Point[] getItemSizes()
Returns an array of points whose x and y coordinates describe the widths and heights (respectively) of the items in the receiver in the order in which they are currently being displayed.
boolean getLocked()
Returns whether or not the receiver is 'locked'.
int[]   getWrapIndices()
Returns an array of ints that describe the zero-relative indices of any item(s) in the receiver that will begin on a new row.
int indexOf(CoolItem item)
Searches the receiver's items in the order they are currently being displayed, starting at the first item (index 0), until an item is found that is equal to the argument, and returns the index of that item.
void    setItemLayout(int[] itemOrder,          int[] wrapIndices,      Point[] sizes)
Sets the receiver's item order, wrap indices, and item sizes all at once.
void    setLocked(boolean locked)
Sets whether or not the receiver is 'locked'.
void    setWrapIndices(int[] indices)
Sets the indices of all item(s) in the receiver that will begin on a new row.

Methods inherited from class org.eclipse.swt.widgets.Composite
changed, drawBackground, getBackgroundMode, getChildren, getLayout, getLayoutDeferred, getTabList, isLayoutDeferred, layout, layout, layout, layout, layout, setBackgroundMode, setFocus, setLayout, setLayoutDeferred, setTabList

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setFont, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

CoolBar
public CoolBar(Composite parent,
               int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT, SWT.FLAT, SWT.HORIZONTAL, SWT.VERTICAL, Widget.checkSubclass(), Widget.getStyle()

Method Detail

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Composite

getItem
public CoolItem getItem(int index)
Returns the item that is currently displayed at the given, zero-relative index. Throws an exception if the index is out of range.
Parameters:
index - the visual index of the item to return
Returns:
the item at the given visual index
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItemCount
public int getItemCount()
Returns the number of items contained in the receiver.
Returns:
the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItemOrder
public int[] getItemOrder()
Returns an array of zero-relative ints that map the creation order of the receiver's items to the order in which they are currently being displayed. Specifically, the indices of the returned array represent the current visual order of the items, and the contents of the array represent the creation order of the items.
Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the current visual order of the receiver's items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItems
public CoolItem[] getItems()
Returns an array of CoolItems in the order in which they are currently being displayed. Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the receiver's items in their current visual order
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItemSizes
public Point[] getItemSizes()
Returns an array of points whose x and y coordinates describe the widths and heights (respectively) of the items in the receiver in the order in which they are currently being displayed.
Returns:
the receiver's item sizes in their current visual order
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getLocked
public boolean getLocked()
Returns whether or not the receiver is 'locked'. When a coolbar is locked, its items cannot be repositioned.
Returns:
true if the coolbar is locked, false otherwise
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0

getWrapIndices
public int[] getWrapIndices()
Returns an array of ints that describe the zero-relative indices of any item(s) in the receiver that will begin on a new row. The 0th visible item always begins the first row, therefore it does not count as a wrap index.
Returns:
an array containing the receiver's wrap indices, or an empty array if all items are in one row
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

indexOf
public int indexOf(CoolItem item)
Searches the receiver's items in the order they are currently being displayed, starting at the first item (index 0), until an item is found that is equal to the argument, and returns the index of that item. If no item is found, returns -1.
Parameters:
item - the search item
Returns:
the visual order index of the search item, or -1 if the item is not found
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
ERROR_INVALID_ARGUMENT - if the item is disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setItemLayout
public void setItemLayout(int[] itemOrder,
                          int[] wrapIndices,
                          Point[] sizes)
Sets the receiver's item order, wrap indices, and item sizes all at once. This method is typically used to restore the displayed state of the receiver to a previously stored state. The item order is the order in which the items in the receiver should be displayed, given in terms of the zero-relative ordering of when the items were added.
The wrap indices are the indices of all item(s) in the receiver that will begin on a new row. The indices are given in the order specified by the item order. The 0th item always begins the first row, therefore it does not count as a wrap index. If wrap indices is null or empty, the items will be placed on one line.
The sizes are specified in an array of points whose x and y coordinates describe the new widths and heights (respectively) of the receiver's items in the order specified by the item order.
Parameters:
itemOrder - an array of indices that describe the new order to display the items in
wrapIndices - an array of wrap indices, or null
sizes - an array containing the new sizes for each of the receiver's items in visual order
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if item order or sizes is null
ERROR_INVALID_ARGUMENT - if item order or sizes is not the same length as the number of items

setLocked
public void setLocked(boolean locked)
Sets whether or not the receiver is 'locked'. When a coolbar is locked, its items cannot be repositioned.
Parameters:
locked - lock the coolbar if true, otherwise unlock the coolbar
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0

setWrapIndices
public void setWrapIndices(int[] indices)
Sets the indices of all item(s) in the receiver that will begin on a new row. The indices are given in the order in which they are currently being displayed. The 0th item always begins the first row, therefore it does not count as a wrap index. If indices is null or empty, the items will be placed on one line.
Parameters:
indices - an array of wrap indices, or null
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class CoolItem
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Item
org.eclipse.swt.widgets.CoolItem


public class CoolItem extends Item
Instances of this class are selectable user interface objects that represent the dynamically positionable areas of a CoolBar.
Styles:
DROP_DOWN
Events:
Selection
IMPORTANT: This class is not intended to be subclassed.
See Also:
Sample code and further information

Constructor Summary
Constructors

Constructor and Description
CoolItem(CoolBar parent,         int style)
Constructs a new instance of this class given its parent (which must be a CoolBar) and a style value describing its behavior and appearance.
CoolItem(CoolBar parent,         int style,         int index)
Constructs a new instance of this class given its parent (which must be a CoolBar), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners that will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface.
protected void  checkSubclass()
Checks that this class can be subclassed.
Point   computeSize(int wHint,            i nt hHint)
Returns the preferred size of the receiver.
Rectangle   getBounds()
Returns a rectangle describing the receiver's size and location relative to its parent.
Control getControl()
Returns the control that is associated with the receiver.
Point   getMinimumSize()
Returns the minimum size that the cool item can be resized to using the cool item's gripper.
CoolBar getParent()
Returns the receiver's parent, which must be a CoolBar.
Point   getPreferredSize()
Returns a point describing the receiver's ideal size.
Point   getSize()
Returns a point describing the receiver's size.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners that will be notified when the control is selected by the user.
void    setControl(Control control)
Sets the control that is associated with the receiver to the argument.
void    setMinimumSize(int width,      int height)
Sets the minimum size that the cool item can be resized to using the cool item's gripper, to the point specified by the arguments.
void    setMinimumSize(Point size)
Sets the minimum size that the cool item can be resized to using the cool item's gripper, to the point specified by the argument.
void    setPreferredSize(int width,          int height)
Sets the receiver's ideal size to the point specified by the arguments.
void    setPreferredSize(Point size)
Sets the receiver's ideal size to the point specified by the argument.
void    setSize(int width,        int heigh t)
Sets the receiver's size to the point specified by the arguments.
void    setSize(Point size)
Sets the receiver's size to the point specified by the argument.

Methods inherited from class org.eclipse.swt.widgets.Item
getImage, getText, setImage, setText

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

CoolItem
public CoolItem(CoolBar parent,
                int style)
Constructs a new instance of this class given its parent (which must be a CoolBar) and a style value describing its behavior and appearance. The item is added to the end of the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.DROP_DOWN, Widget.checkSubclass(), Widget.getStyle()

CoolItem
public CoolItem(CoolBar parent,
                int style,
                int index)
Constructs a new instance of this class given its parent (which must be a CoolBar), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
index - the zero-relative index at which to store the receiver in its parent
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.DROP_DOWN, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners that will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface. If widgetSelected is called when the mouse is over the drop-down arrow (or 'chevron') portion of the cool item, the event object detail field contains the value SWT.ARROW, and the x and y fields in the event object represent the point at the bottom left of the chevron, where the menu should be popped up. widgetDefaultSelected is not called.
Parameters:
listener - the listener which should be notified when the control is selected by the user
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Item

computeSize
public Point computeSize(int wHint,
                         int hHint)
Returns the preferred size of the receiver. The preferred size of a CoolItem is the size that it would best be displayed at. The width hint and height hint arguments allow the caller to ask the instance questions such as "Given a particular width, how high does it need to be to show all of the contents?" To indicate that the caller does not wish to constrain a particular dimension, the constant SWT.DEFAULT is passed for the hint.
Parameters:
wHint - the width hint (can be SWT.DEFAULT)
hHint - the height hint (can be SWT.DEFAULT)
Returns:
the preferred size
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
Layout, getBounds(), getSize(), Control.getBorderWidth(), Scrollable.computeTrim(int, int, int, int), Scrollable.getClientArea()

getBounds
public Rectangle getBounds()
Returns a rectangle describing the receiver's size and location relative to its parent.
Returns:
the receiver's bounding rectangle
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getControl
public Control getControl()
Returns the control that is associated with the receiver.
Returns:
the control that is contained by the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getParent
public CoolBar getParent()
Returns the receiver's parent, which must be a CoolBar.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setControl
public void setControl(Control control)
Sets the control that is associated with the receiver to the argument.
Parameters:
control - the new control that will be contained by the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the control has been disposed
ERROR_INVALID_PARENT - if the control is not in the same widget tree
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getPreferredSize
public Point getPreferredSize()
Returns a point describing the receiver's ideal size. The x coordinate of the result is the ideal width of the receiver. The y coordinate of the result is the ideal height of the receiver.
Returns:
the receiver's ideal size
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setPreferredSize
public void setPreferredSize(int width,
                             int height)
Sets the receiver's ideal size to the point specified by the arguments.
Parameters:
width - the new ideal width for the receiver
height - the new ideal height for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setPreferredSize
public void setPreferredSize(Point size)
Sets the receiver's ideal size to the point specified by the argument.
Parameters:
size - the new ideal size for the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSize
public Point getSize()
Returns a point describing the receiver's size. The x coordinate of the result is the width of the receiver. The y coordinate of the result is the height of the receiver.
Returns:
the receiver's size
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setSize
public void setSize(int width,
                    int height)
Sets the receiver's size to the point specified by the arguments. Note: Attempting to set the width or height of the receiver to a negative number will cause that value to be set to zero instead.
Parameters:
width - the new width for the receiver
height - the new height for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setSize
public void setSize(Point size)
Sets the receiver's size to the point specified by the argument. Note: Attempting to set the width or height of the receiver to a negative number will cause them to be set to zero instead.
Parameters:
size - the new size for the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMinimumSize
public Point getMinimumSize()
Returns the minimum size that the cool item can be resized to using the cool item's gripper.
Returns:
a point containing the minimum width and height of the cool item, in pixels
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0

setMinimumSize
public void setMinimumSize(int width,
                           int height)
Sets the minimum size that the cool item can be resized to using the cool item's gripper, to the point specified by the arguments.
Parameters:
width - the minimum width of the cool item, in pixels
height - the minimum height of the cool item, in pixels
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0

setMinimumSize
public void setMinimumSize(Point size)
Sets the minimum size that the cool item can be resized to using the cool item's gripper, to the point specified by the argument.
Parameters:
size - a point representing the minimum width and height of the cool item, in pixels
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners that will be notified when the control is selected by the user.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)


org.eclipse.swt.graphics
Class Cursor
java.lang.Object
org.eclipse.swt.graphics.Resource
org.eclipse.swt.graphics.Cursor


public final class Cursor extends Resource
Instances of this class manage operating system resources that specify the appearance of the on-screen pointer. To create a cursor you specify the device and either a simple cursor style describing one of the standard operating system provided cursors or the image and mask data for the desired appearance. Application code must explicitly invoke the Cursor.dispose() method to release the operating system resources managed by each instance when those instances are no longer required.
Styles:
CURSOR_ARROW, CURSOR_WAIT, CURSOR_CROSS, CURSOR_APPSTARTING, CURSOR_HELP, CURSOR_SIZEALL, CURSOR_SIZENESW, CURSOR_SIZENS, CURSOR_SIZENWSE, CURSOR_SIZEWE, CURSOR_SIZEN, CURSOR_SIZES, CURSOR_SIZEE, CURSOR_SIZEW, CURSOR_SIZENE, CURSOR_SIZESE, CURSOR_SIZESW, CURSOR_SIZENW, CURSOR_UPARROW, CURSOR_IBEAM, CURSOR_NO, CURSOR_HAND
Note: Only one of the above styles may be specified.
See Also:
Cursor snippets, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
long    handle
the handle to the OS cursor resource (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.

Constructor Summary
Constructors

Constructor and Description
Cursor(Device device,       ImageData source,       ImageData mask,    int hotspotX,       int hotspotY)
Constructs a new cursor given a device, image and mask data describing the desired cursor appearance, and the x and y coordinates of the hotspot (that is, the point within the area covered by the cursor which is considered to be where the on-screen pointer is "pointing").
Cursor(Device device,       ImageData source,       int hotspotX,  int hotspotY)
Constructs a new cursor given a device, image data describing the desired cursor appearance, and the x and y coordinates of the hotspot (that is, the point within the area covered by the cursor which is considered to be where the on-screen pointer is "pointing").
Cursor(Device device,       int style)
Constructs a new cursor given a device and a style constant describing the desired cursor appearance.

Method Summary
All Methods Static Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
int hashCode()
Returns an integer hash code for the receiver.
boolean isDisposed()
Returns true if the cursor has been disposed, and false otherwise.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.
static Cursor   win32_new(Device device,          i nt handle)
Invokes platform specific functionality to allocate a new cursor.

Methods inherited from class org.eclipse.swt.graphics.Resource
dispose, getDevice

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait

Field Detail

handle
public long handle
the handle to the OS cursor resource (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

Constructor Detail

Cursor
public Cursor(Device device,
              int style)
Constructs a new cursor given a device and a style constant describing the desired cursor appearance. You must dispose the cursor when it is no longer required.
NOTE: It is recommended to use Display.getSystemCursor(int) instead of using this constructor. This way you can avoid the overhead of disposing the Cursor resource.
Parameters:
device - the device on which to allocate the cursor
style - the style of cursor to allocate
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_INVALID_ARGUMENT - when an unknown style is specified
SWTError -
ERROR_NO_HANDLES - if a handle could not be obtained for cursor creation
See Also:
SWT.CURSOR_ARROW, SWT.CURSOR_WAIT, SWT.CURSOR_CROSS, SWT.CURSOR_APPSTARTING, SWT.CURSOR_HELP, SWT.CURSOR_SIZEALL, SWT.CURSOR_SIZENESW, SWT.CURSOR_SIZENS, SWT.CURSOR_SIZENWSE, SWT.CURSOR_SIZEWE, SWT.CURSOR_SIZEN, SWT.CURSOR_SIZES, SWT.CURSOR_SIZEE, SWT.CURSOR_SIZEW, SWT.CURSOR_SIZENE, SWT.CURSOR_SIZESE, SWT.CURSOR_SIZESW, SWT.CURSOR_SIZENW, SWT.CURSOR_UPARROW, SWT.CURSOR_IBEAM, SWT.CURSOR_NO, SWT.CURSOR_HAND, Resource.dispose()

Cursor
public Cursor(Device device,
              ImageData source,
              ImageData mask,
              int hotspotX,
              int hotspotY)
Constructs a new cursor given a device, image and mask data describing the desired cursor appearance, and the x and y coordinates of the hotspot (that is, the point within the area covered by the cursor which is considered to be where the on-screen pointer is "pointing"). The mask data is allowed to be null, but in this case the source must be an ImageData representing an icon that specifies both color data and mask data.
You must dispose the cursor when it is no longer required.
Parameters:
device - the device on which to allocate the cursor
source - the color data for the cursor
mask - the mask data for the cursor (or null)
hotspotX - the x coordinate of the cursor's hotspot
hotspotY - the y coordinate of the cursor's hotspot
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if the source is null
ERROR_NULL_ARGUMENT - if the mask is null and the source does not have a mask
ERROR_INVALID_ARGUMENT - if the source and the mask are not the same size, or if the hotspot is outside the bounds of the image
SWTError -
ERROR_NO_HANDLES - if a handle could not be obtained for cursor creation
See Also:
Resource.dispose()

Cursor
public Cursor(Device device,
              ImageData source,
              int hotspotX,
              int hotspotY)
Constructs a new cursor given a device, image data describing the desired cursor appearance, and the x and y coordinates of the hotspot (that is, the point within the area covered by the cursor which is considered to be where the on-screen pointer is "pointing"). You must dispose the cursor when it is no longer required.
Parameters:
device - the device on which to allocate the cursor
source - the image data for the cursor
hotspotX - the x coordinate of the cursor's hotspot
hotspotY - the y coordinate of the cursor's hotspot
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if the image is null
ERROR_INVALID_ARGUMENT - if the hotspot is outside the bounds of the image
SWTError -
ERROR_NO_HANDLES - if a handle could not be obtained for cursor creation
since. :
3.0
See Also:
Resource.dispose()

Method Detail

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
See Also:
equals(java.lang.Object)

isDisposed
public boolean isDisposed()
Returns true if the cursor has been disposed, and false otherwise. This method gets the dispose state for the cursor. When a cursor has been disposed, it is an error to invoke any other method (except Resource.dispose()) using the cursor.
Specified by:
isDisposed in class Resource
Returns:
true when the cursor is disposed and false otherwise

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the receiver

win32_new
public static Cursor win32_new(Device device,
                               int handle)
Invokes platform specific functionality to allocate a new cursor. IMPORTANT: This method is not part of the public API for Cursor. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Parameters:
device - the device on which to allocate the color
handle - the handle for the cursor
Returns:
a new cursor object containing the specified device and handle


org.eclipse.swt.widgets
Class DateTime
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.Composite
org.eclipse.swt.widgets.DateTime
All Implemented Interfaces:
Drawable


public class DateTime extends Composite
Instances of this class are selectable user interface objects that allow the user to enter and modify date or time values. Note that although this class is a subclass of Composite, it does not make sense to add children to it, or set a layout on it.
Styles:
DATE, TIME, CALENDAR, SHORT, MEDIUM, LONG, DROP_DOWN
Events:
DefaultSelection, Selection
Note: Only one of the styles DATE, TIME, or CALENDAR may be specified, and only one of the styles SHORT, MEDIUM, or LONG may be specified. The DROP_DOWN style is a HINT, and it is only valid with the DATE style.
IMPORTANT: This class is not intended to be subclassed.
since. :
3.3
See Also:
DateTime snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
DateTime(Composite parent,         int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface.
protected void  checkSubclass()
Checks that this class can be subclassed.
int getDay()
Returns the receiver's date, or day of the month.
int getHours()
Returns the receiver's hours.
int getMinutes()
Returns the receiver's minutes.
int getMonth()
Returns the receiver's month.
int getSeconds()
Returns the receiver's seconds.
int getYear()
Returns the receiver's year.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
void    setDate(int year,        int month,         int day)
Sets the receiver's year, month, and day in a single operation.
void    setDay(int day)
Sets the receiver's date, or day of the month, to the specified day.
void    setHours(int hours)
Sets the receiver's hours.
void    setMinutes(int minutes)
Sets the receiver's minutes.
void    setMonth(int month)
Sets the receiver's month.
void    setOrientation(int orientation)
Sets the orientation of the receiver, which must be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
void    setSeconds(int seconds)
Sets the receiver's seconds.
void    setTime(int hours,        int minut es,        int seconds)
Sets the receiver's hours, minutes, and seconds in a single operation.
void    setYear(int year)
Sets the receiver's year.

Methods inherited from class org.eclipse.swt.widgets.Composite
changed, drawBackground, getBackgroundMode, getChildren, getLayout, getLayoutDeferred, getTabList, isLayoutDeferred, layout, layout, layout, layout, layout, setBackgroundMode, setFocus, setLayout, setLayoutDeferred, setTabList

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setFont, setForeground, setLayoutData, setLocation, setLocation, setMenu, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

DateTime
public DateTime(Composite parent,
                int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.DATE, SWT.TIME, SWT.CALENDAR, SWT.SHORT, SWT.MEDIUM, SWT.LONG, SWT.DROP_DOWN, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface. widgetSelected is called when the user changes the control's value. widgetDefaultSelected is typically called when ENTER is pressed.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Composite

getDay
public int getDay()
Returns the receiver's date, or day of the month. The first day of the month is 1, and the last day depends on the month and year.
Returns:
a positive integer beginning with 1
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getHours
public int getHours()
Returns the receiver's hours. Hours is an integer between 0 and 23.
Returns:
an integer between 0 and 23
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMinutes
public int getMinutes()
Returns the receiver's minutes. Minutes is an integer between 0 and 59.
Returns:
an integer between 0 and 59
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMonth
public int getMonth()
Returns the receiver's month. The first month of the year is 0, and the last month is 11.
Returns:
an integer between 0 and 11
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSeconds
public int getSeconds()
Returns the receiver's seconds. Seconds is an integer between 0 and 59.
Returns:
an integer between 0 and 59
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getYear
public int getYear()
Returns the receiver's year. The first year is 1752 and the last year is 9999.
Returns:
an integer between 1752 and 9999
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

setDate
public void setDate(int year,
                    int month,
                    int day)
Sets the receiver's year, month, and day in a single operation. This is the recommended way to set the date, because setting the year, month, and day separately may result in invalid intermediate dates.
Parameters:
year - an integer between 1752 and 9999
month - an integer between 0 and 11
day - a positive integer beginning with 1
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

setDay
public void setDay(int day)
Sets the receiver's date, or day of the month, to the specified day. The first day of the month is 1, and the last day depends on the month and year. If the specified day is not valid for the receiver's month and year, then it is ignored.
Parameters:
day - a positive integer beginning with 1
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setDate(int, int, int)

setHours
public void setHours(int hours)
Sets the receiver's hours. Hours is an integer between 0 and 23.
Parameters:
hours - an integer between 0 and 23
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMinutes
public void setMinutes(int minutes)
Sets the receiver's minutes. Minutes is an integer between 0 and 59.
Parameters:
minutes - an integer between 0 and 59
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMonth
public void setMonth(int month)
Sets the receiver's month. The first month of the year is 0, and the last month is 11. If the specified month is not valid for the receiver's day and year, then it is ignored.
Parameters:
month - an integer between 0 and 11
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setDate(int, int, int)

setOrientation
public void setOrientation(int orientation)
Description copied from class: Control
Sets the orientation of the receiver, which must be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
Overrides:
setOrientation in class Control
Parameters:
orientation - new orientation style

setSeconds
public void setSeconds(int seconds)
Sets the receiver's seconds. Seconds is an integer between 0 and 59.
Parameters:
seconds - an integer between 0 and 59
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setTime
public void setTime(int hours,
                    int minutes,
                    int seconds)
Sets the receiver's hours, minutes, and seconds in a single operation.
Parameters:
hours - an integer between 0 and 23
minutes - an integer between 0 and 59
seconds - an integer between 0 and 59
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

setYear
public void setYear(int year)
Sets the receiver's year. The first year is 1752 and the last year is 9999. If the specified year is not valid for the receiver's day and month, then it is ignored.
Parameters:
year - an integer between 1752 and 9999
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setDate(int, int, int)


org.eclipse.swt.widgets
Class Decorations
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.Composite
org.eclipse.swt.widgets.Canvas
org.eclipse.swt.widgets.Decorations
All Implemented Interfaces:
Drawable
Direct Known Subclasses:
Shell


public class Decorations extends Canvas
Instances of this class provide the appearance and behavior of Shells, but are not top level shells or dialogs. Class Shell shares a significant amount of code with this class, and is a subclass. IMPORTANT: This class was intended to be abstract and should never be referenced or instantiated. Instead, the class Shell should be used.
Instances are always displayed in one of the maximized, minimized or normal states:
When an instance is marked as maximized, the window manager will typically resize it to fill the entire visible area of the display, and the instance is usually put in a state where it can not be resized (even if it has style RESIZE) until it is no longer maximized.
When an instance is in the normal state (neither maximized or minimized), its appearance is controlled by the style constants which were specified when it was created and the restrictions of the window manager (see below).
When an instance has been marked as minimized, its contents (client area) will usually not be visible, and depending on the window manager, it may be "iconified" (that is, replaced on the desktop by a small simplified representation of itself), relocated to a distinguished area of the screen, or hidden. Combinations of these changes are also possible.
Note: The styles supported by this class must be treated as HINTs, since.  the window manager for the desktop on which the instance is visible has ultimate control over the appearance and behavior of decorations. For example, some window managers only support resizable windows and will always assume the RESIZE style, even if it is not set.
Styles:
BORDER, CLOSE, MIN, MAX, NO_TRIM, RESIZE, TITLE, ON_TOP, TOOL
Events:
(none)
Class SWT provides two "convenience constants" for the most commonly required style combinations:
SHELL_TRIM
the result of combining the constants which are required to produce a typical application top level shell: (that is, CLOSE | TITLE | MIN | MAX | RESIZE)
DIALOG_TRIM
the result of combining the constants which are required to produce a typical application dialog shell: (that is, TITLE | CLOSE | BORDER)
IMPORTANT: This class is intended to be subclassed only within the SWT implementation.
See Also:
getMinimized(), getMaximized(), Shell, SWT, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Decorations(Composite parent,            int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
protected void  checkSubclass()
Checks that this class can be subclassed.
void    dispose()
Disposes of the operating system resources associated with the receiver and all its descendants.
Button  getDefaultButton()
Returns the receiver's default button if one had previously been set, otherwise returns null.
Image   getImage()
Returns the receiver's image if it had previously been set using setImage().
Image[] getImages()
Returns the receiver's images if they had previously been set using setImages().
boolean getMaximized()
Returns true if the receiver is currently maximized, and false otherwise.
Menu    getMenuBar()
Returns the receiver's menu bar if one had previously been set, otherwise returns null.
boolean getMinimized()
Returns true if the receiver is currently minimized, and false otherwise.
java.lang.String    getText()
Returns the receiver's text, which is the string that the window manager will typically display as the receiver's title.
boolean isReparentable()
Returns true if the underlying operating system supports this reparenting, otherwise false
void    setDefaultButton(Button button)
If the argument is not null, sets the receiver's default button to the argument, and if the argument is null, sets the receiver's default button to the first button which was set as the receiver's default button (called the saved default button).
void    setImage(Image image)
Sets the receiver's image to the argument, which may be null.
void    setImages(Image[] images)
Sets the receiver's images to the argument, which may be an empty array.
void    setMaximized(boolean maximized)
Sets the maximized state of the receiver.
void    setMenuBar(Menu menu)
Sets the receiver's menu bar to the argument, which may be null.
void    setMinimized(boolean minimized)
Sets the minimized stated of the receiver.
void    setOrientation(int orientation)
Sets the orientation of the receiver, which must be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
void    setText(java.lang.String string)
Sets the receiver's text, which is the string that the window manager will typically display as the receiver's title, to the argument, which must not be null.
void    setVisible(boolean visible)
Marks the receiver as visible if the argument is true, and marks it invisible otherwise.

Methods inherited from class org.eclipse.swt.widgets.Canvas
drawBackground, getCaret, getIME, scroll, setCaret, setFont, setIME

Methods inherited from class org.eclipse.swt.widgets.Composite
changed, drawBackground, getBackgroundMode, getChildren, getLayout, getLayoutDeferred, getTabList, isLayoutDeferred, layout, layout, layout, layout, layout, setBackgroundMode, setFocus, setLayout, setLayoutDeferred, setTabList

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setForeground, setLayoutData, setLocation, setLocation, setMenu, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

Decorations
public Decorations(Composite parent,
                   int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.BORDER, SWT.CLOSE, SWT.MIN, SWT.MAX, SWT.RESIZE, SWT.TITLE, SWT.NO_TRIM, SWT.NO_MOVE, SWT.SHELL_TRIM, SWT.DIALOG_TRIM, SWT.ON_TOP, SWT.TOOL, Widget.checkSubclass(), Widget.getStyle()

Method Detail

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Composite

dispose
public void dispose()
Description copied from class: Widget
Disposes of the operating system resources associated with the receiver and all its descendants. After this method has been invoked, the receiver and all descendants will answer true when sent the message isDisposed(). Any internal connections between the widgets in the tree will have been removed to facilitate garbage collection. This method does nothing if the widget is already disposed. NOTE: This method is not called recursively on the descendants of the receiver. This means that, widget implementers can not detect when a widget is being disposed of by re-implementing this method, but should instead listen for the Dispose event.
Overrides:
dispose in class Widget
See Also:
Widget.addDisposeListener(org.eclipse.swt.events.DisposeListener), Widget.removeDisposeListener(org.eclipse.swt.events.DisposeListener), Widget.checkWidget()

getDefaultButton
public Button getDefaultButton()
Returns the receiver's default button if one had previously been set, otherwise returns null.
Returns:
the default button or null
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setDefaultButton(Button)

getImage
public Image getImage()
Returns the receiver's image if it had previously been set using setImage(). The image is typically displayed by the window manager when the instance is marked as iconified, and may also be displayed somewhere in the trim when the instance is in normal or maximized states. Note: This method will return null if called before setImage() is called. It does not provide access to a window manager provided, "default" image even if one exists.
Returns:
the image
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getImages
public Image[] getImages()
Returns the receiver's images if they had previously been set using setImages(). Images are typically displayed by the window manager when the instance is marked as iconified, and may also be displayed somewhere in the trim when the instance is in normal or maximized states. Depending where the icon is displayed, the platform chooses the icon with the "best" attributes. It is expected that the array will contain the same icon rendered at different sizes, with different depth and transparency attributes. Note: This method will return an empty array if called before setImages() is called. It does not provide access to a window manager provided, "default" image even if one exists.
Returns:
the images
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

getMaximized
public boolean getMaximized()
Returns true if the receiver is currently maximized, and false otherwise.
Returns:
the maximized state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setMaximized(boolean)

getMenuBar
public Menu getMenuBar()
Returns the receiver's menu bar if one had previously been set, otherwise returns null.
Returns:
the menu bar or null
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMinimized
public boolean getMinimized()
Returns true if the receiver is currently minimized, and false otherwise.
Returns:
the minimized state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setMinimized(boolean)

getText
public java.lang.String getText()
Returns the receiver's text, which is the string that the window manager will typically display as the receiver's title. If the text has not previously been set, returns an empty string.
Returns:
the text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

isReparentable
public boolean isReparentable()
Description copied from class: Control
Returns true if the underlying operating system supports this reparenting, otherwise false
Overrides:
isReparentable in class Control
Returns:
true if the widget can be reparented, otherwise false

setDefaultButton
public void setDefaultButton(Button button)
If the argument is not null, sets the receiver's default button to the argument, and if the argument is null, sets the receiver's default button to the first button which was set as the receiver's default button (called the saved default button). If no default button had previously been set, or the saved default button was disposed, the receiver's default button will be set to null. The default button is the button that is selected when the receiver is active and the user presses ENTER.
Parameters:
button - the new default button
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the button has been disposed
ERROR_INVALID_PARENT - if the control is not in the same widget tree
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setImage
public void setImage(Image image)
Sets the receiver's image to the argument, which may be null. The image is typically displayed by the window manager when the instance is marked as iconified, and may also be displayed somewhere in the trim when the instance is in normal or maximized states.
Parameters:
image - the new image (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the image has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setImages
public void setImages(Image[] images)
Sets the receiver's images to the argument, which may be an empty array. Images are typically displayed by the window manager when the instance is marked as iconified, and may also be displayed somewhere in the trim when the instance is in normal or maximized states. Depending where the icon is displayed, the platform chooses the icon with the "best" attributes. It is expected that the array will contain the same icon rendered at different sizes, with different depth and transparency attributes.
Parameters:
images - the new image array
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the array of images is null
ERROR_INVALID_ARGUMENT - if one of the images is null or has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

setMaximized
public void setMaximized(boolean maximized)
Sets the maximized state of the receiver. If the argument is true causes the receiver to switch to the maximized state, and if the argument is false and the receiver was previously maximized, causes the receiver to switch back to either the minimized or normal states. Note: The result of intermixing calls to setMaximized(true) and setMinimized(true) will vary by platform. Typically, the behavior will match the platform user's expectations, but not always. This should be avoided if possible.
Parameters:
maximized - the new maximized state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setMinimized(boolean)

setMenuBar
public void setMenuBar(Menu menu)
Sets the receiver's menu bar to the argument, which may be null.
Parameters:
menu - the new menu bar
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the menu has been disposed
ERROR_INVALID_PARENT - if the menu is not in the same widget tree
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMinimized
public void setMinimized(boolean minimized)
Sets the minimized stated of the receiver. If the argument is true causes the receiver to switch to the minimized state, and if the argument is false and the receiver was previously minimized, causes the receiver to switch back to either the maximized or normal states. Note: The result of intermixing calls to setMaximized(true) and setMinimized(true) will vary by platform. Typically, the behavior will match the platform user's expectations, but not always. This should be avoided if possible.
Parameters:
minimized - the new maximized state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setMaximized(boolean)

setOrientation
public void setOrientation(int orientation)
Description copied from class: Control
Sets the orientation of the receiver, which must be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
Overrides:
setOrientation in class Control
Parameters:
orientation - new orientation style

setText
public void setText(java.lang.String string)
Sets the receiver's text, which is the string that the window manager will typically display as the receiver's title, to the argument, which must not be null. Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Parameters:
string - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setVisible
public void setVisible(boolean visible)
Description copied from class: Control
Marks the receiver as visible if the argument is true, and marks it invisible otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, marking it visible may not actually cause it to be displayed.
Overrides:
setVisible in class Control
Parameters:
visible - the new visibility state


org.eclipse.swt.internal
Class DefaultExceptionHandler
java.lang.Object
org.eclipse.swt.internal.DefaultExceptionHandler


public class DefaultExceptionHandler extends java.lang.Object

Field Summary
Fields

Modifier and Type   Field and Description
static java.util.function.Consumer<java.lang.Error> RUNTIME_ERROR_HANDLER
static java.util.function.Consumer<java.lang.RuntimeException>  RUNTIME_EXCEPTION_HANDLER

Constructor Summary
Constructors

Constructor and Description
DefaultExceptionHandler()

Method Summary

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Field Detail

RUNTIME_EXCEPTION_HANDLER
public static final java.util.function.Consumer<java.lang.RuntimeException> RUNTIME_EXCEPTION_HANDLER

RUNTIME_ERROR_HANDLER
public static final java.util.function.Consumer<java.lang.Error> RUNTIME_ERROR_HANDLER

Constructor Detail

DefaultExceptionHandler
public DefaultExceptionHandler()


org.eclipse.swt.graphics
Class Device
java.lang.Object
org.eclipse.swt.graphics.Device
All Implemented Interfaces:
Drawable
Direct Known Subclasses:
Display


public abstract class Device extends java.lang.Object implements Drawable
This class is the abstract superclass of all device objects, such as the Display device and the Printer device. Devices can have a graphics context (GC) created for them, and they can be drawn on by sending messages to the associated GC.
See Also:
Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
protected static Device CurrentDevice
static boolean  DEBUG
protected static java.lang.Runnable DeviceFinder
long    hPalette
Palette (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.

Constructor Summary
Constructors

Constructor and Description
Device()
Constructs a new instance of this class.
Device(DeviceData data)
Constructs a new instance of this class.

Method Summary
All Methods Instance Methods Abstract Methods Concrete Methods

Modifier and Type   Method and Description
protected void  checkDevice()
Throws an SWTException if the receiver can not be accessed by the caller.
protected void  create(DeviceData data)
Creates the device in the operating system.
protected void  destroy()
Destroys the device in the operating system and releases the device's handle.
void    dispose()
Disposes of the operating system resources associated with the receiver.
Rectangle   getBounds()
Returns a rectangle describing the receiver's size and location.
Rectangle   getClientArea()
Returns a rectangle which describes the area of the receiver which is capable of displaying data.
int getDepth()
Returns the bit depth of the screen, which is the number of bits it takes to represent the number of unique colors that the screen is currently capable of displaying.
DeviceData  getDeviceData()
Returns a DeviceData based on the receiver.
protected int   getDeviceZoom()
Gets the scaling factor from the device and calculates the zoom level.
Point   getDPI()
Returns a point whose x coordinate is the horizontal dots per inch of the display, and whose y coordinate is the vertical dots per inch of the display.
FontData[]  getFontList(java.lang.String faceNa me,            boolean scalable)
Returns FontData objects which describe the fonts that match the given arguments.
Color   getSystemColor(int id)
Returns the matching standard color for the given constant, which should be one of the color constants specified in class SWT.
Font    getSystemFont()
Returns a reasonable font for applications to use.
boolean getWarnings()
Returns true if the underlying window system prints out warning messages on the console, and setWarnings had previously been called with true.
protected void  init()
Initializes any internal resources needed by the device.
abstract void   internal_dispose_GC(long hDC,               GCData data)
Invokes platform specific functionality to dispose a GC handle.
abstract long   internal_new_GC(GCData data)
Invokes platform specific functionality to allocate a new GC handle.
boolean isDisposed()
Returns true if the device has been disposed, and false otherwise.
boolean loadFont(java.lang.String path)
Loads the font specified by a file.
protected void  release()
Releases any internal resources back to the operating system and clears all fields except the device handle.
void    setWarnings(boolean warnings)
If the underlying window system supports printing warning messages to the console, setting warnings to false prevents these messages from being printed.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Field Detail

DEBUG
public static boolean DEBUG

hPalette
public long hPalette
Palette (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

CurrentDevice
protected static Device CurrentDevice

DeviceFinder
protected static java.lang.Runnable DeviceFinder

Constructor Detail

Device
public Device()
Constructs a new instance of this class. You must dispose the device when it is no longer required.
since. :
3.1
See Also:
create(org.eclipse.swt.graphics.DeviceData), init()

Device
public Device(DeviceData data)
Constructs a new instance of this class. You must dispose the device when it is no longer required.
Parameters:
data - the DeviceData which describes the receiver
See Also:
create(org.eclipse.swt.graphics.DeviceData), init(), DeviceData

Method Detail

checkDevice
protected void checkDevice()
Throws an SWTException if the receiver can not be accessed by the caller. This may include both checks on the state of the receiver and more generally on the entire execution context. This method should be called by device implementors to enforce the standard SWT invariants. Currently, it is an error to invoke any method (other than isDisposed() and dispose()) on a device that has had its dispose() method called.
In future releases of SWT, there may be more or fewer error checks and exceptions may be thrown for different reasons.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed

create
protected void create(DeviceData data)
Creates the device in the operating system. If the device does not have a handle, this method may do nothing depending on the device. This method is called before init.
Subclasses are supposed to reimplement this method and not call the super implementation.
Parameters:
data - the DeviceData which describes the receiver
See Also:
init()

destroy
protected void destroy()
Destroys the device in the operating system and releases the device's handle. If the device does not have a handle, this method may do nothing depending on the device. This method is called after release.
Subclasses are supposed to reimplement this method and not call the super implementation.
See Also:
dispose(), release()

dispose
public void dispose()
Disposes of the operating system resources associated with the receiver. After this method has been invoked, the receiver will answer true when sent the message isDisposed().
See Also:
release(), destroy(), checkDevice()

getBounds
public Rectangle getBounds()
Returns a rectangle describing the receiver's size and location.
Returns:
the bounding rectangle
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getDeviceData
public DeviceData getDeviceData()
Returns a DeviceData based on the receiver. Modifications made to this DeviceData will not affect the receiver.
Returns:
a DeviceData containing the device's data and attributes
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
DeviceData

getClientArea
public Rectangle getClientArea()
Returns a rectangle which describes the area of the receiver which is capable of displaying data.
Returns:
the client area
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
getBounds()

getDepth
public int getDepth()
Returns the bit depth of the screen, which is the number of bits it takes to represent the number of unique colors that the screen is currently capable of displaying. This number will typically be one of 1, 8, 15, 16, 24 or 32.
Returns:
the depth of the screen
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getDPI
public Point getDPI()
Returns a point whose x coordinate is the horizontal dots per inch of the display, and whose y coordinate is the vertical dots per inch of the display.
Returns:
the horizontal and vertical DPI
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getFontList
public FontData[] getFontList(java.lang.String faceName,
                              boolean scalable)
Returns FontData objects which describe the fonts that match the given arguments. If the faceName is null, all fonts will be returned.
Parameters:
faceName - the name of the font to look for, or null
scalable - if true only scalable fonts are returned, otherwise only non-scalable fonts are returned.
Returns:
the matching font data
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getSystemColor
public Color getSystemColor(int id)
Returns the matching standard color for the given constant, which should be one of the color constants specified in class SWT. Any value other than one of the SWT color constants which is passed in will result in the color black. This color should not be freed because it was allocated by the system, not the application.
Parameters:
id - the color constant
Returns:
the matching color
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
SWT

getSystemFont
public Font getSystemFont()
Returns a reasonable font for applications to use. On some platforms, this will match the "default font" or "system font" if such can be found. This font should not be freed because it was allocated by the system, not the application. Typically, applications which want the default look should simply not set the font on the widgets they create. Widgets are always created with the correct default font for the class of user-interface component they represent.
Returns:
a font
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getWarnings
public boolean getWarnings()
Returns true if the underlying window system prints out warning messages on the console, and setWarnings had previously been called with true.
Returns:
trueif warnings are being handled, and false otherwise
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

init
protected void init()
Initializes any internal resources needed by the device. This method is called after create.
If subclasses reimplement this method, they must call the super implementation.
See Also:
create(org.eclipse.swt.graphics.DeviceData)

internal_new_GC
public abstract long internal_new_GC(GCData data)
Invokes platform specific functionality to allocate a new GC handle. IMPORTANT: This method is not part of the public API for Device. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Specified by:
internal_new_GC in interface Drawable
Parameters:
data - the platform specific GC data
Returns:
the platform specific GC handle

internal_dispose_GC
public abstract void internal_dispose_GC(long hDC,
                                         GCData data)
Invokes platform specific functionality to dispose a GC handle. IMPORTANT: This method is not part of the public API for Device. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Specified by:
internal_dispose_GC in interface Drawable
Parameters:
hDC - the platform specific GC handle
data - the platform specific GC data

isDisposed
public boolean isDisposed()
Returns true if the device has been disposed, and false otherwise. This method gets the dispose state for the device. When a device has been disposed, it is an error to invoke any other method using the device.
Returns:
true when the device is disposed and false otherwise

loadFont
public boolean loadFont(java.lang.String path)
Loads the font specified by a file. The font will be present in the list of fonts available to the application.
Parameters:
path - the font file path
Returns:
whether the font was successfully loaded
Throws:
SWTException -
ERROR_NULL_ARGUMENT - if path is null
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.3
See Also:
Font

release
protected void release()
Releases any internal resources back to the operating system and clears all fields except the device handle. When a device is destroyed, resources that were acquired on behalf of the programmer need to be returned to the operating system. For example, if the device allocated a font to be used as the system font, this font would be freed in release. Also,to assist the garbage collector and minimize the amount of memory that is not reclaimed when the programmer keeps a reference to a disposed device, all fields except the handle are zero'd. The handle is needed by destroy.
This method is called before destroy. If subclasses reimplement this method, they must call the super implementation.
See Also:
dispose(), destroy()

setWarnings
public void setWarnings(boolean warnings)
If the underlying window system supports printing warning messages to the console, setting warnings to false prevents these messages from being printed. If the argument is true then message printing is not blocked.
Parameters:
warnings - trueif warnings should be printed, and false otherwise
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getDeviceZoom
protected int getDeviceZoom()
Gets the scaling factor from the device and calculates the zoom level.
Returns:
zoom in percentage
since. :
3.105


org.eclipse.swt.graphics
Class DeviceData
java.lang.Object
org.eclipse.swt.graphics.DeviceData


public class DeviceData extends java.lang.Object

Field Summary
Fields

Modifier and Type   Field and Description
boolean debug
java.lang.Error[]   errors
java.lang.Object[]  objects
boolean tracking

Constructor Summary
Constructors

Constructor and Description
DeviceData()

Method Summary

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Field Detail

debug
public boolean debug

tracking
public boolean tracking

errors
public java.lang.Error[] errors

objects
public java.lang.Object[] objects

Constructor Detail

DeviceData
public DeviceData()


org.eclipse.swt.widgets
Class Dialog
java.lang.Object
org.eclipse.swt.widgets.Dialog
Direct Known Subclasses:
ColorDialog, DirectoryDialog, FileDialog, FontDialog, MessageBox


public abstract class Dialog extends java.lang.Object
This class is the abstract superclass of the classes that represent the built in platform dialogs. A Dialog typically contains other widgets that are not accessible. A Dialog is not a Widget. This class can also be used as the abstract superclass for user-designed dialogs. Such dialogs usually consist of a Shell with child widgets. The basic template for a user-defined dialog typically looks something like this:
 public class MyDialog extends Dialog {
        Object result;

        public MyDialog (Shell parent, int style) {
                super (parent, style);
        }
        public MyDialog (Shell parent) {
                this (parent, 0); // your default style bits go here (not the Shell's style bits)
        }
        public Object open () {
                Shell parent = getParent();
                Shell shell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
                shell.setText(getText());
                // Your code goes here (widget creation, set result, etc).
                shell.open();
                Display display = parent.getDisplay();
                while (!shell.isDisposed()) {
                        if (!display.readAndDispatch()) display.sleep();
                }
                return result;
        }
 }
Note: The modality styles supported by this class are treated as HINTs, because not all are supported by every subclass on every platform. If a modality style is not supported, it is "upgraded" to a more restrictive modality style that is supported. For example, if PRIMARY_MODAL is not supported by a particular dialog, it would be upgraded to APPLICATION_MODAL. In addition, as is the case for shells, the window manager for the desktop on which the instance is visible has ultimate control over the appearance and behavior of the instance, including its modality.
Styles:
APPLICATION_MODAL, PRIMARY_MODAL, SYSTEM_MODAL, SHEET
Events:
(none)
Note: Only one of the styles APPLICATION_MODAL, PRIMARY_MODAL, and SYSTEM_MODAL may be specified.
See Also:
Shell, SWT Example: ControlExample, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
Dialog(Shell parent)
Constructs a new instance of this class given only its parent.
Dialog(Shell parent,       int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
protected void  checkSubclass()
Checks that this class can be subclassed.
Shell   getParent()
Returns the receiver's parent, which must be a Shell or null.
int getStyle()
Returns the receiver's style information.
java.lang.String    getText()
Returns the receiver's text, which is the string that the window manager will typically display as the receiver's title.
void    setText(java.lang.String string)
Sets the receiver's text, which is the string that the window manager will typically display as the receiver's title, to the argument, which must not be null.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

Dialog
public Dialog(Shell parent)
Constructs a new instance of this class given only its parent.
Parameters:
parent - a shell which will be the parent of the new instance
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent

Dialog
public Dialog(Shell parent,
              int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a shell which will be the parent of the new instance
style - the style of dialog to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
See Also:
SWT.PRIMARY_MODAL, SWT.APPLICATION_MODAL, SWT.SYSTEM_MODAL

Method Detail

checkSubclass
protected void checkSubclass()
Checks that this class can be subclassed. IMPORTANT: See the comment in Widget.checkSubclass().
Throws:
SWTException -
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
Widget.checkSubclass()

getParent
public Shell getParent()
Returns the receiver's parent, which must be a Shell or null.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getStyle
public int getStyle()
Returns the receiver's style information. Note that, the value which is returned by this method may not match the value which was provided to the constructor when the receiver was created.
Returns:
the style bits
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getText
public java.lang.String getText()
Returns the receiver's text, which is the string that the window manager will typically display as the receiver's title. If the text has not previously been set, returns an empty string.
Returns:
the text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setText
public void setText(java.lang.String string)
Sets the receiver's text, which is the string that the window manager will typically display as the receiver's title, to the argument, which must not be null.
Parameters:
string - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class DirectoryDialog
java.lang.Object
org.eclipse.swt.widgets.Dialog
org.eclipse.swt.widgets.DirectoryDialog


public class DirectoryDialog extends Dialog
Instances of this class allow the user to navigate the file system and select a directory.
Styles:
(none)
Events:
(none)
IMPORTANT: This class is not intended to be subclassed.
See Also:
DirectoryDialog snippets, SWT Example: ControlExample, Dialog tab, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
DirectoryDialog(Shell parent)
Constructs a new instance of this class given only its parent.
DirectoryDialog(Shell parent,                int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    getFilterPath()
Returns the path which the dialog will use to filter the directories it shows.
java.lang.String    getMessage()
Returns the dialog's message, which is a description of the purpose for which it was opened.
java.lang.String    open()
Makes the dialog visible and brings it to the front of the display.
void    setFilterPath(java.lang.String stri ng)
Sets the path that the dialog will use to filter the directories it shows to the argument, which may be null.
void    setMessage(java.lang.String string)
Sets the dialog's message, which is a description of the purpose for which it was opened.

Methods inherited from class org.eclipse.swt.widgets.Dialog
checkSubclass, getParent, getStyle, getText, setText

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

DirectoryDialog
public DirectoryDialog(Shell parent)
Constructs a new instance of this class given only its parent.
Parameters:
parent - a shell which will be the parent of the new instance
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass

DirectoryDialog
public DirectoryDialog(Shell parent,
                       int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a shell which will be the parent of the new instance
style - the style of dialog to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass

Method Detail

getFilterPath
public java.lang.String getFilterPath()
Returns the path which the dialog will use to filter the directories it shows.
Returns:
the filter path
See Also:
setFilterPath(java.lang.String)

getMessage
public java.lang.String getMessage()
Returns the dialog's message, which is a description of the purpose for which it was opened. This message will be visible on the dialog while it is open.
Returns:
the message

open
public java.lang.String open()
Makes the dialog visible and brings it to the front of the display.
Returns:
a string describing the absolute path of the selected directory, or null if the dialog was cancelled or an error occurred
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the dialog has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the dialog

setFilterPath
public void setFilterPath(java.lang.String string)
Sets the path that the dialog will use to filter the directories it shows to the argument, which may be null. If the string is null, then the operating system's default filter path will be used. Note that the path string is platform dependent. For convenience, either '/' or '\' can be used as a path separator.
Parameters:
string - the filter path

setMessage
public void setMessage(java.lang.String string)
Sets the dialog's message, which is a description of the purpose for which it was opened. This message will be visible on the dialog while it is open.
Parameters:
string - the message
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null


org.eclipse.swt.widgets
Class Display
java.lang.Object
org.eclipse.swt.graphics.Device
org.eclipse.swt.widgets.Display
All Implemented Interfaces:
Drawable


public class Display extends Device
Instances of this class are responsible for managing the connection between SWT and the underlying operating system. Their most important function is to implement the SWT event loop in terms of the platform event model. They also provide various methods for accessing information about the operating system, and have overall control over the operating system resources which SWT allocates. Applications which are built with SWT will almost always require only a single display. In particular, some platforms which SWT supports will not allow more than one active display. In other words, some platforms do not support creating a new display if one already exists that has not been sent the dispose() message.
In SWT, the thread which creates a Display instance is distinguished as the user-interface thread for that display.
The user-interface thread for a particular display has the following special attributes:
The event loop for that display must be run from the thread.
Some SWT API methods (notably, most of the public methods in Widget and its subclasses), may only be called from the thread. (To support multi-threaded user-interface applications, class Display provides inter-thread communication methods which allow threads other than the user-interface thread to request that it perform operations on their behalf.)
The thread is not allowed to construct other Displays until that display has been disposed. (Note that, this is in addition to the restriction mentioned above concerning platform support for multiple displays. Thus, the only way to have multiple simultaneously active displays, even on platforms which support it, is to have multiple threads.)
Enforcing these attributes allows SWT to be implemented directly on the underlying operating system's event model. This has numerous benefits including smaller footprint, better use of resources, safer memory management, clearer program logic, better performance, and fewer overall operating system threads required. The down side however, is that care must be taken (only) when constructing multi-threaded applications to use the inter-thread communication mechanisms which this class provides when required. All SWT API methods which may only be called from the user-interface thread are distinguished in their documentation by indicating that they throw the "ERROR_THREAD_INVALID_ACCESS" SWT exception.
Styles:
(none)
Events:
Close, Dispose, OpenDocument, Settings, Skin
IMPORTANT: This class is not intended to be subclassed.
See Also:
syncExec(java.lang.Runnable), asyncExec(java.lang.Runnable), wake(), readAndDispatch(), sleep(), Device.dispose(), Display snippets, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
MSG msg
the handle to the OS message queue (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.

Fields inherited from class org.eclipse.swt.graphics.Device
CurrentDevice, DEBUG, DeviceFinder, hPalette

Constructor Summary
Constructors

Constructor and Description
Display()
Constructs a new instance of this class.
Display(DeviceData data)
Constructs a new instance of this class using the parameter.

Method Summary
All Methods Static Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addFilter(int eventType,          L istener listener)
Adds the listener to the collection of listeners who will be notified when an event of the given type occurs anywhere in a widget.
void    addListener(int eventType,    Listener listener)
Adds the listener to the collection of listeners who will be notified when an event of the given type occurs.
void    asyncExec(java.lang.Runnable runnab le)
Causes the run() method of the runnable to be invoked by the user-interface thread at the next reasonable opportunity.
void    beep()
Causes the system hardware to emit a short sound (if it supports this capability).
protected void  checkDevice()
Throws an SWTException if the receiver can not be accessed by the caller.
protected void  checkSubclass()
Checks that this class can be subclassed.
void    close()
Requests that the connection between SWT and the underlying operating system be closed.
protected void  create(DeviceData data)
Creates the device in the operating system.
protected void  destroy()
Destroys the device in the operating system and releases the device's handle.
void    disposeExec(java.lang.Runnable runn able)
Causes the run() method of the runnable to be invoked by the user-interface thread just before the receiver is disposed.
static Display  findDisplay(java.lang.Thread thread )
Returns the display which the given thread is the user-interface thread for, or null if the given thread is not a user-interface thread for any display.
Widget  findWidget(long handle)
Given the operating system handle for a widget, returns the instance of the Widget subclass which represents it in the currently running application, if such exists, or null if no matching widget can be found.
Widget  findWidget(long handle,           l ong id)
Given the operating system handle for a widget, and widget-specific id, returns the instance of the Widget subclass which represents the handle/id pair in the currently running application, if such exists, or null if no matching widget can be found.
Widget  findWidget(Widget widget,  long id)
Given a widget and a widget-specific id, returns the instance of the Widget subclass which represents the widget/id pair in the currently running application, if such exists, or null if no matching widget can be found.
Shell   getActiveShell()
Returns the currently active Shell, or null if no shell belonging to the currently running application is active.
static java.lang.String getAppName()
Returns the application name.
static java.lang.String getAppVersion()
Returns the application version.
Rectangle   getBounds()
Returns a rectangle describing the receiver's size and location.
Rectangle   getClientArea()
Returns a rectangle which describes the area of the receiver which is capable of displaying data.
static Display  getCurrent()
Returns the display which the currently running thread is the user-interface thread for, or null if the currently running thread is not a user-interface thread for any display.
Control getCursorControl()
Returns the control which the on-screen pointer is currently over top of, or null if it is not currently over one of the controls built by the currently running application.
Point   getCursorLocation()
Returns the location of the on-screen pointer relative to the top left corner of the screen.
Point[] getCursorSizes()
Returns an array containing the recommended cursor sizes.
java.lang.Object    getData()
Returns the application defined, display specific data associated with the receiver, or null if it has not been set.
java.lang.Object    getData(java.lang.String key)
Returns the application defined property of the receiver with the specified name, or null if it has not been set.
static Display  getDefault()
Returns the default display.
int getDismissalAlignment()
Returns the button dismissal alignment, one of LEFT or RIGHT.
int getDoubleClickTime()
Returns the longest duration, in milliseconds, between two mouse button clicks that will be considered a double click by the underlying operating system.
java.util.function.Consumer<java.la ng.Error>   getErrorHandler()
Returns the current exception handler.
Control getFocusControl()
Returns the control which currently has keyboard focus, or null if keyboard events are not currently going to any of the controls built by the currently running application.
boolean getHighContrast()
Returns true when the high contrast mode is enabled.
int getIconDepth()
Returns the maximum allowed depth of icons on this display, in bits per pixel.
Point[] getIconSizes()
Returns an array containing the recommended icon sizes.
Menu    getMenuBar()
Returns the single instance of the application menu bar, or null if there is no application menu bar for the platform.
Monitor[]   getMonitors()
Returns an array of monitors attached to the device.
Monitor getPrimaryMonitor()
Returns the primary monitor for that device.
java.util.function.Consumer<java.la ng.RuntimeException>    getRuntimeExceptionHandler()
Returns the current exception handler.
Shell[] getShells()
Returns a (possibly empty) array containing all shells which have not been disposed and have the receiver as their display.
Synchronizer    getSynchronizer()
Gets the synchronizer used by the display.
java.lang.Thread    getSyncThread()
Returns the thread that has invoked syncExec or null if no such runnable is currently being invoked by the user-interface thread.
Color   getSystemColor(int id)
Returns the matching standard color for the given constant, which should be one of the color constants specified in class SWT.
Cursor  getSystemCursor(int id)
Returns the matching standard platform cursor for the given constant, which should be one of the cursor constants specified in class SWT.
Font    getSystemFont()
Returns a reasonable font for applications to use.
Image   getSystemImage(int id)
Returns the matching standard platform image for the given constant, which should be one of the icon constants specified in class SWT.
Menu    getSystemMenu()
Returns the single instance of the system-provided menu for the application, or null on platforms where no menu is provided for the application.
TaskBar getSystemTaskBar()
Returns the single instance of the system taskBar or null when there is no system taskBar available for the platform.
Tray    getSystemTray()
Returns the single instance of the system tray or null when there is no system tray available for the platform.
java.lang.Thread    getThread()
Returns the user-interface thread for the receiver.
boolean getTouchEnabled()
Returns a boolean indicating whether a touch-aware input device is attached to the system and is ready for use.
protected void  init()
Initializes any internal resources needed by the device.
void    internal_dispose_GC(long hDC,               GCData data)
Invokes platform specific functionality to dispose a GC handle.
long    internal_new_GC(GCData data)
Invokes platform specific functionality to allocate a new GC handle.
Point   map(Control from,    Control to,  int x,    int y)
Maps a point from one coordinate system to another.
Rectangle   map(Control from,    Control to,  int x,    int y,    int width,    i nt height)
Maps a point from one coordinate system to another.
Point   map(Control from,    Control to,  Point point)
Maps a point from one coordinate system to another.
Rectangle   map(Control from,    Control to,  Rectangle rectangle)
Maps a point from one coordinate system to another.
boolean post(Event event)
Generate a low level system event.
boolean readAndDispatch()
Reads an event from the operating system's event queue, dispatches it appropriately, and returns true if there is potentially more work to do, or false if the caller can sleep until another event is placed on the event queue.
protected void  release()
Releases any internal resources back to the operating system and clears all fields except the device handle.
void    removeFilter(int eventType,      Listener listener)
Removes the listener from the collection of listeners who will be notified when an event of the given type occurs anywhere in a widget.
void    removeListener(int eventType,          Listener listener)
Removes the listener from the collection of listeners who will be notified when an event of the given type occurs.
void    sendPostExternalEventDispatchEvent( )
Sends a SWT.PostExternalEventDispatch event.
void    sendPreExternalEventDispatchEvent()
Sends a SWT.PreExternalEventDispatch event.
static void setAppName(java.lang.String name)
Sets the application name to the argument.
static void setAppVersion(java.lang.String vers ion)
Sets the application version to the argument.
void    setCursorLocation(int x,        int y)
Sets the location of the on-screen pointer relative to the top left corner of the screen.
void    setCursorLocation(Point point)
Sets the location of the on-screen pointer relative to the top left corner of the screen.
void    setData(java.lang.Object data)
Sets the application defined, display specific data associated with the receiver, to the argument.
void    setData(java.lang.String key,   java.lang.Object value)
Sets the application defined property of the receiver with the specified name to the given argument.
void    setErrorHandler(java.util.function. Consumer<java.lang.Error> errorHandl er)
Sets a callback that will be invoked whenever an error is thrown by a listener or external callback function.
void    setRuntimeExceptionHandler(java.uti l.function.Consumer<java.lang.Runtim eException> runtimeExceptionHandler)
Sets a callback that will be invoked whenever an exception is thrown by a listener or external callback function.
void    setSynchronizer(Synchronizer synchr onizer)
Sets the synchronizer used by the display to be the argument, which can not be null.
boolean sleep()
Causes the user-interface thread to sleep (that is, to be put in a state where it does not consume CPU cycles) until an event is received or it is otherwise awakened.
void    syncExec(java.lang.Runnable runnabl e)
Causes the run() method of the runnable to be invoked by the user-interface thread at the next reasonable opportunity.
void    timerExec(int milliseconds,   java.lang.Runnable runnable)
Causes the run() method of the runnable to be invoked by the user-interface thread after the specified number of milliseconds have elapsed.
void    update()
Forces all outstanding paint requests for the display to be processed before this method returns.
void    wake()
If the receiver's user-interface thread was sleeping, causes it to be awakened and start running again.

Methods inherited from class org.eclipse.swt.graphics.Device
dispose, getDepth, getDeviceData, getDeviceZoom, getDPI, getFontList, getWarnings, isDisposed, loadFont, setWarnings

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Field Detail

msg
public MSG msg
the handle to the OS message queue (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

Constructor Detail

Display
public Display()
Constructs a new instance of this class. Note: The resulting display is marked as the current display. If this is the first display which has been constructed since.  the application started, it is also marked as the default display.
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if called from a thread that already created an existing display
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
getCurrent(), getDefault(), Widget.checkSubclass(), Shell

Display
public Display(DeviceData data)
Constructs a new instance of this class using the parameter.
Parameters:
data - the device data

Method Detail

addFilter
public void addFilter(int eventType,
                      Listener listener)
Adds the listener to the collection of listeners who will be notified when an event of the given type occurs anywhere in a widget. The event type is one of the event constants defined in class SWT. When the event does occur, the listener is notified by sending it the handleEvent() message. Setting the type of an event to SWT.None from within the handleEvent() method can be used to change the event type and stop subsequent Java listeners from running. Because event filters run before other listeners, event filters can both block other listeners and set arbitrary fields within an event. For this reason, event filters are both powerful and dangerous. They should generally be avoided for performance, debugging and code maintenance reasons.
Parameters:
eventType - the type of event to listen for
listener - the listener which should be notified when the event occurs
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.0
See Also:
Listener, SWT, removeFilter(int, org.eclipse.swt.widgets.Listener), removeListener(int, org.eclipse.swt.widgets.Listener)

addListener
public void addListener(int eventType,
                        Listener listener)
Adds the listener to the collection of listeners who will be notified when an event of the given type occurs. The event type is one of the event constants defined in class SWT. When the event does occur in the display, the listener is notified by sending it the handleEvent() message.
Parameters:
eventType - the type of event to listen for
listener - the listener which should be notified when the event occurs
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
2.0
See Also:
Listener, SWT, removeListener(int, org.eclipse.swt.widgets.Listener)

asyncExec
public void asyncExec(java.lang.Runnable runnable)
Causes the run() method of the runnable to be invoked by the user-interface thread at the next reasonable opportunity. The caller of this method continues to run in parallel, and is not notified when the runnable has completed. Specifying null as the runnable simply wakes the user-interface thread when run. Note that at the time the runnable is invoked, widgets that have the receiver as their display may have been disposed. Therefore, it is necessary to check for this case inside the runnable before accessing the widget.
Parameters:
runnable - code to run on the user-interface thread or null
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
syncExec(java.lang.Runnable)

beep
public void beep()
Causes the system hardware to emit a short sound (if it supports this capability).
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

checkSubclass
protected void checkSubclass()
Checks that this class can be subclassed. IMPORTANT: See the comment in Widget.checkSubclass().
Throws:
SWTException -
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
Widget.checkSubclass()

checkDevice
protected void checkDevice()
Description copied from class: Device
Throws an SWTException if the receiver can not be accessed by the caller. This may include both checks on the state of the receiver and more generally on the entire execution context. This method should be called by device implementors to enforce the standard SWT invariants. Currently, it is an error to invoke any method (other than isDisposed() and dispose()) on a device that has had its dispose() method called.
In future releases of SWT, there may be more or fewer error checks and exceptions may be thrown for different reasons.
Overrides:
checkDevice in class Device

close
public void close()
Requests that the connection between SWT and the underlying operating system be closed.
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
2.0
See Also:
Device.dispose()

create
protected void create(DeviceData data)
Creates the device in the operating system. If the device does not have a handle, this method may do nothing depending on the device. This method is called before init.
Overrides:
create in class Device
Parameters:
data - the DeviceData which describes the receiver
See Also:
init()

destroy
protected void destroy()
Destroys the device in the operating system and releases the device's handle. If the device does not have a handle, this method may do nothing depending on the device. This method is called after release.
Overrides:
destroy in class Device
See Also:
Device.dispose(), release()

disposeExec
public void disposeExec(java.lang.Runnable runnable)
Causes the run() method of the runnable to be invoked by the user-interface thread just before the receiver is disposed. Specifying a null runnable is ignored.
Parameters:
runnable - code to run at dispose time.
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

findWidget
public Widget findWidget(long handle)
Given the operating system handle for a widget, returns the instance of the Widget subclass which represents it in the currently running application, if such exists, or null if no matching widget can be found. IMPORTANT: This method should not be called from application code. The arguments are platform-specific.
Parameters:
handle - the handle for the widget
Returns:
the SWT widget that the handle represents
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

findWidget
public Widget findWidget(long handle,
                         long id)
Given the operating system handle for a widget, and widget-specific id, returns the instance of the Widget subclass which represents the handle/id pair in the currently running application, if such exists, or null if no matching widget can be found. IMPORTANT: This method should not be called from application code. The arguments are platform-specific.
Parameters:
handle - the handle for the widget
id - the id for the subwidget (usually an item)
Returns:
the SWT widget that the handle/id pair represents
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.1

findWidget
public Widget findWidget(Widget widget,
                         long id)
Given a widget and a widget-specific id, returns the instance of the Widget subclass which represents the widget/id pair in the currently running application, if such exists, or null if no matching widget can be found.
Parameters:
widget - the widget
id - the id for the subwidget (usually an item)
Returns:
the SWT subwidget (usually an item) that the widget/id pair represents
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.3

findDisplay
public static Display findDisplay(java.lang.Thread thread)
Returns the display which the given thread is the user-interface thread for, or null if the given thread is not a user-interface thread for any display. Specifying null as the thread will return null for the display.
Parameters:
thread - the user-interface thread
Returns:
the display for the given thread

getActiveShell
public Shell getActiveShell()
Returns the currently active Shell, or null if no shell belonging to the currently running application is active.
Returns:
the active shell or null
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getMenuBar
public Menu getMenuBar()
Returns the single instance of the application menu bar, or null if there is no application menu bar for the platform.
Returns:
the application menu bar, or null
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.7

getBounds
public Rectangle getBounds()
Returns a rectangle describing the receiver's size and location. Note that on multi-monitor systems the origin can be negative.
Overrides:
getBounds in class Device
Returns:
the bounding rectangle
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getCurrent
public static Display getCurrent()
Returns the display which the currently running thread is the user-interface thread for, or null if the currently running thread is not a user-interface thread for any display.
Returns:
the current display

getClientArea
public Rectangle getClientArea()
Returns a rectangle which describes the area of the receiver which is capable of displaying data.
Overrides:
getClientArea in class Device
Returns:
the client area
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
getBounds()

getCursorControl
public Control getCursorControl()
Returns the control which the on-screen pointer is currently over top of, or null if it is not currently over one of the controls built by the currently running application.
Returns:
the control under the cursor or null
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getCursorLocation
public Point getCursorLocation()
Returns the location of the on-screen pointer relative to the top left corner of the screen.
Returns:
the cursor location
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getCursorSizes
public Point[] getCursorSizes()
Returns an array containing the recommended cursor sizes.
Returns:
the array of cursor sizes
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.0

getDefault
public static Display getDefault()
Returns the default display. One is created (making the thread that invokes this method its user-interface thread) if it did not already exist.
Returns:
the default display

getData
public java.lang.Object getData(java.lang.String key)
Returns the application defined property of the receiver with the specified name, or null if it has not been set. Applications may have associated arbitrary objects with the receiver in this fashion. If the objects stored in the properties need to be notified when the display is disposed of, it is the application's responsibility to provide a disposeExec() handler which does so.
Parameters:
key - the name of the property
Returns:
the value of the property or null if it has not been set
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the key is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
setData(String, Object), disposeExec(Runnable)

getData
public java.lang.Object getData()
Returns the application defined, display specific data associated with the receiver, or null if it has not been set. The display specific data is a single, unnamed field that is stored with every display. Applications may put arbitrary objects in this field. If the object stored in the display specific data needs to be notified when the display is disposed of, it is the application's responsibility to provide a disposeExec() handler which does so.
Returns:
the display specific data
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
setData(Object), disposeExec(Runnable)

getDismissalAlignment
public int getDismissalAlignment()
Returns the button dismissal alignment, one of LEFT or RIGHT. The button dismissal alignment is the ordering that should be used when positioning the default dismissal button for a dialog. For example, in a dialog that contains an OK and CANCEL button, on platforms where the button dismissal alignment is LEFT, the button ordering should be OK/CANCEL. When button dismissal alignment is RIGHT, the button ordering should be CANCEL/OK.
Returns:
the button dismissal order
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
2.1

getDoubleClickTime
public int getDoubleClickTime()
Returns the longest duration, in milliseconds, between two mouse button clicks that will be considered a double click by the underlying operating system.
Returns:
the double click time
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getFocusControl
public Control getFocusControl()
Returns the control which currently has keyboard focus, or null if keyboard events are not currently going to any of the controls built by the currently running application.
Returns:
the focus control or null
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getHighContrast
public boolean getHighContrast()
Returns true when the high contrast mode is enabled. Otherwise, false is returned. Note: This operation is a hint and is not supported on platforms that do not have this concept.
Returns:
the high contrast mode
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.0

getIconDepth
public int getIconDepth()
Returns the maximum allowed depth of icons on this display, in bits per pixel. On some platforms, this may be different than the actual depth of the display.
Returns:
the maximum icon depth
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
Device.getDepth()

getIconSizes
public Point[] getIconSizes()
Returns an array containing the recommended icon sizes.
Returns:
the array of icon sizes
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.0
See Also:
Decorations.setImages(Image[])

getMonitors
public Monitor[] getMonitors()
Returns an array of monitors attached to the device.
Returns:
the array of monitors
since. :
3.0

getPrimaryMonitor
public Monitor getPrimaryMonitor()
Returns the primary monitor for that device.
Returns:
the primary monitor
since. :
3.0

getShells
public Shell[] getShells()
Returns a (possibly empty) array containing all shells which have not been disposed and have the receiver as their display.
Returns:
the receiver's shells
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getSynchronizer
public Synchronizer getSynchronizer()
Gets the synchronizer used by the display.
Returns:
the receiver's synchronizer
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.4

getSyncThread
public java.lang.Thread getSyncThread()
Returns the thread that has invoked syncExec or null if no such runnable is currently being invoked by the user-interface thread. Note: If a runnable invoked by asyncExec is currently running, this method will return null.
Returns:
the receiver's sync-interface thread
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getSystemColor
public Color getSystemColor(int id)
Returns the matching standard color for the given constant, which should be one of the color constants specified in class SWT. Any value other than one of the SWT color constants which is passed in will result in the color black. This color should not be free'd because it was allocated by the system, not the application.
Overrides:
getSystemColor in class Device
Parameters:
id - the color constant
Returns:
the matching color
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
SWT

getSystemCursor
public Cursor getSystemCursor(int id)
Returns the matching standard platform cursor for the given constant, which should be one of the cursor constants specified in class SWT. This cursor should not be free'd because it was allocated by the system, not the application. A value of null will be returned if the supplied constant is not an SWT cursor constant.
Parameters:
id - the SWT cursor constant
Returns:
the corresponding cursor or null
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.0
See Also:
SWT.CURSOR_ARROW, SWT.CURSOR_WAIT, SWT.CURSOR_CROSS, SWT.CURSOR_APPSTARTING, SWT.CURSOR_HELP, SWT.CURSOR_SIZEALL, SWT.CURSOR_SIZENESW, SWT.CURSOR_SIZENS, SWT.CURSOR_SIZENWSE, SWT.CURSOR_SIZEWE, SWT.CURSOR_SIZEN, SWT.CURSOR_SIZES, SWT.CURSOR_SIZEE, SWT.CURSOR_SIZEW, SWT.CURSOR_SIZENE, SWT.CURSOR_SIZESE, SWT.CURSOR_SIZESW, SWT.CURSOR_SIZENW, SWT.CURSOR_UPARROW, SWT.CURSOR_IBEAM, SWT.CURSOR_NO, SWT.CURSOR_HAND

getSystemFont
public Font getSystemFont()
Returns a reasonable font for applications to use. On some platforms, this will match the "default font" or "system font" if such can be found. This font should not be free'd because it was allocated by the system, not the application. Typically, applications which want the default look should simply not set the font on the widgets they create. Widgets are always created with the correct default font for the class of user-interface component they represent.
Overrides:
getSystemFont in class Device
Returns:
a font
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getSystemImage
public Image getSystemImage(int id)
Returns the matching standard platform image for the given constant, which should be one of the icon constants specified in class SWT. This image should not be free'd because it was allocated by the system, not the application. A value of null will be returned either if the supplied constant is not an SWT icon constant or if the platform does not define an image that corresponds to the constant.
Parameters:
id - the SWT icon constant
Returns:
the corresponding image or null
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.0
See Also:
SWT.ICON_ERROR, SWT.ICON_INFORMATION, SWT.ICON_QUESTION, SWT.ICON_WARNING, SWT.ICON_WORKING

getSystemMenu
public Menu getSystemMenu()
Returns the single instance of the system-provided menu for the application, or null on platforms where no menu is provided for the application.
Returns:
the system menu, or null
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.7

getSystemTaskBar
public TaskBar getSystemTaskBar()
Returns the single instance of the system taskBar or null when there is no system taskBar available for the platform.
Returns:
the system taskBar or null
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.6

getSystemTray
public Tray getSystemTray()
Returns the single instance of the system tray or null when there is no system tray available for the platform.
Returns:
the system tray or null
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.0

getThread
public java.lang.Thread getThread()
Returns the user-interface thread for the receiver.
Returns:
the receiver's user-interface thread
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed

getTouchEnabled
public boolean getTouchEnabled()
Returns a boolean indicating whether a touch-aware input device is attached to the system and is ready for use.
Returns:
true if a touch-aware input device is detected, or false otherwise
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.7

internal_new_GC
public long internal_new_GC(GCData data)
Invokes platform specific functionality to allocate a new GC handle. IMPORTANT: This method is not part of the public API for Display. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Specified by:
internal_new_GC in interface Drawable
Specified by:
internal_new_GC in class Device
Parameters:
data - the platform specific GC data
Returns:
the platform specific GC handle
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
SWTError -
ERROR_NO_HANDLES if a handle could not be obtained for gc creation

init
protected void init()
Initializes any internal resources needed by the device. This method is called after create.
Overrides:
init in class Device
See Also:
create(org.eclipse.swt.graphics.DeviceData)

internal_dispose_GC
public void internal_dispose_GC(long hDC,
                                GCData data)
Invokes platform specific functionality to dispose a GC handle. IMPORTANT: This method is not part of the public API for Display. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Specified by:
internal_dispose_GC in interface Drawable
Specified by:
internal_dispose_GC in class Device
Parameters:
hDC - the platform specific GC handle
data - the platform specific GC data

map
public Point map(Control from,
                 Control to,
                 Point point)
Maps a point from one coordinate system to another. When the control is null, coordinates are mapped to the display. NOTE: On right-to-left platforms where the coordinate systems are mirrored, special care needs to be taken when mapping coordinates from one control to another to ensure the result is correctly mirrored. Mapping a point that is the origin of a rectangle and then adding the width and height is not equivalent to mapping the rectangle. When one control is mirrored and the other is not, adding the width and height to a point that was mapped causes the rectangle to extend in the wrong direction. Mapping the entire rectangle instead of just one point causes both the origin and the corner of the rectangle to be mapped.
Parameters:
from - the source Control or null
to - the destination Control or null
point - to be mapped
Returns:
point with mapped coordinates
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
ERROR_INVALID_ARGUMENT - if the Control from or the Control to have been disposed
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
2.1.2

map
public Point map(Control from,
                 Control to,
                 int x,
                 int y)
Maps a point from one coordinate system to another. When the control is null, coordinates are mapped to the display. NOTE: On right-to-left platforms where the coordinate systems are mirrored, special care needs to be taken when mapping coordinates from one control to another to ensure the result is correctly mirrored. Mapping a point that is the origin of a rectangle and then adding the width and height is not equivalent to mapping the rectangle. When one control is mirrored and the other is not, adding the width and height to a point that was mapped causes the rectangle to extend in the wrong direction. Mapping the entire rectangle instead of just one point causes both the origin and the corner of the rectangle to be mapped.
Parameters:
from - the source Control or null
to - the destination Control or null
x - coordinates to be mapped
y - coordinates to be mapped
Returns:
point with mapped coordinates
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the Control from or the Control to have been disposed
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
2.1.2

map
public Rectangle map(Control from,
                     Control to,
                     Rectangle rectangle)
Maps a point from one coordinate system to another. When the control is null, coordinates are mapped to the display. NOTE: On right-to-left platforms where the coordinate systems are mirrored, special care needs to be taken when mapping coordinates from one control to another to ensure the result is correctly mirrored. Mapping a point that is the origin of a rectangle and then adding the width and height is not equivalent to mapping the rectangle. When one control is mirrored and the other is not, adding the width and height to a point that was mapped causes the rectangle to extend in the wrong direction. Mapping the entire rectangle instead of just one point causes both the origin and the corner of the rectangle to be mapped.
Parameters:
from - the source Control or null
to - the destination Control or null
rectangle - to be mapped
Returns:
rectangle with mapped coordinates
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the rectangle is null
ERROR_INVALID_ARGUMENT - if the Control from or the Control to have been disposed
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
2.1.2

map
public Rectangle map(Control from,
                     Control to,
                     int x,
                     int y,
                     int width,
                     int height)
Maps a point from one coordinate system to another. When the control is null, coordinates are mapped to the display. NOTE: On right-to-left platforms where the coordinate systems are mirrored, special care needs to be taken when mapping coordinates from one control to another to ensure the result is correctly mirrored. Mapping a point that is the origin of a rectangle and then adding the width and height is not equivalent to mapping the rectangle. When one control is mirrored and the other is not, adding the width and height to a point that was mapped causes the rectangle to extend in the wrong direction. Mapping the entire rectangle instead of just one point causes both the origin and the corner of the rectangle to be mapped.
Parameters:
from - the source Control or null
to - the destination Control or null
x - coordinates to be mapped
y - coordinates to be mapped
width - coordinates to be mapped
height - coordinates to be mapped
Returns:
rectangle with mapped coordinates
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the Control from or the Control to have been disposed
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
2.1.2

post
public boolean post(Event event)
Generate a low level system event. post is used to generate low level keyboard and mouse events. The intent is to enable automated UI testing by simulating the input from the user. Most SWT applications should never need to call this method. Note that this operation can fail when the operating system fails to generate the event for any reason. For example, this can happen when there is no such key or mouse button or when the system event queue is full.
Event Types:
KeyDown, KeyUp
The following fields in the Event apply:
(in) type KeyDown or KeyUp
(in) character a character that corresponds to a keyboard key
(in) keyCode the key code of the key that was typed, as defined by the key code constants in class SWT
MouseDown, MouseUp
The following fields in the Event apply:
(in) type MouseDown or MouseUp
(in) button the button that is pressed or released
MouseMove
The following fields in the Event apply:
(in) type MouseMove
(in) x the x coordinate to move the mouse pointer to in screen coordinates
(in) y the y coordinate to move the mouse pointer to in screen coordinates
MouseWheel
The following fields in the Event apply:
(in) type MouseWheel
(in) detail either SWT.SCROLL_LINE or SWT.SCROLL_PAGE
(in) count the number of lines or pages to scroll
Parameters:
event - the event to be generated
Returns:
true if the event was generated or false otherwise
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the event is null
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
3.0

readAndDispatch
public boolean readAndDispatch()
Reads an event from the operating system's event queue, dispatches it appropriately, and returns true if there is potentially more work to do, or false if the caller can sleep until another event is placed on the event queue. In addition to checking the system event queue, this method also checks if any inter-thread messages (created by syncExec() or asyncExec()) are waiting to be processed, and if so handles them before returning.
Returns:
false if the caller can sleep upon return from this method
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
ERROR_FAILED_EXEC - if an exception occurred while running an inter-thread message
See Also:
sleep(), wake()

release
protected void release()
Releases any internal resources back to the operating system and clears all fields except the device handle. Disposes all shells which are currently open on the display. After this method has been invoked, all related related shells will answer true when sent the message isDisposed().
When a device is destroyed, resources that were acquired on behalf of the programmer need to be returned to the operating system. For example, if the device allocated a font to be used as the system font, this font would be freed in release. Also,to assist the garbage collector and minimize the amount of memory that is not reclaimed when the programmer keeps a reference to a disposed device, all fields except the handle are zero'd. The handle is needed by destroy.
This method is called before destroy.
Overrides:
release in class Device
See Also:
Device.dispose(), destroy()

removeFilter
public void removeFilter(int eventType,
                         Listener listener)
Removes the listener from the collection of listeners who will be notified when an event of the given type occurs anywhere in a widget. The event type is one of the event constants defined in class SWT.
Parameters:
eventType - the type of event to listen for
listener - the listener which should no longer be notified when the event occurs
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0
See Also:
Listener, SWT, addFilter(int, org.eclipse.swt.widgets.Listener), addListener(int, org.eclipse.swt.widgets.Listener)

removeListener
public void removeListener(int eventType,
                           Listener listener)
Removes the listener from the collection of listeners who will be notified when an event of the given type occurs. The event type is one of the event constants defined in class SWT.
Parameters:
eventType - the type of event to listen for
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
2.0
See Also:
Listener, SWT, addListener(int, org.eclipse.swt.widgets.Listener)

sendPreExternalEventDispatchEvent
public void sendPreExternalEventDispatchEvent()
Sends a SWT.PreExternalEventDispatch event.

sendPostExternalEventDispatchEvent
public void sendPostExternalEventDispatchEvent()
Sends a SWT.PostExternalEventDispatch event.

setCursorLocation
public void setCursorLocation(int x,
                              int y)
Sets the location of the on-screen pointer relative to the top left corner of the screen. Note: It is typically considered bad practice for a program to move the on-screen pointer location.
Parameters:
x - the new x coordinate for the cursor
y - the new y coordinate for the cursor
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
2.1

setCursorLocation
public void setCursorLocation(Point point)
Sets the location of the on-screen pointer relative to the top left corner of the screen. Note: It is typically considered bad practice for a program to move the on-screen pointer location.
Parameters:
point - new position
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_NULL_ARGUMENT - if the point is null
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
since. :
2.0

setData
public void setData(java.lang.String key,
                    java.lang.Object value)
Sets the application defined property of the receiver with the specified name to the given argument. Applications may have associated arbitrary objects with the receiver in this fashion. If the objects stored in the properties need to be notified when the display is disposed of, it is the application's responsibility provide a disposeExec() handler which does so.
Parameters:
key - the name of the property
value - the new value for the property
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the key is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
getData(String), disposeExec(Runnable)

setData
public void setData(java.lang.Object data)
Sets the application defined, display specific data associated with the receiver, to the argument. The display specific data is a single, unnamed field that is stored with every display. Applications may put arbitrary objects in this field. If the object stored in the display specific data needs to be notified when the display is disposed of, it is the application's responsibility provide a disposeExec() handler which does so.
Parameters:
data - the new display specific data
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
getData(), disposeExec(Runnable)

getAppName
public static java.lang.String getAppName()
Returns the application name.
Returns:
the application name
since. :
3.6
See Also:
setAppName(String)

getAppVersion
public static java.lang.String getAppVersion()
Returns the application version.
Returns:
the application version
since. :
3.6
See Also:
setAppVersion(String)

setAppName
public static void setAppName(java.lang.String name)
Sets the application name to the argument. The application name can be used in several ways, depending on the platform and tools being used. Accessibility tools could ask for the application name. On Windows, if the application name is set to any value other than "SWT" (case insensitive), it is used to set the application user model ID which is used by the OS for taskbar grouping.
Parameters:
name - the new app name or null
See Also:
AppUserModelID (Windows)
Specifying null for the name clears it.

setAppVersion
public static void setAppVersion(java.lang.String version)
Sets the application version to the argument.
Parameters:
version - the new app version
since. :
3.6

setSynchronizer
public void setSynchronizer(Synchronizer synchronizer)
Sets the synchronizer used by the display to be the argument, which can not be null.
Parameters:
synchronizer - the new synchronizer for the display (must not be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the synchronizer is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
ERROR_FAILED_EXEC - if an exception occurred while running an inter-thread message

setRuntimeExceptionHandler
public final void setRuntimeExceptionHandler(java.util.function.Consumer<java.lang.RuntimeException> runtimeExceptionHandler)
Sets a callback that will be invoked whenever an exception is thrown by a listener or external callback function. The application may use this to set a global exception handling policy: the most common policies are either to log and discard the exception or to re-throw the exception. The default SWT error handling policy is to rethrow exceptions.
Parameters:
runtimeExceptionHandler - new exception handler to be registered.
since. :
3.106

getRuntimeExceptionHandler
public final java.util.function.Consumer<java.lang.RuntimeException> getRuntimeExceptionHandler()
Returns the current exception handler. It will receive all exceptions thrown by listeners and external callbacks in this display. If code wishes to temporarily replace the exception handler (for example, during a unit test), it is common practice to invoke this method prior to replacing the exception handler so that the old handler may be restored afterward.
Returns:
the current exception handler. Never null.
since. :
3.106

setErrorHandler
public final void setErrorHandler(java.util.function.Consumer<java.lang.Error> errorHandler)
Sets a callback that will be invoked whenever an error is thrown by a listener or external callback function. The application may use this to set a global exception handling policy: the most common policies are either to log and discard the exception or to re-throw the exception. The default SWT error handling policy is to rethrow exceptions.
Parameters:
errorHandler - new error handler to be registered.
since. :
3.106

getErrorHandler
public final java.util.function.Consumer<java.lang.Error> getErrorHandler()
Returns the current exception handler. It will receive all errors thrown by listeners and external callbacks in this display. If code wishes to temporarily replace the error handler (for example, during a unit test), it is common practice to invoke this method prior to replacing the error handler so that the old handler may be restored afterward.
Returns:
the current error handler. Never null.
since. :
3.106

sleep
public boolean sleep()
Causes the user-interface thread to sleep (that is, to be put in a state where it does not consume CPU cycles) until an event is received or it is otherwise awakened.
Returns:
true if an event requiring dispatching was placed on the queue.
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
wake()

syncExec
public void syncExec(java.lang.Runnable runnable)
Causes the run() method of the runnable to be invoked by the user-interface thread at the next reasonable opportunity. The thread which calls this method is suspended until the runnable completes. Specifying null as the runnable simply wakes the user-interface thread. Note that at the time the runnable is invoked, widgets that have the receiver as their display may have been disposed. Therefore, it is necessary to check for this case inside the runnable before accessing the widget.
Parameters:
runnable - code to run on the user-interface thread or null
Throws:
SWTException -
ERROR_FAILED_EXEC - if an exception occurred when executing the runnable
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
asyncExec(java.lang.Runnable)

timerExec
public void timerExec(int milliseconds,
                      java.lang.Runnable runnable)
Causes the run() method of the runnable to be invoked by the user-interface thread after the specified number of milliseconds have elapsed. If milliseconds is less than zero, the runnable is not executed. Note that at the time the runnable is invoked, widgets that have the receiver as their display may have been disposed. Therefore, it is necessary to check for this case inside the runnable before accessing the widget.
Parameters:
milliseconds - the delay before running the runnable
runnable - code to run on the user-interface thread
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the runnable is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
asyncExec(java.lang.Runnable)

update
public void update()
Forces all outstanding paint requests for the display to be processed before this method returns.
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
Control.update()

wake
public void wake()
If the receiver's user-interface thread was sleeping, causes it to be awakened and start running again. Note that this method may be called from any thread.
Throws:
SWTException -
ERROR_DEVICE_DISPOSED - if the receiver has been disposed
See Also:
sleep()


org.eclipse.swt.events
Class DisposeEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.DisposeEvent
All Implemented Interfaces:
java.io.Serializable


public final class DisposeEvent extends TypedEvent
Instances of this class are sent as a result of widgets being disposed.
See Also:
DisposeListener, Sample code and further information, Serialized Form

Field Summary

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
DisposeEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary

Methods inherited from class org.eclipse.swt.events.TypedEvent
toString

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

DisposeEvent
public DisposeEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information


org.eclipse.swt.events
Interface DisposeListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
Functional Interface:
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.


@FunctionalInterface public interface DisposeListener extends SWTEventListener
Classes which implement this interface provide a method that deals with the event that is generated when a widget is disposed. After creating an instance of a class that implements this interface it can be added to a widget using the addDisposeListener method and removed using the removeDisposeListener method. When a widget is disposed, the widgetDisposed method will be invoked.
See Also:
DisposeEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    widgetDisposed(DisposeEvent e)
Sent when the widget is disposed.

Method Detail

widgetDisposed
void widgetDisposed(DisposeEvent e)
Sent when the widget is disposed.
Parameters:
e - an event containing information about the dispose


org.eclipse.swt.internal
Class DPIUtil.AutoScaleImageDataProvider
java.lang.Object
org.eclipse.swt.internal.DPIUtil.AutoScaleImageDataProvider
All Implemented Interfaces:
ImageDataProvider
Enclosing class:
DPIUtil


public static final class DPIUtil.AutoScaleImageDataProvider extends java.lang.Object implements ImageDataProvider
AutoScale ImageDataProvider.

Constructor Summary
Constructors

Constructor and Description
AutoScaleImageDataProvider(Device device,                           ImageData data,                           int zoom)

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
ImageData   getImageData(int zoom)
Returns the image data for the given zoom level.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

AutoScaleImageDataProvider
public AutoScaleImageDataProvider(Device device,
                                  ImageData data,
                                  int zoom)

Method Detail

getImageData
public ImageData getImageData(int zoom)
Description copied from interface: ImageDataProvider
Returns the image data for the given zoom level. If no image is available for a particular zoom level, this method should return null. For zoom == 100, returning null in not allowed, and SWT will throw an exception.
Specified by:
getImageData in interface ImageDataProvider
Parameters:
zoom - The zoom level in % of the standard resolution (which is 1 physical monitor pixel == 1 SWT logical pixel). Typically 100, 150, or 200.
Returns:
the image data, or null if zoom != 100 and no image is available for the given zoom level.


org.eclipse.swt.internal
Class DPIUtil
java.lang.Object
org.eclipse.swt.internal.DPIUtil


public class DPIUtil extends java.lang.Object
This class hold common constants and utility functions w.r.t. to SWT high DPI functionality. The autoScaleUp(..) methods convert from API coordinates (in SWT points) to internal high DPI coordinates (in pixels) that interface with native widgets.
The autoScaleDown(..) convert from high DPI pixels to API coordinates (in SWT points).
since. :
3.105

Nested Class Summary
Nested Classes

Modifier and Type   Class and Description
static class    DPIUtil.AutoScaleImageDataProvider
AutoScale ImageDataProvider.

Constructor Summary
Constructors

Constructor and Description
DPIUtil()

Method Summary
All Methods Static Methods Concrete Methods

Modifier and Type   Method and Description
static Rectangle    autoScaleBounds(Rectangle rect,             int targetZoom,        int currentZoom)
Returns a new rectangle as per the scaleFactor.
static ImageData    autoScaleDown(Device device,        ImageData imageData)
Auto-scale down ImageData
static float    autoScaleDown(Drawable drawable,            float size)
Auto-scale down float dimensions if enabled for Drawable class.
static float[]  autoScaleDown(Drawable drawable,            float[] size)
Auto-scale up float array dimensions if enabled for Drawable class.
static int  autoScaleDown(Drawable drawable,            int size)
Auto-scale down int dimensions if enabled for Drawable class.
static int[]    autoScaleDown(Drawable drawable,            int[] pointArray)
static Point    autoScaleDown(Drawable drawable,            Point point)
Returns a new scaled down Point if enabled for Drawable class.
static Rectangle    autoScaleDown(Drawable drawable,            Rectangle rect)
Returns a new scaled down Rectangle if enabled for Drawable class.
static float    autoScaleDown(float size)
Auto-scale down float dimensions.
static float[]  autoScaleDown(float[] size)
Auto-scale up float array dimensions.
static int  autoScaleDown(int size)
Auto-scale down int dimensions.
static int[]    autoScaleDown(int[] pointArray)
static Point    autoScaleDown(Point point)
Returns a new scaled down Point.
static Rectangle    autoScaleDown(Rectangle rect)
Returns a new scaled down Rectangle.
static ImageData    autoScaleImageData(Device device,                  ImageData imageData ,                   int targetZoom,                   int currentZoom)
Auto-scale image with ImageData
static ImageData    autoScaleUp(Device device,    ImageData imageData)
Auto-scale up ImageData
static float    autoScaleUp(Drawable drawable,        float size)
static int  autoScaleUp(Drawable drawable,        int size)
Auto-scale up int dimensions if enabled for Drawable class.
static int[]    autoScaleUp(Drawable drawable,        int[] pointArray)
static Point    autoScaleUp(Drawable drawable,        Point point)
Returns a new scaled up Point if enabled for Drawable class.
static Rectangle    autoScaleUp(Drawable drawable,        Rectangle rect)
Returns a new scaled up Rectangle if enabled for Drawable class.
static float    autoScaleUp(float size)
static int  autoScaleUp(int size)
Auto-scale up int dimensions.
static int[]    autoScaleUp(int[] pointArray)
static Point    autoScaleUp(Point point)
Returns a new scaled up Point.
static Rectangle    autoScaleUp(Rectangle rect)
Returns a new scaled up Rectangle.
static int  autoScaleUpUsingNativeDPI(int size)
Auto-scale up int dimensions using Native DPI
static int  getDeviceZoom()
static int  mapDPIToZoom(int dpi)
Compute the zoom value based on the DPI value.
static void setDeviceZoom(int nativeDeviceZoom)
static ImageData    validateAndGetImageDataAtZoom(Image DataProvider provider,                 int zoom,                    boolean[] found)
Gets Image data at specified zoom level, if image is missing then fall-back to 100% image.
static java.lang.String validateAndGetImagePathAtZoom(Image FileNameProvider provider,                     int zoom,                        boolean[] fou nd)
Gets Image file path at specified zoom level, if image is missing then fall-back to 100% image.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

DPIUtil
public DPIUtil()

Method Detail

autoScaleDown
public static ImageData autoScaleDown(Device device,
                                      ImageData imageData)
Auto-scale down ImageData

autoScaleDown
public static int[] autoScaleDown(int[] pointArray)

autoScaleDown
public static int[] autoScaleDown(Drawable drawable,
                                  int[] pointArray)

autoScaleDown
public static float[] autoScaleDown(float[] size)
Auto-scale up float array dimensions.

autoScaleDown
public static float[] autoScaleDown(Drawable drawable,
                                    float[] size)
Auto-scale up float array dimensions if enabled for Drawable class.

autoScaleDown
public static int autoScaleDown(int size)
Auto-scale down int dimensions.

autoScaleDown
public static int autoScaleDown(Drawable drawable,
                                int size)
Auto-scale down int dimensions if enabled for Drawable class.

autoScaleDown
public static float autoScaleDown(float size)
Auto-scale down float dimensions.

autoScaleDown
public static float autoScaleDown(Drawable drawable,
                                  float size)
Auto-scale down float dimensions if enabled for Drawable class.

autoScaleDown
public static Point autoScaleDown(Point point)
Returns a new scaled down Point.

autoScaleDown
public static Point autoScaleDown(Drawable drawable,
                                  Point point)
Returns a new scaled down Point if enabled for Drawable class.

autoScaleDown
public static Rectangle autoScaleDown(Rectangle rect)
Returns a new scaled down Rectangle.

autoScaleDown
public static Rectangle autoScaleDown(Drawable drawable,
                                      Rectangle rect)
Returns a new scaled down Rectangle if enabled for Drawable class.

autoScaleImageData
public static ImageData autoScaleImageData(Device device,
                                           ImageData imageData,
                                           int targetZoom,
                                           int currentZoom)
Auto-scale image with ImageData

autoScaleBounds
public static Rectangle autoScaleBounds(Rectangle rect,
                                        int targetZoom,
                                        int currentZoom)
Returns a new rectangle as per the scaleFactor.

autoScaleUp
public static ImageData autoScaleUp(Device device,
                                    ImageData imageData)
Auto-scale up ImageData

autoScaleUp
public static int[] autoScaleUp(int[] pointArray)

autoScaleUp
public static int[] autoScaleUp(Drawable drawable,
                                int[] pointArray)

autoScaleUp
public static int autoScaleUp(int size)
Auto-scale up int dimensions.

autoScaleUpUsingNativeDPI
public static int autoScaleUpUsingNativeDPI(int size)
Auto-scale up int dimensions using Native DPI

autoScaleUp
public static int autoScaleUp(Drawable drawable,
                              int size)
Auto-scale up int dimensions if enabled for Drawable class.

autoScaleUp
public static float autoScaleUp(float size)

autoScaleUp
public static float autoScaleUp(Drawable drawable,
                                float size)

autoScaleUp
public static Point autoScaleUp(Point point)
Returns a new scaled up Point.

autoScaleUp
public static Point autoScaleUp(Drawable drawable,
                                Point point)
Returns a new scaled up Point if enabled for Drawable class.

autoScaleUp
public static Rectangle autoScaleUp(Rectangle rect)
Returns a new scaled up Rectangle.

autoScaleUp
public static Rectangle autoScaleUp(Drawable drawable,
                                    Rectangle rect)
Returns a new scaled up Rectangle if enabled for Drawable class.

mapDPIToZoom
public static int mapDPIToZoom(int dpi)
Compute the zoom value based on the DPI value.
Returns:
zoom

validateAndGetImageDataAtZoom
public static ImageData validateAndGetImageDataAtZoom(ImageDataProvider provider,
                                                      int zoom,
                                                      boolean[] found)
Gets Image data at specified zoom level, if image is missing then fall-back to 100% image. If provider or fall-back image is not available, throw error.

validateAndGetImagePathAtZoom
public static java.lang.String validateAndGetImagePathAtZoom(ImageFileNameProvider provider,
                                                             int zoom,
                                                             boolean[] found)
Gets Image file path at specified zoom level, if image is missing then fall-back to 100% image. If provider or fall-back image is not available, throw error.

getDeviceZoom
public static int getDeviceZoom()

setDeviceZoom
public static void setDeviceZoom(int nativeDeviceZoom)


org.eclipse.swt.events
Class DragDetectEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.MouseEvent
org.eclipse.swt.events.DragDetectEvent
All Implemented Interfaces:
java.io.Serializable


public final class DragDetectEvent extends MouseEvent
Instances of this class are sent as a result of a drag gesture.
since. :
3.3
See Also:
DragDetectListener, Sample code and further information, Serialized Form

Field Summary

Fields inherited from class org.eclipse.swt.events.MouseEvent
button, count, stateMask, x, y

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
DragDetectEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary

Methods inherited from class org.eclipse.swt.events.MouseEvent
toString

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

DragDetectEvent
public DragDetectEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information


org.eclipse.swt.events
Interface DragDetectListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
Functional Interface:
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.


@FunctionalInterface public interface DragDetectListener extends SWTEventListener
Classes which implement this interface provide methods that deal with the events that are generated when a drag gesture is detected. After creating an instance of a class that implements this interface it can be added to a control using the addDragDetectListener method and removed using the removeDragDetectListener method. When the drag is detected, the drageDetected method will be invoked.
since. :
3.3
See Also:
DragDetectEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    dragDetected(DragDetectEvent e)
Sent when a drag gesture is detected.

Method Detail

dragDetected
void dragDetected(DragDetectEvent e)
Sent when a drag gesture is detected.
Parameters:
e - an event containing information about the drag


org.eclipse.swt.graphics
Interface Drawable
All Known Implementing Classes:
Button, Canvas, Combo, Composite, Control, CoolBar, DateTime, Decorations, Device, Display, ExpandBar, Group, Image, Label, Link, List, ProgressBar, Sash, Scale, Scrollable, Shell, Slider, Spinner, TabFolder, Table, Text, ToolBar, Tree


public interface Drawable
Implementers of Drawable can have a graphics context (GC) created for them, and then they can be drawn on by sending messages to their associated GC. SWT images, and device objects such as the Display device and the Printer device, are drawables. IMPORTANT: This interface is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It should never be referenced from application code.
See Also:
Device, Image, GC

Method Summary
All Methods Instance Methods Abstract Methods Default Methods

Modifier and Type   Method and Description
void    internal_dispose_GC(long handle,                  GCData data)
Invokes platform specific functionality to dispose a GC handle.
long    internal_new_GC(GCData data)
Invokes platform specific functionality to allocate a new GC handle.
default boolean isAutoScalable()
Returns true iff coordinates can be auto-scaled on this drawable and false if not.

Method Detail

internal_new_GC
long internal_new_GC(GCData data)
Invokes platform specific functionality to allocate a new GC handle. IMPORTANT: This method is not part of the public API for Drawable. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Parameters:
data - the platform specific GC data
Returns:
the platform specific GC handle

internal_dispose_GC
void internal_dispose_GC(long handle,
                         GCData data)
Invokes platform specific functionality to dispose a GC handle. IMPORTANT: This method is not part of the public API for Drawable. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Parameters:
handle - the platform specific GC handle
data - the platform specific GC data

isAutoScalable
default boolean isAutoScalable()
Returns true iff coordinates can be auto-scaled on this drawable and false if not. E.g. a GC method should not auto-scale the bounds of a figure drawn on a Printer device, but it may have to auto-scale when drawing on a high-DPI Display monitor.
Returns:
true if auto-scaling is enabled for this drawable


org.eclipse.swt.widgets
Class Event
java.lang.Object
org.eclipse.swt.widgets.Event


public class Event extends java.lang.Object
Instances of this class provide a description of a particular event which occurred within SWT. The SWT untyped listener API uses these instances for all event dispatching. Note: For a given event, only the fields which are appropriate will be filled in. The contents of the fields which are not used by the event are unspecified.
See Also:
Listener, TypedEvent, SWT Example: ControlExample, Listeners, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
int button
the button that was pressed or released; 1 for the first button, 2 for the second button, and 3 for the third button, etc.
char    character
depending on the event, the character represented by the key that was typed.
int count
depending on the event type, the number of following paint events that are pending which may always be zero on some platforms, or the number of lines or pages to scroll using the mouse wheel, or the number of times the mouse has been clicked
java.lang.Object    data
a field for application use
int detail
the event specific detail field, as defined by the detail constants in class SWT
Display display
the display where the event occurred
boolean doit
depending on the event, a flag indicating whether the operation should be allowed.
int end
depending on the event, the range of text being modified.
GC  gc
the graphics context to use when painting that is configured to use the colors, font and damaged region of the control.
int height
the height of the bounding rectangle of the region that requires painting
int index
the index of the item where the event occurred
Widget  item
the item that the event occurred in (can be null)
int keyCode
depending on the event, the key code of the key that was typed, as defined by the key code constants in class SWT.
int keyLocation
depending on the event, the location of key specified by the keyCode or character.
double  magnification
The change in magnification.
double  rotation
The number of degrees rotated on the track pad.
int[]   segments
Bidi segment offsets
char[]  segmentsChars
Characters to be applied on the segment boundaries
int start
depending on the event, the range of text being modified.
int stateMask
depending on the event, the state of the keyboard modifier keys and mouse masks at the time the event was generated.
java.lang.String    text
depending on the event, the new text that will be inserted.
int time
the time that the event occurred.
Touch[] touches
An array of the touch states for the current touch event.
int type
the type of event, as defined by the event type constants in class SWT
Widget  widget
the widget that issued the event
int width
the width of the bounding rectangle of the region that requires painting
int x
depending on the event type, the x offset of the bounding rectangle of the region that requires painting or the widget-relative, x coordinate of the pointer at the time the mouse button was pressed or released
int xDirection
If nonzero, a positive value indicates a swipe to the right, and a negative value indicates a swipe to the left.
int y
depending on the event type, the y offset of the bounding rectangle of the region that requires painting or the widget-relative, y coordinate of the pointer at the time the mouse button was pressed or released
int yDirection
If nonzero, a positive value indicates a swipe in the up direction, and a negative value indicates a swipe in the down direction.

Constructor Summary
Constructors

Constructor and Description
Event()

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
Rectangle   getBounds()
Gets the bounds.
void    setBounds(Rectangle rect)
Sets the bounds.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

display
public Display display
the display where the event occurred
since. :
2.0

widget
public Widget widget
the widget that issued the event

type
public int type
the type of event, as defined by the event type constants in class SWT
See Also:
SWT

detail
public int detail
the event specific detail field, as defined by the detail constants in class SWT
See Also:
SWT

item
public Widget item
the item that the event occurred in (can be null)

index
public int index
the index of the item where the event occurred
since. :
3.2

gc
public GC gc
the graphics context to use when painting that is configured to use the colors, font and damaged region of the control. It is valid only during the paint and must not be disposed

x
public int x
depending on the event type, the x offset of the bounding rectangle of the region that requires painting or the widget-relative, x coordinate of the pointer at the time the mouse button was pressed or released

y
public int y
depending on the event type, the y offset of the bounding rectangle of the region that requires painting or the widget-relative, y coordinate of the pointer at the time the mouse button was pressed or released

width
public int width
the width of the bounding rectangle of the region that requires painting

height
public int height
the height of the bounding rectangle of the region that requires painting

count
public int count
depending on the event type, the number of following paint events that are pending which may always be zero on some platforms, or the number of lines or pages to scroll using the mouse wheel, or the number of times the mouse has been clicked

time
public int time
the time that the event occurred. NOTE: This field is an unsigned integer and should be AND'ed with 0xFFFFFFFFL so that it can be treated as a signed long.

button
public int button
the button that was pressed or released; 1 for the first button, 2 for the second button, and 3 for the third button, etc.

character
public char character
depending on the event, the character represented by the key that was typed. This is the final character that results after all modifiers have been applied. For example, when the user types Ctrl+A, the character value is 0x01 (ASCII SOH). It is important that applications do not attempt to modify the character value based on a stateMask (such as SWT.CTRL) or the resulting character will not be correct.

keyCode
public int keyCode
depending on the event, the key code of the key that was typed, as defined by the key code constants in class SWT. When the character field of the event is ambiguous, this field contains the unaffected value of the original character. For example, typing Ctrl+M or Enter both result in the character '\r' but the keyCode field will also contain '\r' when Enter was typed and 'm' when Ctrl+M was typed.
See Also:
SWT

keyLocation
public int keyLocation
depending on the event, the location of key specified by the keyCode or character. The possible values for this field are SWT.LEFT, SWT.RIGHT, SWT.KEYPAD, or SWT.NONE representing the main keyboard area. The location field can be used to differentiate key events that have the same key code and character but are generated by different keys in the keyboard. For example, a key down event with the key code equals to SWT.SHIFT can be generated by the left and the right shift keys in the keyboard. The location field can only be used to determine the location of the key code or character in the current event. It does not include information about the location of modifiers in state mask.
since. :
3.6
See Also:
SWT.LEFT, SWT.RIGHT, SWT.KEYPAD

stateMask
public int stateMask
depending on the event, the state of the keyboard modifier keys and mouse masks at the time the event was generated.
See Also:
SWT.MODIFIER_MASK, SWT.BUTTON_MASK

start
public int start
depending on the event, the range of text being modified. Setting these fields only has effect during ImeComposition events.

end
public int end
depending on the event, the range of text being modified. Setting these fields only has effect during ImeComposition events.

text
public java.lang.String text
depending on the event, the new text that will be inserted. Setting this field will change the text that is about to be inserted or deleted.

segments
public int[] segments
Bidi segment offsets
since. :
3.8

segmentsChars
public char[] segmentsChars
Characters to be applied on the segment boundaries
since. :
3.8

doit
public boolean doit
depending on the event, a flag indicating whether the operation should be allowed. Setting this field to false will cancel the operation.

data
public java.lang.Object data
a field for application use

touches
public Touch[] touches
An array of the touch states for the current touch event.
since. :
3.7

xDirection
public int xDirection
If nonzero, a positive value indicates a swipe to the right, and a negative value indicates a swipe to the left.
since. :
3.7

yDirection
public int yDirection
If nonzero, a positive value indicates a swipe in the up direction, and a negative value indicates a swipe in the down direction.
since. :
3.7

magnification
public double magnification
The change in magnification. This value should be added to the current scaling of an item to get the new scale factor.
since. :
3.7

rotation
public double rotation
The number of degrees rotated on the track pad.
since. :
3.7

Constructor Detail

Event
public Event()

Method Detail

getBounds
public Rectangle getBounds()
Gets the bounds.
Returns:
a rectangle that is the bounds.

setBounds
public void setBounds(Rectangle rect)
Sets the bounds.
Parameters:
rect - the new rectangle

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the event


org.eclipse.swt.events
Class ExpandAdapter
java.lang.Object
org.eclipse.swt.events.ExpandAdapter
All Implemented Interfaces:
java.util.EventListener, ExpandListener, SWTEventListener


public abstract class ExpandAdapter extends java.lang.Object implements ExpandListener
This adapter class provides default implementations for the methods described by the ExpandListener interface. Classes that wish to deal with ExpandEvents can extend this class and override only the methods which they are interested in.
since. :
3.2
See Also:
ExpandListener, ExpandEvent, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
ExpandAdapter()

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    itemCollapsed(ExpandEvent e)
Sent when an item is collapsed.
void    itemExpanded(ExpandEvent e)
Sent when an item is expanded.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

ExpandAdapter
public ExpandAdapter()

Method Detail

itemCollapsed
public void itemCollapsed(ExpandEvent e)
Sent when an item is collapsed. The default behavior is to do nothing.
Specified by:
itemCollapsed in interface ExpandListener
Parameters:
e - an event containing information about the operation

itemExpanded
public void itemExpanded(ExpandEvent e)
Sent when an item is expanded. The default behavior is to do nothing.
Specified by:
itemExpanded in interface ExpandListener
Parameters:
e - an event containing information about the operation


org.eclipse.swt.widgets
Class ExpandBar
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.Composite
org.eclipse.swt.widgets.ExpandBar
All Implemented Interfaces:
Drawable


public class ExpandBar extends Composite
Instances of this class support the layout of selectable expand bar items. The item children that may be added to instances of this class must be of type ExpandItem.
Styles:
V_SCROLL
Events:
Expand, Collapse
IMPORTANT: This class is not intended to be subclassed.
since. :
3.2
See Also:
ExpandItem, ExpandEvent, ExpandListener, ExpandAdapter, ExpandBar snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
ExpandBar(Composite parent,          int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addExpandListener(ExpandListener li stener)
Adds the listener to the collection of listeners who will be notified when an item in the receiver is expanded or collapsed by sending it one of the messages defined in the ExpandListener interface.
protected void  checkSubclass()
Checks that this class can be subclassed.
ExpandItem  getItem(int index)
Returns the item at the given, zero-relative index in the receiver.
int getItemCount()
Returns the number of items contained in the receiver.
ExpandItem[]    getItems()
Returns an array of ExpandItems which are the items in the receiver.
int getSpacing()
Returns the receiver's spacing.
int indexOf(ExpandItem item)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item.
void    removeExpandListener(ExpandListener  listener)
Removes the listener from the collection of listeners who will be notified when items in the receiver are expanded or collapsed.
void    setFont(Font font)
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
void    setSpacing(int spacing)
Sets the receiver's spacing.

Methods inherited from class org.eclipse.swt.widgets.Composite
changed, drawBackground, getBackgroundMode, getChildren, getLayout, getLayoutDeferred, getTabList, isLayoutDeferred, layout, layout, layout, layout, layout, setBackgroundMode, setFocus, setLayout, setLayoutDeferred, setTabList

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

ExpandBar
public ExpandBar(Composite parent,
                 int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.V_SCROLL, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addExpandListener
public void addExpandListener(ExpandListener listener)
Adds the listener to the collection of listeners who will be notified when an item in the receiver is expanded or collapsed by sending it one of the messages defined in the ExpandListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ExpandListener, removeExpandListener(org.eclipse.swt.events.ExpandListener)

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Composite

getItem
public ExpandItem getItem(int index)
Returns the item at the given, zero-relative index in the receiver. Throws an exception if the index is out of range.
Parameters:
index - the index of the item to return
Returns:
the item at the given index
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItemCount
public int getItemCount()
Returns the number of items contained in the receiver.
Returns:
the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItems
public ExpandItem[] getItems()
Returns an array of ExpandItems which are the items in the receiver. Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the items in the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSpacing
public int getSpacing()
Returns the receiver's spacing.
Returns:
the spacing
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

indexOf
public int indexOf(ExpandItem item)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item. If no item is found, returns -1.
Parameters:
item - the search item
Returns:
the index of the item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
ERROR_INVALID_ARGUMENT - if the item has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeExpandListener
public void removeExpandListener(ExpandListener listener)
Removes the listener from the collection of listeners who will be notified when items in the receiver are expanded or collapsed.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ExpandListener, addExpandListener(org.eclipse.swt.events.ExpandListener)

setFont
public void setFont(Font font)
Description copied from class: Control
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Overrides:
setFont in class Control
Parameters:
font - the new font (or null)

setSpacing
public void setSpacing(int spacing)
Sets the receiver's spacing. Spacing specifies the number of pixels allocated around each item.
Parameters:
spacing - the spacing around each item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.events
Class ExpandEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.SelectionEvent
org.eclipse.swt.events.ExpandEvent
All Implemented Interfaces:
java.io.Serializable


public class ExpandEvent extends SelectionEvent
Instances of this class are sent as a result of ExpandItems being expanded or collapsed.
since. :
3.2
See Also:
ExpandListener, Sample code and further information, Serialized Form

Field Summary

Fields inherited from class org.eclipse.swt.events.SelectionEvent
detail, doit, height, item, stateMask, text, width, x, y

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
ExpandEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary

Methods inherited from class org.eclipse.swt.events.SelectionEvent
toString

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

ExpandEvent
public ExpandEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information


org.eclipse.swt.widgets
Class ExpandItem
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Item
org.eclipse.swt.widgets.ExpandItem


public class ExpandItem extends Item
Instances of this class represent a selectable user interface object that represents a expandable item in a expand bar.
Styles:
(none)
Events:
(none)
IMPORTANT: This class is not intended to be subclassed.
since. :
3.2
See Also:
ExpandBar, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
ExpandItem(ExpandBar parent,           int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.
ExpandItem(ExpandBar parent,           int style,           int index)
Constructs a new instance of this class given its parent, a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
Control getControl()
Returns the control that is shown when the item is expanded.
boolean getExpanded()
Returns true if the receiver is expanded, and false otherwise.
int getHeaderHeight()
Returns the height of the receiver's header
int getHeight()
Gets the height of the receiver.
ExpandBar   getParent()
Returns the receiver's parent, which must be a ExpandBar.
void    setControl(Control control)
Sets the control that is shown when the item is expanded.
void    setExpanded(boolean expanded)
Sets the expanded state of the receiver.
void    setHeight(int height)
Sets the height of the receiver.
void    setImage(Image image)
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
void    setText(java.lang.String string)
Sets the receiver's text.

Methods inherited from class org.eclipse.swt.widgets.Item
checkSubclass, getImage, getText

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

ExpandItem
public ExpandItem(ExpandBar parent,
                  int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
Widget.checkSubclass(), Widget.getStyle()

ExpandItem
public ExpandItem(ExpandBar parent,
                  int style,
                  int index)
Constructs a new instance of this class given its parent, a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
index - the zero-relative index to store the receiver in its parent
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
Widget.checkSubclass(), Widget.getStyle()

Method Detail

getControl
public Control getControl()
Returns the control that is shown when the item is expanded. If no control has been set, return null.
Returns:
the control
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getExpanded
public boolean getExpanded()
Returns true if the receiver is expanded, and false otherwise.
Returns:
the expanded state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getHeaderHeight
public int getHeaderHeight()
Returns the height of the receiver's header
Returns:
the height of the header
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getHeight
public int getHeight()
Gets the height of the receiver.
Returns:
the height
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getParent
public ExpandBar getParent()
Returns the receiver's parent, which must be a ExpandBar.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setControl
public void setControl(Control control)
Sets the control that is shown when the item is expanded.
Parameters:
control - the new control (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the control has been disposed
ERROR_INVALID_PARENT - if the control is not in the same widget tree
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setExpanded
public void setExpanded(boolean expanded)
Sets the expanded state of the receiver.
Parameters:
expanded - the new expanded state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setHeight
public void setHeight(int height)
Sets the height of the receiver. This is height of the item when it is expanded, excluding the height of the header.
Parameters:
height - the new height
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setImage
public void setImage(Image image)
Description copied from class: Item
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
Overrides:
setImage in class Item
Parameters:
image - the image to display on the receiver (may be null)

setText
public void setText(java.lang.String string)
Description copied from class: Item
Sets the receiver's text. Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Overrides:
setText in class Item
Parameters:
string - the new text


org.eclipse.swt.events
Interface ExpandListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
All Known Implementing Classes:
ExpandAdapter


public interface ExpandListener extends SWTEventListener
Classes which implement this interface provide methods that deal with the expanding and collapsing of ExpandItems. After creating an instance of a class that implements this interface it can be added to a ExpandBar control using the addExpandListener method and removed using the removeExpandListener method. When a item of the ExpandBar is expanded or collapsed, the appropriate method will be invoked.
since. :
3.2
See Also:
ExpandAdapter, ExpandEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    itemCollapsed(ExpandEvent e)
Sent when an item is collapsed.
void    itemExpanded(ExpandEvent e)
Sent when an item is expanded.

Method Detail

itemCollapsed
void itemCollapsed(ExpandEvent e)
Sent when an item is collapsed.
Parameters:
e - an event containing information about the operation

itemExpanded
void itemExpanded(ExpandEvent e)
Sent when an item is expanded.
Parameters:
e - an event containing information about the operation


org.eclipse.swt.widgets
Class FileDialog
java.lang.Object
org.eclipse.swt.widgets.Dialog
org.eclipse.swt.widgets.FileDialog


public class FileDialog extends Dialog
Instances of this class allow the user to navigate the file system and select or enter a file name.
Styles:
SAVE, OPEN, MULTI
Events:
(none)
Note: Only one of the styles SAVE and OPEN may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
FileDialog snippets, SWT Example: ControlExample, Dialog tab, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
FileDialog(Shell parent)
Constructs a new instance of this class given only its parent.
FileDialog(Shell parent,           int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    getFileName()
Returns the path of the first file that was selected in the dialog relative to the filter path, or an empty string if no such file has been selected.
java.lang.String[]  getFileNames()
Returns a (possibly empty) array with the paths of all files that were selected in the dialog relative to the filter path.
java.lang.String[]  getFilterExtensions()
Returns the file extensions which the dialog will use to filter the files it shows.
int getFilterIndex()
Get the 0-based index of the file extension filter which was selected by the user, or -1 if no filter was selected.
java.lang.String[]  getFilterNames()
Returns the names that describe the filter extensions which the dialog will use to filter the files it shows.
java.lang.String    getFilterPath()
Returns the directory path that the dialog will use, or an empty string if this is not set.
boolean getOverwrite()
Returns the flag that the dialog will use to determine whether to prompt the user for file overwrite if the selected file already exists.
java.lang.String    open()
Makes the dialog visible and brings it to the front of the display.
void    setFileName(java.lang.String string )
Set the initial filename which the dialog will select by default when opened to the argument, which may be null.
void    setFilterExtensions(java.lang.Strin g[] extensions)
Set the file extensions which the dialog will use to filter the files it shows to the argument, which may be null.
void    setFilterIndex(int index)
Set the 0-based index of the file extension filter which the dialog will use initially to filter the files it shows to the argument.
void    setFilterNames(java.lang.String[] n ames)
Sets the names that describe the filter extensions which the dialog will use to filter the files it shows to the argument, which may be null.
void    setFilterPath(java.lang.String stri ng)
Sets the directory path that the dialog will use to the argument, which may be null.
void    setOverwrite(boolean overwrite)
Sets the flag that the dialog will use to determine whether to prompt the user for file overwrite if the selected file already exists.

Methods inherited from class org.eclipse.swt.widgets.Dialog
checkSubclass, getParent, getStyle, getText, setText

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

FileDialog
public FileDialog(Shell parent)
Constructs a new instance of this class given only its parent.
Parameters:
parent - a shell which will be the parent of the new instance
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass

FileDialog
public FileDialog(Shell parent,
                  int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a shell which will be the parent of the new instance
style - the style of dialog to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.SAVE, SWT.OPEN, SWT.MULTI

Method Detail

getFileName
public java.lang.String getFileName()
Returns the path of the first file that was selected in the dialog relative to the filter path, or an empty string if no such file has been selected.
Returns:
the relative path of the file

getFileNames
public java.lang.String[] getFileNames()
Returns a (possibly empty) array with the paths of all files that were selected in the dialog relative to the filter path.
Returns:
the relative paths of the files

getFilterExtensions
public java.lang.String[] getFilterExtensions()
Returns the file extensions which the dialog will use to filter the files it shows.
Returns:
the file extensions filter

getFilterIndex
public int getFilterIndex()
Get the 0-based index of the file extension filter which was selected by the user, or -1 if no filter was selected. This is an index into the FilterExtensions array and the FilterNames array.
Returns:
index the file extension filter index
since. :
3.4
See Also:
getFilterExtensions(), getFilterNames()

getFilterNames
public java.lang.String[] getFilterNames()
Returns the names that describe the filter extensions which the dialog will use to filter the files it shows.
Returns:
the list of filter names

getFilterPath
public java.lang.String getFilterPath()
Returns the directory path that the dialog will use, or an empty string if this is not set. File names in this path will appear in the dialog, filtered according to the filter extensions.
Returns:
the directory path string
See Also:
setFilterExtensions(java.lang.String[])

getOverwrite
public boolean getOverwrite()
Returns the flag that the dialog will use to determine whether to prompt the user for file overwrite if the selected file already exists.
Returns:
true if the dialog will prompt for file overwrite, false otherwise
since. :
3.4

open
public java.lang.String open()
Makes the dialog visible and brings it to the front of the display.
Returns:
a string describing the absolute path of the first selected file, or null if the dialog was cancelled or an error occurred
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the dialog has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the dialog

setFileName
public void setFileName(java.lang.String string)
Set the initial filename which the dialog will select by default when opened to the argument, which may be null. The name will be prefixed with the filter path when one is supplied.
Parameters:
string - the file name

setFilterExtensions
public void setFilterExtensions(java.lang.String[] extensions)
Set the file extensions which the dialog will use to filter the files it shows to the argument, which may be null. The strings are platform specific. For example, on some platforms, an extension filter string is typically of the form "*.extension", where "*.*" matches all files. For filters with multiple extensions, use semicolon as a separator, e.g. "*.jpg;*.png".
Note: On Mac, setting the file extension filter affects how app bundles are treated by the dialog. When a filter extension having the app extension (.app) is selected, bundles are treated as files. For all other extension filters, bundles are treated as directories. When no filter extension is set, bundles are treated as files.
Parameters:
extensions - the file extension filter
See Also:
to specify the user-friendly  names corresponding to the extensions

setFilterIndex
public void setFilterIndex(int index)
Set the 0-based index of the file extension filter which the dialog will use initially to filter the files it shows to the argument. This is an index into the FilterExtensions array and the FilterNames array.
Parameters:
index - the file extension filter index
since. :
3.4
See Also:
setFilterExtensions(java.lang.String[]), setFilterNames(java.lang.String[])

setFilterNames
public void setFilterNames(java.lang.String[] names)
Sets the names that describe the filter extensions which the dialog will use to filter the files it shows to the argument, which may be null. Each name is a user-friendly short description shown for its corresponding filter. The names array must be the same length as the extensions array.
Parameters:
names - the list of filter names, or null for no filter names
See Also:
setFilterExtensions(java.lang.String[])

setFilterPath
public void setFilterPath(java.lang.String string)
Sets the directory path that the dialog will use to the argument, which may be null. File names in this path will appear in the dialog, filtered according to the filter extensions. If the string is null, then the operating system's default filter path will be used. Note that the path string is platform dependent. For convenience, either '/' or '\' can be used as a path separator.
Parameters:
string - the directory path
See Also:
setFilterExtensions(java.lang.String[])

setOverwrite
public void setOverwrite(boolean overwrite)
Sets the flag that the dialog will use to determine whether to prompt the user for file overwrite if the selected file already exists.
Parameters:
overwrite - true if the dialog will prompt for file overwrite, false otherwise
since. :
3.4


org.eclipse.swt.internal.image
Class FileFormat
java.lang.Object
org.eclipse.swt.internal.image.FileFormat
Direct Known Subclasses:
GIFFileFormat, JPEGFileFormat, OS2BMPFileFormat, PNGFileFormat, TIFFFileFormat, WinBMPFileFormat, WinICOFileFormat


public abstract class FileFormat extends java.lang.Object
Abstract factory class for loading/unloading images from files or streams in various image file formats.

Constructor Summary
Constructors

Constructor and Description
FileFormat()

Method Summary
All Methods Static Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
static ImageData[]  load(java.io.InputStream is,     Im ageLoader loader)
Read the specified input stream using the specified loader, and return the device independent image array represented by the stream.
ImageData[] loadFromStream(org.eclipse.swt.inte rnal.image.LEDataInputStream stream)
Read the specified input stream, and return the device independent image array represented by the stream.
static void save(java.io.OutputStream os,     i nt format,     ImageLoader loader)
Write the device independent image array stored in the specified loader to the specified output stream using the specified file format.
void    unloadIntoStream(ImageLoader loader ,                 org.eclipse.swt.in ternal.image.LEDataOutputStream stre am)
Write the device independent image array stored in the specified loader to the specified output stream.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

FileFormat
public FileFormat()

Method Detail

loadFromStream
public ImageData[] loadFromStream(org.eclipse.swt.internal.image.LEDataInputStream stream)
Read the specified input stream, and return the device independent image array represented by the stream.

load
public static ImageData[] load(java.io.InputStream is,
                               ImageLoader loader)
Read the specified input stream using the specified loader, and return the device independent image array represented by the stream.

save
public static void save(java.io.OutputStream os,
                        int format,
                        ImageLoader loader)
Write the device independent image array stored in the specified loader to the specified output stream using the specified file format.

unloadIntoStream
public void unloadIntoStream(ImageLoader loader,
                             org.eclipse.swt.internal.image.LEDataOutputStream stream)
Write the device independent image array stored in the specified loader to the specified output stream.


org.eclipse.swt.layout
Class FillLayout
java.lang.Object
org.eclipse.swt.widgets.Layout
org.eclipse.swt.layout.FillLayout


public final class FillLayout extends Layout
FillLayout is the simplest layout class. It lays out controls in a single row or column, forcing them to be the same size. Initially, the controls will all be as tall as the tallest control, and as wide as the widest. FillLayout does not wrap, but you can specify margins and spacing. You might use it to lay out buttons in a task bar or tool bar, or to stack checkboxes in a Group. FillLayout can also be used when a Composite only has one child. For example, if a Shell has a single Group child, FillLayout will cause the Group to completely fill the Shell (if margins are 0).
Example code: first a FillLayout is created and its type field is set, and then the layout is set into the Composite. Note that in a FillLayout, children are always the same size, and they fill all available space.
                FillLayout fillLayout = new FillLayout();
                fillLayout.type = SWT.VERTICAL;
                shell.setLayout(fillLayout);
See Also:
SWT Example: LayoutExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
int marginHeight
marginHeight specifies the number of pixels of vertical margin that will be placed along the top and bottom edges of the layout.
int marginWidth
marginWidth specifies the number of pixels of horizontal margin that will be placed along the left and right edges of the layout.
int spacing
spacing specifies the number of pixels between the edge of one cell and the edge of its neighbouring cell.
int type
type specifies how controls will be positioned within the layout.

Constructor Summary
Constructors

Constructor and Description
FillLayout()
Constructs a new instance of this class.
FillLayout(int type)
Constructs a new instance of this class given the type.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
protected Point computeSize(Composite composite,          int wHint,            int h Hint,            boolean flushCache)
Computes and returns the size of the specified composite's client area according to this layout.
protected boolean   flushCache(Control control)
Instruct the layout to flush any cached values associated with the control specified in the argument control.
protected void  layout(Composite composite,       b oolean flushCache)
Lays out the children of the specified composite according to this layout.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

type
public int type
type specifies how controls will be positioned within the layout. The default value is HORIZONTAL. Possible values are:
HORIZONTAL: Position the controls horizontally from left to right
VERTICAL: Position the controls vertically from top to bottom

marginWidth
public int marginWidth
marginWidth specifies the number of pixels of horizontal margin that will be placed along the left and right edges of the layout. The default value is 0.
since. :
3.0

marginHeight
public int marginHeight
marginHeight specifies the number of pixels of vertical margin that will be placed along the top and bottom edges of the layout. The default value is 0.
since. :
3.0

spacing
public int spacing
spacing specifies the number of pixels between the edge of one cell and the edge of its neighbouring cell. The default value is 0.
since. :
3.0

Constructor Detail

FillLayout
public FillLayout()
Constructs a new instance of this class.

FillLayout
public FillLayout(int type)
Constructs a new instance of this class given the type.
Parameters:
type - the type of fill layout
since. :
2.0

Method Detail

computeSize
protected Point computeSize(Composite composite,
                            int wHint,
                            int hHint,
                            boolean flushCache)
Description copied from class: Layout
Computes and returns the size of the specified composite's client area according to this layout. This method computes the size that the client area of the composite must be in order to position all children at their preferred size inside the composite according to the layout algorithm encoded by this layout.
When a width or height hint is supplied, it is used to constrain the result. For example, if a width hint is provided that is less than the width of the client area, the layout may choose to wrap and increase height, clip, overlap, or otherwise constrain the children.
Specified by:
computeSize in class Layout
Parameters:
composite - a composite widget using this layout
wHint - width (SWT.DEFAULT for preferred size)
hHint - height (SWT.DEFAULT for preferred size)
flushCache - true means flush cached layout values
Returns:
a point containing the computed size (width, height)
See Also:
Layout.layout(org.eclipse.swt.widgets.Composite, boolean), Control.getBorderWidth(), Control.getBounds(), Control.getSize(), Control.pack(boolean), "computeTrim, getClientArea for controls that implement them"

flushCache
protected boolean flushCache(Control control)
Description copied from class: Layout
Instruct the layout to flush any cached values associated with the control specified in the argument control.
Overrides:
flushCache in class Layout
Parameters:
control - a control managed by this layout
Returns:
true if the Layout has flushed all cached information associated with control

layout
protected void layout(Composite composite,
                      boolean flushCache)
Description copied from class: Layout
Lays out the children of the specified composite according to this layout. This method positions and sizes the children of a composite using the layout algorithm encoded by this layout. Children of the composite are positioned in the client area of the composite. The position of the composite is not altered by this method.
When the flush cache hint is true, the layout is instructed to flush any cached values associated with the children. Typically, a layout will cache the preferred sizes of the children to avoid the expense of computing these values each time the widget is laid out.
When layout is triggered explicitly by the programmer the flush cache hint is true. When layout is triggered by a resize, either caused by the programmer or by the user, the hint is false.
Specified by:
layout in class Layout
Parameters:
composite - a composite widget using this layout
flushCache - true means flush cached layout values

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the layout


org.eclipse.swt.events
Class FocusAdapter
java.lang.Object
org.eclipse.swt.events.FocusAdapter
All Implemented Interfaces:
java.util.EventListener, FocusListener, SWTEventListener


public abstract class FocusAdapter extends java.lang.Object implements FocusListener
This adapter class provides default implementations for the methods described by the FocusListener interface. Classes that wish to deal with FocusEvents can extend this class and override only the methods which they are interested in.
See Also:
FocusListener, FocusEvent, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
FocusAdapter()

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    focusGained(FocusEvent e)
Sent when a control gets focus.
void    focusLost(FocusEvent e)
Sent when a control loses focus.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Methods inherited from interface org.eclipse.swt.events.FocusListener
focusGainedAdapter, focusLostAdapter

Constructor Detail

FocusAdapter
public FocusAdapter()

Method Detail

focusGained
public void focusGained(FocusEvent e)
Sent when a control gets focus. The default behavior is to do nothing.
Specified by:
focusGained in interface FocusListener
Parameters:
e - an event containing information about the focus change

focusLost
public void focusLost(FocusEvent e)
Sent when a control loses focus. The default behavior is to do nothing.
Specified by:
focusLost in interface FocusListener
Parameters:
e - an event containing information about the focus change


org.eclipse.swt.events
Class FocusEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.FocusEvent
All Implemented Interfaces:
java.io.Serializable


public final class FocusEvent extends TypedEvent
Instances of this class are sent as a result of widgets gaining and losing focus.
See Also:
FocusListener, Sample code and further information, Serialized Form

Field Summary

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
FocusEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary

Methods inherited from class org.eclipse.swt.events.TypedEvent
toString

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

FocusEvent
public FocusEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information


org.eclipse.swt.events
Interface FocusListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
All Known Implementing Classes:
FocusAdapter


public interface FocusListener extends SWTEventListener
Classes which implement this interface provide methods that deal with the events that are generated as controls gain and lose focus. After creating an instance of a class that implements this interface it can be added to a control using the addFocusListener method and removed using the removeFocusListener method. When a control gains or loses focus, the appropriate method will be invoked.
See Also:
FocusAdapter, FocusEvent

Method Summary
All Methods Static Methods Instance Methods Abstract Methods Default Methods

Modifier and Type   Method and Description
void    focusGained(FocusEvent e)
Sent when a control gets focus.
static FocusListener    focusGainedAdapter(java.util.functi on.Consumer<FocusEvent> c)
Static helper method to create a focus listener for the focusGained(FocusEvent e)) method with a lambda expression.
void    focusLost(FocusEvent e)
Sent when a control loses focus.
static FocusListener    focusLostAdapter(java.util.function .Consumer<FocusEvent> c)
Static helper method to create a focus listener for the focusLost(FocusEvent e)) method with a lambda expression.

Method Detail

focusGained
void focusGained(FocusEvent e)
Sent when a control gets focus.
Parameters:
e - an event containing information about the focus change

focusLost
void focusLost(FocusEvent e)
Sent when a control loses focus.
Parameters:
e - an event containing information about the focus change

focusGainedAdapter
static FocusListener focusGainedAdapter(java.util.function.Consumer<FocusEvent> c)
Static helper method to create a focus listener for the focusGained(FocusEvent e)) method with a lambda expression.
Parameters:
c - the consumer of the event
Returns:
FocusListener
since. :
3.106

focusLostAdapter
static FocusListener focusLostAdapter(java.util.function.Consumer<FocusEvent> c)
Static helper method to create a focus listener for the focusLost(FocusEvent e)) method with a lambda expression.
Parameters:
c - the consumer of the event
Returns:
FocusListener
since. :
3.106


org.eclipse.swt.graphics
Class Font
java.lang.Object
org.eclipse.swt.graphics.Resource
org.eclipse.swt.graphics.Font


public final class Font extends Resource
Instances of this class manage operating system resources that define how text looks when it is displayed. Fonts may be constructed by providing a device and either name, size and style information or a FontData object which encapsulates this data. Application code must explicitly invoke the Font.dispose() method to release the operating system resources managed by each instance when those instances are no longer required.
See Also:
FontData, Font snippets, SWT Examples: GraphicsExample, PaintExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
long    handle
the handle to the OS font resource (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.

Constructor Summary
Constructors

Constructor and Description
Font(Device device,     FontData fd)
Constructs a new font given a device and font data which describes the desired font's appearance.
Font(Device device,     FontData[] fds)
Constructs a new font given a device and an array of font data which describes the desired font's appearance.
Font(Device device,     java.lang.String name,     int height,     int  style)
Constructs a new font given a device, a font name, the height of the desired font in points, and a font style.

Method Summary
All Methods Static Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
FontData[]  getFontData()
Returns an array of FontDatas representing the receiver.
int hashCode()
Returns an integer hash code for the receiver.
boolean isDisposed()
Returns true if the font has been disposed, and false otherwise.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.
static Font win32_new(Device device,          l ong handle)
Invokes platform specific functionality to allocate a new font.

Methods inherited from class org.eclipse.swt.graphics.Resource
dispose, getDevice

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait

Field Detail

handle
public long handle
the handle to the OS font resource (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

Constructor Detail

Font
public Font(Device device,
            FontData fd)
Constructs a new font given a device and font data which describes the desired font's appearance. You must dispose the font when it is no longer required.
Parameters:
device - the device to create the font on
fd - the FontData that describes the desired font (must not be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if the fd argument is null
SWTError -
ERROR_NO_HANDLES - if a font could not be created from the given font data
See Also:
Resource.dispose()

Font
public Font(Device device,
            FontData[] fds)
Constructs a new font given a device and an array of font data which describes the desired font's appearance. You must dispose the font when it is no longer required.
Parameters:
device - the device to create the font on
fds - the array of FontData that describes the desired font (must not be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if the fds argument is null
ERROR_INVALID_ARGUMENT - if the length of fds is zero
ERROR_NULL_ARGUMENT - if any fd in the array is null
SWTError -
ERROR_NO_HANDLES - if a font could not be created from the given font data
since. :
2.1
See Also:
Resource.dispose()

Font
public Font(Device device,
            java.lang.String name,
            int height,
            int style)
Constructs a new font given a device, a font name, the height of the desired font in points, and a font style. You must dispose the font when it is no longer required.
Parameters:
device - the device to create the font on
name - the name of the font (must not be null)
height - the font height in points
style - a bit or combination of NORMAL, BOLD, ITALIC
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if the name argument is null
ERROR_INVALID_ARGUMENT - if the height is negative
SWTError -
ERROR_NO_HANDLES - if a font could not be created from the given arguments
See Also:
Resource.dispose()

Method Detail

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

getFontData
public FontData[] getFontData()
Returns an array of FontDatas representing the receiver. On Windows, only one FontData will be returned per font. On X however, a Font object may be composed of multiple X fonts. To support this case, we return an array of font data objects.
Returns:
an array of font data objects describing the receiver
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
See Also:
equals(java.lang.Object)

isDisposed
public boolean isDisposed()
Returns true if the font has been disposed, and false otherwise. This method gets the dispose state for the font. When a font has been disposed, it is an error to invoke any other method (except Resource.dispose()) using the font.
Specified by:
isDisposed in class Resource
Returns:
true when the font is disposed and false otherwise

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the receiver

win32_new
public static Font win32_new(Device device,
                             long handle)
Invokes platform specific functionality to allocate a new font. IMPORTANT: This method is not part of the public API for Font. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Parameters:
device - the device on which to allocate the color
handle - the handle for the font
Returns:
a new font object containing the specified device and handle


org.eclipse.swt.graphics
Class FontData
java.lang.Object
org.eclipse.swt.graphics.FontData


public final class FontData extends java.lang.Object
Instances of this class describe operating system fonts. For platform-independent behaviour, use the get and set methods corresponding to the following properties:
height
the height of the font in points
name
the face name of the font, which may include the foundry
style
A bitwise combination of NORMAL, ITALIC and BOLD
If extra, platform-dependent functionality is required:
On Windows, the data member of the FontData corresponds to a Windows LOGFONT structure whose fields may be retrieved and modified.
On X, the fields of the FontData correspond to the entries in the font's XLFD name and may be retrieved and modified.
Application code does not need to explicitly release the resources managed by each instance when those instances are no longer required, and thus no dispose() method is provided.
See Also:
Font, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
LOGFONT data
A Win32 LOGFONT struct (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.
float   height
The height of the font data in points (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.

Constructor Summary
Constructors

Constructor and Description
FontData()
Constructs a new uninitialized font data.
FontData(java.lang.String string)
Constructs a new FontData given a string representation in the form generated by the FontData.toString method.
FontData(java.lang.String name,         int height,         int style)
Constructs a new font data given a font name, the height of the desired font in points, and a font style.

Method Summary
All Methods Static Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
int getHeight()
Returns the height of the receiver in points.
java.lang.String    getLocale()
Returns the locale of the receiver.
java.lang.String    getName()
Returns the name of the receiver.
int getStyle()
Returns the style of the receiver which is a bitwise OR of one or more of the SWT constants NORMAL, BOLD and ITALIC.
int hashCode()
Returns an integer hash code for the receiver.
void    setHeight(int height)
Sets the height of the receiver.
void    setLocale(java.lang.String locale)
Sets the locale of the receiver.
void    setName(java.lang.String name)
Sets the name of the receiver.
void    setStyle(int style)
Sets the style of the receiver to the argument which must be a bitwise OR of one or more of the SWT constants NORMAL, BOLD and ITALIC.
java.lang.String    toString()
Returns a string representation of the receiver which is suitable for constructing an equivalent instance using the FontData(String) constructor.
static FontData win32_new(LOGFONT data,          fl oat height)
Invokes platform specific functionality to allocate a new font data.

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait

Field Detail

data
public LOGFONT data
A Win32 LOGFONT struct (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

height
public float height
The height of the font data in points (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

Constructor Detail

FontData
public FontData()
Constructs a new uninitialized font data.

FontData
public FontData(java.lang.String string)
Constructs a new FontData given a string representation in the form generated by the FontData.toString method. Note that the representation varies between platforms, and a FontData can only be created from a string that was generated on the same platform.
Parameters:
string - the string representation of a FontData (must not be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
ERROR_INVALID_ARGUMENT - if the argument does not represent a valid description
See Also:
toString()

FontData
public FontData(java.lang.String name,
                int height,
                int style)
Constructs a new font data given a font name, the height of the desired font in points, and a font style.
Parameters:
name - the name of the font (must not be null)
height - the font height in points
style - a bit or combination of NORMAL, BOLD, ITALIC
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - when the font name is null
ERROR_INVALID_ARGUMENT - if the height is negative

Method Detail

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

getHeight
public int getHeight()
Returns the height of the receiver in points.
Returns:
the height of this FontData
See Also:
setHeight(int)

getLocale
public java.lang.String getLocale()
Returns the locale of the receiver. The locale determines which platform character set this font is going to use. Widgets and graphics operations that use this font will convert UNICODE strings to the platform character set of the specified locale.
On platforms where there are multiple character sets for a given language/country locale, the variant portion of the locale will determine the character set.
Returns:
the String representing a Locale object
since. :
3.0

getName
public java.lang.String getName()
Returns the name of the receiver. On platforms that support font foundries, the return value will be the foundry followed by a dash ("-") followed by the face name.
Returns:
the name of this FontData
See Also:
setName(java.lang.String)

getStyle
public int getStyle()
Returns the style of the receiver which is a bitwise OR of one or more of the SWT constants NORMAL, BOLD and ITALIC.
Returns:
the style of this FontData
See Also:
setStyle(int)

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
See Also:
equals(java.lang.Object)

setHeight
public void setHeight(int height)
Sets the height of the receiver. The parameter is specified in terms of points, where a point is one seventy-second of an inch.
Parameters:
height - the height of the FontData
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the height is negative
See Also:
getHeight()

setLocale
public void setLocale(java.lang.String locale)
Sets the locale of the receiver. The locale determines which platform character set this font is going to use. Widgets and graphics operations that use this font will convert UNICODE strings to the platform character set of the specified locale.
On platforms where there are multiple character sets for a given language/country locale, the variant portion of the locale will determine the character set.
Parameters:
locale - the String representing a Locale object
See Also:
Locale.toString()

setName
public void setName(java.lang.String name)
Sets the name of the receiver. Some platforms support font foundries. On these platforms, the name of the font specified in setName() may have one of the following forms:
a face name (for example, "courier")
a foundry followed by a dash ("-") followed by a face name (for example, "adobe-courier")
In either case, the name returned from getName() will include the foundry. On platforms that do not support font foundries, only the face name (for example, "courier") is used in setName() and getName().
Parameters:
name - the name of the font data (must not be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - when the font name is null
See Also:
getName()

setStyle
public void setStyle(int style)
Sets the style of the receiver to the argument which must be a bitwise OR of one or more of the SWT constants NORMAL, BOLD and ITALIC. All other style bits are ignored.
Parameters:
style - the new style for this FontData
See Also:
getStyle()

toString
public java.lang.String toString()
Returns a string representation of the receiver which is suitable for constructing an equivalent instance using the FontData(String) constructor.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the FontData
See Also:
FontData

win32_new
public static FontData win32_new(LOGFONT data,
                                 float height)
Invokes platform specific functionality to allocate a new font data. IMPORTANT: This method is not part of the public API for FontData. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Parameters:
data - the LOGFONT for the font data
height - the height of the font data
Returns:
a new font data object containing the specified LOGFONT and height


org.eclipse.swt.widgets
Class FontDialog
java.lang.Object
org.eclipse.swt.widgets.Dialog
org.eclipse.swt.widgets.FontDialog


public class FontDialog extends Dialog
Instances of this class allow the user to select a font from all available fonts in the system.
Styles:
(none)
Events:
(none)
IMPORTANT: This class is not intended to be subclassed.
See Also:
SWT Example: ControlExample, Dialog tab, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
FontDialog(Shell parent)
Constructs a new instance of this class given only its parent.
FontDialog(Shell parent,           int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods Deprecated Methods

Modifier and Type   Method and Description
boolean getEffectsVisible()
Returns true if the dialog's effects selection controls are visible, and false otherwise.
FontData    getFontData()
Deprecated.< /span>
use #getFontList ()
FontData[]  getFontList()
Returns a FontData set describing the font that was selected in the dialog, or null if none is available.
RGB getRGB()
Returns an RGB describing the color that was selected in the dialog, or null if none is available.
FontData    open()
Makes the dialog visible and brings it to the front of the display.
void    setEffectsVisible(boolean visible)
Sets the effects selection controls in the dialog visible if the argument is true, and invisible otherwise.
void    setFontData(FontData fontData)
Deprecated.< /span>
use #setFontList (FontData [])
void    setFontList(FontData[] fontData)
Sets the set of FontData objects describing the font to be selected by default in the dialog, or null to let the platform choose one.
void    setRGB(RGB rgb)
Sets the RGB describing the color to be selected by default in the dialog, or null to let the platform choose one.

Methods inherited from class org.eclipse.swt.widgets.Dialog
checkSubclass, getParent, getStyle, getText, setText

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

FontDialog
public FontDialog(Shell parent)
Constructs a new instance of this class given only its parent.
Parameters:
parent - a shell which will be the parent of the new instance
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass

FontDialog
public FontDialog(Shell parent,
                  int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a shell which will be the parent of the new instance
style - the style of dialog to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass

Method Detail

getEffectsVisible
public boolean getEffectsVisible()
Returns true if the dialog's effects selection controls are visible, and false otherwise. If the platform's font dialog does not have any effects selection controls, then this method always returns false.
Returns:
true if the dialog's effects selection controls are visible and false otherwise
since. :
3.8

getFontData
@Deprecated
public FontData getFontData()
Deprecated. use #getFontList ()
Returns a FontData object describing the font that was selected in the dialog, or null if none is available.
Returns:
the FontData for the selected font, or null

getFontList
public FontData[] getFontList()
Returns a FontData set describing the font that was selected in the dialog, or null if none is available.
Returns:
the FontData for the selected font, or null
since. :
2.1.1

getRGB
public RGB getRGB()
Returns an RGB describing the color that was selected in the dialog, or null if none is available.
Returns:
the RGB value for the selected color, or null
since. :
2.1
See Also:
PaletteData.getRGBs()

open
public FontData open()
Makes the dialog visible and brings it to the front of the display.
Returns:
a FontData object describing the font that was selected, or null if the dialog was cancelled or an error occurred
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the dialog has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the dialog

setEffectsVisible
public void setEffectsVisible(boolean visible)
Sets the effects selection controls in the dialog visible if the argument is true, and invisible otherwise. By default the effects selection controls are displayed if the platform font dialog supports effects selection.
Parameters:
visible - whether or not the dialog will show the effects selection controls
since. :
3.8

setFontData
@Deprecated
public void setFontData(FontData fontData)
Deprecated. use #setFontList (FontData [])
Sets a FontData object describing the font to be selected by default in the dialog, or null to let the platform choose one.
Parameters:
fontData - the FontData to use initially, or null

setFontList
public void setFontList(FontData[] fontData)
Sets the set of FontData objects describing the font to be selected by default in the dialog, or null to let the platform choose one.
Parameters:
fontData - the set of FontData objects to use initially, or null to let the platform select a default when open() is called
since. :
2.1.1
See Also:
Font.getFontData()

setRGB
public void setRGB(RGB rgb)
Sets the RGB describing the color to be selected by default in the dialog, or null to let the platform choose one.
Parameters:
rgb - the RGB value to use initially, or null to let the platform select a default when open() is called
since. :
2.1
See Also:
PaletteData.getRGBs()


org.eclipse.swt.graphics
Class FontMetrics
java.lang.Object
org.eclipse.swt.graphics.FontMetrics


public final class FontMetrics extends java.lang.Object
Instances of this class provide measurement information about fonts including ascent, descent, height, leading space between rows, and average character width. FontMetrics are obtained from GCs using the getFontMetrics() method.
See Also:
GC.getFontMetrics(), Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
TEXTMETRIC  handle
On Windows, handle is a Win32 TEXTMETRIC struct (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.

Method Summary
All Methods Static Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
int getAscent()
Returns the ascent of the font described by the receiver.
int getAverageCharWidth()
Returns the average character width, measured in pixels, of the font described by the receiver.
int getDescent()
Returns the descent of the font described by the receiver.
int getHeight()
Returns the height of the font described by the receiver, measured in pixels.
int getLeading()
Returns the leading area of the font described by the receiver.
int hashCode()
Returns an integer hash code for the receiver.
static FontMetrics  win32_new(TEXTMETRIC handle)
Invokes platform specific functionality to allocate a new font metrics.

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, toString, wait, wait, wait

Field Detail

handle
public TEXTMETRIC handle
On Windows, handle is a Win32 TEXTMETRIC struct (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

Method Detail

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

getAscent
public int getAscent()
Returns the ascent of the font described by the receiver. A font's ascent is the distance from the baseline to the top of actual characters, not including any of the leading area, measured in pixels.
Returns:
the ascent of the font

getAverageCharWidth
public int getAverageCharWidth()
Returns the average character width, measured in pixels, of the font described by the receiver.
Returns:
the average character width of the font

getDescent
public int getDescent()
Returns the descent of the font described by the receiver. A font's descent is the distance from the baseline to the bottom of actual characters, not including any of the leading area, measured in pixels.
Returns:
the descent of the font

getHeight
public int getHeight()
Returns the height of the font described by the receiver, measured in pixels. A font's height is the sum of its ascent, descent and leading area.
Returns:
the height of the font
See Also:
getAscent(), getDescent(), getLeading()

getLeading
public int getLeading()
Returns the leading area of the font described by the receiver. A font's leading area is the space above its ascent which may include accents or other marks.
Returns:
the leading space of the font

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
See Also:
equals(java.lang.Object)

win32_new
public static FontMetrics win32_new(TEXTMETRIC handle)
Invokes platform specific functionality to allocate a new font metrics. IMPORTANT: This method is not part of the public API for FontMetrics. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Parameters:
handle - the TEXTMETRIC containing information about a font
Returns:
a new font metrics object containing the specified TEXTMETRIC


org.eclipse.swt.layout
Class FormAttachment
java.lang.Object
org.eclipse.swt.layout.FormAttachment


public final class FormAttachment extends java.lang.Object
Instances of this class are used to define the edges of a control within a FormLayout. FormAttachments are set into the top, bottom, left, and right fields of the FormData for a control. For example:
                FormData data = new FormData();
                data.top = new FormAttachment(0,5);
                data.bottom = new FormAttachment(100,-5);
                data.left = new FormAttachment(0,5);
                data.right = new FormAttachment(100,-5);
                button.setLayoutData(data);
A FormAttachment defines where to attach the side of a control by using the equation, y = ax + b. The "a" term represents a fraction of the parent composite's width (from the left) or height (from the top). It can be defined using a numerator and denominator, or just a percentage value. If a percentage is used, the denominator is set to 100. The "b" term in the equation represents an offset, in pixels, from the attachment position. For example:
                FormAttachment attach = new FormAttachment (20, -5);
specifies that the side to which the FormAttachment object belongs will lie at 20% of the parent composite, minus 5 pixels. Control sides can also be attached to another control. For example:
                FormAttachment attach = new FormAttachment (button, 10);
specifies that the side to which the FormAttachment object belongs will lie in the same position as the adjacent side of the button control, plus 10 pixels. The control side can also be attached to the opposite side of the specified control. For example: FormData data = new FormData (); data.left = new FormAttachment (button, 0, SWT.LEFT);
specifies that the left side of the control will lie in the same position as the left side of the button control. The control can also be attached in a position that will center the control on the specified control. For example: data.left = new FormAttachment (button, 0, SWT.CENTER);
specifies that the left side of the control will be positioned so that it is centered between the left and right sides of the button control. If the alignment is not specified, the default is to attach to the adjacent side.
since. :
2.0
See Also:
FormLayout, FormData, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
int alignment
alignment specifies the alignment of the control side that is attached to a control.
Control control
control specifies the control to which the control side is attached.
int denominator
denominator specifies the denominator of the "a" term in the equation, y = ax + b, which defines the attachment.
int numerator
numerator specifies the numerator of the "a" term in the equation, y = ax + b, which defines the attachment.
int offset
offset specifies the offset, in pixels, of the control side from the attachment position.

Constructor Summary
Constructors

Constructor and Description
FormAttachment()
Constructs a new instance of this class.
FormAttachment(Control control)
Constructs a new instance of this class given a control.
FormAttachment(Control control,               int offset)
Constructs a new instance of this class given a control and an offset.
FormAttachment(Control control,               int offset,  int alignment)
Constructs a new instance of this class given a control, an offset and an alignment.
FormAttachment(int numerator)
Constructs a new instance of this class given a numerator since.  no denominator or offset is specified, the default is to treat the numerator as a percentage of the form, with a denominator of 100.
FormAttachment(int numerator,               int offset)
Constructs a new instance of this class given a numerator and an offset.
FormAttachment(int numerator,               int denominator,     int offset)
Constructs a new instance of this class given a numerator and denominator and an offset.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

numerator
public int numerator
numerator specifies the numerator of the "a" term in the equation, y = ax + b, which defines the attachment.

denominator
public int denominator
denominator specifies the denominator of the "a" term in the equation, y = ax + b, which defines the attachment. The default value is 100.

offset
public int offset
offset specifies the offset, in pixels, of the control side from the attachment position. If the offset is positive, then the control side is offset to the right of or below the attachment position. If it is negative, then the control side is offset to the left of or above the attachment position. This is equivalent to the "b" term in the equation y = ax + b. The default value is 0.

control
public Control control
control specifies the control to which the control side is attached.

alignment
public int alignment
alignment specifies the alignment of the control side that is attached to a control. For top and bottom attachments, TOP, BOTTOM and CENTER are used. For left and right attachments, LEFT, RIGHT and CENTER are used. If any other case occurs, the default will be used instead.

Possible values are:
SWT.TOP: Attach the side to the top side of the specified control.
SWT.BOTTOM: Attach the side to the bottom side of the specified control.
SWT.LEFT: Attach the side to the left side of the specified control.
SWT.RIGHT: Attach the side to the right side of the specified control.
SWT.CENTER: Attach the side at a position which will center the control on the specified control.
SWT.DEFAULT: Attach the side to the adjacent side of the specified control.

Constructor Detail

FormAttachment
public FormAttachment()
Constructs a new instance of this class. since.  no numerator, denominator or offset is specified, the attachment is treated as a percentage of the form. The numerator is zero, the denominator is 100 and the offset is zero.
since. :
3.2

FormAttachment
public FormAttachment(int numerator)
Constructs a new instance of this class given a numerator since.  no denominator or offset is specified, the default is to treat the numerator as a percentage of the form, with a denominator of 100. The offset is zero.
Parameters:
numerator - the percentage of the position
since. :
3.0

FormAttachment
public FormAttachment(int numerator,
                      int offset)
Constructs a new instance of this class given a numerator and an offset. since.  no denominator is specified, the default is to treat the numerator as a percentage of the form, with a denominator of 100.
Parameters:
numerator - the percentage of the position
offset - the offset of the side from the position

FormAttachment
public FormAttachment(int numerator,
                      int denominator,
                      int offset)
Constructs a new instance of this class given a numerator and denominator and an offset. The position of the side is given by the fraction of the form defined by the numerator and denominator.
Parameters:
numerator - the numerator of the position
denominator - the denominator of the position
offset - the offset of the side from the position

FormAttachment
public FormAttachment(Control control)
Constructs a new instance of this class given a control. since.  no alignment is specified, the default alignment is to attach the side to the adjacent side of the specified control. since.  no offset is specified, an offset of 0 is used.
Parameters:
control - the control the side is attached to

FormAttachment
public FormAttachment(Control control,
                      int offset)
Constructs a new instance of this class given a control and an offset. since.  no alignment is specified, the default alignment is to attach the side to the adjacent side of the specified control.
Parameters:
control - the control the side is attached to
offset - the offset of the side from the control

FormAttachment
public FormAttachment(Control control,
                      int offset,
                      int alignment)
Constructs a new instance of this class given a control, an offset and an alignment. The possible alignment values are:
SWT.TOP
the side will be attached to the top side of the specified control
SWT.BOTTOM
the side will be attached to the bottom side of the specified control
SWT.LEFT
the side will be attached to the left side of the specified control
SWT.RIGHT
the side will be attached to the right side of the specified control
SWT.CENTER
the side will be centered on the same side of the specified control
SWT.DEFAULT
the side will be attached to the adjacent side of the specified control
Parameters:
control - the control the side is attached to
offset - the offset of the side from the control
alignment - the alignment of the side to the control it is attached to, one of TOP, BOTTOM, LEFT, RIGHT, CENTER, or DEFAULT

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the FormAttachment


org.eclipse.swt.layout
Class FormData
java.lang.Object
org.eclipse.swt.layout.FormData


public final class FormData extends java.lang.Object
Instances of this class are used to define the attachments of a control in a FormLayout. To set a FormData object into a control, you use the setLayoutData () method. To define attachments for the FormData, set the fields directly, like this:
                FormData data = new FormData();
                data.left = new FormAttachment(0,5);
                data.right = new FormAttachment(100,-5);
                button.setLayoutData(formData);
FormData contains the FormAttachments for each edge of the control that the FormLayout uses to determine the size and position of the control. FormData objects also allow you to set the width and height of controls within a FormLayout.
since. :
2.0
See Also:
FormLayout, FormAttachment, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
FormAttachment  bottom
bottom specifies the attachment of the bottom of the control.
int height
height specifies the preferred height in pixels.
FormAttachment  left
left specifies the attachment of the left side of the control.
FormAttachment  right
right specifies the attachment of the right side of the control.
FormAttachment  top
top specifies the attachment of the top of the control.
int width
width specifies the preferred width in pixels.

Constructor Summary
Constructors

Constructor and Description
FormData()
Constructs a new instance of FormData using default values.
FormData(int width,         int height)
Constructs a new instance of FormData according to the parameters.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

width
public int width
width specifies the preferred width in pixels. This value is the wHint passed into Control.computeSize(int, int, boolean) to determine the preferred size of the control. The default value is SWT.DEFAULT.
See Also:
Control.computeSize(int, int, boolean)

height
public int height
height specifies the preferred height in pixels. This value is the hHint passed into Control.computeSize(int, int, boolean) to determine the preferred size of the control. The default value is SWT.DEFAULT.
See Also:
Control.computeSize(int, int, boolean)

left
public FormAttachment left
left specifies the attachment of the left side of the control.

right
public FormAttachment right
right specifies the attachment of the right side of the control.

top
public FormAttachment top
top specifies the attachment of the top of the control.

bottom
public FormAttachment bottom
bottom specifies the attachment of the bottom of the control.

Constructor Detail

FormData
public FormData()
Constructs a new instance of FormData using default values.

FormData
public FormData(int width,
                int height)
Constructs a new instance of FormData according to the parameters. A value of SWT.DEFAULT indicates that no minimum width or no minimum height is specified.
Parameters:
width - a minimum width for the control
height - a minimum height for the control

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the FormData object


org.eclipse.swt.layout
Class FormLayout
java.lang.Object
org.eclipse.swt.widgets.Layout
org.eclipse.swt.layout.FormLayout


public final class FormLayout extends Layout
Instances of this class control the position and size of the children of a composite control by using FormAttachments to optionally configure the left, top, right and bottom edges of each child. The following example code creates a FormLayout and then sets it into a Shell:
                Display display = new Display ();
                Shell shell = new Shell(display);
                FormLayout layout = new FormLayout();
                layout.marginWidth = 3;
                layout.marginHeight = 3;
                shell.setLayout(layout);
To use a FormLayout, create a FormData with FormAttachment for each child of Composite. The following example code attaches button1 to the top and left edge of the composite and button2 to the right edge of button1 and the top and right edges of the composite:
                FormData data1 = new FormData();
                data1.left = new FormAttachment(0, 0);
                data1.top = new FormAttachment(0, 0);
                button1.setLayoutData(data1);
                FormData data2 = new FormData();
                data2.left = new FormAttachment(button1);
                data2.top = new FormAttachment(0, 0);
                data2.right = new FormAttachment(100, 0);
                button2.setLayoutData(data2);
Each side of a child control can be attached to a position in the parent composite, or to other controls within the Composite by creating instances of FormAttachment and setting them into the top, bottom, left, and right fields of the child's FormData.
If a side is not given an attachment, it is defined as not being attached to anything, causing the child to remain at its preferred size. If a child is given no attachment on either the left or the right or top or bottom, it is automatically attached to the left and top of the composite respectively. The following code positions button1 and button2 but relies on default attachments:
                FormData data2 = new FormData();
                data2.left = new FormAttachment(button1);
                data2.right = new FormAttachment(100, 0);
                button2.setLayoutData(data2);
IMPORTANT: Do not define circular attachments. For example, do not attach the right edge of button1 to the left edge of button2 and then attach the left edge of button2 to the right edge of button1. This will over constrain the layout, causing undefined behavior. The algorithm will terminate, but the results are undefined.
since. :
2.0
See Also:
FormData, FormAttachment, FormLayout snippets, SWT Example: LayoutExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
int marginBottom
marginBottom specifies the number of pixels of vertical margin that will be placed along the bottom edge of the layout.
int marginHeight
marginHeight specifies the number of pixels of vertical margin that will be placed along the top and bottom edges of the layout.
int marginLeft
marginLeft specifies the number of pixels of horizontal margin that will be placed along the left edge of the layout.
int marginRight
marginRight specifies the number of pixels of horizontal margin that will be placed along the right edge of the layout.
int marginTop
marginTop specifies the number of pixels of vertical margin that will be placed along the top edge of the layout.
int marginWidth
marginWidth specifies the number of pixels of horizontal margin that will be placed along the left and right edges of the layout.
int spacing
spacing specifies the number of pixels between the edge of one control and the edge of its neighbouring control.

Constructor Summary
Constructors

Constructor and Description
FormLayout()
Constructs a new instance of this class.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
protected Point computeSize(Composite composite,          int wHint,            int h Hint,            boolean flushCache)
Computes and returns the size of the specified composite's client area according to this layout.
protected boolean   flushCache(Control control)
Instruct the layout to flush any cached values associated with the control specified in the argument control.
protected void  layout(Composite composite,       b oolean flushCache)
Lays out the children of the specified composite according to this layout.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

marginWidth
public int marginWidth
marginWidth specifies the number of pixels of horizontal margin that will be placed along the left and right edges of the layout. The default value is 0.

marginHeight
public int marginHeight
marginHeight specifies the number of pixels of vertical margin that will be placed along the top and bottom edges of the layout. The default value is 0.

marginLeft
public int marginLeft
marginLeft specifies the number of pixels of horizontal margin that will be placed along the left edge of the layout. The default value is 0.
since. :
3.1

marginTop
public int marginTop
marginTop specifies the number of pixels of vertical margin that will be placed along the top edge of the layout. The default value is 0.
since. :
3.1

marginRight
public int marginRight
marginRight specifies the number of pixels of horizontal margin that will be placed along the right edge of the layout. The default value is 0.
since. :
3.1

marginBottom
public int marginBottom
marginBottom specifies the number of pixels of vertical margin that will be placed along the bottom edge of the layout. The default value is 0.
since. :
3.1

spacing
public int spacing
spacing specifies the number of pixels between the edge of one control and the edge of its neighbouring control. The default value is 0.
since. :
3.0

Constructor Detail

FormLayout
public FormLayout()
Constructs a new instance of this class.

Method Detail

computeSize
protected Point computeSize(Composite composite,
                            int wHint,
                            int hHint,
                            boolean flushCache)
Description copied from class: Layout
Computes and returns the size of the specified composite's client area according to this layout. This method computes the size that the client area of the composite must be in order to position all children at their preferred size inside the composite according to the layout algorithm encoded by this layout.
When a width or height hint is supplied, it is used to constrain the result. For example, if a width hint is provided that is less than the width of the client area, the layout may choose to wrap and increase height, clip, overlap, or otherwise constrain the children.
Specified by:
computeSize in class Layout
Parameters:
composite - a composite widget using this layout
wHint - width (SWT.DEFAULT for preferred size)
hHint - height (SWT.DEFAULT for preferred size)
flushCache - true means flush cached layout values
Returns:
a point containing the computed size (width, height)
See Also:
Layout.layout(org.eclipse.swt.widgets.Composite, boolean), Control.getBorderWidth(), Control.getBounds(), Control.getSize(), Control.pack(boolean), "computeTrim, getClientArea for controls that implement them"

flushCache
protected boolean flushCache(Control control)
Description copied from class: Layout
Instruct the layout to flush any cached values associated with the control specified in the argument control.
Overrides:
flushCache in class Layout
Parameters:
control - a control managed by this layout
Returns:
true if the Layout has flushed all cached information associated with control

layout
protected void layout(Composite composite,
                      boolean flushCache)
Description copied from class: Layout
Lays out the children of the specified composite according to this layout. This method positions and sizes the children of a composite using the layout algorithm encoded by this layout. Children of the composite are positioned in the client area of the composite. The position of the composite is not altered by this method.
When the flush cache hint is true, the layout is instructed to flush any cached values associated with the children. Typically, a layout will cache the preferred sizes of the children to avoid the expense of computing these values each time the widget is laid out.
When layout is triggered explicitly by the programmer the flush cache hint is true. When layout is triggered by a resize, either caused by the programmer or by the user, the hint is false.
Specified by:
layout in class Layout
Parameters:
composite - a composite widget using this layout
flushCache - true means flush cached layout values

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the layout


org.eclipse.swt.graphics
Class GC
java.lang.Object
org.eclipse.swt.graphics.Resource
org.eclipse.swt.graphics.GC


public final class GC extends Resource
Class GC is where all of the drawing capabilities that are supported by SWT are located. Instances are used to draw on either an Image, a Control, or directly on a Display.
Styles:
LEFT_TO_RIGHT, RIGHT_TO_LEFT
The SWT drawing coordinate system is the two-dimensional space with the origin (0,0) at the top left corner of the drawing area and with (x,y) values increasing to the right and downward respectively.
The result of drawing on an image that was created with an indexed palette using a color that is not in the palette is platform specific. Some platforms will match to the nearest color while other will draw the color itself. This happens because the allocated image might use a direct palette on platforms that do not support indexed palette.
Application code must explicitly invoke the GC.dispose() method to release the operating system resources managed by each instance when those instances are no longer required. This is particularly important on Windows95 and Windows98 where the operating system has a limited number of device contexts available.
Note: Only one of LEFT_TO_RIGHT and RIGHT_TO_LEFT may be specified.
See Also:
PaintEvent, GC snippets, SWT Examples: GraphicsExample, PaintExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
long    handle
the handle to the OS device context (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.

Constructor Summary
Constructors

Constructor and Description
GC(Drawable drawable)
Constructs a new instance of this class which has been configured to draw on the specified drawable.
GC(Drawable drawable,   int style)
Constructs a new instance of this class which has been configured to draw on the specified drawable.

Method Summary
All Methods Static Methods Instance Methods Concrete Methods Deprecated Methods

Modifier and Type   Method and Description
void    copyArea(Image image,         int x ,         int y)
Copies a rectangular area of the receiver at the specified position into the image, which must be of type SWT.BITMAP.
void    copyArea(int srcX,         int srcY ,         int width,         int hei ght,         int destX,         int  destY)
Copies a rectangular area of the receiver at the source position onto the receiver at the destination position.
void    copyArea(int srcX,         int srcY ,         int width,         int hei ght,         int destX,         int  destY,         boolean paint)
Copies a rectangular area of the receiver at the source position onto the receiver at the destination position.
void    drawArc(int x,        int y,  int width,        int height,   int startAngle,        int arcAngl e)
Draws the outline of a circular or elliptical arc within the specified rectangular area.
void    drawFocus(int x,          int y,        int width,          int heigh t)
Draws a rectangle, based on the specified arguments, which has the appearance of the platform's focus rectangle if the platform supports such a notion, and otherwise draws a simple rectangle in the receiver's foreground color.
void    drawImage(Image image,          int  x,          int y)
Draws the given image in the receiver at the specified coordinates.
void    drawImage(Image image,          int  srcX,          int srcY,          i nt srcWidth,          int srcHeight,           int destX,          int de stY,          int destWidth,   int destHeight)
Copies a rectangular area from the source image into a (potentially different sized) rectangular area in the receiver.
void    drawLine(int x1,         int y1,       int x2,         int y2)
Draws a line, using the foreground color, between the points (x1, y1) and (x2, y2).
void    drawOval(int x,         int y,     int width,         int height)
Draws the outline of an oval, using the foreground color, within the specified rectangular area.
void    drawPath(Path path)
Draws the path described by the parameter.
void    drawPoint(int x,          int y)
Draws a pixel, using the foreground color, at the specified point (x, y).
void    drawPolygon(int[] pointArray)
Draws the closed polygon which is defined by the specified array of integer coordinates, using the receiver's foreground color.
void    drawPolyline(int[] pointArray)
Draws the polyline which is defined by the specified array of integer coordinates, using the receiver's foreground color.
void    drawRectangle(int x,              i nt y,              int width,        int height)
Draws the outline of the rectangle specified by the arguments, using the receiver's foreground color.
void    drawRectangle(Rectangle rect)
Draws the outline of the specified rectangle, using the receiver's foreground color.
void    drawRoundRectangle(int x,          int y,                   in t width,                   int heigh t,                   int arcWidth,                  int arcHeight)
Draws the outline of the round-cornered rectangle specified by the arguments, using the receiver's foreground color.
void    drawString(java.lang.String string,            int x,           int y)
Draws the given string, using the receiver's current font and foreground color.
void    drawString(java.lang.String string,            int x,           int y,          boolean isTransparent)
Draws the given string, using the receiver's current font and foreground color.
void    drawText(java.lang.String string,        int x,         int y)
Draws the given string, using the receiver's current font and foreground color.
void    drawText(java.lang.String string,        int x,         int y,  boolean isTransparent)
Draws the given string, using the receiver's current font and foreground color.
void    drawText(java.lang.String string,        int x,         int y,  int flags)
Draws the given string, using the receiver's current font and foreground color.
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
void    fillArc(int x,        int y,  int width,        int height,   int startAngle,        int arcAngl e)
Fills the interior of a circular or elliptical arc within the specified rectangular area, with the receiver's background color.
void    fillGradientRectangle(int x,                int y,        int width,    int height, boolean vertical)
Fills the interior of the specified rectangle with a gradient sweeping from left to right or top to bottom progressing from the receiver's foreground color to its background color.
void    fillOval(int x,         int y,     int width,         int height)
Fills the interior of an oval, within the specified rectangular area, with the receiver's background color.
void    fillPath(Path path)
Fills the path described by the parameter.
void    fillPolygon(int[] pointArray)
Fills the interior of the closed polygon which is defined by the specified array of integer coordinates, using the receiver's background color.
void    fillRectangle(int x,              i nt y,              int width,        int height)
Fills the interior of the rectangle specified by the arguments, using the receiver's background color.
void    fillRectangle(Rectangle rect)
Fills the interior of the specified rectangle, using the receiver's background color.
void    fillRoundRectangle(int x,          int y,                   in t width,                   int heigh t,                   int arcWidth,                  int arcHeight)
Fills the interior of the round-cornered rectangle specified by the arguments, using the receiver's background color.
boolean getAdvanced()
Returns true if receiver is using the operating system's advanced graphics subsystem.
int getAdvanceWidth(char ch)
Returns the advance width of the specified character in the font which is currently selected into the receiver.
int getAlpha()
Returns the receiver's alpha value.
int getAntialias()
Returns the receiver's anti-aliasing setting value, which will be one of SWT.DEFAULT, SWT.OFF or SWT.ON.
Color   getBackground()
Returns the background color.
Pattern getBackgroundPattern()
Returns the background pattern.
int getCharWidth(char ch)
Returns the width of the specified character in the font selected into the receiver.
Rectangle   getClipping()
Returns the bounding rectangle of the receiver's clipping region.
void    getClipping(Region region)
Sets the region managed by the argument to the current clipping region of the receiver.
int getFillRule()
Returns the receiver's fill rule, which will be one of SWT.FILL_EVEN_ODD or SWT.FILL_WINDING.
Font    getFont()
Returns the font currently being used by the receiver to draw and measure text.
FontMetrics getFontMetrics()
Returns a FontMetrics which contains information about the font currently being used by the receiver to draw and measure text.
Color   getForeground()
Returns the receiver's foreground color.
Pattern getForegroundPattern()
Returns the foreground pattern.
GCData  getGCData()
Returns the GCData.
int getInterpolation()
Returns the receiver's interpolation setting, which will be one of SWT.DEFAULT, SWT.NONE, SWT.LOW or SWT.HIGH.
LineAttributes  getLineAttributes()
Returns the receiver's line attributes.
int getLineCap()
Returns the receiver's line cap style, which will be one of the constants SWT.CAP_FLAT, SWT.CAP_ROUND, or SWT.CAP_SQUARE.
int[]   getLineDash()
Returns the receiver's line dash style.
int getLineJoin()
Returns the receiver's line join style, which will be one of the constants SWT.JOIN_MITER, SWT.JOIN_ROUND, or SWT.JOIN_BEVEL.
int getLineStyle()
Returns the receiver's line style, which will be one of the constants SWT.LINE_SOLID, SWT.LINE_DASH, SWT.LINE_DOT, SWT.LINE_DASHDOT or SWT.LINE_DASHDOTDOT.
int getLineWidth()
Returns the width that will be used when drawing lines for all of the figure drawing operations (that is, drawLine, drawRectangle, drawPolyline, and so forth.
int getStyle()
Returns the receiver's style information.
int getTextAntialias()
Returns the receiver's text drawing anti-aliasing setting value, which will be one of SWT.DEFAULT, SWT.OFF or SWT.ON.
void    getTransform(Transform transform)
Sets the parameter to the transform that is currently being used by the receiver.
boolean getXORMode()
Returns true if this GC is drawing in the mode where the resulting color in the destination is the exclusive or of the color values in the source and the destination, and false if it is drawing in the mode where the destination color is being replaced with the source color value.
int hashCode()
Returns an integer hash code for the receiver.
boolean isClipped()
Returns true if the receiver has a clipping region set into it, and false otherwise.
boolean isDisposed()
Returns true if the GC has been disposed, and false otherwise.
void    setAdvanced(boolean advanced)
Sets the receiver to always use the operating system's advanced graphics subsystem for all graphics operations if the argument is true.
void    setAlpha(int alpha)
Sets the receiver's alpha value which must be between 0 (transparent) and 255 (opaque).
void    setAntialias(int antialias)
Sets the receiver's anti-aliasing value to the parameter, which must be one of SWT.DEFAULT, SWT.OFF or SWT.ON.
void    setBackground(Color color)
Sets the background color.
void    setBackgroundPattern(Pattern patter n)
Sets the background pattern.
void    setClipping(int x,            int y ,            int width,            i nt height)
Sets the area of the receiver which can be changed by drawing operations to the rectangular area specified by the arguments.
void    setClipping(Path path)
Sets the area of the receiver which can be changed by drawing operations to the path specified by the argument.
void    setClipping(Rectangle rect)
Sets the area of the receiver which can be changed by drawing operations to the rectangular area specified by the argument.
void    setClipping(Region region)
Sets the area of the receiver which can be changed by drawing operations to the region specified by the argument.
void    setFillRule(int rule)
Sets the receiver's fill rule to the parameter, which must be one of SWT.FILL_EVEN_ODD or SWT.FILL_WINDING.
void    setFont(Font font)
Sets the font which will be used by the receiver to draw and measure text to the argument.
void    setForeground(Color color)
Sets the foreground color.
void    setForegroundPattern(Pattern patter n)
Sets the foreground pattern.
void    setInterpolation(int interpolation)
Sets the receiver's interpolation setting to the parameter, which must be one of SWT.DEFAULT, SWT.NONE, SWT.LOW or SWT.HIGH.
void    setLineAttributes(LineAttributes at tributes)
Sets the receiver's line attributes.
void    setLineCap(int cap)
Sets the receiver's line cap style to the argument, which must be one of the constants SWT.CAP_FLAT, SWT.CAP_ROUND, or SWT.CAP_SQUARE.
void    setLineDash(int[] dashes)
Sets the receiver's line dash style to the argument.
void    setLineJoin(int join)
Sets the receiver's line join style to the argument, which must be one of the constants SWT.JOIN_MITER, SWT.JOIN_ROUND, or SWT.JOIN_BEVEL.
void    setLineStyle(int lineStyle)
Sets the receiver's line style to the argument, which must be one of the constants SWT.LINE_SOLID, SWT.LINE_DASH, SWT.LINE_DOT, SWT.LINE_DASHDOT or SWT.LINE_DASHDOTDOT.
void    setLineWidth(int lineWidth)
Sets the width that will be used when drawing lines for all of the figure drawing operations (that is, drawLine, drawRectangle, drawPolyline, and so forth.
void    setTextAntialias(int antialias)
Sets the receiver's text anti-aliasing value to the parameter, which must be one of SWT.DEFAULT, SWT.OFF or SWT.ON.
void    setTransform(Transform transform)
Sets the transform that is currently being used by the receiver.
void    setXORMode(boolean xor)
Deprecated.< /span>
this functionality is not supported on some platforms
Point   stringExtent(java.lang.String strin g)
Returns the extent of the given string.
Point   textExtent(java.lang.String string)
Returns the extent of the given string.
Point   textExtent(java.lang.String string,            int flags)
Returns the extent of the given string.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.
static GC   win32_new(Drawable drawable,    GCData data)
Invokes platform specific functionality to allocate a new graphics context.
static GC   win32_new(long hDC,          GCData  data)
Invokes platform specific functionality to wrap a graphics context.

Methods inherited from class org.eclipse.swt.graphics.Resource
dispose, getDevice

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait

Field Detail

handle
public long handle
the handle to the OS device context (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

Constructor Detail

GC
public GC(Drawable drawable)
Constructs a new instance of this class which has been configured to draw on the specified drawable. Sets the foreground color, background color and font in the GC to match those in the drawable. You must dispose the graphics context when it is no longer required.
Parameters:
drawable - the drawable to draw on
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the drawable is null
ERROR_NULL_ARGUMENT - if there is no current device
ERROR_INVALID_ARGUMENT - if the drawable is an image that is not a bitmap or an icon - if the drawable is an image or printer that is already selected into another graphics context
SWTError -
ERROR_NO_HANDLES if a handle could not be obtained for GC creation
ERROR_THREAD_INVALID_ACCESS if not called from the thread that created the drawable
See Also:
Resource.dispose()

GC
public GC(Drawable drawable,
          int style)
Constructs a new instance of this class which has been configured to draw on the specified drawable. Sets the foreground color, background color and font in the GC to match those in the drawable. You must dispose the graphics context when it is no longer required.
Parameters:
drawable - the drawable to draw on
style - the style of GC to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the drawable is null
ERROR_NULL_ARGUMENT - if there is no current device
ERROR_INVALID_ARGUMENT - if the drawable is an image that is not a bitmap or an icon - if the drawable is an image or printer that is already selected into another graphics context
SWTError -
ERROR_NO_HANDLES if a handle could not be obtained for GC creation
ERROR_THREAD_INVALID_ACCESS if not called from the thread that created the drawable
since. :
2.1.2
See Also:
Resource.dispose()

Method Detail

copyArea
public void copyArea(Image image,
                     int x,
                     int y)
Copies a rectangular area of the receiver at the specified position into the image, which must be of type SWT.BITMAP.
Parameters:
image - the image to copy into
x - the x coordinate in the receiver of the area to be copied
y - the y coordinate in the receiver of the area to be copied
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the image is null
ERROR_INVALID_ARGUMENT - if the image is not a bitmap or has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

copyArea
public void copyArea(int srcX,
                     int srcY,
                     int width,
                     int height,
                     int destX,
                     int destY)
Copies a rectangular area of the receiver at the source position onto the receiver at the destination position.
Parameters:
srcX - the x coordinate in the receiver of the area to be copied
srcY - the y coordinate in the receiver of the area to be copied
width - the width of the area to copy
height - the height of the area to copy
destX - the x coordinate in the receiver of the area to copy to
destY - the y coordinate in the receiver of the area to copy to
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

copyArea
public void copyArea(int srcX,
                     int srcY,
                     int width,
                     int height,
                     int destX,
                     int destY,
                     boolean paint)
Copies a rectangular area of the receiver at the source position onto the receiver at the destination position.
Parameters:
srcX - the x coordinate in the receiver of the area to be copied
srcY - the y coordinate in the receiver of the area to be copied
width - the width of the area to copy
height - the height of the area to copy
destX - the x coordinate in the receiver of the area to copy to
destY - the y coordinate in the receiver of the area to copy to
paint - if true paint events will be generated for old and obscured areas
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

drawArc
public void drawArc(int x,
                    int y,
                    int width,
                    int height,
                    int startAngle,
                    int arcAngle)
Draws the outline of a circular or elliptical arc within the specified rectangular area. The resulting arc begins at startAngle and extends for arcAngle degrees, using the current color. Angles are interpreted such that 0 degrees is at the 3 o'clock position. A positive value indicates a counter-clockwise rotation while a negative value indicates a clockwise rotation.
The center of the arc is the center of the rectangle whose origin is (x, y) and whose size is specified by the width and height arguments.
The resulting arc covers an area width + 1 pixels wide by height + 1 pixels tall.
Parameters:
x - the x coordinate of the upper-left corner of the arc to be drawn
y - the y coordinate of the upper-left corner of the arc to be drawn
width - the width of the arc to be drawn
height - the height of the arc to be drawn
startAngle - the beginning angle
arcAngle - the angular extent of the arc, relative to the start angle
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

drawFocus
public void drawFocus(int x,
                      int y,
                      int width,
                      int height)
Draws a rectangle, based on the specified arguments, which has the appearance of the platform's focus rectangle if the platform supports such a notion, and otherwise draws a simple rectangle in the receiver's foreground color.
Parameters:
x - the x coordinate of the rectangle
y - the y coordinate of the rectangle
width - the width of the rectangle
height - the height of the rectangle
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
drawRectangle(int, int, int, int)

drawImage
public void drawImage(Image image,
                      int x,
                      int y)
Draws the given image in the receiver at the specified coordinates.
Parameters:
image - the image to draw
x - the x coordinate of where to draw
y - the y coordinate of where to draw
Throws:
java.lang.IllegalArgumentException - ERROR_NULL_ARGUMENT - if the image is null ERROR_INVALID_ARGUMENT - if the image has been disposed ERROR_INVALID_ARGUMENT - if the given coordinates are outside the bounds of the image
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
SWTError -
ERROR_NO_HANDLES - if no handles are available to perform the operation

drawImage
public void drawImage(Image image,
                      int srcX,
                      int srcY,
                      int srcWidth,
                      int srcHeight,
                      int destX,
                      int destY,
                      int destWidth,
                      int destHeight)
Copies a rectangular area from the source image into a (potentially different sized) rectangular area in the receiver. If the source and destination areas are of differing sizes, then the source area will be stretched or shrunk to fit the destination area as it is copied. The copy fails if any part of the source rectangle lies outside the bounds of the source image, or if any of the width or height arguments are negative.
Parameters:
image - the source image
srcX - the x coordinate in the source image to copy from
srcY - the y coordinate in the source image to copy from
srcWidth - the width in points to copy from the source
srcHeight - the height in points to copy from the source
destX - the x coordinate in the destination to copy to
destY - the y coordinate in the destination to copy to
destWidth - the width in points of the destination rectangle
destHeight - the height in points of the destination rectangle
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the image is null
ERROR_INVALID_ARGUMENT - if the image has been disposed
ERROR_INVALID_ARGUMENT - if any of the width or height arguments are negative.
ERROR_INVALID_ARGUMENT - if the source rectangle is not contained within the bounds of the source image
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
SWTError -
ERROR_NO_HANDLES - if no handles are available to perform the operation

drawLine
public void drawLine(int x1,
                     int y1,
                     int x2,
                     int y2)
Draws a line, using the foreground color, between the points (x1, y1) and (x2, y2).
Parameters:
x1 - the first point's x coordinate
y1 - the first point's y coordinate
x2 - the second point's x coordinate
y2 - the second point's y coordinate
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

drawOval
public void drawOval(int x,
                     int y,
                     int width,
                     int height)
Draws the outline of an oval, using the foreground color, within the specified rectangular area. The result is a circle or ellipse that fits within the rectangle specified by the x, y, width, and height arguments.
The oval covers an area that is width + 1 pixels wide and height + 1 pixels tall.
Parameters:
x - the x coordinate of the upper left corner of the oval to be drawn
y - the y coordinate of the upper left corner of the oval to be drawn
width - the width of the oval to be drawn
height - the height of the oval to be drawn
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

drawPath
public void drawPath(Path path)
Draws the path described by the parameter. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
Parameters:
path - the path to draw
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parameter is null
ERROR_INVALID_ARGUMENT - if the parameter has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
since. :
3.1
See Also:
Path

drawPoint
public void drawPoint(int x,
                      int y)
Draws a pixel, using the foreground color, at the specified point (x, y). Note that the receiver's line attributes do not affect this operation.
Parameters:
x - the point's x coordinate
y - the point's y coordinate
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.0

drawPolygon
public void drawPolygon(int[] pointArray)
Draws the closed polygon which is defined by the specified array of integer coordinates, using the receiver's foreground color. The array contains alternating x and y values which are considered to represent points which are the vertices of the polygon. Lines are drawn between each consecutive pair, and between the first pair and last pair in the array.
Parameters:
pointArray - an array of alternating x and y values which are the vertices of the polygon
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT if pointArray is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

drawPolyline
public void drawPolyline(int[] pointArray)
Draws the polyline which is defined by the specified array of integer coordinates, using the receiver's foreground color. The array contains alternating x and y values which are considered to represent points which are the corners of the polyline. Lines are drawn between each consecutive pair, but not between the first pair and last pair in the array.
Parameters:
pointArray - an array of alternating x and y values which are the corners of the polyline
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point array is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

drawRectangle
public void drawRectangle(int x,
                          int y,
                          int width,
                          int height)
Draws the outline of the rectangle specified by the arguments, using the receiver's foreground color. The left and right edges of the rectangle are at x and x + width. The top and bottom edges are at y and y + height.
Parameters:
x - the x coordinate of the rectangle to be drawn
y - the y coordinate of the rectangle to be drawn
width - the width of the rectangle to be drawn
height - the height of the rectangle to be drawn
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

drawRectangle
public void drawRectangle(Rectangle rect)
Draws the outline of the specified rectangle, using the receiver's foreground color. The left and right edges of the rectangle are at rect.x and rect.x + rect.width. The top and bottom edges are at rect.y and rect.y + rect.height.
Parameters:
rect - the rectangle to draw
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the rectangle is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

drawRoundRectangle
public void drawRoundRectangle(int x,
                               int y,
                               int width,
                               int height,
                               int arcWidth,
                               int arcHeight)
Draws the outline of the round-cornered rectangle specified by the arguments, using the receiver's foreground color. The left and right edges of the rectangle are at x and x + width. The top and bottom edges are at y and y + height. The roundness of the corners is specified by the arcWidth and arcHeight arguments, which are respectively the width and height of the ellipse used to draw the corners.
Parameters:
x - the x coordinate of the rectangle to be drawn
y - the y coordinate of the rectangle to be drawn
width - the width of the rectangle to be drawn
height - the height of the rectangle to be drawn
arcWidth - the width of the arc
arcHeight - the height of the arc
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

drawString
public void drawString(java.lang.String string,
                       int x,
                       int y)
Draws the given string, using the receiver's current font and foreground color. No tab expansion or carriage return processing will be performed. The background of the rectangular area where the string is being drawn will be filled with the receiver's background color.
Parameters:
string - the string to be drawn
x - the x coordinate of the top left corner of the rectangular area where the string is to be drawn
y - the y coordinate of the top left corner of the rectangular area where the string is to be drawn
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

drawString
public void drawString(java.lang.String string,
                       int x,
                       int y,
                       boolean isTransparent)
Draws the given string, using the receiver's current font and foreground color. No tab expansion or carriage return processing will be performed. If isTransparent is true, then the background of the rectangular area where the string is being drawn will not be modified, otherwise it will be filled with the receiver's background color.
Parameters:
string - the string to be drawn
x - the x coordinate of the top left corner of the rectangular area where the string is to be drawn
y - the y coordinate of the top left corner of the rectangular area where the string is to be drawn
isTransparent - if true the background will be transparent, otherwise it will be opaque
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

drawText
public void drawText(java.lang.String string,
                     int x,
                     int y)
Draws the given string, using the receiver's current font and foreground color. Tab expansion and carriage return processing are performed. The background of the rectangular area where the text is being drawn will be filled with the receiver's background color.
Parameters:
string - the string to be drawn
x - the x coordinate of the top left corner of the rectangular area where the text is to be drawn
y - the y coordinate of the top left corner of the rectangular area where the text is to be drawn
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

drawText
public void drawText(java.lang.String string,
                     int x,
                     int y,
                     boolean isTransparent)
Draws the given string, using the receiver's current font and foreground color. Tab expansion and carriage return processing are performed. If isTransparent is true, then the background of the rectangular area where the text is being drawn will not be modified, otherwise it will be filled with the receiver's background color.
Parameters:
string - the string to be drawn
x - the x coordinate of the top left corner of the rectangular area where the text is to be drawn
y - the y coordinate of the top left corner of the rectangular area where the text is to be drawn
isTransparent - if true the background will be transparent, otherwise it will be opaque
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

drawText
public void drawText(java.lang.String string,
                     int x,
                     int y,
                     int flags)
Draws the given string, using the receiver's current font and foreground color. Tab expansion, line delimiter and mnemonic processing are performed according to the specified flags. If flags includes DRAW_TRANSPARENT, then the background of the rectangular area where the text is being drawn will not be modified, otherwise it will be filled with the receiver's background color. The parameter flags may be a combination of:
DRAW_DELIMITER
draw multiple lines
DRAW_TAB
expand tabs
DRAW_MNEMONIC
underline the mnemonic character
DRAW_TRANSPARENT
transparent background
Parameters:
string - the string to be drawn
x - the x coordinate of the top left corner of the rectangular area where the text is to be drawn
y - the y coordinate of the top left corner of the rectangular area where the text is to be drawn
flags - the flags specifying how to process the text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

fillArc
public void fillArc(int x,
                    int y,
                    int width,
                    int height,
                    int startAngle,
                    int arcAngle)
Fills the interior of a circular or elliptical arc within the specified rectangular area, with the receiver's background color. The resulting arc begins at startAngle and extends for arcAngle degrees, using the current color. Angles are interpreted such that 0 degrees is at the 3 o'clock position. A positive value indicates a counter-clockwise rotation while a negative value indicates a clockwise rotation.
The center of the arc is the center of the rectangle whose origin is (x, y) and whose size is specified by the width and height arguments.
The resulting arc covers an area width + 1 pixels wide by height + 1 pixels tall.
Parameters:
x - the x coordinate of the upper-left corner of the arc to be filled
y - the y coordinate of the upper-left corner of the arc to be filled
width - the width of the arc to be filled
height - the height of the arc to be filled
startAngle - the beginning angle
arcAngle - the angular extent of the arc, relative to the start angle
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
drawArc(int, int, int, int, int, int)

fillGradientRectangle
public void fillGradientRectangle(int x,
                                  int y,
                                  int width,
                                  int height,
                                  boolean vertical)
Fills the interior of the specified rectangle with a gradient sweeping from left to right or top to bottom progressing from the receiver's foreground color to its background color.
Parameters:
x - the x coordinate of the rectangle to be filled
y - the y coordinate of the rectangle to be filled
width - the width of the rectangle to be filled, may be negative (inverts direction of gradient if horizontal)
height - the height of the rectangle to be filled, may be negative (inverts direction of gradient if vertical)
vertical - if true sweeps from top to bottom, else sweeps from left to right
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
drawRectangle(int, int, int, int)

fillOval
public void fillOval(int x,
                     int y,
                     int width,
                     int height)
Fills the interior of an oval, within the specified rectangular area, with the receiver's background color.
Parameters:
x - the x coordinate of the upper left corner of the oval to be filled
y - the y coordinate of the upper left corner of the oval to be filled
width - the width of the oval to be filled
height - the height of the oval to be filled
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
drawOval(int, int, int, int)

fillPath
public void fillPath(Path path)
Fills the path described by the parameter. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
Parameters:
path - the path to fill
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parameter is null
ERROR_INVALID_ARGUMENT - if the parameter has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
since. :
3.1
See Also:
Path

fillPolygon
public void fillPolygon(int[] pointArray)
Fills the interior of the closed polygon which is defined by the specified array of integer coordinates, using the receiver's background color. The array contains alternating x and y values which are considered to represent points which are the vertices of the polygon. Lines are drawn between each consecutive pair, and between the first pair and last pair in the array.
Parameters:
pointArray - an array of alternating x and y values which are the vertices of the polygon
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT if pointArray is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
drawPolygon(int[])

fillRectangle
public void fillRectangle(int x,
                          int y,
                          int width,
                          int height)
Fills the interior of the rectangle specified by the arguments, using the receiver's background color.
Parameters:
x - the x coordinate of the rectangle to be filled
y - the y coordinate of the rectangle to be filled
width - the width of the rectangle to be filled
height - the height of the rectangle to be filled
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
drawRectangle(int, int, int, int)

fillRectangle
public void fillRectangle(Rectangle rect)
Fills the interior of the specified rectangle, using the receiver's background color.
Parameters:
rect - the rectangle to be filled
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the rectangle is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
drawRectangle(int, int, int, int)

fillRoundRectangle
public void fillRoundRectangle(int x,
                               int y,
                               int width,
                               int height,
                               int arcWidth,
                               int arcHeight)
Fills the interior of the round-cornered rectangle specified by the arguments, using the receiver's background color.
Parameters:
x - the x coordinate of the rectangle to be filled
y - the y coordinate of the rectangle to be filled
width - the width of the rectangle to be filled
height - the height of the rectangle to be filled
arcWidth - the width of the arc
arcHeight - the height of the arc
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
drawRoundRectangle(int, int, int, int, int, int)

getAdvanceWidth
public int getAdvanceWidth(char ch)
Returns the advance width of the specified character in the font which is currently selected into the receiver. The advance width is defined as the horizontal distance the cursor should move after printing the character in the selected font.
Parameters:
ch - the character to measure
Returns:
the distance in the x direction to move past the character before painting the next
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getAdvanced
public boolean getAdvanced()
Returns true if receiver is using the operating system's advanced graphics subsystem. Otherwise, false is returned to indicate that normal graphics are in use. Advanced graphics may not be installed for the operating system. In this case, false is always returned. Some operating system have only one graphics subsystem. If this subsystem supports advanced graphics, then true is always returned. If any graphics operation such as alpha, antialias, patterns, interpolation, paths, clipping or transformation has caused the receiver to switch from regular to advanced graphics mode, true is returned. If the receiver has been explicitly switched to advanced mode and this mode is supported, true is returned.
Returns:
the advanced value
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1
See Also:
setAdvanced(boolean)

getAlpha
public int getAlpha()
Returns the receiver's alpha value. The alpha value is between 0 (transparent) and 255 (opaque).
Returns:
the alpha value
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

getAntialias
public int getAntialias()
Returns the receiver's anti-aliasing setting value, which will be one of SWT.DEFAULT, SWT.OFF or SWT.ON. Note that this controls anti-aliasing for all non-text drawing operations.
Returns:
the anti-aliasing setting
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1
See Also:
getTextAntialias()

getBackground
public Color getBackground()
Returns the background color.
Returns:
the receiver's background color
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getBackgroundPattern
public Pattern getBackgroundPattern()
Returns the background pattern. The default value is null.
Returns:
the receiver's background pattern
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1
See Also:
Pattern

getCharWidth
public int getCharWidth(char ch)
Returns the width of the specified character in the font selected into the receiver. The width is defined as the space taken up by the actual character, not including the leading and tailing whitespace or overhang.
Parameters:
ch - the character to measure
Returns:
the width of the character
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getClipping
public Rectangle getClipping()
Returns the bounding rectangle of the receiver's clipping region. If no clipping region is set, the return value will be a rectangle which covers the entire bounds of the object the receiver is drawing on.
Returns:
the bounding rectangle of the clipping region
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getClipping
public void getClipping(Region region)
Sets the region managed by the argument to the current clipping region of the receiver.
Parameters:
region - the region to fill with the clipping region
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the region is null
ERROR_INVALID_ARGUMENT - if the region is disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getFillRule
public int getFillRule()
Returns the receiver's fill rule, which will be one of SWT.FILL_EVEN_ODD or SWT.FILL_WINDING.
Returns:
the receiver's fill rule
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

getFont
public Font getFont()
Returns the font currently being used by the receiver to draw and measure text.
Returns:
the receiver's font
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getFontMetrics
public FontMetrics getFontMetrics()
Returns a FontMetrics which contains information about the font currently being used by the receiver to draw and measure text.
Returns:
font metrics for the receiver's font
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getForeground
public Color getForeground()
Returns the receiver's foreground color.
Returns:
the color used for drawing foreground things
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getForegroundPattern
public Pattern getForegroundPattern()
Returns the foreground pattern. The default value is null.
Returns:
the receiver's foreground pattern
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1
See Also:
Pattern

getGCData
public GCData getGCData()
Returns the GCData. IMPORTANT: This method is not part of the public API for GC. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Returns:
the receiver's GCData
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.2
See Also:
GCData

getInterpolation
public int getInterpolation()
Returns the receiver's interpolation setting, which will be one of SWT.DEFAULT, SWT.NONE, SWT.LOW or SWT.HIGH.
Returns:
the receiver's interpolation setting
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

getLineAttributes
public LineAttributes getLineAttributes()
Returns the receiver's line attributes.
Returns:
the line attributes used for drawing lines
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.3

getLineCap
public int getLineCap()
Returns the receiver's line cap style, which will be one of the constants SWT.CAP_FLAT, SWT.CAP_ROUND, or SWT.CAP_SQUARE.
Returns:
the cap style used for drawing lines
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

getLineDash
public int[] getLineDash()
Returns the receiver's line dash style. The default value is null.
Returns:
the line dash style used for drawing lines
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

getLineJoin
public int getLineJoin()
Returns the receiver's line join style, which will be one of the constants SWT.JOIN_MITER, SWT.JOIN_ROUND, or SWT.JOIN_BEVEL.
Returns:
the join style used for drawing lines
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

getLineStyle
public int getLineStyle()
Returns the receiver's line style, which will be one of the constants SWT.LINE_SOLID, SWT.LINE_DASH, SWT.LINE_DOT, SWT.LINE_DASHDOT or SWT.LINE_DASHDOTDOT.
Returns:
the style used for drawing lines
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getLineWidth
public int getLineWidth()
Returns the width that will be used when drawing lines for all of the figure drawing operations (that is, drawLine, drawRectangle, drawPolyline, and so forth.
Returns:
the receiver's line width
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getStyle
public int getStyle()
Returns the receiver's style information. Note that the value which is returned by this method may not match the value which was provided to the constructor when the receiver was created. This can occur when the underlying operating system does not support a particular combination of requested styles.
Returns:
the style bits
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
2.1.2

getTextAntialias
public int getTextAntialias()
Returns the receiver's text drawing anti-aliasing setting value, which will be one of SWT.DEFAULT, SWT.OFF or SWT.ON. Note that this controls anti-aliasing only for text drawing operations.
Returns:
the anti-aliasing setting
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1
See Also:
getAntialias()

getTransform
public void getTransform(Transform transform)
Sets the parameter to the transform that is currently being used by the receiver.
Parameters:
transform - the destination to copy the transform into
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parameter is null
ERROR_INVALID_ARGUMENT - if the parameter has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1
See Also:
Transform

getXORMode
public boolean getXORMode()
Returns true if this GC is drawing in the mode where the resulting color in the destination is the exclusive or of the color values in the source and the destination, and false if it is drawing in the mode where the destination color is being replaced with the source color value.
Returns:
true true if the receiver is in XOR mode, and false otherwise
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
equals(java.lang.Object)

isClipped
public boolean isClipped()
Returns true if the receiver has a clipping region set into it, and false otherwise. If this method returns false, the receiver will draw on all available space in the destination. If it returns true, it will draw only in the area that is covered by the region that can be accessed with getClipping(region).
Returns:
true if the GC has a clipping region, and false otherwise
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

isDisposed
public boolean isDisposed()
Returns true if the GC has been disposed, and false otherwise. This method gets the dispose state for the GC. When a GC has been disposed, it is an error to invoke any other method (except Resource.dispose()) using the GC.
Specified by:
isDisposed in class Resource
Returns:
true when the GC is disposed and false otherwise

setAdvanced
public void setAdvanced(boolean advanced)
Sets the receiver to always use the operating system's advanced graphics subsystem for all graphics operations if the argument is true. If the argument is false, the advanced graphics subsystem is no longer used, advanced graphics state is cleared and the normal graphics subsystem is used from now on. Normally, the advanced graphics subsystem is invoked automatically when any one of the alpha, antialias, patterns, interpolation, paths, clipping or transformation operations in the receiver is requested. When the receiver is switched into advanced mode, the advanced graphics subsystem performs both advanced and normal graphics operations. Because the two subsystems are different, their output may differ. Switching to advanced graphics before any graphics operations are performed ensures that the output is consistent.
Advanced graphics may not be installed for the operating system. In this case, this operation does nothing. Some operating system have only one graphics subsystem, so switching from normal to advanced graphics does nothing. However, switching from advanced to normal graphics will always clear the advanced graphics state, even for operating systems that have only one graphics subsystem.
Parameters:
advanced - the new advanced graphics state
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1
See Also:
setAlpha(int), setAntialias(int), setBackgroundPattern(org.eclipse.swt.graphics.Pattern), setClipping(Path), setForegroundPattern(org.eclipse.swt.graphics.Pattern), setLineAttributes(org.eclipse.swt.graphics.LineAttributes), setInterpolation(int), setTextAntialias(int), setTransform(org.eclipse.swt.graphics.Transform), getAdvanced()

setAntialias
public void setAntialias(int antialias)
Sets the receiver's anti-aliasing value to the parameter, which must be one of SWT.DEFAULT, SWT.OFF or SWT.ON. Note that this controls anti-aliasing for all non-text drawing operations. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
Parameters:
antialias - the anti-aliasing setting
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the parameter is not one of SWT.DEFAULT, SWT.OFF or SWT.ON
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
since. :
3.1
See Also:
getAdvanced(), setAdvanced(boolean), setTextAntialias(int)

setAlpha
public void setAlpha(int alpha)
Sets the receiver's alpha value which must be between 0 (transparent) and 255 (opaque). This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
Parameters:
alpha - the alpha value
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
since. :
3.1
See Also:
getAdvanced(), setAdvanced(boolean)

setBackground
public void setBackground(Color color)
Sets the background color. The background color is used for fill operations and as the background color when text is drawn.
Parameters:
color - the new background color for the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the color is null
ERROR_INVALID_ARGUMENT - if the color has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setBackgroundPattern
public void setBackgroundPattern(Pattern pattern)
Sets the background pattern. The default value is null. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
Parameters:
pattern - the new background pattern
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the parameter has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
since. :
3.1
See Also:
Pattern, getAdvanced(), setAdvanced(boolean)

setClipping
public void setClipping(int x,
                        int y,
                        int width,
                        int height)
Sets the area of the receiver which can be changed by drawing operations to the rectangular area specified by the arguments.
Parameters:
x - the x coordinate of the clipping rectangle
y - the y coordinate of the clipping rectangle
width - the width of the clipping rectangle
height - the height of the clipping rectangle
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setClipping
public void setClipping(Path path)
Sets the area of the receiver which can be changed by drawing operations to the path specified by the argument. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
Parameters:
path - the clipping path.
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the path has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
since. :
3.1
See Also:
Path, getAdvanced(), setAdvanced(boolean)

setClipping
public void setClipping(Rectangle rect)
Sets the area of the receiver which can be changed by drawing operations to the rectangular area specified by the argument. Specifying null for the rectangle reverts the receiver's clipping area to its original value.
Parameters:
rect - the clipping rectangle or null
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setClipping
public void setClipping(Region region)
Sets the area of the receiver which can be changed by drawing operations to the region specified by the argument. Specifying null for the region reverts the receiver's clipping area to its original value.
Parameters:
region - the clipping region or null
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the region has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setFillRule
public void setFillRule(int rule)
Sets the receiver's fill rule to the parameter, which must be one of SWT.FILL_EVEN_ODD or SWT.FILL_WINDING.
Parameters:
rule - the new fill rule
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the rule is not one of SWT.FILL_EVEN_ODD or SWT.FILL_WINDING
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

setFont
public void setFont(Font font)
Sets the font which will be used by the receiver to draw and measure text to the argument. If the argument is null, then a default font appropriate for the platform will be used instead.
Parameters:
font - the new font for the receiver, or null to indicate a default font
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the font has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setForeground
public void setForeground(Color color)
Sets the foreground color. The foreground color is used for drawing operations including when text is drawn.
Parameters:
color - the new foreground color for the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the color is null
ERROR_INVALID_ARGUMENT - if the color has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setForegroundPattern
public void setForegroundPattern(Pattern pattern)
Sets the foreground pattern. The default value is null. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
Parameters:
pattern - the new foreground pattern
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the parameter has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
since. :
3.1
See Also:
Pattern, getAdvanced(), setAdvanced(boolean)

setInterpolation
public void setInterpolation(int interpolation)
Sets the receiver's interpolation setting to the parameter, which must be one of SWT.DEFAULT, SWT.NONE, SWT.LOW or SWT.HIGH. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
Parameters:
interpolation - the new interpolation setting
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the rule is not one of SWT.DEFAULT, SWT.NONE, SWT.LOW or SWT.HIGH
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
since. :
3.1
See Also:
getAdvanced(), setAdvanced(boolean)

setLineAttributes
public void setLineAttributes(LineAttributes attributes)
Sets the receiver's line attributes. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
Parameters:
attributes - the line attributes
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the attributes is null
ERROR_INVALID_ARGUMENT - if any of the line attributes is not valid
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
since. :
3.3
See Also:
LineAttributes, getAdvanced(), setAdvanced(boolean)

setLineCap
public void setLineCap(int cap)
Sets the receiver's line cap style to the argument, which must be one of the constants SWT.CAP_FLAT, SWT.CAP_ROUND, or SWT.CAP_SQUARE.
Parameters:
cap - the cap style to be used for drawing lines
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the style is not valid
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

setLineDash
public void setLineDash(int[] dashes)
Sets the receiver's line dash style to the argument. The default value is null. If the argument is not null, the receiver's line style is set to SWT.LINE_CUSTOM, otherwise it is set to SWT.LINE_SOLID.
Parameters:
dashes - the dash style to be used for drawing lines
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if any of the values in the array is less than or equal 0
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

setLineJoin
public void setLineJoin(int join)
Sets the receiver's line join style to the argument, which must be one of the constants SWT.JOIN_MITER, SWT.JOIN_ROUND, or SWT.JOIN_BEVEL.
Parameters:
join - the join style to be used for drawing lines
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the style is not valid
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

setLineStyle
public void setLineStyle(int lineStyle)
Sets the receiver's line style to the argument, which must be one of the constants SWT.LINE_SOLID, SWT.LINE_DASH, SWT.LINE_DOT, SWT.LINE_DASHDOT or SWT.LINE_DASHDOTDOT.
Parameters:
lineStyle - the style to be used for drawing lines
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the style is not valid
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setLineWidth
public void setLineWidth(int lineWidth)
Sets the width that will be used when drawing lines for all of the figure drawing operations (that is, drawLine, drawRectangle, drawPolyline, and so forth. Note that line width of zero is used as a hint to indicate that the fastest possible line drawing algorithms should be used. This means that the output may be different from line width one.
Parameters:
lineWidth - the width of a line
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setXORMode
@Deprecated
public void setXORMode(boolean xor)
Deprecated. this functionality is not supported on some platforms
If the argument is true, puts the receiver in a drawing mode where the resulting color in the destination is the exclusive or of the color values in the source and the destination, and if the argument is false, puts the receiver in a drawing mode where the destination color is replaced with the source color value. Note that this mode in fundamentally unsupportable on certain platforms, notably Carbon (Mac OS X). Clients that want their code to run on all platforms need to avoid this method.
Parameters:
xor - if true, then xor mode is used, otherwise source copy mode is used
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setTextAntialias
public void setTextAntialias(int antialias)
Sets the receiver's text anti-aliasing value to the parameter, which must be one of SWT.DEFAULT, SWT.OFF or SWT.ON. Note that this controls anti-aliasing only for all text drawing operations. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
Parameters:
antialias - the anti-aliasing setting
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the parameter is not one of SWT.DEFAULT, SWT.OFF or SWT.ON
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
since. :
3.1
See Also:
getAdvanced(), setAdvanced(boolean), setAntialias(int)

setTransform
public void setTransform(Transform transform)
Sets the transform that is currently being used by the receiver. If the argument is null, the current transform is set to the identity transform. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
Parameters:
transform - the transform to set
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the parameter has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
since. :
3.1
See Also:
Transform, getAdvanced(), setAdvanced(boolean)

stringExtent
public Point stringExtent(java.lang.String string)
Returns the extent of the given string. No tab expansion or carriage return processing will be performed. The extent of a string is the width and height of the rectangular area it would cover if drawn in a particular font (in this case, the current font in the receiver).
Parameters:
string - the string to measure
Returns:
a point containing the extent of the string
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

textExtent
public Point textExtent(java.lang.String string)
Returns the extent of the given string. Tab expansion and carriage return processing are performed. The extent of a string is the width and height of the rectangular area it would cover if drawn in a particular font (in this case, the current font in the receiver).
Parameters:
string - the string to measure
Returns:
a point containing the extent of the string
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

textExtent
public Point textExtent(java.lang.String string,
                        int flags)
Returns the extent of the given string. Tab expansion, line delimiter and mnemonic processing are performed according to the specified flags, which can be a combination of:
DRAW_DELIMITER
draw multiple lines
DRAW_TAB
expand tabs
DRAW_MNEMONIC
underline the mnemonic character
DRAW_TRANSPARENT
transparent background
The extent of a string is the width and height of the rectangular area it would cover if drawn in a particular font (in this case, the current font in the receiver).
Parameters:
string - the string to measure
flags - the flags specifying how to process the text
Returns:
a point containing the extent of the string
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the receiver

win32_new
public static GC win32_new(Drawable drawable,
                           GCData data)
Invokes platform specific functionality to allocate a new graphics context. IMPORTANT: This method is not part of the public API for GC. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Parameters:
drawable - the Drawable for the receiver.
data - the data for the receiver.
Returns:
a new GC

win32_new
public static GC win32_new(long hDC,
                           GCData data)
Invokes platform specific functionality to wrap a graphics context. IMPORTANT: This method is not part of the public API for GC. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Parameters:
hDC - the Windows HDC.
data - the data for the receiver.
Returns:
a new GC


org.eclipse.swt.graphics
Class GCData
java.lang.Object
org.eclipse.swt.graphics.GCData


public final class GCData extends java.lang.Object
Instances of this class are descriptions of GCs in terms of unallocated platform-specific data fields. IMPORTANT: This class is not part of the public API for SWT. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
See Also:
Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
int alpha
int background
Pattern backgroundPattern
Device  device
boolean focusDrawn
Font    font
int foreground
Pattern foregroundPattern
long    gdipBgBrush
long    gdipBrush
long    gdipFgBrush
long    gdipFont
long    gdipGraphics
long    gdipPen
float   gdipXOffset
float   gdipYOffset
long    hBrush
long    hGDIFont
long    hNullBitmap
long    hOldBrush
long    hOldPen
long    hPen
long    hwnd
Image   image
int layout
int lineCap
float[] lineDashes
float   lineDashesOffset
int lineJoin
float   lineMiterLimit
int lineStyle
float   lineWidth
PAINTSTRUCT ps
int state
int style
int uiState

Constructor Summary
Constructors

Constructor and Description
GCData()

Method Summary

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Field Detail

device
public Device device

style
public int style

state
public int state

foreground
public int foreground

background
public int background

font
public Font font

foregroundPattern
public Pattern foregroundPattern

backgroundPattern
public Pattern backgroundPattern

lineStyle
public int lineStyle

lineWidth
public float lineWidth

lineCap
public int lineCap

lineJoin
public int lineJoin

lineDashesOffset
public float lineDashesOffset

lineDashes
public float[] lineDashes

lineMiterLimit
public float lineMiterLimit

alpha
public int alpha

image
public Image image

ps
public PAINTSTRUCT ps

layout
public int layout

hPen
public long hPen

hOldPen
public long hOldPen

hBrush
public long hBrush

hOldBrush
public long hOldBrush

hNullBitmap
public long hNullBitmap

hwnd
public long hwnd

gdipGraphics
public long gdipGraphics

gdipPen
public long gdipPen

gdipBrush
public long gdipBrush

gdipFgBrush
public long gdipFgBrush

gdipBgBrush
public long gdipBgBrush

gdipFont
public long gdipFont

hGDIFont
public long hGDIFont

gdipXOffset
public float gdipXOffset

gdipYOffset
public float gdipYOffset

uiState
public int uiState

focusDrawn
public boolean focusDrawn

Constructor Detail

GCData
public GCData()


org.eclipse.swt.events
Class GestureEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.GestureEvent
All Implemented Interfaces:
java.io.Serializable


public class GestureEvent extends TypedEvent
Instances of this class are sent in response to touch-based gestures that are triggered by the user.
since. :
3.7
See Also:
GestureListener, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
int detail
The gesture type.
boolean doit
This flag indicates whether the operation should be allowed.
double  magnification
This field is valid when the detail field is set to GESTURE_MAGNIFY.
double  rotation
This field is valid when the detail field is set to GESTURE_ROTATE.
int stateMask
The state of the keyboard modifier keys and mouse masks at the time the event was generated.
int x
The meaning of this field is dependent on the value of the detail field and the platform.
int xDirection
This field is valid when the detail field is set to GESTURE_SWIPE or GESTURE_PAN.
int y
The meaning of this field is dependent on the value of the detail field and the platform.
int yDirection
This field is valid when the detail field is set to GESTURE_SWIPE or GESTURE_PAN.

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
GestureEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

stateMask
public int stateMask
The state of the keyboard modifier keys and mouse masks at the time the event was generated.
See Also:
SWT.MODIFIER_MASK, SWT.BUTTON_MASK

detail
public int detail
The gesture type.
SWT.GESTURE_BEGIN
SWT.GESTURE_END
SWT.GESTURE_MAGNIFY
SWT.GESTURE_PAN
SWT.GESTURE_ROTATE
SWT.GESTURE_SWIPE
This field determines the GestureEvent fields that contain valid data.

x
public int x
The meaning of this field is dependent on the value of the detail field and the platform. It can represent either the x coordinate of the centroid of the touches that make up the gesture, or the x coordinate of the cursor at the time the gesture was performed.

y
public int y
The meaning of this field is dependent on the value of the detail field and the platform. It can represent either the y coordinate of the centroid of the touches that make up the gesture, or the y coordinate of the cursor at the time the gesture was performed.

rotation
public double rotation
This field is valid when the detail field is set to GESTURE_ROTATE. It specifies the number of degrees rotated on the device since.  the gesture started. Positive values indicate counter-clockwise rotation, and negative values indicate clockwise rotation.

xDirection
public int xDirection
This field is valid when the detail field is set to GESTURE_SWIPE or GESTURE_PAN. Both xDirection and yDirection can be valid for an individual gesture. The meaning of this field is dependent on the value of the detail field. If detail is GESTURE_SWIPE then a positive value indicates a swipe to the right and a negative value indicates a swipe to the left. If detail is GESTURE_PAN then a positive value indicates a pan to the right by this field's count of pixels and a negative value indicates a pan to the left by this field's count of pixels.

yDirection
public int yDirection
This field is valid when the detail field is set to GESTURE_SWIPE or GESTURE_PAN. Both xDirection and yDirection can be valid for an individual gesture. The meaning of this field is dependent on the value of the detail field. If detail is GESTURE_SWIPE then a positive value indicates a downward swipe and a negative value indicates an upward swipe. If detail is GESTURE_PAN then a positive value indicates a downward pan by this field's count of pixels and a negative value indicates an upward pan by this field's count of pixels.

magnification
public double magnification
This field is valid when the detail field is set to GESTURE_MAGNIFY. This is the scale factor to be applied. This value will be 1.0 in the first received event with GESTURE_MAGNIFY, and will then fluctuate in subsequent events as the user moves their fingers.

doit
public boolean doit
This flag indicates whether the operation should be allowed. Setting it to false will cancel the operation.

Constructor Detail

GestureEvent
public GestureEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class TypedEvent
Returns:
a string representation of the event


org.eclipse.swt.events
Interface GestureListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
Functional Interface:
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.


@FunctionalInterface public interface GestureListener extends SWTEventListener
Classes which implement this interface provide methods that deal with the events that are generated as gestures are triggered by the user interacting with a touch pad or touch screen. After creating an instance of a class that implements this interface it can be added to a control using the addGestureListener method and removed using the removeGestureListener method. When a gesture is triggered, the appropriate method will be invoked.
Warning: This API is currently only implemented on Windows and Cocoa. SWT doesn't send Gesture or Touch events on GTK.
since. :
3.7
See Also:
GestureEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    gesture(GestureEvent e)
Sent when a recognized gesture has occurred.

Method Detail

gesture
void gesture(GestureEvent e)
Sent when a recognized gesture has occurred.
Parameters:
e - an event containing information about the gesture.


org.eclipse.swt.internal.image
Class GIFFileFormat
java.lang.Object
org.eclipse.swt.internal.image.FileFormat
org.eclipse.swt.internal.image.GIFFileFormat


public final class GIFFileFormat extends FileFormat

Constructor Summary
Constructors

Constructor and Description
GIFFileFormat()

Method Summary

Methods inherited from class org.eclipse.swt.internal.image.FileFormat
load, loadFromStream, save, unloadIntoStream

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

GIFFileFormat
public GIFFileFormat()


org.eclipse.swt.graphics
Class GlyphMetrics
java.lang.Object
org.eclipse.swt.graphics.GlyphMetrics


public final class GlyphMetrics extends java.lang.Object
Instances of this class represent glyph metrics. The hashCode() method in this class uses the values of the public fields to compute the hash value. When storing instances of the class in hashed collections, do not modify these fields after the object has been inserted.
Application code does not need to explicitly release the resources managed by each instance when those instances are no longer required, and thus no dispose() method is provided.
since. :
3.2
See Also:
TextStyle, TextLayout, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
int ascent
the ascent of the GlyphMetrics
int descent
the descent of the GlyphMetrics
int width
the width of the GlyphMetrics

Constructor Summary
Constructors

Constructor and Description
GlyphMetrics(int ascent,             int descent,             int width )
Constructs an instance of this class with the given ascent, descent and width values.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
int hashCode()
Returns an integer hash code for the receiver.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait

Field Detail

ascent
public int ascent
the ascent of the GlyphMetrics

descent
public int descent
the descent of the GlyphMetrics

width
public int width
the width of the GlyphMetrics

Constructor Detail

GlyphMetrics
public GlyphMetrics(int ascent,
                    int descent,
                    int width)
Constructs an instance of this class with the given ascent, descent and width values.
Parameters:
ascent - the GlyphMetrics ascent
descent - the GlyphMetrics descent
width - the GlyphMetrics width
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the ascent, descent or width argument is negative

Method Detail

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
See Also:
equals(Object)

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the GlyphMetrics


org.eclipse.swt.layout
Class GridData
java.lang.Object
org.eclipse.swt.layout.GridData


public final class GridData extends java.lang.Object
GridData is the layout data object associated with GridLayout. To set a GridData object into a control, you use the Control.setLayoutData(Object) method. There are two ways to create a GridData object with certain fields set. The first is to set the fields directly, like this:
                GridData gridData = new GridData();
                gridData.horizontalAlignment = GridData.FILL;
                gridData.grabExcessHorizontalSpace = true;
                button1.setLayoutData(gridData);

                gridData = new GridData();
                gridData.horizontalAlignment = GridData.FILL;
                gridData.verticalAlignment = GridData.FILL;
                gridData.grabExcessHorizontalSpace = true;
                gridData.grabExcessVerticalSpace = true;
                gridData.horizontalSpan = 2;
                button2.setLayoutData(gridData);
The second is to take advantage of GridData convenience constructors, for example: button1.setLayoutData(new GridData (SWT.FILL, SWT.CENTER, true, false)); button2.setLayoutData(new GridData (SWT.FILL, SWT.FILL, true, true, 2, 1));
NOTE: Do not reuse GridData objects. Every control in a Composite that is managed by a GridLayout must have a unique GridData object. If the layout data for a control in a GridLayout is null at layout time, a unique GridData object is created for it.
See Also:
GridLayout, Control.setLayoutData(java.lang.Object), Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
static int  BEGINNING
Value for horizontalAlignment or verticalAlignment.
static int  CENTER
Value for horizontalAlignment or verticalAlignment.
static int  END
Value for horizontalAlignment or verticalAlignment.
boolean exclude
exclude informs the layout to ignore this control when sizing and positioning controls.
static int  FILL
Value for horizontalAlignment or verticalAlignment.
static int  FILL_BOTH
Style bit for new GridData(int) to resize the control to fill the cell horizontally and vertically and to fit the remaining horizontal and vertical space.
static int  FILL_HORIZONTAL
Style bit for new GridData(int) to resize the control to fill the cell horizontally and to fit the remaining horizontal space.
static int  FILL_VERTICAL
Style bit for new GridData(int) to resize the control to fill the cell vertically and to fit the remaining vertical space.
static int  GRAB_HORIZONTAL
Style bit for new GridData(int) to resize the control to fit the remaining horizontal space.
static int  GRAB_VERTICAL
Style bit for new GridData(int) to resize the control to fit the remaining vertical space.
boolean grabExcessHorizontalSpace
grabExcessHorizontalSpace specifies whether the width of the cell changes depending on the size of the parent Composite.
boolean grabExcessVerticalSpace
grabExcessVerticalSpace specifies whether the height of the cell changes depending on the size of the parent Composite.
int heightHint
heightHint specifies the preferred height in pixels.
static int  HORIZONTAL_ALIGN_BEGINNING
Style bit for new GridData(int) to position the control at the left of the cell.
static int  HORIZONTAL_ALIGN_CENTER
Style bit for new GridData(int) to position the control in the horizontal center of the cell.
static int  HORIZONTAL_ALIGN_END
Style bit for new GridData(int) to position the control at the right of the cell.
static int  HORIZONTAL_ALIGN_FILL
Style bit for new GridData(int) to resize the control to fill the cell horizontally.
int horizontalAlignment
horizontalAlignment specifies how controls will be positioned horizontally within a cell.
int horizontalIndent
horizontalIndent specifies the number of pixels of indentation that will be placed along the left side of the cell.
int horizontalSpan
horizontalSpan specifies the number of column cells that the control will take up.
int minimumHeight
minimumHeight specifies the minimum height in pixels.
int minimumWidth
minimumWidth specifies the minimum width in pixels.
static int  VERTICAL_ALIGN_BEGINNING
Style bit for new GridData(int).
static int  VERTICAL_ALIGN_CENTER
Style bit for new GridData(int) to position the control in the vertical center of the cell.
static int  VERTICAL_ALIGN_END
Style bit for new GridData(int) to position the control at the bottom of the cell.
static int  VERTICAL_ALIGN_FILL
Style bit for new GridData(int) to resize the control to fill the cell vertically.
int verticalAlignment
verticalAlignment specifies how controls will be positioned vertically within a cell.
int verticalIndent
verticalIndent specifies the number of pixels of indentation that will be placed along the top side of the cell.
int verticalSpan
verticalSpan specifies the number of row cells that the control will take up.
int widthHint
widthHint specifies the preferred width in pixels.

Constructor Summary
Constructors

Constructor and Description
GridData()
Constructs a new instance of GridData using default values.
GridData(int style)
Constructs a new instance based on the GridData style.
GridData(int width,         int height)
Constructs a new instance of GridData according to the parameters.
GridData(int horizontalAlignment,         int verticalAlignment,   boolean grabExcessHorizontalSpace,         boolean grabExcessVerticalS pace)
Constructs a new instance of GridData according to the parameters.
GridData(int horizontalAlignment,         int verticalAlignment,   boolean grabExcessHorizontalSpace,         boolean grabExcessVerticalS pace,         int horizontalSpan,         int verticalSpan)
Constructs a new instance of GridData according to the parameters.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

verticalAlignment
public int verticalAlignment
verticalAlignment specifies how controls will be positioned vertically within a cell. The default value is CENTER. Possible values are:
SWT.BEGINNING (or SWT.TOP): Position the control at the top of the cell
SWT.CENTER: Position the control in the vertical center of the cell
SWT.END (or SWT.BOTTOM): Position the control at the bottom of the cell
SWT.FILL: Resize the control to fill the cell vertically

horizontalAlignment
public int horizontalAlignment
horizontalAlignment specifies how controls will be positioned horizontally within a cell. The default value is BEGINNING. Possible values are:
SWT.BEGINNING (or SWT.LEFT): Position the control at the left of the cell
SWT.CENTER: Position the control in the horizontal center of the cell
SWT.END (or SWT.RIGHT): Position the control at the right of the cell
SWT.FILL: Resize the control to fill the cell horizontally

widthHint
public int widthHint
widthHint specifies the preferred width in pixels. This value is the wHint passed into Control.computeSize(int, int, boolean) to determine the preferred size of the control. The default value is SWT.DEFAULT.
See Also:
Control.computeSize(int, int, boolean)

heightHint
public int heightHint
heightHint specifies the preferred height in pixels. This value is the hHint passed into Control.computeSize(int, int, boolean) to determine the preferred size of the control. The default value is SWT.DEFAULT.
See Also:
Control.computeSize(int, int, boolean)

horizontalIndent
public int horizontalIndent
horizontalIndent specifies the number of pixels of indentation that will be placed along the left side of the cell. The default value is 0.

verticalIndent
public int verticalIndent
verticalIndent specifies the number of pixels of indentation that will be placed along the top side of the cell. The default value is 0.
since. :
3.1

horizontalSpan
public int horizontalSpan
horizontalSpan specifies the number of column cells that the control will take up. The default value is 1.

verticalSpan
public int verticalSpan
verticalSpan specifies the number of row cells that the control will take up. The default value is 1.

grabExcessHorizontalSpace
public boolean grabExcessHorizontalSpace
grabExcessHorizontalSpace specifies whether the width of the cell changes depending on the size of the parent Composite. If grabExcessHorizontalSpace is true, the following rules apply to the width of the cell:
If extra horizontal space is available in the parent, the cell will grow to be wider than its preferred width. The new width will be "preferred width + delta" where delta is the extra horizontal space divided by the number of grabbing columns.
If there is not enough horizontal space available in the parent, the cell will shrink until it reaches its minimum width as specified by GridData.minimumWidth. The new width will be the maximum of "minimumWidth" and "preferred width - delta", where delta is the amount of space missing divided by the number of grabbing columns.
If the parent is packed, the cell will be its preferred width as specified by GridData.widthHint.
If the control spans multiple columns and there are no other grabbing controls in any of the spanned columns, the last column in the span will grab the extra space. If there is at least one other grabbing control in the span, the grabbing will be spread over the columns already marked as grabExcessHorizontalSpace.
The default value is false.
See Also:
minimumWidth, widthHint

grabExcessVerticalSpace
public boolean grabExcessVerticalSpace
grabExcessVerticalSpace specifies whether the height of the cell changes depending on the size of the parent Composite. If grabExcessVerticalSpace is true, the following rules apply to the height of the cell:
If extra vertical space is available in the parent, the cell will grow to be taller than its preferred height. The new height will be "preferred height + delta" where delta is the extra vertical space divided by the number of grabbing rows.
If there is not enough vertical space available in the parent, the cell will shrink until it reaches its minimum height as specified by GridData.minimumHeight. The new height will be the maximum of "minimumHeight" and "preferred height - delta", where delta is the amount of space missing divided by the number of grabbing rows.
If the parent is packed, the cell will be its preferred height as specified by GridData.heightHint.
If the control spans multiple rows and there are no other grabbing controls in any of the spanned rows, the last row in the span will grab the extra space. If there is at least one other grabbing control in the span, the grabbing will be spread over the rows already marked as grabExcessVerticalSpace.
The default value is false.
See Also:
minimumHeight, heightHint

minimumWidth
public int minimumWidth
minimumWidth specifies the minimum width in pixels. This value applies only if grabExcessHorizontalSpace is true. A value of SWT.DEFAULT means that the minimum width will be the result of Control.computeSize(int, int, boolean) where wHint is determined by GridData.widthHint. The default value is 0.
since. :
3.1
See Also:
Control.computeSize(int, int, boolean), widthHint

minimumHeight
public int minimumHeight
minimumHeight specifies the minimum height in pixels. This value applies only if grabExcessVerticalSpace is true. A value of SWT.DEFAULT means that the minimum height will be the result of Control.computeSize(int, int, boolean) where hHint is determined by GridData.heightHint. The default value is 0.
since. :
3.1
See Also:
Control.computeSize(int, int, boolean), heightHint

exclude
public boolean exclude
exclude informs the layout to ignore this control when sizing and positioning controls. If this value is true, the size and position of the control will not be managed by the layout. If this value is false, the size and position of the control will be computed and assigned. The default value is false.
since. :
3.1

BEGINNING
public static final int BEGINNING
Value for horizontalAlignment or verticalAlignment. Position the control at the top or left of the cell. Not recommended. Use SWT.BEGINNING, SWT.TOP or SWT.LEFT instead.
See Also:
Constant Field Values

CENTER
public static final int CENTER
Value for horizontalAlignment or verticalAlignment. Position the control in the vertical or horizontal center of the cell Not recommended. Use SWT.CENTER instead.
See Also:
Constant Field Values

END
public static final int END
Value for horizontalAlignment or verticalAlignment. Position the control at the bottom or right of the cell Not recommended. Use SWT.END, SWT.BOTTOM or SWT.RIGHT instead.
See Also:
Constant Field Values

FILL
public static final int FILL
Value for horizontalAlignment or verticalAlignment. Resize the control to fill the cell horizontally or vertically. Not recommended. Use SWT.FILL instead.
See Also:
Constant Field Values

VERTICAL_ALIGN_BEGINNING
public static final int VERTICAL_ALIGN_BEGINNING
Style bit for new GridData(int). Position the control at the top of the cell. Not recommended. Use new GridData(int, SWT.BEGINNING, boolean, boolean) instead.
See Also:
Constant Field Values

VERTICAL_ALIGN_CENTER
public static final int VERTICAL_ALIGN_CENTER
Style bit for new GridData(int) to position the control in the vertical center of the cell. Not recommended. Use new GridData(int, SWT.CENTER, boolean, boolean) instead.
See Also:
Constant Field Values

VERTICAL_ALIGN_END
public static final int VERTICAL_ALIGN_END
Style bit for new GridData(int) to position the control at the bottom of the cell. Not recommended. Use new GridData(int, SWT.END, boolean, boolean) instead.
See Also:
Constant Field Values

VERTICAL_ALIGN_FILL
public static final int VERTICAL_ALIGN_FILL
Style bit for new GridData(int) to resize the control to fill the cell vertically. Not recommended. Use new GridData(int, SWT.FILL, boolean, boolean) instead
See Also:
Constant Field Values

HORIZONTAL_ALIGN_BEGINNING
public static final int HORIZONTAL_ALIGN_BEGINNING
Style bit for new GridData(int) to position the control at the left of the cell. Not recommended. Use new GridData(SWT.BEGINNING, int, boolean, boolean) instead.
See Also:
Constant Field Values

HORIZONTAL_ALIGN_CENTER
public static final int HORIZONTAL_ALIGN_CENTER
Style bit for new GridData(int) to position the control in the horizontal center of the cell. Not recommended. Use new GridData(SWT.CENTER, int, boolean, boolean) instead.
See Also:
Constant Field Values

HORIZONTAL_ALIGN_END
public static final int HORIZONTAL_ALIGN_END
Style bit for new GridData(int) to position the control at the right of the cell. Not recommended. Use new GridData(SWT.END, int, boolean, boolean) instead.
See Also:
Constant Field Values

HORIZONTAL_ALIGN_FILL
public static final int HORIZONTAL_ALIGN_FILL
Style bit for new GridData(int) to resize the control to fill the cell horizontally. Not recommended. Use new GridData(SWT.FILL, int, boolean, boolean) instead.
See Also:
Constant Field Values

GRAB_HORIZONTAL
public static final int GRAB_HORIZONTAL
Style bit for new GridData(int) to resize the control to fit the remaining horizontal space. Not recommended. Use new GridData(int, int, true, boolean) instead.
See Also:
Constant Field Values

GRAB_VERTICAL
public static final int GRAB_VERTICAL
Style bit for new GridData(int) to resize the control to fit the remaining vertical space. Not recommended. Use new GridData(int, int, boolean, true) instead.
See Also:
Constant Field Values

FILL_VERTICAL
public static final int FILL_VERTICAL
Style bit for new GridData(int) to resize the control to fill the cell vertically and to fit the remaining vertical space. FILL_VERTICAL = VERTICAL_ALIGN_FILL | GRAB_VERTICAL Not recommended. Use new GridData(int, SWT.FILL, boolean, true) instead.
See Also:
Constant Field Values

FILL_HORIZONTAL
public static final int FILL_HORIZONTAL
Style bit for new GridData(int) to resize the control to fill the cell horizontally and to fit the remaining horizontal space. FILL_HORIZONTAL = HORIZONTAL_ALIGN_FILL | GRAB_HORIZONTAL Not recommended. Use new GridData(SWT.FILL, int, true, boolean) instead.
See Also:
Constant Field Values

FILL_BOTH
public static final int FILL_BOTH
Style bit for new GridData(int) to resize the control to fill the cell horizontally and vertically and to fit the remaining horizontal and vertical space. FILL_BOTH = FILL_VERTICAL | FILL_HORIZONTAL Not recommended. Use new GridData(SWT.FILL, SWT.FILL, true, true) instead.
See Also:
Constant Field Values

Constructor Detail

GridData
public GridData()
Constructs a new instance of GridData using default values.

GridData
public GridData(int style)
Constructs a new instance based on the GridData style. This constructor is not recommended.
Parameters:
style - the GridData style

GridData
public GridData(int horizontalAlignment,
                int verticalAlignment,
                boolean grabExcessHorizontalSpace,
                boolean grabExcessVerticalSpace)
Constructs a new instance of GridData according to the parameters.
Parameters:
horizontalAlignment - how control will be positioned horizontally within a cell, one of: SWT.BEGINNING (or SWT.LEFT), SWT.CENTER, SWT.END (or SWT.RIGHT), or SWT.FILL
verticalAlignment - how control will be positioned vertically within a cell, one of: SWT.BEGINNING (or SWT.TOP), SWT.CENTER, SWT.END (or SWT.BOTTOM), or SWT.FILL
grabExcessHorizontalSpace - whether cell will be made wide enough to fit the remaining horizontal space
grabExcessVerticalSpace - whether cell will be made high enough to fit the remaining vertical space
since. :
3.0

GridData
public GridData(int horizontalAlignment,
                int verticalAlignment,
                boolean grabExcessHorizontalSpace,
                boolean grabExcessVerticalSpace,
                int horizontalSpan,
                int verticalSpan)
Constructs a new instance of GridData according to the parameters.
Parameters:
horizontalAlignment - how control will be positioned horizontally within a cell, one of: SWT.BEGINNING (or SWT.LEFT), SWT.CENTER, SWT.END (or SWT.RIGHT), or SWT.FILL
verticalAlignment - how control will be positioned vertically within a cell, one of: SWT.BEGINNING (or SWT.TOP), SWT.CENTER, SWT.END (or SWT.BOTTOM), or SWT.FILL
grabExcessHorizontalSpace - whether cell will be made wide enough to fit the remaining horizontal space
grabExcessVerticalSpace - whether cell will be made high enough to fit the remaining vertical space
horizontalSpan - the number of column cells that the control will take up
verticalSpan - the number of row cells that the control will take up
since. :
3.0

GridData
public GridData(int width,
                int height)
Constructs a new instance of GridData according to the parameters. A value of SWT.DEFAULT indicates that no minimum width or no minimum height is specified.
Parameters:
width - a minimum width for the column
height - a minimum height for the row
since. :
3.0

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the GridData object


org.eclipse.swt.layout
Class GridLayout
java.lang.Object
org.eclipse.swt.widgets.Layout
org.eclipse.swt.layout.GridLayout


public final class GridLayout extends Layout
Instances of this class lay out the control children of a Composite in a grid. GridLayout has a number of configuration fields, and the controls it lays out can have an associated layout data object, called GridData. The power of GridLayout lies in the ability to configure GridData for each control in the layout.
The following code creates a shell managed by a GridLayout with 3 columns:
                Display display = new Display();
                Shell shell = new Shell(display);
                GridLayout gridLayout = new GridLayout();
                gridLayout.numColumns = 3;
                shell.setLayout(gridLayout);

The numColumns field is the most important field in a GridLayout. Widgets are laid out in columns from left to right, and a new row is created when numColumns + 1 controls are added to the Composite.
See Also:
GridData, GridLayout snippets, SWT Example: LayoutExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
int horizontalSpacing
horizontalSpacing specifies the number of pixels between the right edge of one cell and the left edge of its neighbouring cell to the right.
boolean makeColumnsEqualWidth
makeColumnsEqualWidth specifies whether all columns in the layout will be forced to have the same width.
int marginBottom
marginBottom specifies the number of pixels of vertical margin that will be placed along the bottom edge of the layout.
int marginHeight
marginHeight specifies the number of pixels of vertical margin that will be placed along the top and bottom edges of the layout.
int marginLeft
marginLeft specifies the number of pixels of horizontal margin that will be placed along the left edge of the layout.
int marginRight
marginRight specifies the number of pixels of horizontal margin that will be placed along the right edge of the layout.
int marginTop
marginTop specifies the number of pixels of vertical margin that will be placed along the top edge of the layout.
int marginWidth
marginWidth specifies the number of pixels of horizontal margin that will be placed along the left and right edges of the layout.
int numColumns
numColumns specifies the number of cell columns in the layout.
int verticalSpacing
verticalSpacing specifies the number of pixels between the bottom edge of one cell and the top edge of its neighbouring cell underneath.

Constructor Summary
Constructors

Constructor and Description
GridLayout()
Constructs a new instance of this class with a single column.
GridLayout(int numColumns,           boolean makeColumnsEqualWidth)
Constructs a new instance of this class given the number of columns, and whether or not the columns should be forced to have the same width.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
protected Point computeSize(Composite composite,          int wHint,            int h Hint,            boolean flushCache)
Computes and returns the size of the specified composite's client area according to this layout.
protected boolean   flushCache(Control control)
Instruct the layout to flush any cached values associated with the control specified in the argument control.
protected void  layout(Composite composite,       b oolean flushCache)
Lays out the children of the specified composite according to this layout.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

numColumns
public int numColumns
numColumns specifies the number of cell columns in the layout. If numColumns has a value less than 1, the layout will not set the size and position of any controls. The default value is 1.

makeColumnsEqualWidth
public boolean makeColumnsEqualWidth
makeColumnsEqualWidth specifies whether all columns in the layout will be forced to have the same width. The default value is false.

marginWidth
public int marginWidth
marginWidth specifies the number of pixels of horizontal margin that will be placed along the left and right edges of the layout. The default value is 5.

marginHeight
public int marginHeight
marginHeight specifies the number of pixels of vertical margin that will be placed along the top and bottom edges of the layout. The default value is 5.

marginLeft
public int marginLeft
marginLeft specifies the number of pixels of horizontal margin that will be placed along the left edge of the layout. The default value is 0.
since. :
3.1

marginTop
public int marginTop
marginTop specifies the number of pixels of vertical margin that will be placed along the top edge of the layout. The default value is 0.
since. :
3.1

marginRight
public int marginRight
marginRight specifies the number of pixels of horizontal margin that will be placed along the right edge of the layout. The default value is 0.
since. :
3.1

marginBottom
public int marginBottom
marginBottom specifies the number of pixels of vertical margin that will be placed along the bottom edge of the layout. The default value is 0.
since. :
3.1

horizontalSpacing
public int horizontalSpacing
horizontalSpacing specifies the number of pixels between the right edge of one cell and the left edge of its neighbouring cell to the right. The default value is 5.

verticalSpacing
public int verticalSpacing
verticalSpacing specifies the number of pixels between the bottom edge of one cell and the top edge of its neighbouring cell underneath. The default value is 5.

Constructor Detail

GridLayout
public GridLayout()
Constructs a new instance of this class with a single column.

GridLayout
public GridLayout(int numColumns,
                  boolean makeColumnsEqualWidth)
Constructs a new instance of this class given the number of columns, and whether or not the columns should be forced to have the same width. If numColumns has a value less than 1, the layout will not set the size and position of any controls.
Parameters:
numColumns - the number of columns in the grid
makeColumnsEqualWidth - whether or not the columns will have equal width
since. :
2.0

Method Detail

computeSize
protected Point computeSize(Composite composite,
                            int wHint,
                            int hHint,
                            boolean flushCache)
Description copied from class: Layout
Computes and returns the size of the specified composite's client area according to this layout. This method computes the size that the client area of the composite must be in order to position all children at their preferred size inside the composite according to the layout algorithm encoded by this layout.
When a width or height hint is supplied, it is used to constrain the result. For example, if a width hint is provided that is less than the width of the client area, the layout may choose to wrap and increase height, clip, overlap, or otherwise constrain the children.
Specified by:
computeSize in class Layout
Parameters:
composite - a composite widget using this layout
wHint - width (SWT.DEFAULT for preferred size)
hHint - height (SWT.DEFAULT for preferred size)
flushCache - true means flush cached layout values
Returns:
a point containing the computed size (width, height)
See Also:
Layout.layout(org.eclipse.swt.widgets.Composite, boolean), Control.getBorderWidth(), Control.getBounds(), Control.getSize(), Control.pack(boolean), "computeTrim, getClientArea for controls that implement them"

flushCache
protected boolean flushCache(Control control)
Description copied from class: Layout
Instruct the layout to flush any cached values associated with the control specified in the argument control.
Overrides:
flushCache in class Layout
Parameters:
control - a control managed by this layout
Returns:
true if the Layout has flushed all cached information associated with control

layout
protected void layout(Composite composite,
                      boolean flushCache)
Description copied from class: Layout
Lays out the children of the specified composite according to this layout. This method positions and sizes the children of a composite using the layout algorithm encoded by this layout. Children of the composite are positioned in the client area of the composite. The position of the composite is not altered by this method.
When the flush cache hint is true, the layout is instructed to flush any cached values associated with the children. Typically, a layout will cache the preferred sizes of the children to avoid the expense of computing these values each time the widget is laid out.
When layout is triggered explicitly by the programmer the flush cache hint is true. When layout is triggered by a resize, either caused by the programmer or by the user, the hint is false.
Specified by:
layout in class Layout
Parameters:
composite - a composite widget using this layout
flushCache - true means flush cached layout values

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the layout


org.eclipse.swt.widgets
Class Group
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.Composite
org.eclipse.swt.widgets.Group
All Implemented Interfaces:
Drawable


public class Group extends Composite
Instances of this class provide an etched border with an optional title. Shadow styles are hints and may not be honoured by the platform. To create a group with the default shadow style for the platform, do not specify a shadow style.
Styles:
SHADOW_ETCHED_IN, SHADOW_ETCHED_OUT, SHADOW_IN, SHADOW_OUT, SHADOW_NONE
Events:
(none)
Note: Only one of the above styles may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Group(Composite parent,      int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
protected void  checkSubclass()
Checks that this class can be subclassed.
java.lang.String    getText()
Returns the receiver's text, which is the string that the is used as the title.
void    setFont(Font font)
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
void    setText(java.lang.String string)
Sets the receiver's text, which is the string that will be displayed as the receiver's title, to the argument, which may not be null.

Methods inherited from class org.eclipse.swt.widgets.Composite
changed, drawBackground, getBackgroundMode, getChildren, getLayout, getLayoutDeferred, getTabList, isLayoutDeferred, layout, layout, layout, layout, layout, setBackgroundMode, setFocus, setLayout, setLayoutDeferred, setTabList

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

Group
public Group(Composite parent,
             int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.SHADOW_ETCHED_IN, SWT.SHADOW_ETCHED_OUT, SWT.SHADOW_IN, SWT.SHADOW_OUT, SWT.SHADOW_NONE, Widget.checkSubclass(), Widget.getStyle()

Method Detail

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Composite

getText
public java.lang.String getText()
Returns the receiver's text, which is the string that the is used as the title. If the text has not previously been set, returns an empty string.
Returns:
the text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setFont
public void setFont(Font font)
Description copied from class: Control
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Overrides:
setFont in class Control
Parameters:
font - the new font (or null)

setText
public void setText(java.lang.String string)
Sets the receiver's text, which is the string that will be displayed as the receiver's title, to the argument, which may not be null. The string may include the mnemonic character. Mnemonics are indicated by an '&' that causes the next character to be the mnemonic. When the user presses a key sequence that matches the mnemonic, focus is assigned to the first child of the group. On most platforms, the mnemonic appears underlined but may be emphasised in a platform specific manner. The mnemonic indicator character '&' can be escaped by doubling it in the string, causing a single '&' to be displayed. Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Parameters:
string - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.events
Class HelpEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.HelpEvent
All Implemented Interfaces:
java.io.Serializable


public final class HelpEvent extends TypedEvent
Instances of this class are sent as a result of help being requested for a widget.
See Also:
HelpListener, Sample code and further information, Serialized Form

Field Summary

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
HelpEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary

Methods inherited from class org.eclipse.swt.events.TypedEvent
toString

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

HelpEvent
public HelpEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information


org.eclipse.swt.events
Interface HelpListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
Functional Interface:
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.


@FunctionalInterface public interface HelpListener extends SWTEventListener
Classes which implement this interface provide a method that deals with the event that is generated when help is requested for a control, typically when the user presses F1. After creating an instance of a class that implements this interface it can be added to a control using the addHelpListener method and removed using the removeHelpListener method. When help is requested for a control, the helpRequested method will be invoked.
See Also:
HelpEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    helpRequested(HelpEvent e)
Sent when help is requested for a control, typically when the user presses F1.

Method Detail

helpRequested
void helpRequested(HelpEvent e)
Sent when help is requested for a control, typically when the user presses F1.
Parameters:
e - an event containing information about the help


org.eclipse.swt.graphics
Class Image
java.lang.Object
org.eclipse.swt.graphics.Resource
org.eclipse.swt.graphics.Image
All Implemented Interfaces:
Drawable


public final class Image extends Resource implements Drawable
Instances of this class are graphics which have been prepared for display on a specific device. That is, they are ready to paint using methods such as GC.drawImage() and display on widgets with, for example, Button.setImage(). If loaded from a file format that supports it, an Image may have transparency, meaning that certain pixels are specified as being transparent when drawn. Examples of file formats that support transparency are GIF and PNG.
There are two primary ways to use Images. The first is to load a graphic file from disk and create an Image from it. This is done using an Image constructor, for example:
    Image i = new Image(device, "C:\\graphic.bmp");
A graphic file may contain a color table specifying which colors the image was intended to possess. In the above example, these colors will be mapped to the closest available color in SWT. It is possible to get more control over the mapping of colors as the image is being created, using code of the form: ImageData data = new ImageData("C:\graphic.bmp"); RGB[] rgbs = data.getRGBs(); // At this point, rgbs contains specifications of all // the colors contained within this image. You may // allocate as many of these colors as you wish by // using the Color constructor Color(RGB), then // create the image: Image i = new Image(device, data);
Applications which require even greater control over the image loading process should use the support provided in class ImageLoader.
Application code must explicitly invoke the Image.dispose() method to release the operating system resources managed by each instance when those instances are no longer required.
See Also:
Color, ImageData, ImageLoader, Image snippets, SWT Examples: GraphicsExample, ImageAnalyzer, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
long    handle
the handle to the OS image resource (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.
int type
specifies whether the receiver is a bitmap or an icon (one of SWT.BITMAP, SWT.ICON) IMPORTANT: This field is not part of the SWT public API.

Constructor Summary
Constructors

Constructor and Description
Image(Device device,      ImageData data)
Constructs an instance of this class from the given ImageData.
Image(Device device,      ImageData source,      ImageData mask)
Constructs an instance of this class, whose type is SWT.ICON, from the two given ImageData objects.
Image(Device device,      ImageDataProvider imageDataProvider)
Constructs an instance of this class by loading its representation from the ImageData retrieved from the ImageDataProvider.
Image(Device device,      ImageFileNameProvider imageFileNameProvider)
Constructs an instance of this class by loading its representation from the file retrieved from the ImageFileNameProvider.
Image(Device device,      Image srcImage,      int flag)
Constructs a new instance of this class based on the provided image, with an appearance that varies depending on the value of the flag.
Image(Device device,      java.io.InputStream stream)
Constructs an instance of this class by loading its representation from the specified input stream.
Image(Device device,      int width,      int height)
Constructs an empty instance of this class with the specified width and height.
Image(Device device,      Rectangle bounds)
Constructs an empty instance of this class with the width and height of the specified rectangle.
Image(Device device,      java.lang.String filename)
Constructs an instance of this class by loading its representation from the file with the specified name.

Method Summary
All Methods Static Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Color   getBackground()
Returns the color to which to map the transparent pixel, or null if the receiver has no transparent pixel.
Rectangle   getBounds()
Returns the bounds of the receiver.
Rectangle   getBoundsInPixels()
Returns the bounds of the receiver.
ImageData   getImageData()
Returns an ImageData based on the receiver.
ImageData   getImageDataAtCurrentZoom()
Returns an ImageData based on the receiver.
int hashCode()
Returns an integer hash code for the receiver.
void    internal_dispose_GC(long hDC,               GCData data)
Invokes platform specific functionality to dispose a GC handle.
long    internal_new_GC(GCData data)
Invokes platform specific functionality to allocate a new GC handle.
boolean isDisposed()
Returns true if the image has been disposed, and false otherwise.
void    setBackground(Color color)
Sets the color to which to map the transparent pixel.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.
static Image    win32_new(Device device,          i nt type,          long handle)
Invokes platform specific functionality to allocate a new image.

Methods inherited from class org.eclipse.swt.graphics.Resource
dispose, getDevice

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Field Detail

type
public int type
specifies whether the receiver is a bitmap or an icon (one of SWT.BITMAP, SWT.ICON) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

handle
public long handle
the handle to the OS image resource (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

Constructor Detail

Image
public Image(Device device,
             int width,
             int height)
Constructs an empty instance of this class with the specified width and height. The result may be drawn upon by creating a GC and using any of its drawing operations, as shown in the following example: Image i = new Image(device, width, height); GC gc = new GC(i); gc.drawRectangle(0, 0, 50, 50); gc.dispose();
Note: Some platforms may have a limitation on the size of image that can be created (size depends on width, height, and depth). For example, Windows 95, 98, and ME do not allow images larger than 16M.
You must dispose the image when it is no longer required.
Parameters:
device - the device on which to create the image
width - the width of the new image
height - the height of the new image
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_INVALID_ARGUMENT - if either the width or height is negative or zero
SWTError -
ERROR_NO_HANDLES if a handle could not be obtained for image creation
See Also:
Resource.dispose()

Image
public Image(Device device,
             Image srcImage,
             int flag)
Constructs a new instance of this class based on the provided image, with an appearance that varies depending on the value of the flag. The possible flag values are:
SWT.IMAGE_COPY
the result is an identical copy of srcImage
SWT.IMAGE_DISABLE
the result is a copy of srcImage which has a disabled look
SWT.IMAGE_GRAY
the result is a copy of srcImage which has a gray scale look
You must dispose the image when it is no longer required.
Parameters:
device - the device on which to create the image
srcImage - the image to use as the source
flag - the style, either IMAGE_COPY, IMAGE_DISABLE or IMAGE_GRAY
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if srcImage is null
ERROR_INVALID_ARGUMENT - if the flag is not one of IMAGE_COPY, IMAGE_DISABLE or IMAGE_GRAY
ERROR_INVALID_ARGUMENT - if the image has been disposed
SWTException -
ERROR_INVALID_IMAGE - if the image is not a bitmap or an icon, or is otherwise in an invalid state
ERROR_UNSUPPORTED_DEPTH - if the depth of the image is not supported
SWTError -
ERROR_NO_HANDLES if a handle could not be obtained for image creation
See Also:
Resource.dispose()

Image
public Image(Device device,
             Rectangle bounds)
Constructs an empty instance of this class with the width and height of the specified rectangle. The result may be drawn upon by creating a GC and using any of its drawing operations, as shown in the following example: Image i = new Image(device, boundsRectangle); GC gc = new GC(i); gc.drawRectangle(0, 0, 50, 50); gc.dispose();
Note: Some platforms may have a limitation on the size of image that can be created (size depends on width, height, and depth). For example, Windows 95, 98, and ME do not allow images larger than 16M.
You must dispose the image when it is no longer required.
Parameters:
device - the device on which to create the image
bounds - a rectangle specifying the image's width and height (must not be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if the bounds rectangle is null
ERROR_INVALID_ARGUMENT - if either the rectangle's width or height is negative
SWTError -
ERROR_NO_HANDLES if a handle could not be obtained for image creation
See Also:
Resource.dispose()

Image
public Image(Device device,
             ImageData data)
Constructs an instance of this class from the given ImageData. You must dispose the image when it is no longer required.
Parameters:
device - the device on which to create the image
data - the image data to create the image from (must not be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if the image data is null
SWTException -
ERROR_UNSUPPORTED_DEPTH - if the depth of the ImageData is not supported
SWTError -
ERROR_NO_HANDLES if a handle could not be obtained for image creation
See Also:
Resource.dispose()

Image
public Image(Device device,
             ImageData source,
             ImageData mask)
Constructs an instance of this class, whose type is SWT.ICON, from the two given ImageData objects. The two images must be the same size. Pixel transparency in either image will be ignored. The mask image should contain white wherever the icon is to be visible, and black wherever the icon is to be transparent. In addition, the source image should contain black wherever the icon is to be transparent.
You must dispose the image when it is no longer required.
Parameters:
device - the device on which to create the icon
source - the color data for the icon
mask - the mask data for the icon
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if either the source or mask is null
ERROR_INVALID_ARGUMENT - if source and mask are different sizes
SWTError -
ERROR_NO_HANDLES if a handle could not be obtained for image creation
See Also:
Resource.dispose()

Image
public Image(Device device,
             java.io.InputStream stream)
Constructs an instance of this class by loading its representation from the specified input stream. Throws an error if an error occurs while loading the image, or if the result is an image of an unsupported type. Application code is still responsible for closing the input stream. This constructor is provided for convenience when loading a single image only. If the stream contains multiple images, only the first one will be loaded. To load multiple images, use ImageLoader.load().
This constructor may be used to load a resource as follows:
     static Image loadImage (Display display, Class clazz, String string) {
          InputStream stream = clazz.getResourceAsStream (string);
          if (stream == null) return null;
          Image image = null;
          try {
               image = new Image (display, stream);
          } catch (SWTException ex) {
          } finally {
               try {
                    stream.close ();
               } catch (IOException ex) {}
          }
          return image;
     }
You must dispose the image when it is no longer required.
Parameters:
device - the device on which to create the image
stream - the input stream to load the image from
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if the stream is null
SWTException -
ERROR_IO - if an IO error occurs while reading from the stream
ERROR_INVALID_IMAGE - if the image stream contains invalid data
ERROR_UNSUPPORTED_DEPTH - if the image stream describes an image with an unsupported depth
ERROR_UNSUPPORTED_FORMAT - if the image stream contains an unrecognized format
SWTError -
ERROR_NO_HANDLES if a handle could not be obtained for image creation
See Also:
Resource.dispose()

Image
public Image(Device device,
             java.lang.String filename)
Constructs an instance of this class by loading its representation from the file with the specified name. Throws an error if an error occurs while loading the image, or if the result is an image of an unsupported type. This constructor is provided for convenience when loading a single image only. If the specified file contains multiple images, only the first one will be used.
You must dispose the image when it is no longer required.
Parameters:
device - the device on which to create the image
filename - the name of the file to load the image from
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if the file name is null
SWTException -
ERROR_IO - if an IO error occurs while reading from the file
ERROR_INVALID_IMAGE - if the image file contains invalid data
ERROR_UNSUPPORTED_DEPTH - if the image file describes an image with an unsupported depth
ERROR_UNSUPPORTED_FORMAT - if the image file contains an unrecognized format
SWTError -
ERROR_NO_HANDLES if a handle could not be obtained for image creation
See Also:
Resource.dispose()

Image
public Image(Device device,
             ImageFileNameProvider imageFileNameProvider)
Constructs an instance of this class by loading its representation from the file retrieved from the ImageFileNameProvider. Throws an error if an error occurs while loading the image, or if the result is an image of an unsupported type. This constructor is provided for convenience for loading image as per DPI level.
Parameters:
device - the device on which to create the image
imageFileNameProvider - the ImageFileNameProvider object that is to be used to get the file name
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if the ImageFileNameProvider is null
ERROR_INVALID_ARGUMENT - if the fileName provided by ImageFileNameProvider is null at 100% zoom
SWTException -
ERROR_IO - if an IO error occurs while reading from the file
ERROR_INVALID_IMAGE - if the image file contains invalid data
ERROR_UNSUPPORTED_DEPTH - if the image file describes an image with an unsupported depth
ERROR_UNSUPPORTED_FORMAT - if the image file contains an unrecognized format
SWTError -
ERROR_NO_HANDLES if a handle could not be obtained for image creation
since. :
3.104

Image
public Image(Device device,
             ImageDataProvider imageDataProvider)
Constructs an instance of this class by loading its representation from the ImageData retrieved from the ImageDataProvider. Throws an error if an error occurs while loading the image, or if the result is an image of an unsupported type. This constructor is provided for convenience for loading image as per DPI level.
Parameters:
device - the device on which to create the image
imageDataProvider - the ImageDataProvider object that is to be used to get the ImageData
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
ERROR_NULL_ARGUMENT - if the ImageDataProvider is null
ERROR_INVALID_ARGUMENT - if the ImageData provided by ImageDataProvider is null at 100% zoom
SWTException -
ERROR_IO - if an IO error occurs while reading from the file
ERROR_INVALID_IMAGE - if the image file contains invalid data
ERROR_UNSUPPORTED_DEPTH - if the image file describes an image with an unsupported depth
ERROR_UNSUPPORTED_FORMAT - if the image file contains an unrecognized format
SWTError -
ERROR_NO_HANDLES if a handle could not be obtained for image creation
since. :
3.104

Method Detail

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

getBackground
public Color getBackground()
Returns the color to which to map the transparent pixel, or null if the receiver has no transparent pixel. There are certain uses of Images that do not support transparency (for example, setting an image into a button or label). In these cases, it may be desired to simulate transparency by using the background color of the widget to paint the transparent pixels of the image. Use this method to check which color will be used in these cases in place of transparency. This value may be set with setBackground().
Returns:
the background color of the image, or null if there is no transparency in the image
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getBounds
public Rectangle getBounds()
Returns the bounds of the receiver. The rectangle will always have x and y values of 0, and the width and height of the image.
Returns:
a rectangle specifying the image's bounds in points.
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_INVALID_IMAGE - if the image is not a bitmap or an icon

getBoundsInPixels
public Rectangle getBoundsInPixels()
Returns the bounds of the receiver. The rectangle will always have x and y values of 0, and the width and height of the image in pixels.
Returns:
a rectangle specifying the image's bounds in pixels.
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_INVALID_IMAGE - if the image is not a bitmap or an icon
since. :
3.105

getImageData
public ImageData getImageData()
Returns an ImageData based on the receiver. Modifications made to this ImageData will not affect the Image.
Returns:
an ImageData containing the image's data and attributes at 100% zoom level.
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_INVALID_IMAGE - if the image is not a bitmap or an icon
See Also:
ImageData

getImageDataAtCurrentZoom
public ImageData getImageDataAtCurrentZoom()
Returns an ImageData based on the receiver. Modifications made to this ImageData will not affect the Image.
Returns:
an ImageData containing the image's data and attributes at the current zoom level.
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_INVALID_IMAGE - if the image is not a bitmap or an icon
since. :
3.105
See Also:
ImageData

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
See Also:
equals(java.lang.Object)

internal_new_GC
public long internal_new_GC(GCData data)
Invokes platform specific functionality to allocate a new GC handle. IMPORTANT: This method is not part of the public API for Image. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Specified by:
internal_new_GC in interface Drawable
Parameters:
data - the platform specific GC data
Returns:
the platform specific GC handle

internal_dispose_GC
public void internal_dispose_GC(long hDC,
                                GCData data)
Invokes platform specific functionality to dispose a GC handle. IMPORTANT: This method is not part of the public API for Image. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Specified by:
internal_dispose_GC in interface Drawable
Parameters:
hDC - the platform specific GC handle
data - the platform specific GC data

isDisposed
public boolean isDisposed()
Returns true if the image has been disposed, and false otherwise. This method gets the dispose state for the image. When an image has been disposed, it is an error to invoke any other method (except Resource.dispose()) using the image.
Specified by:
isDisposed in class Resource
Returns:
true when the image is disposed and false otherwise

setBackground
public void setBackground(Color color)
Sets the color to which to map the transparent pixel. There are certain uses of Images that do not support transparency (for example, setting an image into a button or label). In these cases, it may be desired to simulate transparency by using the background color of the widget to paint the transparent pixels of the image. This method specifies the color that will be used in these cases. For example:
    Button b = new Button();
    image.setBackground(b.getBackground());
    b.setImage(image);
The image may be modified by this operation (in effect, the transparent regions may be filled with the supplied color). Hence this operation is not reversible and it is not legal to call this function twice or with a null argument.
This method has no effect if the receiver does not have a transparent pixel value.
Parameters:
color - the color to use when a transparent pixel is specified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the color is null
ERROR_INVALID_ARGUMENT - if the color has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the receiver

win32_new
public static Image win32_new(Device device,
                              int type,
                              long handle)
Invokes platform specific functionality to allocate a new image. IMPORTANT: This method is not part of the public API for Image. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Parameters:
device - the device on which to allocate the color
type - the type of the image (SWT.BITMAP or SWT.ICON)
handle - the OS handle for the image
Returns:
a new image object containing the specified device, type and handle


org.eclipse.swt.graphics
Class ImageData
java.lang.Object
org.eclipse.swt.graphics.ImageData
All Implemented Interfaces:
java.lang.Cloneable


public final class ImageData extends java.lang.Object implements java.lang.Cloneable
Instances of this class are device-independent descriptions of images. They are typically used as an intermediate format between loading from or writing to streams and creating an Image. Note that the public fields x, y, disposalMethod and delayTime are typically only used when the image is in a set of images used for animation.
See Also:
Image, ImageLoader, ImageData snippets, SWT Example: ImageAnalyzer, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
int alpha
The global alpha value to be used for every pixel.
byte[]  alphaData
The alpha data of the image.
int bytesPerLine
The number of bytes per scanline.
byte[]  data
The pixel data of the image.
int delayTime
The time to delay before displaying the next image in an animation (this field corresponds to the GIF89a Delay Time value).
int depth
The color depth of the image, in bits per pixel.
int disposalMethod
A description of how to dispose of the current image before displaying the next.
int height
The height of the image, in pixels.
byte[]  maskData
An icon-specific field containing the data from the icon mask.
int maskPad
An icon-specific field containing the scanline pad of the mask.
PaletteData palette
The color table for the image.
int scanlinePad
The scanline padding.
int transparentPixel
The transparent pixel.
int type
The type of file from which the image was read.
int width
The width of the image, in pixels.
int x
The x coordinate of the top left corner of the image within the logical screen (this field corresponds to the GIF89a Image Left Position value).
int y
The y coordinate of the top left corner of the image within the logical screen (this field corresponds to the GIF89a Image Top Position value).

Constructor Summary
Constructors

Constructor and Description
ImageData(java.io.InputStream stream)
Constructs an ImageData loaded from the specified input stream.
ImageData(int width,          int height,          int depth, PaletteData palette)
Constructs a new, empty ImageData with the given width, height, depth and palette.
ImageData(int width,          int height,          int depth, PaletteData palette,          int scanlinePad,          byte[] data)
Constructs a new, empty ImageData with the given width, height, depth, palette, scanlinePad and data.
ImageData(java.lang.String filename)
Constructs an ImageData loaded from a file with the specified name.

Method Summary
All Methods Static Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.Object    clone()
Returns a new instance of the same class as the receiver, whose slots have been filled in with copies of the values in the slots of the receiver.
int getAlpha(int x,         int y)
Returns the alpha value at offset x in scanline y in the receiver's alpha data.
void    getAlphas(int x,          int y,        int getWidth,          byte[]  alphas,          int startIndex)
Returns getWidth alpha values starting at offset x in scanline y in the receiver's alpha data starting at startIndex.
int getPixel(int x,         int y)
Returns the pixel value at offset x in scanline y in the receiver's data.
void    getPixels(int x,          int y,        int getWidth,          byte[]  pixels,          int startIndex)
Returns getWidth pixel values starting at offset x in scanline y in the receiver's data starting at startIndex.
void    getPixels(int x,          int y,        int getWidth,          int[]  pixels,          int startIndex)
Returns getWidth pixel values starting at offset x in scanline y in the receiver's data starting at startIndex.
RGB[]   getRGBs()
Returns an array of RGBs which comprise the indexed color table of the receiver, or null if the receiver has a direct color model.
ImageData   getTransparencyMask()
Returns an ImageData which specifies the transparency mask information for the receiver.
int getTransparencyType()
Returns the image transparency type, which will be one of SWT.TRANSPARENCY_NONE, SWT.TRANSPARENCY_MASK, SWT.TRANSPARENCY_PIXEL or SWT.TRANSPARENCY_ALPHA.
static ImageData    internal_new(int width,  int height,             int depth,             PaletteData palette,          int scanlinePad,   byte[] data,             int maskP ad,             byte[] maskData,          byte[] alphaData,    int alpha,             int transp arentPixel,             int type,           int x,             int y,             int disposalMethod,         int delayTime)
Invokes internal SWT functionality to create a new instance of this class.
ImageData   scaledTo(int width,         int hei ght)
Returns a copy of the receiver which has been stretched or shrunk to the specified size.
void    setAlpha(int x,         int y,     int alpha)
Sets the alpha value at offset x in scanline y in the receiver's alpha data.
void    setAlphas(int x,          int y,        int putWidth,          byte[]  alphas,          int startIndex)
Sets the alpha values starting at offset x in scanline y in the receiver's alpha data to the values from the array alphas starting at startIndex.
void    setPixel(int x,         int y,     int pixelValue)
Sets the pixel value at offset x in scanline y in the receiver's data.
void    setPixels(int x,          int y,        int putWidth,          byte[]  pixels,          int startIndex)
Sets the pixel values starting at offset x in scanline y in the receiver's data to the values from the array pixels starting at startIndex.
void    setPixels(int x,          int y,        int putWidth,          int[]  pixels,          int startIndex)
Sets the pixel values starting at offset x in scanline y in the receiver's data to the values from the array pixels starting at startIndex.

Methods inherited from class java.lang.Object
equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Field Detail

width
public int width
The width of the image, in pixels.

height
public int height
The height of the image, in pixels.

depth
public int depth
The color depth of the image, in bits per pixel. Note that a depth of 8 or less does not necessarily mean that the image is palette indexed, or conversely that a depth greater than 8 means that the image is direct color. Check the associated PaletteData's isDirect field for such determinations.

scanlinePad
public int scanlinePad
The scanline padding. If one scanline of the image is not a multiple of this number, it will be padded with zeros until it is.

bytesPerLine
public int bytesPerLine
The number of bytes per scanline. This is a multiple of the scanline padding.

data
public byte[] data
The pixel data of the image. Note that for 16 bit depth images the pixel data is stored in least significant byte order; however, for 24bit and 32bit depth images the pixel data is stored in most significant byte order.

palette
public PaletteData palette
The color table for the image.

transparentPixel
public int transparentPixel
The transparent pixel. Pixels with this value are transparent.
The default is -1 which means 'no transparent pixel'.

maskData
public byte[] maskData
An icon-specific field containing the data from the icon mask. This is a 1 bit bitmap stored with the most significant bit first. The number of bytes per scanline is '((width + 7) / 8 + (maskPad - 1)) / maskPad * maskPad'.
The default is null which means 'no transparency mask'.

maskPad
public int maskPad
An icon-specific field containing the scanline pad of the mask. If one scanline of the transparency mask is not a multiple of this number, it will be padded with zeros until it is.

alphaData
public byte[] alphaData
The alpha data of the image. Every pixel can have an alpha blending value that varies from 0, meaning fully transparent, to 255 meaning fully opaque. The number of bytes per scanline is 'width'.

alpha
public int alpha
The global alpha value to be used for every pixel. If this value is set, the alphaData field is ignored and when the image is rendered each pixel will be blended with the background an amount proportional to this value.
The default is -1 which means 'no global alpha value'

type
public int type
The type of file from which the image was read. It is expressed as one of the following values:
IMAGE_BMP
Windows BMP file format, no compression
IMAGE_BMP_RLE
Windows BMP file format, RLE compression if appropriate
IMAGE_GIF
GIF file format
IMAGE_ICO
Windows ICO file format
IMAGE_JPEG
JPEG file format
IMAGE_PNG
PNG file format

x
public int x
The x coordinate of the top left corner of the image within the logical screen (this field corresponds to the GIF89a Image Left Position value).

y
public int y
The y coordinate of the top left corner of the image within the logical screen (this field corresponds to the GIF89a Image Top Position value).

disposalMethod
public int disposalMethod
A description of how to dispose of the current image before displaying the next. It is expressed as one of the following values:
DM_UNSPECIFIED
disposal method not specified
DM_FILL_NONE
do nothing - leave the image in place
DM_FILL_BACKGROUND
fill with the background color
DM_FILL_PREVIOUS
restore the previous picture
(this field corresponds to the GIF89a Disposal Method value)

delayTime
public int delayTime
The time to delay before displaying the next image in an animation (this field corresponds to the GIF89a Delay Time value).

Constructor Detail

ImageData
public ImageData(int width,
                 int height,
                 int depth,
                 PaletteData palette)
Constructs a new, empty ImageData with the given width, height, depth and palette. The data will be initialized to an (all zero) array of the appropriate size.
Parameters:
width - the width of the image
height - the height of the image
depth - the depth of the image
palette - the palette of the image (must not be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the width or height is zero or negative, or if the depth is not one of 1, 2, 4, 8, 16, 24 or 32
ERROR_NULL_ARGUMENT - if the palette is null

ImageData
public ImageData(int width,
                 int height,
                 int depth,
                 PaletteData palette,
                 int scanlinePad,
                 byte[] data)
Constructs a new, empty ImageData with the given width, height, depth, palette, scanlinePad and data.
Parameters:
width - the width of the image
height - the height of the image
depth - the depth of the image
palette - the palette of the image
scanlinePad - the padding of each line, in bytes
data - the data of the image
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the width or height is zero or negative, or if the depth is not one of 1, 2, 4, 8, 16, 24 or 32, or the data array is too small to contain the image data
ERROR_NULL_ARGUMENT - if the palette or data is null
ERROR_CANNOT_BE_ZERO - if the scanlinePad is zero

ImageData
public ImageData(java.io.InputStream stream)
Constructs an ImageData loaded from the specified input stream. Throws an error if an error occurs while loading the image, or if the image has an unsupported type. Application code is still responsible for closing the input stream. This constructor is provided for convenience when loading a single image only. If the stream contains multiple images, only the first one will be loaded. To load multiple images, use ImageLoader.load().
This constructor may be used to load a resource as follows:
     static ImageData loadImageData (Class clazz, String string) {
          InputStream stream = clazz.getResourceAsStream (string);
          if (stream == null) return null;
          ImageData imageData = null;
          try {
               imageData = new ImageData (stream);
          } catch (SWTException ex) {
          } finally {
               try {
                    stream.close ();
               } catch (IOException ex) {}
          }
          return imageData;
     }
Parameters:
stream - the input stream to load the image from (must not be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the stream is null
SWTException -
ERROR_IO - if an IO error occurs while reading from the stream
ERROR_INVALID_IMAGE - if the image stream contains invalid data
ERROR_UNSUPPORTED_FORMAT - if the image stream contains an unrecognized format
See Also:
ImageLoader.load(InputStream)

ImageData
public ImageData(java.lang.String filename)
Constructs an ImageData loaded from a file with the specified name. Throws an error if an error occurs loading the image, or if the image has an unsupported type. This constructor is provided for convenience when loading a single image only. If the file contains multiple images, only the first one will be loaded. To load multiple images, use ImageLoader.load().
Parameters:
filename - the name of the file to load the image from (must not be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the file name is null
SWTException -
ERROR_IO - if an IO error occurs while reading from the file
ERROR_INVALID_IMAGE - if the image file contains invalid data
ERROR_UNSUPPORTED_FORMAT - if the image file contains an unrecognized format

Method Detail

internal_new
public static ImageData internal_new(int width,
                                     int height,
                                     int depth,
                                     PaletteData palette,
                                     int scanlinePad,
                                     byte[] data,
                                     int maskPad,
                                     byte[] maskData,
                                     byte[] alphaData,
                                     int alpha,
                                     int transparentPixel,
                                     int type,
                                     int x,
                                     int y,
                                     int disposalMethod,
                                     int delayTime)
Invokes internal SWT functionality to create a new instance of this class. IMPORTANT: This method is not part of the public API for ImageData. It is marked public only so that it can be shared within the packages provided by SWT. It is subject to change without notice, and should never be called from application code.
This method is for internal use, and is not described further.

clone
public java.lang.Object clone()
Returns a new instance of the same class as the receiver, whose slots have been filled in with copies of the values in the slots of the receiver. That is, the returned object is a deep copy of the receiver.
Overrides:
clone in class java.lang.Object
Returns:
a copy of the receiver.

getAlpha
public int getAlpha(int x,
                    int y)
Returns the alpha value at offset x in scanline y in the receiver's alpha data. The alpha value is between 0 (transparent) and 255 (opaque).
Parameters:
x - the x coordinate of the pixel to get the alpha value of
y - the y coordinate of the pixel to get the alpha value of
Returns:
the alpha value at the given coordinates
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if either argument is out of range

getAlphas
public void getAlphas(int x,
                      int y,
                      int getWidth,
                      byte[] alphas,
                      int startIndex)
Returns getWidth alpha values starting at offset x in scanline y in the receiver's alpha data starting at startIndex. The alpha values are unsigned, between (byte)0 (transparent) and (byte)255 (opaque).
Parameters:
x - the x position of the pixel to begin getting alpha values
y - the y position of the pixel to begin getting alpha values
getWidth - the width of the data to get
alphas - the buffer in which to put the alpha values
startIndex - the offset into the image to begin getting alpha values
Throws:
java.lang.IndexOutOfBoundsException - if getWidth is too large
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if pixels is null
ERROR_INVALID_ARGUMENT - if x or y is out of bounds
ERROR_INVALID_ARGUMENT - if getWidth is negative

getPixel
public int getPixel(int x,
                    int y)
Returns the pixel value at offset x in scanline y in the receiver's data.
Parameters:
x - the x position of the pixel to get
y - the y position of the pixel to get
Returns:
the pixel at the given coordinates
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if either argument is out of bounds
SWTException -
ERROR_UNSUPPORTED_DEPTH if the depth is not one of 1, 2, 4, 8, 16, 24 or 32

getPixels
public void getPixels(int x,
                      int y,
                      int getWidth,
                      byte[] pixels,
                      int startIndex)
Returns getWidth pixel values starting at offset x in scanline y in the receiver's data starting at startIndex.
Parameters:
x - the x position of the first pixel to get
y - the y position of the first pixel to get
getWidth - the width of the data to get
pixels - the buffer in which to put the pixels
startIndex - the offset into the byte array to begin storing pixels
Throws:
java.lang.IndexOutOfBoundsException - if getWidth is too large
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if pixels is null
ERROR_INVALID_ARGUMENT - if x or y is out of bounds
ERROR_INVALID_ARGUMENT - if getWidth is negative
SWTException -
ERROR_UNSUPPORTED_DEPTH - if the depth is not one of 1, 2, 4 or 8 (For higher depths, use the int[] version of this method.)

getPixels
public void getPixels(int x,
                      int y,
                      int getWidth,
                      int[] pixels,
                      int startIndex)
Returns getWidth pixel values starting at offset x in scanline y in the receiver's data starting at startIndex.
Parameters:
x - the x position of the first pixel to get
y - the y position of the first pixel to get
getWidth - the width of the data to get
pixels - the buffer in which to put the pixels
startIndex - the offset into the buffer to begin storing pixels
Throws:
java.lang.IndexOutOfBoundsException - if getWidth is too large
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if pixels is null
ERROR_INVALID_ARGUMENT - if x or y is out of bounds
ERROR_INVALID_ARGUMENT - if getWidth is negative
SWTException -
ERROR_UNSUPPORTED_DEPTH - if the depth is not one of 1, 2, 4, 8, 16, 24 or 32

getRGBs
public RGB[] getRGBs()
Returns an array of RGBs which comprise the indexed color table of the receiver, or null if the receiver has a direct color model.
Returns:
the RGB values for the image or null if direct color
See Also:
PaletteData.getRGBs()

getTransparencyMask
public ImageData getTransparencyMask()
Returns an ImageData which specifies the transparency mask information for the receiver. If the receiver has no transparency or is not an icon, returns an opaque mask.
Returns:
the transparency mask

getTransparencyType
public int getTransparencyType()
Returns the image transparency type, which will be one of SWT.TRANSPARENCY_NONE, SWT.TRANSPARENCY_MASK, SWT.TRANSPARENCY_PIXEL or SWT.TRANSPARENCY_ALPHA.
Returns:
the receiver's transparency type

scaledTo
public ImageData scaledTo(int width,
                          int height)
Returns a copy of the receiver which has been stretched or shrunk to the specified size. If either the width or height is negative, the resulting image will be inverted in the associated axis.
Parameters:
width - the width of the new ImageData
height - the height of the new ImageData
Returns:
a scaled copy of the image

setAlpha
public void setAlpha(int x,
                     int y,
                     int alpha)
Sets the alpha value at offset x in scanline y in the receiver's alpha data. The alpha value must be between 0 (transparent) and 255 (opaque).
Parameters:
x - the x coordinate of the alpha value to set
y - the y coordinate of the alpha value to set
alpha - the value to set the alpha to
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if x or y is out of bounds

setAlphas
public void setAlphas(int x,
                      int y,
                      int putWidth,
                      byte[] alphas,
                      int startIndex)
Sets the alpha values starting at offset x in scanline y in the receiver's alpha data to the values from the array alphas starting at startIndex. The alpha values must be between (byte)0 (transparent) and (byte)255 (opaque)
Parameters:
x - the x coordinate of the pixel to being setting the alpha values
y - the y coordinate of the pixel to being setting the alpha values
putWidth - the width of the alpha values to set
alphas - the alpha values to set
startIndex - the index at which to begin setting
Throws:
java.lang.IndexOutOfBoundsException - if putWidth is too large
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if pixels is null
ERROR_INVALID_ARGUMENT - if x or y is out of bounds
ERROR_INVALID_ARGUMENT - if putWidth is negative

setPixel
public void setPixel(int x,
                     int y,
                     int pixelValue)
Sets the pixel value at offset x in scanline y in the receiver's data.
Parameters:
x - the x coordinate of the pixel to set
y - the y coordinate of the pixel to set
pixelValue - the value to set the pixel to
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if x or y is out of bounds
SWTException -
ERROR_UNSUPPORTED_DEPTH if the depth is not one of 1, 2, 4, 8, 16, 24 or 32

setPixels
public void setPixels(int x,
                      int y,
                      int putWidth,
                      byte[] pixels,
                      int startIndex)
Sets the pixel values starting at offset x in scanline y in the receiver's data to the values from the array pixels starting at startIndex.
Parameters:
x - the x position of the pixel to set
y - the y position of the pixel to set
putWidth - the width of the pixels to set
pixels - the pixels to set
startIndex - the index at which to begin setting
Throws:
java.lang.IndexOutOfBoundsException - if putWidth is too large
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if pixels is null
ERROR_INVALID_ARGUMENT - if x or y is out of bounds
ERROR_INVALID_ARGUMENT - if putWidth is negative
SWTException -
ERROR_UNSUPPORTED_DEPTH if the depth is not one of 1, 2, 4, 8 (For higher depths, use the int[] version of this method.)

setPixels
public void setPixels(int x,
                      int y,
                      int putWidth,
                      int[] pixels,
                      int startIndex)
Sets the pixel values starting at offset x in scanline y in the receiver's data to the values from the array pixels starting at startIndex.
Parameters:
x - the x position of the pixel to set
y - the y position of the pixel to set
putWidth - the width of the pixels to set
pixels - the pixels to set
startIndex - the index at which to begin setting
Throws:
java.lang.IndexOutOfBoundsException - if putWidth is too large
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if pixels is null
ERROR_INVALID_ARGUMENT - if x or y is out of bounds
ERROR_INVALID_ARGUMENT - if putWidth is negative
SWTException -
ERROR_UNSUPPORTED_DEPTH if the depth is not one of 1, 2, 4, 8, 16, 24 or 32


org.eclipse.swt.graphics
Interface ImageDataProvider
All Known Implementing Classes:
DPIUtil.AutoScaleImageDataProvider


public interface ImageDataProvider
Interface to provide a callback mechanism to get information about images when the application is moved from a low DPI monitor to a high DPI monitor. This provides API which will be called by SWT during the image rendering. This interface needs to be implemented by client code to provide the image information on demand.
since. :
3.104

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
ImageData   getImageData(int zoom)
Returns the image data for the given zoom level.

Method Detail

getImageData
ImageData getImageData(int zoom)
Returns the image data for the given zoom level. If no image is available for a particular zoom level, this method should return null. For zoom == 100, returning null in not allowed, and SWT will throw an exception.
Parameters:
zoom - The zoom level in % of the standard resolution (which is 1 physical monitor pixel == 1 SWT logical pixel). Typically 100, 150, or 200.
Returns:
the image data, or null if zoom != 100 and no image is available for the given zoom level.
since. :
3.104


org.eclipse.swt.graphics
Interface ImageFileNameProvider


public interface ImageFileNameProvider
Interface to provide a callback mechanism to get information about images when the application is moved from a low DPI monitor to a high DPI monitor. This provides API which will be called by SWT during the image rendering. This interface needs to be implemented by client code to provide the image information on demand.
since. :
3.104

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
java.lang.String    getImagePath(int zoom)
Returns the image filePath for the given zoom level.

Method Detail

getImagePath
java.lang.String getImagePath(int zoom)
Returns the image filePath for the given zoom level. If no image is available for a particular zoom level, this method should return null. For zoom == 100, returning null in not allowed, and SWT will throw an exception.
Parameters:
zoom - The zoom level in % of the standard resolution (which is 1 physical monitor pixel == 1 SWT logical pixel). Typically 100, 150, or 200.
Returns:
the image filePath, or null if zoom != 100 and no image is available for the given zoom level.
since. :
3.104


org.eclipse.swt.internal
Class ImageList
java.lang.Object
org.eclipse.swt.internal.ImageList


public class ImageList extends java.lang.Object

Constructor Summary
Constructors

Constructor and Description
ImageList(int style)
ImageList(int style,          int width,          int height)

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
int add(Image image)
int addRef()
void    dispose()
Image   get(int index)
long    getHandle()
Point   getImageSize()
int getStyle()
int indexOf(Image image)
void    put(int index,    Image image)
void    remove(int index)
int removeRef()
int size()

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

ImageList
public ImageList(int style)

ImageList
public ImageList(int style,
                 int width,
                 int height)

Method Detail

add
public int add(Image image)

addRef
public int addRef()

dispose
public void dispose()

get
public Image get(int index)

getStyle
public int getStyle()

getHandle
public long getHandle()

getImageSize
public Point getImageSize()

indexOf
public int indexOf(Image image)

put
public void put(int index,
                Image image)

remove
public void remove(int index)

removeRef
public int removeRef()

size
public int size()


org.eclipse.swt.graphics
Class ImageLoader
java.lang.Object
org.eclipse.swt.graphics.ImageLoader


public class ImageLoader extends java.lang.Object
Instances of this class are used to load images from, and save images to, a file or stream. Currently supported image formats are:
BMP (Windows or OS/2 Bitmap)
ICO (Windows Icon)
JPEG
GIF
PNG
TIFF
ImageLoaders can be used to:
load/save single images in all formats
load/save multiple images (GIF/ICO/TIFF)
load/save animated GIF images
load interlaced GIF/PNG images
load progressive JPEG images
See Also:
SWT Example: ImageAnalyzer, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
int backgroundPixel
the background pixel for the logical screen (this corresponds to the GIF89a Background Color Index value).
int compression
This is the compression used when saving jpeg and png files.
ImageData[] data
the array of ImageData objects in this ImageLoader.
int logicalScreenHeight
the height of the logical screen on which the images reside, in pixels (this corresponds to the GIF89a Logical Screen Height value)
int logicalScreenWidth
the width of the logical screen on which the images reside, in pixels (this corresponds to the GIF89a Logical Screen Width value)
int repeatCount
the number of times to repeat the display of a sequence of animated images (this corresponds to the commonly-used GIF application extension for "NETSCAPE 2.0 01").

Constructor Summary
Constructors

Constructor and Description
ImageLoader()
Construct a new empty ImageLoader.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addImageLoaderListener(ImageLoaderL istener listener)
Adds the listener to the collection of listeners who will be notified when image data is either partially or completely loaded.
boolean hasListeners()
Returns true if the receiver has image loader listeners, and false otherwise.
ImageData[] load(java.io.InputStream stream)
Loads an array of ImageData objects from the specified input stream.
ImageData[] load(java.lang.String filename)
Loads an array of ImageData objects from the file with the specified name.
void    notifyListeners(ImageLoaderEvent ev ent)
Notifies all image loader listeners that an image loader event has occurred.
void    removeImageLoaderListener(ImageLoad erListener listener)
Removes the listener from the collection of listeners who will be notified when image data is either partially or completely loaded.
void    save(java.io.OutputStream stream,    int format)
Saves the image data in this ImageLoader to the specified stream.
void    save(java.lang.String filename,  int format)
Saves the image data in this ImageLoader to a file with the specified name.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Field Detail

data
public ImageData[] data
the array of ImageData objects in this ImageLoader. This array is read in when the load method is called, and it is written out when the save method is called

logicalScreenWidth
public int logicalScreenWidth
the width of the logical screen on which the images reside, in pixels (this corresponds to the GIF89a Logical Screen Width value)

logicalScreenHeight
public int logicalScreenHeight
the height of the logical screen on which the images reside, in pixels (this corresponds to the GIF89a Logical Screen Height value)

backgroundPixel
public int backgroundPixel
the background pixel for the logical screen (this corresponds to the GIF89a Background Color Index value). The default is -1 which means 'unspecified background'

repeatCount
public int repeatCount
the number of times to repeat the display of a sequence of animated images (this corresponds to the commonly-used GIF application extension for "NETSCAPE 2.0 01"). The default is 1. A value of 0 means 'display repeatedly'

compression
public int compression
This is the compression used when saving jpeg and png files. When saving jpeg files, the value is from 1 to 100, where 1 is very high compression but low quality, and 100 is no compression and high quality; default is 75.
When saving png files, the value is from 0 to 3, but they do not impact the quality because PNG is lossless compression. 0 is uncompressed, 1 is low compression and fast, 2 is default compression, and 3 is high compression but slow.
since. :
3.8

Constructor Detail

ImageLoader
public ImageLoader()
Construct a new empty ImageLoader.

Method Detail

load
public ImageData[] load(java.io.InputStream stream)
Loads an array of ImageData objects from the specified input stream. Throws an error if either an error occurs while loading the images, or if the images are not of a supported type. Returns the loaded image data array.
Parameters:
stream - the input stream to load the images from
Returns:
an array of ImageData objects loaded from the specified input stream
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the stream is null
SWTException -
ERROR_IO - if an IO error occurs while reading from the stream
ERROR_INVALID_IMAGE - if the image stream contains invalid data
ERROR_UNSUPPORTED_FORMAT - if the image stream contains an unrecognized format

load
public ImageData[] load(java.lang.String filename)
Loads an array of ImageData objects from the file with the specified name. Throws an error if either an error occurs while loading the images, or if the images are not of a supported type. Returns the loaded image data array.
Parameters:
filename - the name of the file to load the images from
Returns:
an array of ImageData objects loaded from the specified file
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the file name is null
SWTException -
ERROR_IO - if an IO error occurs while reading from the file
ERROR_INVALID_IMAGE - if the image file contains invalid data
ERROR_UNSUPPORTED_FORMAT - if the image file contains an unrecognized format

save
public void save(java.io.OutputStream stream,
                 int format)
Saves the image data in this ImageLoader to the specified stream. The format parameter can have one of the following values:
IMAGE_BMP
Windows BMP file format, no compression
IMAGE_BMP_RLE
Windows BMP file format, RLE compression if appropriate
IMAGE_GIF
GIF file format
IMAGE_ICO
Windows ICO file format
IMAGE_JPEG
JPEG file format
IMAGE_PNG
PNG file format
Parameters:
stream - the output stream to write the images to
format - the format to write the images in
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the stream is null
SWTException -
ERROR_IO - if an IO error occurs while writing to the stream
ERROR_INVALID_IMAGE - if the image data contains invalid data
ERROR_UNSUPPORTED_FORMAT - if the image data cannot be saved to the requested format

save
public void save(java.lang.String filename,
                 int format)
Saves the image data in this ImageLoader to a file with the specified name. The format parameter can have one of the following values:
IMAGE_BMP
Windows BMP file format, no compression
IMAGE_BMP_RLE
Windows BMP file format, RLE compression if appropriate
IMAGE_GIF
GIF file format
IMAGE_ICO
Windows ICO file format
IMAGE_JPEG
JPEG file format
IMAGE_PNG
PNG file format
Parameters:
filename - the name of the file to write the images to
format - the format to write the images in
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the file name is null
SWTException -
ERROR_IO - if an IO error occurs while writing to the file
ERROR_INVALID_IMAGE - if the image data contains invalid data
ERROR_UNSUPPORTED_FORMAT - if the image data cannot be saved to the requested format

addImageLoaderListener
public void addImageLoaderListener(ImageLoaderListener listener)
Adds the listener to the collection of listeners who will be notified when image data is either partially or completely loaded. An ImageLoaderListener should be added before invoking one of the receiver's load methods. The listener's imageDataLoaded method is called when image data has been partially loaded, as is supported by interlaced GIF/PNG or progressive JPEG images.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
See Also:
ImageLoaderListener, ImageLoaderEvent

removeImageLoaderListener
public void removeImageLoaderListener(ImageLoaderListener listener)
Removes the listener from the collection of listeners who will be notified when image data is either partially or completely loaded.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
See Also:
addImageLoaderListener(ImageLoaderListener)

hasListeners
public boolean hasListeners()
Returns true if the receiver has image loader listeners, and false otherwise.
Returns:
true if there are ImageLoaderListeners, and false otherwise
See Also:
addImageLoaderListener(ImageLoaderListener), removeImageLoaderListener(ImageLoaderListener)

notifyListeners
public void notifyListeners(ImageLoaderEvent event)
Notifies all image loader listeners that an image loader event has occurred. Pass the specified event object to each listener.
Parameters:
event - the ImageLoaderEvent to send to each ImageLoaderListener


org.eclipse.swt.graphics
Class ImageLoaderEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.graphics.ImageLoaderEvent
All Implemented Interfaces:
java.io.Serializable


public class ImageLoaderEvent extends java.util.EventObject
Instances of this class are sent as a result of the incremental loading of image data. Notes:
The number of events which will be sent when loading images is not constant. It varies by image type, and for JPEG images it varies from image to image.
For image sources which contain multiple images, the endOfImage flag in the event will be set to true after each individual image is loaded.
See Also:
ImageLoader, ImageLoaderListener, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
boolean endOfImage
If this flag is true, then the current image data has been completely loaded, otherwise the image data is only partially loaded, and further ImageLoader events will occur unless an exception is thrown
ImageData   imageData
if the endOfImage flag is false, then this is a partially complete copy of the current ImageData, otherwise this is a completely loaded ImageData
int incrementCount
the zero-based count of image data increments -- this is equivalent to the number of events that have been generated while loading a particular image

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
ImageLoaderEvent(ImageLoader source,                 ImageData imageDat a,                 int incrementCount,                 boolean endOfImag e)
Constructs a new instance of this class given the event source and the values to store in its fields.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

imageData
public ImageData imageData
if the endOfImage flag is false, then this is a partially complete copy of the current ImageData, otherwise this is a completely loaded ImageData

incrementCount
public int incrementCount
the zero-based count of image data increments -- this is equivalent to the number of events that have been generated while loading a particular image

endOfImage
public boolean endOfImage
If this flag is true, then the current image data has been completely loaded, otherwise the image data is only partially loaded, and further ImageLoader events will occur unless an exception is thrown

Constructor Detail

ImageLoaderEvent
public ImageLoaderEvent(ImageLoader source,
                        ImageData imageData,
                        int incrementCount,
                        boolean endOfImage)
Constructs a new instance of this class given the event source and the values to store in its fields.
Parameters:
source - the ImageLoader that was loading when the event occurred
imageData - the image data for the event
incrementCount - the image data increment for the event
endOfImage - the end of image flag for the event

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.util.EventObject
Returns:
a string representation of the event


org.eclipse.swt.graphics
Interface ImageLoaderListener
All Superinterfaces:
java.util.EventListener, SWTEventListener


public interface ImageLoaderListener extends SWTEventListener
Classes which implement this interface provide methods that deal with the incremental loading of image data. After creating an instance of a class that implements this interface it can be added to an image loader using the addImageLoaderListener method and removed using the removeImageLoaderListener method. When image data is either partially or completely loaded, this method will be invoked.
See Also:
ImageLoader, ImageLoaderEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    imageDataLoaded(ImageLoaderEvent e)
Sent when image data is either partially or completely loaded.

Method Detail

imageDataLoaded
void imageDataLoaded(ImageLoaderEvent e)
Sent when image data is either partially or completely loaded. The timing of when this method is called varies depending on the format of the image being loaded.
Parameters:
e - an event containing information about the image loading operation


org.eclipse.swt.widgets
Class IME
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.IME


public class IME extends Widget
Instances of this class represent input method editors. These are typically in-line pre-edit text areas that allow the user to compose characters from Far Eastern languages such as Japanese, Chinese or Korean.
Styles:
(none)
Events:
ImeComposition
IMPORTANT: This class is not intended to be subclassed.
since. :
3.4
See Also:
Sample code and further information

Constructor Summary
Constructors

Constructor and Description
IME(Canvas parent,    int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
int getCaretOffset()
Returns the offset of the caret from the start of the document.
int getCommitCount()
Returns the commit count of the composition.
int getCompositionOffset()
Returns the offset of the composition from the start of the document.
int[]   getRanges()
Returns the ranges for the style that should be applied during the in-line edit session.
TextStyle[] getStyles()
Returns the styles for the ranges.
java.lang.String    getText()
Returns the composition text.
boolean getWideCaret()
Returns true if the caret should be wide, and false otherwise.
void    setCompositionOffset(int offset)
Sets the offset of the composition from the start of the document.

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

IME
public IME(Canvas parent,
           int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a canvas control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
Widget.checkSubclass(), Widget.getStyle()

Method Detail

getCaretOffset
public int getCaretOffset()
Returns the offset of the caret from the start of the document. The caret is within the current composition.
Returns:
the caret offset
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getCommitCount
public int getCommitCount()
Returns the commit count of the composition. This is the number of characters that have been composed. When the commit count is equal to the length of the composition text, then the in-line edit operation is complete.
Returns:
the commit count
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getText()

getCompositionOffset
public int getCompositionOffset()
Returns the offset of the composition from the start of the document. This is the start offset of the composition within the document and in not changed by the input method editor itself during the in-line edit session.
Returns:
the offset of the composition
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getRanges
public int[] getRanges()
Returns the ranges for the style that should be applied during the in-line edit session. The ranges array contains start and end pairs. Each pair refers to the corresponding style in the styles array. For example, the pair that starts at ranges[n] and ends at ranges[n+1] uses the style at styles[n/2] returned by getStyles().
Returns:
the ranges for the styles
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getStyles()

getStyles
public TextStyle[] getStyles()
Returns the styles for the ranges. The ranges array contains start and end pairs. Each pair refers to the corresponding style in the styles array. For example, the pair that starts at ranges[n] and ends at ranges[n+1] uses the style at styles[n/2].
Returns:
the ranges for the styles
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getRanges()

getText
public java.lang.String getText()
Returns the composition text. The text for an IME is the characters in the widget that are in the current composition. When the commit count is equal to the length of the composition text, then the in-line edit operation is complete.
Returns:
the widget text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getWideCaret
public boolean getWideCaret()
Returns true if the caret should be wide, and false otherwise. In some languages, for example Korean, the caret is typically widened to the width of the current character in the in-line edit session.
Returns:
the wide caret state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setCompositionOffset
public void setCompositionOffset(int offset)
Sets the offset of the composition from the start of the document. This is the start offset of the composition within the document and in not changed by the input method editor itself during the in-line edit session but may need to be changed by clients of the IME. For example, if during an in-line edit operation, a text editor inserts characters above the IME, then the IME must be informed that the composition offset has changed.
Parameters:
offset - the offset of the composition
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class Item
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Item
Direct Known Subclasses:
CoolItem, ExpandItem, MenuItem, TabItem, TableColumn, TableItem, TaskItem, ToolItem, TrayItem, TreeColumn, TreeItem


public abstract class Item extends Widget
This class is the abstract superclass of all non-windowed user interface objects that occur within specific controls. For example, a tree will contain tree items.
Styles:
(none)
Events:
(none)
See Also:
Sample code and further information

Constructor Summary
Constructors

Constructor and Description
Item(Widget parent,     int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.
Item(Widget parent,     int style,     int index)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
protected void  checkSubclass()
Checks that this class can be subclassed.
Image   getImage()
Returns the receiver's image if it has one, or null if it does not.
java.lang.String    getText()
Returns the receiver's text, which will be an empty string if it has never been set.
void    setImage(Image image)
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
void    setText(java.lang.String string)
Sets the receiver's text.

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

Item
public Item(Widget parent,
            int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The item is added to the end of the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a widget which will be the parent of the new instance (cannot be null)
style - the style of item to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
See Also:
SWT, Widget.getStyle()

Item
public Item(Widget parent,
            int style,
            int index)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a widget which will be the parent of the new instance (cannot be null)
style - the style of item to construct
index - the zero-relative index at which to store the receiver in its parent
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
See Also:
SWT, Widget.getStyle()

Method Detail

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Widget

getImage
public Image getImage()
Returns the receiver's image if it has one, or null if it does not.
Returns:
the receiver's image
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getText
public java.lang.String getText()
Returns the receiver's text, which will be an empty string if it has never been set.
Returns:
the receiver's text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setImage
public void setImage(Image image)
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
Parameters:
image - the image to display on the receiver (may be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the image has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setText
public void setText(java.lang.String string)
Sets the receiver's text. Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Parameters:
string - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.internal.image
Class JPEGDecoder
java.lang.Object
org.eclipse.swt.internal.image.JPEGDecoder


public class JPEGDecoder extends java.lang.Object

Constructor Summary
Constructors

Constructor and Description
JPEGDecoder()

Method Summary

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

JPEGDecoder
public JPEGDecoder()


org.eclipse.swt.internal.image
Class JPEGFileFormat
java.lang.Object
org.eclipse.swt.internal.image.FileFormat
org.eclipse.swt.internal.image.JPEGFileFormat


public final class JPEGFileFormat extends FileFormat

Field Summary
Fields

Modifier and Type   Field and Description
static int  AC
static int  APP0
static int  APP15
static int[]    BCbTable
static int[]    BCrTable
static int[]    BYTable
static int[]    CbBTable
static int[]    CbGTable
static int  CH
static int  COM
static int[]    CrGTable
static int[]    CrRTable
static int  CW
static int  DAC
static int  DC
static int  DCTSIZE
static int  DCTSIZESQR
static int  DHP
static int  DHT
static int  DNL
static int  DQT
static int  DRI
static int  EOI
static int  EXP
static int[]    ExtendOffset
static int[]    ExtendTest
static int  FIX_0_298631336
static int  FIX_0_390180644
static int  FIX_0_541196100
static int  FIX_0_765366865
static int  FIX_0_899976223
static int  FIX_1_175875602
static int  FIX_1_501321110
static int  FIX_1_847759065
static int  FIX_1_961570560
static int  FIX_2_053119869
static int  FIX_2_562915447
static int  FIX_3_072711026
static int[]    GCbTable
static int[]    GCrTable
static int[]    GYTable
static int  HI
static int  ID_CB
static int  ID_CR
static int  ID_Y
static int  JPG
static int  JPG0
static int  JPG13
static int[]    NBitsTable
static int[]    RCbTable
static int[]    RCrTable
static RGB[]    RGB16
static int  RST0
static int  RST1
static int  RST2
static int  RST3
static int  RST4
static int  RST5
static int  RST6
static int  RST7
static int[]    RYTable
static int  SOF0
static int  SOF1
static int  SOF10
static int  SOF11
static int  SOF13
static int  SOF14
static int  SOF15
static int  SOF2
static int  SOF3
static int  SOF5
static int  SOF6
static int  SOF7
static int  SOF9
static int  SOI
static int  SOS
static int  TEM
static int  TQI
static int  VI
static int[]    ZigZag8x8

Constructor Summary
Constructors

Constructor and Description
JPEGFileFormat()

Method Summary

Methods inherited from class org.eclipse.swt.internal.image.FileFormat
load, loadFromStream, save, unloadIntoStream

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Field Detail

DCTSIZE
public static final int DCTSIZE
See Also:
Constant Field Values

DCTSIZESQR
public static final int DCTSIZESQR
See Also:
Constant Field Values

FIX_0_899976223
public static final int FIX_0_899976223
See Also:
Constant Field Values

FIX_1_961570560
public static final int FIX_1_961570560
See Also:
Constant Field Values

FIX_2_053119869
public static final int FIX_2_053119869
See Also:
Constant Field Values

FIX_0_298631336
public static final int FIX_0_298631336
See Also:
Constant Field Values

FIX_1_847759065
public static final int FIX_1_847759065
See Also:
Constant Field Values

FIX_1_175875602
public static final int FIX_1_175875602
See Also:
Constant Field Values

FIX_3_072711026
public static final int FIX_3_072711026
See Also:
Constant Field Values

FIX_0_765366865
public static final int FIX_0_765366865
See Also:
Constant Field Values

FIX_2_562915447
public static final int FIX_2_562915447
See Also:
Constant Field Values

FIX_0_541196100
public static final int FIX_0_541196100
See Also:
Constant Field Values

FIX_0_390180644
public static final int FIX_0_390180644
See Also:
Constant Field Values

FIX_1_501321110
public static final int FIX_1_501321110
See Also:
Constant Field Values

APP0
public static final int APP0
See Also:
Constant Field Values

APP15
public static final int APP15
See Also:
Constant Field Values

COM
public static final int COM
See Also:
Constant Field Values

DAC
public static final int DAC
See Also:
Constant Field Values

DHP
public static final int DHP
See Also:
Constant Field Values

DHT
public static final int DHT
See Also:
Constant Field Values

DNL
public static final int DNL
See Also:
Constant Field Values

DRI
public static final int DRI
See Also:
Constant Field Values

DQT
public static final int DQT
See Also:
Constant Field Values

EOI
public static final int EOI
See Also:
Constant Field Values

EXP
public static final int EXP
See Also:
Constant Field Values

JPG
public static final int JPG
See Also:
Constant Field Values

JPG0
public static final int JPG0
See Also:
Constant Field Values

JPG13
public static final int JPG13
See Also:
Constant Field Values

RST0
public static final int RST0
See Also:
Constant Field Values

RST1
public static final int RST1
See Also:
Constant Field Values

RST2
public static final int RST2
See Also:
Constant Field Values

RST3
public static final int RST3
See Also:
Constant Field Values

RST4
public static final int RST4
See Also:
Constant Field Values

RST5
public static final int RST5
See Also:
Constant Field Values

RST6
public static final int RST6
See Also:
Constant Field Values

RST7
public static final int RST7
See Also:
Constant Field Values

SOF0
public static final int SOF0
See Also:
Constant Field Values

SOF1
public static final int SOF1
See Also:
Constant Field Values

SOF2
public static final int SOF2
See Also:
Constant Field Values

SOF3
public static final int SOF3
See Also:
Constant Field Values

SOF5
public static final int SOF5
See Also:
Constant Field Values

SOF6
public static final int SOF6
See Also:
Constant Field Values

SOF7
public static final int SOF7
See Also:
Constant Field Values

SOF9
public static final int SOF9
See Also:
Constant Field Values

SOF10
public static final int SOF10
See Also:
Constant Field Values

SOF11
public static final int SOF11
See Also:
Constant Field Values

SOF13
public static final int SOF13
See Also:
Constant Field Values

SOF14
public static final int SOF14
See Also:
Constant Field Values

SOF15
public static final int SOF15
See Also:
Constant Field Values

SOI
public static final int SOI
See Also:
Constant Field Values

SOS
public static final int SOS
See Also:
Constant Field Values

TEM
public static final int TEM
See Also:
Constant Field Values

TQI
public static final int TQI
See Also:
Constant Field Values

HI
public static final int HI
See Also:
Constant Field Values

VI
public static final int VI
See Also:
Constant Field Values

CW
public static final int CW
See Also:
Constant Field Values

CH
public static final int CH
See Also:
Constant Field Values

DC
public static final int DC
See Also:
Constant Field Values

AC
public static final int AC
See Also:
Constant Field Values

ID_Y
public static final int ID_Y
See Also:
Constant Field Values

ID_CB
public static final int ID_CB
See Also:
Constant Field Values

ID_CR
public static final int ID_CR
See Also:
Constant Field Values

RGB16
public static final RGB[] RGB16

ExtendTest
public static final int[] ExtendTest

ExtendOffset
public static final int[] ExtendOffset

ZigZag8x8
public static final int[] ZigZag8x8

CrRTable
public static final int[] CrRTable

CbBTable
public static final int[] CbBTable

CrGTable
public static final int[] CrGTable

CbGTable
public static final int[] CbGTable

RYTable
public static final int[] RYTable

GYTable
public static final int[] GYTable

BYTable
public static final int[] BYTable

RCbTable
public static final int[] RCbTable

GCbTable
public static final int[] GCbTable

BCbTable
public static final int[] BCbTable

RCrTable
public static final int[] RCrTable

GCrTable
public static final int[] GCrTable

BCrTable
public static final int[] BCrTable

NBitsTable
public static final int[] NBitsTable

Constructor Detail

JPEGFileFormat
public JPEGFileFormat()


org.eclipse.swt.events
Class KeyAdapter
java.lang.Object
org.eclipse.swt.events.KeyAdapter
All Implemented Interfaces:
java.util.EventListener, KeyListener, SWTEventListener


public abstract class KeyAdapter extends java.lang.Object implements KeyListener
This adapter class provides default implementations for the methods described by the KeyListener interface. Classes that wish to deal with KeyEvents can extend this class and override only the methods which they are interested in.
See Also:
KeyListener, KeyEvent, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
KeyAdapter()

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    keyPressed(KeyEvent e)
Sent when a key is pressed on the system keyboard.
void    keyReleased(KeyEvent e)
Sent when a key is released on the system keyboard.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Methods inherited from interface org.eclipse.swt.events.KeyListener
keyPressedAdapter, keyReleasedAdapter

Constructor Detail

KeyAdapter
public KeyAdapter()

Method Detail

keyPressed
public void keyPressed(KeyEvent e)
Sent when a key is pressed on the system keyboard. The default behavior is to do nothing.
Specified by:
keyPressed in interface KeyListener
Parameters:
e - an event containing information about the key press

keyReleased
public void keyReleased(KeyEvent e)
Sent when a key is released on the system keyboard. The default behavior is to do nothing.
Specified by:
keyReleased in interface KeyListener
Parameters:
e - an event containing information about the key release


org.eclipse.swt.events
Class KeyEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.KeyEvent
All Implemented Interfaces:
java.io.Serializable
Direct Known Subclasses:
TraverseEvent, VerifyEvent


public class KeyEvent extends TypedEvent
Instances of this class are sent as a result of keys being pressed and released on the keyboard. When a key listener is added to a control, the control will take part in widget traversal. By default, all traversal keys (such as the tab key and so on) are delivered to the control. In order for a control to take part in traversal, it should listen for traversal events. Otherwise, the user can traverse into a control but not out. Note that native controls such as table and tree implement key traversal in the operating system. It is not necessary to add traversal listeners for these controls, unless you want to override the default traversal.
See Also:
KeyListener, TraverseListener, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
char    character
the character represented by the key that was typed.
boolean doit
A flag indicating whether the operation should be allowed.
int keyCode
the key code of the key that was typed, as defined by the key code constants in class SWT.
int keyLocation
depending on the event, the location of key specified by the keyCode or character.
int stateMask
the state of the keyboard modifier keys and mouse masks at the time the event was generated.

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
KeyEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

character
public char character
the character represented by the key that was typed. This is the final character that results after all modifiers have been applied. For example, when the user types Ctrl+A, the character value is 0x01. It is important that applications do not attempt to modify the character value based on a stateMask (such as SWT.CTRL) or the resulting character will not be correct.

keyCode
public int keyCode
the key code of the key that was typed, as defined by the key code constants in class SWT. When the character field of the event is ambiguous, this field contains the unicode value of the original character. For example, typing Ctrl+M or Return both result in the character '\r' but the keyCode field will also contain '\r' when Return was typed.
See Also:
SWT

keyLocation
public int keyLocation
depending on the event, the location of key specified by the keyCode or character. The possible values for this field are SWT.LEFT, SWT.RIGHT, SWT.KEYPAD, or SWT.NONE representing the main keyboard area. The location field can be used to differentiate key events that have the same key code and character but are generated by different keys on the keyboard. For example, a key down event with the key code equal to SWT.SHIFT can be generated by the left and the right shift keys on the keyboard.
The location field can only be used to determine the location of the key code or character in the current event. It does not include information about the location of modifiers in the state mask.
since. :
3.6
See Also:
SWT.LEFT, SWT.RIGHT, SWT.KEYPAD

stateMask
public int stateMask
the state of the keyboard modifier keys and mouse masks at the time the event was generated.
See Also:
SWT.MODIFIER_MASK, SWT.BUTTON_MASK

doit
public boolean doit
A flag indicating whether the operation should be allowed. Setting this field to false will cancel the operation.

Constructor Detail

KeyEvent
public KeyEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class TypedEvent
Returns:
a string representation of the event


org.eclipse.swt.events
Interface KeyListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
All Known Implementing Classes:
KeyAdapter


public interface KeyListener extends SWTEventListener
Classes which implement this interface provide methods that deal with the events that are generated as keys are pressed on the system keyboard. After creating an instance of a class that implements this interface it can be added to a control using the addKeyListener method and removed using the removeKeyListener method. When a key is pressed or released, the appropriate method will be invoked.
See Also:
KeyAdapter, KeyEvent

Method Summary
All Methods Static Methods Instance Methods Abstract Methods Default Methods

Modifier and Type   Method and Description
void    keyPressed(KeyEvent e)
Sent when a key is pressed on the system keyboard.
static KeyListener  keyPressedAdapter(java.util.functio n.Consumer<KeyEvent> c)
Static helper method to create a key listener for the keyPressed(KeyEvent e)) method with a lambda expression.
void    keyReleased(KeyEvent e)
Sent when a key is released on the system keyboard.
static KeyListener  keyReleasedAdapter(java.util.functi on.Consumer<KeyEvent> c)
Static helper method to create a key listener for the keyReleased(KeyEvent e)) method with a lambda expression.

Method Detail

keyPressed
void keyPressed(KeyEvent e)
Sent when a key is pressed on the system keyboard.
Parameters:
e - an event containing information about the key press

keyReleased
void keyReleased(KeyEvent e)
Sent when a key is released on the system keyboard.
Parameters:
e - an event containing information about the key release

keyPressedAdapter
static KeyListener keyPressedAdapter(java.util.function.Consumer<KeyEvent> c)
Static helper method to create a key listener for the keyPressed(KeyEvent e)) method with a lambda expression.
Parameters:
c - the consumer of the event
Returns:
KeyListener
since. :
3.106

keyReleasedAdapter
static KeyListener keyReleasedAdapter(java.util.function.Consumer<KeyEvent> c)
Static helper method to create a key listener for the keyReleased(KeyEvent e)) method with a lambda expression.
Parameters:
c - the consumer of the event
Returns:
KeyListener
since. :
3.106


org.eclipse.swt.widgets
Class Label
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Label
All Implemented Interfaces:
Drawable


public class Label extends Control
Instances of this class represent a non-selectable user interface object that displays a string or image. When SEPARATOR is specified, displays a single vertical or horizontal line. Shadow styles are hints and may not be honored by the platform. To create a separator label with the default shadow style for the platform, do not specify a shadow style.
Styles:
SEPARATOR, HORIZONTAL, VERTICAL
SHADOW_IN, SHADOW_OUT, SHADOW_NONE
CENTER, LEFT, RIGHT, WRAP
Events:
(none)
Note: Only one of SHADOW_IN, SHADOW_OUT and SHADOW_NONE may be specified. SHADOW_NONE is a HINT. Only one of HORIZONTAL and VERTICAL may be specified. Only one of CENTER, LEFT and RIGHT may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
Label snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Label(Composite parent,      int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
int getAlignment()
Returns a value which describes the position of the text or image in the receiver.
Image   getImage()
Returns the receiver's image if it has one, or null if it does not.
java.lang.String    getText()
Returns the receiver's text, which will be an empty string if it has never been set or if the receiver is a SEPARATOR label.
void    setAlignment(int alignment)
Controls how text and images will be displayed in the receiver.
void    setImage(Image image)
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
void    setText(java.lang.String string)
Sets the receiver's text.

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setFocus, setFont, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

Label
public Label(Composite parent,
             int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.SEPARATOR, SWT.HORIZONTAL, SWT.VERTICAL, SWT.SHADOW_IN, SWT.SHADOW_OUT, SWT.SHADOW_NONE, SWT.CENTER, SWT.LEFT, SWT.RIGHT, SWT.WRAP, Widget.checkSubclass(), Widget.getStyle()

Method Detail

getAlignment
public int getAlignment()
Returns a value which describes the position of the text or image in the receiver. The value will be one of LEFT, RIGHT or CENTER unless the receiver is a SEPARATOR label, in which case, NONE is returned.
Returns:
the alignment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getImage
public Image getImage()
Returns the receiver's image if it has one, or null if it does not.
Returns:
the receiver's image
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getText
public java.lang.String getText()
Returns the receiver's text, which will be an empty string if it has never been set or if the receiver is a SEPARATOR label.
Returns:
the receiver's text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setAlignment
public void setAlignment(int alignment)
Controls how text and images will be displayed in the receiver. The argument should be one of LEFT, RIGHT or CENTER. If the receiver is a SEPARATOR label, the argument is ignored and the alignment is not changed.
Parameters:
alignment - the new alignment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setImage
public void setImage(Image image)
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
Parameters:
image - the image to display on the receiver (may be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the image has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setText
public void setText(java.lang.String string)
Sets the receiver's text. This method sets the widget label. The label may include the mnemonic character and line delimiters.
Mnemonics are indicated by an '&' that causes the next character to be the mnemonic. When the user presses a key sequence that matches the mnemonic, focus is assigned to the control that follows the label. On most platforms, the mnemonic appears underlined but may be emphasised in a platform specific manner. The mnemonic indicator character '&' can be escaped by doubling it in the string, causing a single '&' to be displayed.
Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Parameters:
string - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class Layout
java.lang.Object
org.eclipse.swt.widgets.Layout
Direct Known Subclasses:
FillLayout, FormLayout, GridLayout, RowLayout


public abstract class Layout extends java.lang.Object
A layout controls the position and size of the children of a composite widget. This class is the abstract base class for layouts.
See Also:
Composite.setLayout(Layout), Sample code and further information

Constructor Summary
Constructors

Constructor and Description
Layout()

Method Summary
All Methods Instance Methods Abstract Methods Concrete Methods

Modifier and Type   Method and Description
protected abstract Point    computeSize(Composite composite,          int wHint,            int h Hint,            boolean flushCache)
Computes and returns the size of the specified composite's client area according to this layout.
protected boolean   flushCache(Control control)
Instruct the layout to flush any cached values associated with the control specified in the argument control.
protected abstract void layout(Composite composite,       b oolean flushCache)
Lays out the children of the specified composite according to this layout.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

Layout
public Layout()

Method Detail

computeSize
protected abstract Point computeSize(Composite composite,
                                     int wHint,
                                     int hHint,
                                     boolean flushCache)
Computes and returns the size of the specified composite's client area according to this layout. This method computes the size that the client area of the composite must be in order to position all children at their preferred size inside the composite according to the layout algorithm encoded by this layout.
When a width or height hint is supplied, it is used to constrain the result. For example, if a width hint is provided that is less than the width of the client area, the layout may choose to wrap and increase height, clip, overlap, or otherwise constrain the children.
Parameters:
composite - a composite widget using this layout
wHint - width (SWT.DEFAULT for preferred size)
hHint - height (SWT.DEFAULT for preferred size)
flushCache - true means flush cached layout values
Returns:
a point containing the computed size (width, height)
See Also:
layout(org.eclipse.swt.widgets.Composite, boolean), Control.getBorderWidth(), Control.getBounds(), Control.getSize(), Control.pack(boolean), "computeTrim, getClientArea for controls that implement them"

flushCache
protected boolean flushCache(Control control)
Instruct the layout to flush any cached values associated with the control specified in the argument control.
Parameters:
control - a control managed by this layout
Returns:
true if the Layout has flushed all cached information associated with control
since. :
3.1

layout
protected abstract void layout(Composite composite,
                               boolean flushCache)
Lays out the children of the specified composite according to this layout. This method positions and sizes the children of a composite using the layout algorithm encoded by this layout. Children of the composite are positioned in the client area of the composite. The position of the composite is not altered by this method.
When the flush cache hint is true, the layout is instructed to flush any cached values associated with the children. Typically, a layout will cache the preferred sizes of the children to avoid the expense of computing these values each time the widget is laid out.
When layout is triggered explicitly by the programmer the flush cache hint is true. When layout is triggered by a resize, either caused by the programmer or by the user, the hint is false.
Parameters:
composite - a composite widget using this layout
flushCache - true means flush cached layout values


org.eclipse.swt.graphics
Class LineAttributes
java.lang.Object
org.eclipse.swt.graphics.LineAttributes


public class LineAttributes extends java.lang.Object
LineAttributes defines a set of line attributes that can be modified in a GC. Application code does not need to explicitly release the resources managed by each instance when those instances are no longer required, and thus no dispose() method is provided.
since. :
3.3
See Also:
GC.getLineAttributes(), GC.setLineAttributes(LineAttributes), Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
int cap
The line cap style.
float[] dash
The line dash style for SWT.LINE_CUSTOM.
float   dashOffset
The line dash style offset for SWT.LINE_CUSTOM.
int join
The line join style.
float   miterLimit
The line miter limit.
int style
The line style.
float   width
The line width.

Constructor Summary
Constructors

Constructor and Description
LineAttributes(float width)
Create a new line attributes with the specified line width.
LineAttributes(float width,               int cap,               int jo in)
Create a new line attributes with the specified line cap, join and width.
LineAttributes(float width,               int cap,               int jo in,               int style,               float[] dash,               f loat dashOffset,               float miterLimit)
Create a new line attributes with the specified arguments.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
int hashCode()
Returns an integer hash code for the receiver.

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, toString, wait, wait, wait

Field Detail

width
public float width
The line width.

style
public int style
The line style.
See Also:
SWT.LINE_CUSTOM, SWT.LINE_DASH, SWT.LINE_DASHDOT, SWT.LINE_DASHDOTDOT, SWT.LINE_DOT, SWT.LINE_SOLID

cap
public int cap
The line cap style.
See Also:
SWT.CAP_FLAT, SWT.CAP_ROUND, SWT.CAP_SQUARE

join
public int join
The line join style.
See Also:
SWT.JOIN_BEVEL, SWT.JOIN_MITER, SWT.JOIN_ROUND

dash
public float[] dash
The line dash style for SWT.LINE_CUSTOM.

dashOffset
public float dashOffset
The line dash style offset for SWT.LINE_CUSTOM.

miterLimit
public float miterLimit
The line miter limit.

Constructor Detail

LineAttributes
public LineAttributes(float width)
Create a new line attributes with the specified line width.
Parameters:
width - the line width

LineAttributes
public LineAttributes(float width,
                      int cap,
                      int join)
Create a new line attributes with the specified line cap, join and width.
Parameters:
width - the line width
cap - the line cap style
join - the line join style

LineAttributes
public LineAttributes(float width,
                      int cap,
                      int join,
                      int style,
                      float[] dash,
                      float dashOffset,
                      float miterLimit)
Create a new line attributes with the specified arguments.
Parameters:
width - the line width
cap - the line cap style
join - the line join style
style - the line style
dash - the line dash style
dashOffset - the line dash style offset
miterLimit - the line miter limit

Method Detail

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
See Also:
equals(Object)


org.eclipse.swt.widgets
Class Link
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Link
All Implemented Interfaces:
Drawable


public class Link extends Control
Instances of this class represent a selectable user interface object that displays a text with links.
Styles:
(none)
Events:
Selection
IMPORTANT: This class is not intended to be subclassed.
since. :
3.1
See Also:
Link snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Link(Composite parent,     int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface.
Color   getLinkForeground()
Returns the link foreground color.
java.lang.String    getText()
Returns the receiver's text, which will be an empty string if it has never been set.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
void    setLinkForeground(Color color)
Sets the link foreground color to the color specified by the argument, or to the default system color for the link if the argument is null.
void    setText(java.lang.String string)
Sets the receiver's text.

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setFocus, setFont, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

Link
public Link(Composite parent,
            int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
Widget.checkSubclass(), Widget.getStyle()

Method Detail

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface. widgetSelected is called when the control is selected by the user. widgetDefaultSelected is not called.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

getLinkForeground
public Color getLinkForeground()
Returns the link foreground color.
Returns:
the receiver's link foreground color.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.105

getText
public java.lang.String getText()
Returns the receiver's text, which will be an empty string if it has never been set.
Returns:
the receiver's text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

setLinkForeground
public void setLinkForeground(Color color)
Sets the link foreground color to the color specified by the argument, or to the default system color for the link if the argument is null. Note: This operation is a hint and may be overridden by the platform.
Parameters:
color - the new color (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.105

setText
public void setText(java.lang.String string)
Sets the receiver's text. The string can contain both regular text and hyperlinks. A hyperlink is delimited by an anchor tag, <a> and </a>. Within an anchor, a single HREF attribute is supported. When a hyperlink is selected, the text field of the selection event contains either the text of the hyperlink or the value of its HREF, if one was specified. In the rare case of identical hyperlinks within the same string, the HREF attribute can be used to distinguish between them. The string may include the mnemonic character and line delimiters. The only delimiter the HREF attribute supports is the quotation mark (").
Mnemonics are indicated by an '&' that causes the next character to be the mnemonic. The receiver can have a mnemonic in the text preceding each link. When the user presses a key sequence that matches the mnemonic, focus is assigned to the link that follows the text. Mnemonics in links and in the trailing text are ignored. On most platforms, the mnemonic appears underlined but may be emphasised in a platform specific manner. The mnemonic indicator character '&' can be escaped by doubling it in the string, causing a single '&' to be displayed.
Parameters:
string - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class List
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.List
All Implemented Interfaces:
Drawable


public class List extends Scrollable
Instances of this class represent a selectable user interface object that displays a list of strings and issues notification when a string is selected. A list may be single or multi select.
Styles:
SINGLE, MULTI
Events:
Selection, DefaultSelection
Note: Only one of SINGLE and MULTI may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
List snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
List(Composite parent,     int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    add(java.lang.String string)
Adds the argument to the end of the receiver's list.
void    add(java.lang.String string,    int  index)
Adds the argument to the receiver's list at the given zero-relative index.
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's selection, by sending it one of the messages defined in the SelectionListener interface.
void    deselect(int index)
Deselects the item at the given zero-relative index in the receiver.
void    deselect(int[] indices)
Deselects the items at the given zero-relative indices in the receiver.
void    deselect(int start,         int end )
Deselects the items at the given zero-relative indices in the receiver.
void    deselectAll()
Deselects all selected items in the receiver.
int getFocusIndex()
Returns the zero-relative index of the item which currently has the focus in the receiver, or -1 if no item has focus.
java.lang.String    getItem(int index)
Returns the item at the given, zero-relative index in the receiver.
int getItemCount()
Returns the number of items contained in the receiver.
int getItemHeight()
Returns the height of the area which would be used to display one of the items in the list.
java.lang.String[]  getItems()
Returns a (possibly empty) array of Strings which are the items in the receiver.
java.lang.String[]  getSelection()
Returns an array of Strings that are currently selected in the receiver.
int getSelectionCount()
Returns the number of selected items contained in the receiver.
int getSelectionIndex()
Returns the zero-relative index of the item which is currently selected in the receiver, or -1 if no item is selected.
int[]   getSelectionIndices()
Returns the zero-relative indices of the items which are currently selected in the receiver.
int getTopIndex()
Returns the zero-relative index of the item which is currently at the top of the receiver.
int indexOf(java.lang.String string)
Gets the index of an item.
int indexOf(java.lang.String string,      int start)
Searches the receiver's list starting at the given, zero-relative index until an item is found that is equal to the argument, and returns the index of that item.
boolean isSelected(int index)
Returns true if the item is selected, and false otherwise.
void    remove(int index)
Removes the item from the receiver at the given zero-relative index.
void    remove(int[] indices)
Removes the items from the receiver at the given zero-relative indices.
void    remove(int start,       int end)
Removes the items from the receiver which are between the given zero-relative start and end indices (inclusive).
void    remove(java.lang.String string)
Searches the receiver's list starting at the first item until an item is found that is equal to the argument, and removes that item from the list.
void    removeAll()
Removes all of the items from the receiver.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's selection.
void    select(int index)
Selects the item at the given zero-relative index in the receiver's list.
void    select(int[] indices)
Selects the items at the given zero-relative indices in the receiver.
void    select(int start,       int end)
Selects the items in the range specified by the given zero-relative indices in the receiver.
void    selectAll()
Selects all of the items in the receiver.
void    setFont(Font font)
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
void    setItem(int index,        java.lang .String string)
Sets the text of the item in the receiver's list at the given zero-relative index to the string argument.
void    setItems(java.lang.String... items)
Sets the receiver's items to be the given array of items.
void    setSelection(int index)
Selects the item at the given zero-relative index in the receiver.
void    setSelection(int[] indices)
Selects the items at the given zero-relative indices in the receiver.
void    setSelection(int start,  int end)
Selects the items in the range specified by the given zero-relative indices in the receiver.
void    setSelection(java.lang.String[] ite ms)
Sets the receiver's selection to be the given array of items.
void    setTopIndex(int index)
Sets the zero-relative index of the item which is currently at the top of the receiver.
void    showSelection()
Shows the selection.

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setFocus, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

List
public List(Composite parent,
            int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.SINGLE, SWT.MULTI, Widget.checkSubclass(), Widget.getStyle()

Method Detail

add
public void add(java.lang.String string)
Adds the argument to the end of the receiver's list. Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Parameters:
string - the new item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
add(String,int)

add
public void add(java.lang.String string,
                int index)
Adds the argument to the receiver's list at the given zero-relative index. Note: To add an item at the end of the list, use the result of calling getItemCount() as the index or use add(String).
Also note, if control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Parameters:
string - the new item
index - the index for the item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
add(String)

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's selection, by sending it one of the messages defined in the SelectionListener interface. widgetSelected is called when the selection changes. widgetDefaultSelected is typically called when an item is double-clicked.
Parameters:
listener - the listener which should be notified when the user changes the receiver's selection
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

deselect
public void deselect(int[] indices)
Deselects the items at the given zero-relative indices in the receiver. If the item at the given zero-relative index in the receiver is selected, it is deselected. If the item at the index was not selected, it remains deselected. Indices that are out of range and duplicate indices are ignored.
Parameters:
indices - the array of indices for the items to deselect
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the set of indices is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

deselect
public void deselect(int index)
Deselects the item at the given zero-relative index in the receiver. If the item at the index was already deselected, it remains deselected. Indices that are out of range are ignored.
Parameters:
index - the index of the item to deselect
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

deselect
public void deselect(int start,
                     int end)
Deselects the items at the given zero-relative indices in the receiver. If the item at the given zero-relative index in the receiver is selected, it is deselected. If the item at the index was not selected, it remains deselected. The range of the indices is inclusive. Indices that are out of range are ignored.
Parameters:
start - the start index of the items to deselect
end - the end index of the items to deselect
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

deselectAll
public void deselectAll()
Deselects all selected items in the receiver.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getFocusIndex
public int getFocusIndex()
Returns the zero-relative index of the item which currently has the focus in the receiver, or -1 if no item has focus.
Returns:
the index of the selected item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItem
public java.lang.String getItem(int index)
Returns the item at the given, zero-relative index in the receiver. Throws an exception if the index is out of range.
Parameters:
index - the index of the item to return
Returns:
the item at the given index
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItemCount
public int getItemCount()
Returns the number of items contained in the receiver.
Returns:
the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItemHeight
public int getItemHeight()
Returns the height of the area which would be used to display one of the items in the list.
Returns:
the height of one item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItems
public java.lang.String[] getItems()
Returns a (possibly empty) array of Strings which are the items in the receiver. Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the items in the receiver's list
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelection
public java.lang.String[] getSelection()
Returns an array of Strings that are currently selected in the receiver. The order of the items is unspecified. An empty array indicates that no items are selected. Note: This is not the actual structure used by the receiver to maintain its selection, so modifying the array will not affect the receiver.
Returns:
an array representing the selection
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelectionCount
public int getSelectionCount()
Returns the number of selected items contained in the receiver.
Returns:
the number of selected items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelectionIndex
public int getSelectionIndex()
Returns the zero-relative index of the item which is currently selected in the receiver, or -1 if no item is selected.
Returns:
the index of the selected item or -1
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelectionIndices
public int[] getSelectionIndices()
Returns the zero-relative indices of the items which are currently selected in the receiver. The order of the indices is unspecified. The array is empty if no items are selected. Note: This is not the actual structure used by the receiver to maintain its selection, so modifying the array will not affect the receiver.
Returns:
the array of indices of the selected items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getTopIndex
public int getTopIndex()
Returns the zero-relative index of the item which is currently at the top of the receiver. This index can change when items are scrolled or new items are added or removed.
Returns:
the index of the top item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

indexOf
public int indexOf(java.lang.String string)
Gets the index of an item. The list is searched starting at 0 until an item is found that is equal to the search item. If no item is found, -1 is returned. Indexing is zero based.
Parameters:
string - the search item
Returns:
the index of the item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

indexOf
public int indexOf(java.lang.String string,
                   int start)
Searches the receiver's list starting at the given, zero-relative index until an item is found that is equal to the argument, and returns the index of that item. If no item is found or the starting index is out of range, returns -1.
Parameters:
string - the search item
start - the zero-relative index at which to start the search
Returns:
the index of the item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

isSelected
public boolean isSelected(int index)
Returns true if the item is selected, and false otherwise. Indices out of range are ignored.
Parameters:
index - the index of the item
Returns:
the selection state of the item at the index
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

remove
public void remove(int[] indices)
Removes the items from the receiver at the given zero-relative indices.
Parameters:
indices - the array of indices of the items
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
ERROR_NULL_ARGUMENT - if the indices array is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

remove
public void remove(int index)
Removes the item from the receiver at the given zero-relative index.
Parameters:
index - the index for the item
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

remove
public void remove(int start,
                   int end)
Removes the items from the receiver which are between the given zero-relative start and end indices (inclusive).
Parameters:
start - the start of the range
end - the end of the range
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if either the start or end are not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

remove
public void remove(java.lang.String string)
Searches the receiver's list starting at the first item until an item is found that is equal to the argument, and removes that item from the list.
Parameters:
string - the item to remove
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
ERROR_INVALID_ARGUMENT - if the string is not found in the list
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeAll
public void removeAll()
Removes all of the items from the receiver.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's selection.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

select
public void select(int[] indices)
Selects the items at the given zero-relative indices in the receiver. The current selection is not cleared before the new items are selected. If the item at a given index is not selected, it is selected. If the item at a given index was already selected, it remains selected. Indices that are out of range and duplicate indices are ignored. If the receiver is single-select and multiple indices are specified, then all indices are ignored.
Parameters:
indices - the array of indices for the items to select
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the array of indices is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setSelection(int[])

select
public void select(int index)
Selects the item at the given zero-relative index in the receiver's list. If the item at the index was already selected, it remains selected. Indices that are out of range are ignored.
Parameters:
index - the index of the item to select
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

select
public void select(int start,
                   int end)
Selects the items in the range specified by the given zero-relative indices in the receiver. The range of indices is inclusive. The current selection is not cleared before the new items are selected. If an item in the given range is not selected, it is selected. If an item in the given range was already selected, it remains selected. Indices that are out of range are ignored and no items will be selected if start is greater than end. If the receiver is single-select and there is more than one item in the given range, then all indices are ignored.
Parameters:
start - the start of the range
end - the end of the range
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setSelection(int,int)

selectAll
public void selectAll()
Selects all of the items in the receiver. If the receiver is single-select, do nothing.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setFont
public void setFont(Font font)
Description copied from class: Control
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Overrides:
setFont in class Control
Parameters:
font - the new font (or null)

setItem
public void setItem(int index,
                    java.lang.String string)
Sets the text of the item in the receiver's list at the given zero-relative index to the string argument.
Parameters:
index - the index for the item
string - the new text for the item
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setItems
public void setItems(java.lang.String... items)
Sets the receiver's items to be the given array of items.
Parameters:
items - the array of items
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the items array is null
ERROR_INVALID_ARGUMENT - if an item in the items array is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setSelection
public void setSelection(int[] indices)
Selects the items at the given zero-relative indices in the receiver. The current selection is cleared before the new items are selected, and if necessary the receiver is scrolled to make the new selection visible. Indices that are out of range and duplicate indices are ignored. If the receiver is single-select and multiple indices are specified, then all indices are ignored.
Parameters:
indices - the indices of the items to select
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the array of indices is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
deselectAll(), select(int[])

setSelection
public void setSelection(java.lang.String[] items)
Sets the receiver's selection to be the given array of items. The current selection is cleared before the new items are selected, and if necessary the receiver is scrolled to make the new selection visible. Items that are not in the receiver are ignored. If the receiver is single-select and multiple items are specified, then all items are ignored.
Parameters:
items - the array of items
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the array of items is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
deselectAll(), select(int[]), setSelection(int[])

setSelection
public void setSelection(int index)
Selects the item at the given zero-relative index in the receiver. If the item at the index was already selected, it remains selected. The current selection is first cleared, then the new item is selected, and if necessary the receiver is scrolled to make the new selection visible. Indices that are out of range are ignored.
Parameters:
index - the index of the item to select
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
deselectAll(), select(int)

setSelection
public void setSelection(int start,
                         int end)
Selects the items in the range specified by the given zero-relative indices in the receiver. The range of indices is inclusive. The current selection is cleared before the new items are selected, and if necessary the receiver is scrolled to make the new selection visible. Indices that are out of range are ignored and no items will be selected if start is greater than end. If the receiver is single-select and there is more than one item in the given range, then all indices are ignored.
Parameters:
start - the start index of the items to select
end - the end index of the items to select
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
deselectAll(), select(int,int)

setTopIndex
public void setTopIndex(int index)
Sets the zero-relative index of the item which is currently at the top of the receiver. This index can change when items are scrolled or new items are added and removed.
Parameters:
index - the index of the top item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

showSelection
public void showSelection()
Shows the selection. If the selection is already showing in the receiver, this method simply returns. Otherwise, the items are scrolled until the selection is visible.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Interface Listener
All Known Implementing Classes:
TypedListener


public interface Listener
Implementers of Listener provide a simple handleEvent() method that is used internally by SWT to dispatch events. After creating an instance of a class that implements this interface it can be added to a widget using the addListener(int eventType, Listener handler) method and removed using the removeListener (int eventType, Listener handler) method. When the specified event occurs, handleEvent(...) will be sent to the instance.
Classes which implement this interface are described within SWT as providing the untyped listener API. Typically, widgets will also provide a higher-level typed listener API, that is based on the standard java.util.EventListener pattern.
Note that, since.  all internal SWT event dispatching is based on untyped listeners, it is simple to build subsets of SWT for use on memory constrained, small footprint devices, by removing the classes and methods which implement the typed listener API.
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), EventListener, org.eclipse.swt.events

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    handleEvent(Event event)
Sent when an event that the receiver has registered for occurs.

Method Detail

handleEvent
void handleEvent(Event event)
Sent when an event that the receiver has registered for occurs.
Parameters:
event - the event which occurred


org.eclipse.swt.widgets
Class Menu
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Menu


public class Menu extends Widget
Instances of this class are user interface objects that contain menu items.
Styles:
BAR, DROP_DOWN, POP_UP, NO_RADIO_GROUP
LEFT_TO_RIGHT, RIGHT_TO_LEFT
Events:
Help, Hide, Show
Note: Only one of BAR, DROP_DOWN and POP_UP may be specified. Only one of LEFT_TO_RIGHT or RIGHT_TO_LEFT may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
Menu snippets, SWT Example: ControlExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
long    handle
the handle to the OS resource (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.

Constructor Summary
Constructors

Constructor and Description
Menu(Control parent)
Constructs a new instance of this class given its parent, and sets the style for the instance so that the instance will be a popup menu on the given parent's shell.
Menu(Decorations parent,     int style)
Constructs a new instance of this class given its parent (which must be a Decorations) and a style value describing its behavior and appearance.
Menu(Menu parentMenu)
Constructs a new instance of this class given its parent (which must be a Menu) and sets the style for the instance so that the instance will be a drop-down menu on the given parent's parent.
Menu(MenuItem parentItem)
Constructs a new instance of this class given its parent (which must be a MenuItem) and sets the style for the instance so that the instance will be a drop-down menu on the given parent's parent menu.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addHelpListener(HelpListener listen er)
Adds the listener to the collection of listeners who will be notified when help events are generated for the control, by sending it one of the messages defined in the HelpListener interface.
void    addMenuListener(MenuListener listen er)
Adds the listener to the collection of listeners who will be notified when menus are hidden or shown, by sending it one of the messages defined in the MenuListener interface.
MenuItem    getDefaultItem()
Returns the default menu item or null if none has been previously set.
boolean getEnabled()
Returns true if the receiver is enabled, and false otherwise.
MenuItem    getItem(int index)
Returns the item at the given, zero-relative index in the receiver.
int getItemCount()
Returns the number of items contained in the receiver.
MenuItem[]  getItems()
Returns a (possibly empty) array of MenuItems which are the items in the receiver.
int getOrientation()
Returns the orientation of the receiver, which will be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
Decorations getParent()
Returns the receiver's parent, which must be a Decorations.
MenuItem    getParentItem()
Returns the receiver's parent item, which must be a MenuItem or null when the receiver is a root.
Menu    getParentMenu()
Returns the receiver's parent item, which must be a Menu or null when the receiver is a root.
Shell   getShell()
Returns the receiver's shell.
boolean getVisible()
Returns true if the receiver is visible, and false otherwise.
int indexOf(MenuItem item)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item.
boolean isEnabled()
Returns true if the receiver is enabled and all of the receiver's ancestors are enabled, and false otherwise.
boolean isVisible()
Returns true if the receiver is visible and all of the receiver's ancestors are visible and false otherwise.
void    removeHelpListener(HelpListener lis tener)
Removes the listener from the collection of listeners who will be notified when the help events are generated for the control.
void    removeMenuListener(MenuListener lis tener)
Removes the listener from the collection of listeners who will be notified when the menu events are generated for the control.
void    setDefaultItem(MenuItem item)
Sets the default menu item to the argument or removes the default emphasis when the argument is null.
void    setEnabled(boolean enabled)
Enables the receiver if the argument is true, and disables it otherwise.
void    setLocation(int x,            int y )
Sets the location of the receiver, which must be a popup, to the point specified by the arguments which are relative to the display.
void    setLocation(Point location)
Sets the location of the receiver, which must be a popup, to the point specified by the argument which is relative to the display.
void    setOrientation(int orientation)
Sets the orientation of the receiver, which must be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
void    setVisible(boolean visible)
Marks the receiver as visible if the argument is true, and marks it invisible otherwise.

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

handle
public long handle
the handle to the OS resource (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

Constructor Detail

Menu
public Menu(Control parent)
Constructs a new instance of this class given its parent, and sets the style for the instance so that the instance will be a popup menu on the given parent's shell. After constructing a menu, it can be set into its parent using parent.setMenu(menu). In this case, the parent may be any control in the same widget tree as the parent.
Parameters:
parent - a control which will be the parent of the new instance (cannot be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.POP_UP, Widget.checkSubclass(), Widget.getStyle()

Menu
public Menu(Decorations parent,
            int style)
Constructs a new instance of this class given its parent (which must be a Decorations) and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
After constructing a menu or menuBar, it can be set into its parent using parent.setMenu(menu) or parent.setMenuBar(menuBar).
Parameters:
parent - a decorations control which will be the parent of the new instance (cannot be null)
style - the style of menu to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.BAR, SWT.DROP_DOWN, SWT.POP_UP, SWT.NO_RADIO_GROUP, SWT.LEFT_TO_RIGHT, SWT.RIGHT_TO_LEFT, Widget.checkSubclass(), Widget.getStyle()

Menu
public Menu(Menu parentMenu)
Constructs a new instance of this class given its parent (which must be a Menu) and sets the style for the instance so that the instance will be a drop-down menu on the given parent's parent. After constructing a drop-down menu, it can be set into its parentMenu using parentMenu.setMenu(menu).
Parameters:
parentMenu - a menu which will be the parent of the new instance (cannot be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.DROP_DOWN, Widget.checkSubclass(), Widget.getStyle()

Menu
public Menu(MenuItem parentItem)
Constructs a new instance of this class given its parent (which must be a MenuItem) and sets the style for the instance so that the instance will be a drop-down menu on the given parent's parent menu. After constructing a drop-down menu, it can be set into its parentItem using parentItem.setMenu(menu).
Parameters:
parentItem - a menu item which will be the parent of the new instance (cannot be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.DROP_DOWN, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addHelpListener
public void addHelpListener(HelpListener listener)
Adds the listener to the collection of listeners who will be notified when help events are generated for the control, by sending it one of the messages defined in the HelpListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
HelpListener, removeHelpListener(org.eclipse.swt.events.HelpListener)

addMenuListener
public void addMenuListener(MenuListener listener)
Adds the listener to the collection of listeners who will be notified when menus are hidden or shown, by sending it one of the messages defined in the MenuListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
MenuListener, removeMenuListener(org.eclipse.swt.events.MenuListener)

getDefaultItem
public MenuItem getDefaultItem()
Returns the default menu item or null if none has been previously set.
Returns:
the default menu item.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getEnabled
public boolean getEnabled()
Returns true if the receiver is enabled, and false otherwise. A disabled menu is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Returns:
the receiver's enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
isEnabled()

getItem
public MenuItem getItem(int index)
Returns the item at the given, zero-relative index in the receiver. Throws an exception if the index is out of range.
Parameters:
index - the index of the item to return
Returns:
the item at the given index
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItemCount
public int getItemCount()
Returns the number of items contained in the receiver.
Returns:
the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItems
public MenuItem[] getItems()
Returns a (possibly empty) array of MenuItems which are the items in the receiver. Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the items in the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getOrientation
public int getOrientation()
Returns the orientation of the receiver, which will be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
Returns:
the orientation style
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.7

getParent
public Decorations getParent()
Returns the receiver's parent, which must be a Decorations.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getParentItem
public MenuItem getParentItem()
Returns the receiver's parent item, which must be a MenuItem or null when the receiver is a root.
Returns:
the receiver's parent item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getParentMenu
public Menu getParentMenu()
Returns the receiver's parent item, which must be a Menu or null when the receiver is a root.
Returns:
the receiver's parent item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getShell
public Shell getShell()
Returns the receiver's shell. For all controls other than shells, this simply returns the control's nearest ancestor shell. Shells return themselves, even if they are children of other shells. Returns null if receiver or its ancestor is the application menubar.
Returns:
the receiver's shell or null
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getParent()

getVisible
public boolean getVisible()
Returns true if the receiver is visible, and false otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, this method may still indicate that it is considered visible even though it may not actually be showing.
Returns:
the receiver's visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

indexOf
public int indexOf(MenuItem item)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item. If no item is found, returns -1.
Parameters:
item - the search item
Returns:
the index of the item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

isEnabled
public boolean isEnabled()
Returns true if the receiver is enabled and all of the receiver's ancestors are enabled, and false otherwise. A disabled menu is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Returns:
the receiver's enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getEnabled()

isVisible
public boolean isVisible()
Returns true if the receiver is visible and all of the receiver's ancestors are visible and false otherwise.
Returns:
the receiver's visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getVisible()

removeHelpListener
public void removeHelpListener(HelpListener listener)
Removes the listener from the collection of listeners who will be notified when the help events are generated for the control.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
HelpListener, addHelpListener(org.eclipse.swt.events.HelpListener)

removeMenuListener
public void removeMenuListener(MenuListener listener)
Removes the listener from the collection of listeners who will be notified when the menu events are generated for the control.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
MenuListener, addMenuListener(org.eclipse.swt.events.MenuListener)

setDefaultItem
public void setDefaultItem(MenuItem item)
Sets the default menu item to the argument or removes the default emphasis when the argument is null.
Parameters:
item - the default menu item or null
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the menu item has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setEnabled
public void setEnabled(boolean enabled)
Enables the receiver if the argument is true, and disables it otherwise. A disabled menu is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Parameters:
enabled - the new enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setLocation
public void setLocation(int x,
                        int y)
Sets the location of the receiver, which must be a popup, to the point specified by the arguments which are relative to the display. Note that this is different from most widgets where the location of the widget is relative to the parent.
Note that the platform window manager ultimately has control over the location of popup menus.
Parameters:
x - the new x coordinate for the receiver
y - the new y coordinate for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setLocation
public void setLocation(Point location)
Sets the location of the receiver, which must be a popup, to the point specified by the argument which is relative to the display. Note that this is different from most widgets where the location of the widget is relative to the parent.
Note that the platform window manager ultimately has control over the location of popup menus.
Parameters:
location - the new location for the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.1

setOrientation
public void setOrientation(int orientation)
Sets the orientation of the receiver, which must be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
Parameters:
orientation - new orientation style
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.7

setVisible
public void setVisible(boolean visible)
Marks the receiver as visible if the argument is true, and marks it invisible otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, marking it visible may not actually cause it to be displayed.
Parameters:
visible - the new visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.events
Class MenuAdapter
java.lang.Object
org.eclipse.swt.events.MenuAdapter
All Implemented Interfaces:
java.util.EventListener, MenuListener, SWTEventListener


public abstract class MenuAdapter extends java.lang.Object implements MenuListener
This adapter class provides default implementations for the methods described by the MenuListener interface. Classes that wish to deal with MenuEvents can extend this class and override only the methods which they are interested in.
See Also:
MenuListener, MenuEvent, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
MenuAdapter()

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    menuHidden(MenuEvent e)
Sent when a menu is hidden.
void    menuShown(MenuEvent e)
Sent when a menu is shown.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

MenuAdapter
public MenuAdapter()

Method Detail

menuHidden
public void menuHidden(MenuEvent e)
Sent when a menu is hidden. The default behavior is to do nothing.
Specified by:
menuHidden in interface MenuListener
Parameters:
e - an event containing information about the menu operation

menuShown
public void menuShown(MenuEvent e)
Sent when a menu is shown. The default behavior is to do nothing.
Specified by:
menuShown in interface MenuListener
Parameters:
e - an event containing information about the menu operation


org.eclipse.swt.events
Class MenuDetectEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.MenuDetectEvent
All Implemented Interfaces:
java.io.Serializable


public final class MenuDetectEvent extends TypedEvent
Instances of this class are sent whenever the platform- specific trigger for showing a context menu is detected.
since. :
3.3
See Also:
MenuDetectListener, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
int detail
The context menu trigger type.
boolean doit
A flag indicating whether the operation should be allowed.
int x
The display-relative x coordinate of the pointer at the time the context menu trigger occurred.
int y
The display-relative y coordinate of the pointer at the time the context menu trigger occurred.

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
MenuDetectEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

x
public int x
The display-relative x coordinate of the pointer at the time the context menu trigger occurred.

y
public int y
The display-relative y coordinate of the pointer at the time the context menu trigger occurred.

doit
public boolean doit
A flag indicating whether the operation should be allowed. Setting this field to false will cancel the operation.

detail
public int detail
The context menu trigger type.
SWT.MENU_MOUSE
SWT.MENU_KEYBOARD
A field indicating whether the context menu was triggered by a pointing device such as a mouse (indicated by MENU_MOUSE), or by a focus-based device such as a keyboard (MENU_KEYBOARD). If the trigger was MENU_KEYBOARD, then the application should provide new display-relative x and y coordinates based on the current selection or the current focus.
since. :
3.8

Constructor Detail

MenuDetectEvent
public MenuDetectEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class TypedEvent
Returns:
a string representation of the event


org.eclipse.swt.events
Interface MenuDetectListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
Functional Interface:
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.


@FunctionalInterface public interface MenuDetectListener extends SWTEventListener
Classes which implement this interface provide methods that deal with the events that are generated when the platform-specific trigger for showing a context menu is detected. After creating an instance of a class that implements this interface it can be added to a control or TrayItem using the addMenuDetectListener method and removed using the removeMenuDetectListener method. When the context menu trigger occurs, the menuDetected method will be invoked.
since. :
3.3
See Also:
MenuDetectEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    menuDetected(MenuDetectEvent e)
Sent when the platform-dependent trigger for showing a menu item is detected.

Method Detail

menuDetected
void menuDetected(MenuDetectEvent e)
Sent when the platform-dependent trigger for showing a menu item is detected.
Parameters:
e - an event containing information about the menu detect


org.eclipse.swt.events
Class MenuEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.MenuEvent
All Implemented Interfaces:
java.io.Serializable


public final class MenuEvent extends TypedEvent
Instances of this class are sent as a result of menus being shown and hidden.
See Also:
MenuListener, Sample code and further information, Serialized Form

Field Summary

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
MenuEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary

Methods inherited from class org.eclipse.swt.events.TypedEvent
toString

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

MenuEvent
public MenuEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information


org.eclipse.swt.widgets
Class MenuItem
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Item
org.eclipse.swt.widgets.MenuItem


public class MenuItem extends Item
Instances of this class represent a selectable user interface object that issues notification when pressed and released.
Styles:
CHECK, CASCADE, PUSH, RADIO, SEPARATOR
Events:
Arm, Help, Selection
Note: Only one of the styles CHECK, CASCADE, PUSH, RADIO and SEPARATOR may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
Sample code and further information

Constructor Summary
Constructors

Constructor and Description
MenuItem(Menu parent,         int style)
Constructs a new instance of this class given its parent (which must be a Menu) and a style value describing its behavior and appearance.
MenuItem(Menu parent,         int style,         int index)
Constructs a new instance of this class given its parent (which must be a Menu), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addArmListener(ArmListener listener )
Adds the listener to the collection of listeners who will be notified when the arm events are generated for the control, by sending it one of the messages defined in the ArmListener interface.
void    addHelpListener(HelpListener listen er)
Adds the listener to the collection of listeners who will be notified when the help events are generated for the control, by sending it one of the messages defined in the HelpListener interface.
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the menu item is selected by the user, by sending it one of the messages defined in the SelectionListener interface.
protected void  checkSubclass()
Checks that this class can be subclassed.
int getAccelerator()
Returns the widget accelerator.
boolean getEnabled()
Returns true if the receiver is enabled, and false otherwise.
int getID()
Gets the identifier associated with the receiver.
Menu    getMenu()
Returns the receiver's cascade menu if it has one or null if it does not.
Menu    getParent()
Returns the receiver's parent, which must be a Menu.
boolean getSelection()
Returns true if the receiver is selected, and false otherwise.
java.lang.String    getToolTipText()
Returns the receiver's tool tip text, or null if it has not been set.
boolean isEnabled()
Returns true if the receiver is enabled and all of the receiver's ancestors are enabled, and false otherwise.
void    removeArmListener(ArmListener liste ner)
Removes the listener from the collection of listeners who will be notified when the arm events are generated for the control.
void    removeHelpListener(HelpListener lis tener)
Removes the listener from the collection of listeners who will be notified when the help events are generated for the control.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
void    setAccelerator(int accelerator)
Sets the widget accelerator.
void    setEnabled(boolean enabled)
Enables the receiver if the argument is true, and disables it otherwise.
void    setID(int id)
Sets the identifier associated with the receiver to the argument.
void    setImage(Image image)
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
void    setMenu(Menu menu)
Sets the receiver's pull down menu to the argument.
void    setSelection(boolean selected)
Sets the selection state of the receiver.
void    setText(java.lang.String string)
Sets the receiver's text.
void    setToolTipText(java.lang.String too lTip)
Sets the receiver's tool tip text to the argument, which may be null indicating that the default tool tip for the control will be shown.

Methods inherited from class org.eclipse.swt.widgets.Item
getImage, getText

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

MenuItem
public MenuItem(Menu parent,
                int style)
Constructs a new instance of this class given its parent (which must be a Menu) and a style value describing its behavior and appearance. The item is added to the end of the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a menu control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.CHECK, SWT.CASCADE, SWT.PUSH, SWT.RADIO, SWT.SEPARATOR, Widget.checkSubclass(), Widget.getStyle()

MenuItem
public MenuItem(Menu parent,
                int style,
                int index)
Constructs a new instance of this class given its parent (which must be a Menu), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a menu control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
index - the zero-relative index to store the receiver in its parent
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.CHECK, SWT.CASCADE, SWT.PUSH, SWT.RADIO, SWT.SEPARATOR, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addArmListener
public void addArmListener(ArmListener listener)
Adds the listener to the collection of listeners who will be notified when the arm events are generated for the control, by sending it one of the messages defined in the ArmListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ArmListener, removeArmListener(org.eclipse.swt.events.ArmListener)

addHelpListener
public void addHelpListener(HelpListener listener)
Adds the listener to the collection of listeners who will be notified when the help events are generated for the control, by sending it one of the messages defined in the HelpListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
HelpListener, removeHelpListener(org.eclipse.swt.events.HelpListener)

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the menu item is selected by the user, by sending it one of the messages defined in the SelectionListener interface. When widgetSelected is called, the stateMask field of the event object is valid. widgetDefaultSelected is not called.
When the SWT.RADIO style bit is set, the widgetSelected method is also called when the receiver loses selection because another item in the same radio group was selected by the user. During widgetSelected the application can use getSelection() to determine the current selected state of the receiver.
Parameters:
listener - the listener which should be notified when the menu item is selected by the user
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Item

getAccelerator
public int getAccelerator()
Returns the widget accelerator. An accelerator is the bit-wise OR of zero or more modifier masks and a key. Examples: SWT.CONTROL | SWT.SHIFT | 'T', SWT.ALT | SWT.F2. The default value is zero, indicating that the menu item does not have an accelerator.
Returns:
the accelerator or 0
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getEnabled
public boolean getEnabled()
Returns true if the receiver is enabled, and false otherwise. A disabled menu item is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Returns:
the receiver's enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
isEnabled()

getID
public int getID()
Gets the identifier associated with the receiver.
Returns:
the receiver's identifier
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.7

getMenu
public Menu getMenu()
Returns the receiver's cascade menu if it has one or null if it does not. Only CASCADE menu items can have a pull down menu. The sequence of key strokes, button presses and/or button releases that are used to request a pull down menu is platform specific.
Returns:
the receiver's menu
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getParent
public Menu getParent()
Returns the receiver's parent, which must be a Menu.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelection
public boolean getSelection()
Returns true if the receiver is selected, and false otherwise. When the receiver is of type CHECK or RADIO, it is selected when it is checked.
Returns:
the selection state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getToolTipText
public java.lang.String getToolTipText()
Returns the receiver's tool tip text, or null if it has not been set.
Returns:
the receiver's tool tip text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.104

isEnabled
public boolean isEnabled()
Returns true if the receiver is enabled and all of the receiver's ancestors are enabled, and false otherwise. A disabled menu item is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Returns:
the receiver's enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getEnabled()

removeArmListener
public void removeArmListener(ArmListener listener)
Removes the listener from the collection of listeners who will be notified when the arm events are generated for the control.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ArmListener, addArmListener(org.eclipse.swt.events.ArmListener)

removeHelpListener
public void removeHelpListener(HelpListener listener)
Removes the listener from the collection of listeners who will be notified when the help events are generated for the control.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
HelpListener, addHelpListener(org.eclipse.swt.events.HelpListener)

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

setAccelerator
public void setAccelerator(int accelerator)
Sets the widget accelerator. An accelerator is the bit-wise OR of zero or more modifier masks and a key. Examples: SWT.MOD1 | SWT.MOD2 | 'T', SWT.MOD3 | SWT.F2. SWT.CONTROL | SWT.SHIFT | 'T', SWT.ALT | SWT.F2. The default value is zero, indicating that the menu item does not have an accelerator.
Parameters:
accelerator - an integer that is the bit-wise OR of masks and a key
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setEnabled
public void setEnabled(boolean enabled)
Enables the receiver if the argument is true, and disables it otherwise. A disabled menu item is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Parameters:
enabled - the new enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setID
public void setID(int id)
Sets the identifier associated with the receiver to the argument.
Parameters:
id - the new identifier. This must be a non-negative value. System-defined identifiers are negative values.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
ERROR_INVALID_ARGUMENT - if called with an negative-valued argument.
since. :
3.7

setImage
public void setImage(Image image)
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed. Note: This operation is a HINT and is not supported on platforms that do not have this concept (for example, Windows NT). Furthermore, some platforms (such as GTK2), cannot display both a check box and an image at the same time. Instead, they hide the image and display the check box. Some platforms (such as GTK3) support images alongside check boxes.
Overrides:
setImage in class Item
Parameters:
image - the image to display on the receiver (may be null)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMenu
public void setMenu(Menu menu)
Sets the receiver's pull down menu to the argument. Only CASCADE menu items can have a pull down menu. The sequence of key strokes, button presses and/or button releases that are used to request a pull down menu is platform specific. Note: Disposing of a menu item that has a pull down menu will dispose of the menu. To avoid this behavior, set the menu to null before the menu item is disposed.
Parameters:
menu - the new pull down menu
Throws:
java.lang.IllegalArgumentException -
ERROR_MENU_NOT_DROP_DOWN - if the menu is not a drop down menu
ERROR_MENUITEM_NOT_CASCADE - if the menu item is not a CASCADE
ERROR_INVALID_ARGUMENT - if the menu has been disposed
ERROR_INVALID_PARENT - if the menu is not in the same widget tree
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setSelection
public void setSelection(boolean selected)
Sets the selection state of the receiver. When the receiver is of type CHECK or RADIO, it is selected when it is checked.
Parameters:
selected - the new selection state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setText
public void setText(java.lang.String string)
Sets the receiver's text. The string may include the mnemonic character and accelerator text. Mnemonics are indicated by an '&' that causes the next character to be the mnemonic. When the user presses a key sequence that matches the mnemonic, a selection event occurs. On most platforms, the mnemonic appears underlined but may be emphasised in a platform specific manner. The mnemonic indicator character '&' can be escaped by doubling it in the string, causing a single '&' to be displayed.
Accelerator text is indicated by the '\t' character. On platforms that support accelerator text, the text that follows the '\t' character is displayed to the user, typically indicating the key stroke that will cause the item to become selected. On most platforms, the accelerator text appears right aligned in the menu. Setting the accelerator text does not install the accelerator key sequence. The accelerator key sequence is installed using #setAccelerator.
Overrides:
setText in class Item
Parameters:
string - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setAccelerator(int)

setToolTipText
public void setToolTipText(java.lang.String toolTip)
Sets the receiver's tool tip text to the argument, which may be null indicating that the default tool tip for the control will be shown. For a menu item that has a default tool tip, setting the tool tip text to an empty string replaces the default, causing no tool tip text to be shown. The mnemonic indicator (character '&') is not displayed in a tool tip. To display a single '&' in the tool tip, the character '&' can be escaped by doubling it in the string.
NOTE: Tooltips are currently not shown for top-level menu items in the shell menubar on Windows, Mac, and Ubuntu Unity desktop.
Parameters:
toolTip - the new tool tip text (or null)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.104


org.eclipse.swt.events
Interface MenuListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
All Known Implementing Classes:
MenuAdapter


public interface MenuListener extends SWTEventListener
Classes which implement this interface provide methods that deal with the hiding and showing of menus. After creating an instance of a class that implements this interface it can be added to a menu using the addMenuListener method and removed using the removeMenuListener method. When the menu is hidden or shown, the appropriate method will be invoked.
See Also:
MenuAdapter, MenuEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    menuHidden(MenuEvent e)
Sent when a menu is hidden.
void    menuShown(MenuEvent e)
Sent when a menu is shown.

Method Detail

menuHidden
void menuHidden(MenuEvent e)
Sent when a menu is hidden.
Parameters:
e - an event containing information about the menu operation

menuShown
void menuShown(MenuEvent e)
Sent when a menu is shown.
Parameters:
e - an event containing information about the menu operation


org.eclipse.swt.widgets
Class MessageBox
java.lang.Object
org.eclipse.swt.widgets.Dialog
org.eclipse.swt.widgets.MessageBox


public class MessageBox extends Dialog
Instances of this class are used to inform or warn the user.
Styles:
ICON_ERROR, ICON_INFORMATION, ICON_QUESTION, ICON_WARNING, ICON_WORKING
OK, OK | CANCEL
YES | NO, YES | NO | CANCEL
RETRY | CANCEL
ABORT | RETRY | IGNORE
Events:
(none)
Note: Only one of the styles ICON_ERROR, ICON_INFORMATION, ICON_QUESTION, ICON_WARNING and ICON_WORKING may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
SWT Example: ControlExample, Dialog tab, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
MessageBox(Shell parent)
Constructs a new instance of this class given only its parent.
MessageBox(Shell parent,           int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    getMessage()
Returns the dialog's message, or an empty string if it does not have one.
int open()
Makes the dialog visible and brings it to the front of the display.
void    setMessage(java.lang.String string)
Sets the dialog's message, which is a description of the purpose for which it was opened.

Methods inherited from class org.eclipse.swt.widgets.Dialog
checkSubclass, getParent, getStyle, getText, setText

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

MessageBox
public MessageBox(Shell parent)
Constructs a new instance of this class given only its parent.
Parameters:
parent - a shell which will be the parent of the new instance
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass

MessageBox
public MessageBox(Shell parent,
                  int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a shell which will be the parent of the new instance
style - the style of dialog to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.ICON_ERROR, SWT.ICON_INFORMATION, SWT.ICON_QUESTION, SWT.ICON_WARNING, SWT.ICON_WORKING, SWT.OK, SWT.CANCEL, SWT.YES, SWT.NO, SWT.ABORT, SWT.RETRY, SWT.IGNORE

Method Detail

getMessage
public java.lang.String getMessage()
Returns the dialog's message, or an empty string if it does not have one. The message is a description of the purpose for which the dialog was opened. This message will be visible in the dialog while it is open.
Returns:
the message

open
public int open()
Makes the dialog visible and brings it to the front of the display.
Returns:
the ID of the button that was selected to dismiss the message box (e.g. SWT.OK, SWT.CANCEL, etc.)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the dialog has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the dialog

setMessage
public void setMessage(java.lang.String string)
Sets the dialog's message, which is a description of the purpose for which it was opened. This message will be visible on the dialog while it is open.
Parameters:
string - the message
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null


org.eclipse.swt.events
Class ModifyEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.ModifyEvent
All Implemented Interfaces:
java.io.Serializable


public final class ModifyEvent extends TypedEvent
Instances of this class are sent as a result of text being modified.
See Also:
ModifyListener, Sample code and further information, Serialized Form

Field Summary

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
ModifyEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary

Methods inherited from class org.eclipse.swt.events.TypedEvent
toString

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

ModifyEvent
public ModifyEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information


org.eclipse.swt.events
Interface ModifyListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
Functional Interface:
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.


@FunctionalInterface public interface ModifyListener extends SWTEventListener
Classes which implement this interface provide a method that deals with the events that are generated when text is modified. After creating an instance of a class that implements this interface it can be added to a text widget using the addModifyListener method and removed using the removeModifyListener method. When the text is modified, the modifyText method will be invoked.
See Also:
ModifyEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    modifyText(ModifyEvent e)
Sent when the text is modified.

Method Detail

modifyText
void modifyText(ModifyEvent e)
Sent when the text is modified.
Parameters:
e - an event containing information about the modify


org.eclipse.swt.widgets
Class Monitor
java.lang.Object
org.eclipse.swt.widgets.Monitor


public final class Monitor extends java.lang.Object
Instances of this class are descriptions of monitors.
since. :
3.0
See Also:
Display, Monitor snippets, Sample code and further information

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Rectangle   getBounds()
Returns a rectangle describing the receiver's size and location relative to its device.
Rectangle   getClientArea()
Returns a rectangle which describes the area of the receiver which is capable of displaying data.
int hashCode()
Returns an integer hash code for the receiver.

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, toString, wait, wait, wait

Method Detail

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

getBounds
public Rectangle getBounds()
Returns a rectangle describing the receiver's size and location relative to its device. Note that on multi-monitor systems the origin can be negative.
Returns:
the receiver's bounding rectangle

getClientArea
public Rectangle getClientArea()
Returns a rectangle which describes the area of the receiver which is capable of displaying data.
Returns:
the client area

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
See Also:
equals(Object)


org.eclipse.swt.events
Class MouseAdapter
java.lang.Object
org.eclipse.swt.events.MouseAdapter
All Implemented Interfaces:
java.util.EventListener, MouseListener, SWTEventListener


public abstract class MouseAdapter extends java.lang.Object implements MouseListener
This adapter class provides default implementations for the methods described by the MouseListener interface. Classes that wish to deal with MouseEvents which occur as mouse buttons are pressed and released can extend this class and override only the methods which they are interested in.
See Also:
MouseListener, MouseEvent, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
MouseAdapter()

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    mouseDoubleClick(MouseEvent e)
Sent when a mouse button is pressed twice within the (operating system specified) double click period.
void    mouseDown(MouseEvent e)
Sent when a mouse button is pressed.
void    mouseUp(MouseEvent e)
Sent when a mouse button is released.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

MouseAdapter
public MouseAdapter()

Method Detail

mouseDoubleClick
public void mouseDoubleClick(MouseEvent e)
Sent when a mouse button is pressed twice within the (operating system specified) double click period. The default behavior is to do nothing.
Specified by:
mouseDoubleClick in interface MouseListener
Parameters:
e - an event containing information about the mouse double click
See Also:
Display.getDoubleClickTime()

mouseDown
public void mouseDown(MouseEvent e)
Sent when a mouse button is pressed. The default behavior is to do nothing.
Specified by:
mouseDown in interface MouseListener
Parameters:
e - an event containing information about the mouse button press

mouseUp
public void mouseUp(MouseEvent e)
Sent when a mouse button is released. The default behavior is to do nothing.
Specified by:
mouseUp in interface MouseListener
Parameters:
e - an event containing information about the mouse button release


org.eclipse.swt.events
Class MouseEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.MouseEvent
All Implemented Interfaces:
java.io.Serializable
Direct Known Subclasses:
DragDetectEvent


public class MouseEvent extends TypedEvent
Instances of this class are sent whenever mouse related actions occur. This includes mouse buttons being pressed and released, the mouse pointer being moved and the mouse pointer crossing widget boundaries. Note: The button field is an integer that represents the mouse button number. This is not the same as the SWT mask constants BUTTONx.
See Also:
MouseListener, MouseMoveListener, MouseTrackListener, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
int button
the button that was pressed or released; 1 for the first button (usually 'left') 2 for the second button (usually 'middle') 3 for the third button (usually 'right') etc.
int count
the number times the mouse has been clicked, as defined by the operating system; 1 for the first click, 2 for the second click and so on.
int stateMask
the state of the keyboard modifier keys and mouse masks at the time the event was generated.
int x
the widget-relative, x coordinate of the pointer at the time the mouse button was pressed or released
int y
the widget-relative, y coordinate of the pointer at the time the mouse button was pressed or released

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
MouseEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
 ### Field Detail
 #### button
public int button
the button that was pressed or released; - 1 for the first button (usually 'left') - 2 for the second button (usually 'middle') - 3 for the third button (usually 'right') - etc.
 - #### stateMask
    public int stateMask

<div class="block">

the state of the keyboard modifier keys and mouse masks at the time
the event was generated.

</div>

<span class="seeLabel">See Also:</span>
:   [`SWT.MODIFIER_MASK`](../../../../org/eclipse/swt/SWT.html#MODIFIER_MASK),
    [`SWT.BUTTON_MASK`](../../../../org/eclipse/swt/SWT.html#BUTTON_MASK)
 - #### x
    public int x

<div class="block">

the widget-relative, x coordinate of the pointer at the time the
mouse button was pressed or released

</div>
 - #### y
    public int y

<div class="block">

the widget-relative, y coordinate of the pointer at the time the
mouse button was pressed or released

</div>
 - #### count
    public int count

<div class="block">

the number times the mouse has been clicked, as defined by the
operating system; 1 for the first click, 2 for the second click and
so on.

</div>

<span class="simpleTagLabel">since. :</span>
:   3.3

Constructor Detail

MouseEvent
public MouseEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class TypedEvent
Returns:
a string representation of the event


org.eclipse.swt.events
Interface MouseListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
All Known Implementing Classes:
MouseAdapter


public interface MouseListener extends SWTEventListener
Classes which implement this interface provide methods that deal with the events that are generated as mouse buttons are pressed. After creating an instance of a class that implements this interface it can be added to a control using the addMouseListener method and removed using the removeMouseListener method. When a mouse button is pressed or released, the appropriate method will be invoked.
See Also:
MouseAdapter, MouseEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    mouseDoubleClick(MouseEvent e)
Sent when a mouse button is pressed twice within the (operating system specified) double click period.
void    mouseDown(MouseEvent e)
Sent when a mouse button is pressed.
void    mouseUp(MouseEvent e)
Sent when a mouse button is released.

Method Detail

mouseDoubleClick
void mouseDoubleClick(MouseEvent e)
Sent when a mouse button is pressed twice within the (operating system specified) double click period.
Parameters:
e - an event containing information about the mouse double click
See Also:
Display.getDoubleClickTime()

mouseDown
void mouseDown(MouseEvent e)
Sent when a mouse button is pressed.
Parameters:
e - an event containing information about the mouse button press

mouseUp
void mouseUp(MouseEvent e)
Sent when a mouse button is released.
Parameters:
e - an event containing information about the mouse button release


org.eclipse.swt.events
Interface MouseMoveListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
Functional Interface:
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.


@FunctionalInterface public interface MouseMoveListener extends SWTEventListener
Classes which implement this interface provide a method that deals with the events that are generated as the mouse pointer moves. After creating an instance of a class that implements this interface it can be added to a control using the addMouseMoveListener method and removed using the removeMouseMoveListener method. As the mouse moves, the mouseMove method will be invoked.
See Also:
MouseEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    mouseMove(MouseEvent e)
Sent when the mouse moves.

Method Detail

mouseMove
void mouseMove(MouseEvent e)
Sent when the mouse moves.
Parameters:
e - an event containing information about the mouse move


org.eclipse.swt.events
Class MouseTrackAdapter
java.lang.Object
org.eclipse.swt.events.MouseTrackAdapter
All Implemented Interfaces:
java.util.EventListener, MouseTrackListener, SWTEventListener


public abstract class MouseTrackAdapter extends java.lang.Object implements MouseTrackListener
This adapter class provides default implementations for the methods described by the MouseTrackListener interface. Classes that wish to deal with MouseEvents which occur as the mouse pointer passes (or hovers) over controls can extend this class and override only the methods which they are interested in.
See Also:
MouseTrackListener, MouseEvent, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
MouseTrackAdapter()

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    mouseEnter(MouseEvent e)
Sent when the mouse pointer passes into the area of the screen covered by a control.
void    mouseExit(MouseEvent e)
Sent when the mouse pointer passes out of the area of the screen covered by a control.
void    mouseHover(MouseEvent e)
Sent when the mouse pointer hovers (that is, stops moving for an (operating system specified) period of time) over a control.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

MouseTrackAdapter
public MouseTrackAdapter()

Method Detail

mouseEnter
public void mouseEnter(MouseEvent e)
Sent when the mouse pointer passes into the area of the screen covered by a control. The default behavior is to do nothing.
Specified by:
mouseEnter in interface MouseTrackListener
Parameters:
e - an event containing information about the mouse enter

mouseExit
public void mouseExit(MouseEvent e)
Sent when the mouse pointer passes out of the area of the screen covered by a control. The default behavior is to do nothing.
Specified by:
mouseExit in interface MouseTrackListener
Parameters:
e - an event containing information about the mouse exit

mouseHover
public void mouseHover(MouseEvent e)
Sent when the mouse pointer hovers (that is, stops moving for an (operating system specified) period of time) over a control. The default behavior is to do nothing.
Specified by:
mouseHover in interface MouseTrackListener
Parameters:
e - an event containing information about the hover


org.eclipse.swt.events
Interface MouseTrackListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
All Known Implementing Classes:
MouseTrackAdapter


public interface MouseTrackListener extends SWTEventListener
Classes which implement this interface provide methods that deal with the events that are generated as the mouse pointer passes (or hovers) over controls. After creating an instance of a class that implements this interface it can be added to a control using the addMouseTrackListener method and removed using the removeMouseTrackListener method. When the mouse pointer passes into or out of the area of the screen covered by a control or pauses while over a control, the appropriate method will be invoked.
See Also:
MouseTrackAdapter, MouseEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    mouseEnter(MouseEvent e)
Sent when the mouse pointer passes into the area of the screen covered by a control.
void    mouseExit(MouseEvent e)
Sent when the mouse pointer passes out of the area of the screen covered by a control.
void    mouseHover(MouseEvent e)
Sent when the mouse pointer hovers (that is, stops moving for an (operating system specified) period of time) over a control.

Method Detail

mouseEnter
void mouseEnter(MouseEvent e)
Sent when the mouse pointer passes into the area of the screen covered by a control.
Parameters:
e - an event containing information about the mouse enter

mouseExit
void mouseExit(MouseEvent e)
Sent when the mouse pointer passes out of the area of the screen covered by a control.
Parameters:
e - an event containing information about the mouse exit

mouseHover
void mouseHover(MouseEvent e)
Sent when the mouse pointer hovers (that is, stops moving for an (operating system specified) period of time) over a control.
Parameters:
e - an event containing information about the hover


org.eclipse.swt.events
Interface MouseWheelListener
All Superinterfaces:
java.util.EventListener, SWTEventListener


public interface MouseWheelListener extends SWTEventListener
Classes which implement this interface provide a method that deals with the event that is generated as the mouse wheel is scrolled. After creating an instance of a class that implements this interface it can be added to a control using the addMouseWheelListener method and removed using the removeMouseWheelListener method. When the mouse wheel is scrolled the mouseScrolled method will be invoked.
since. :
3.3
See Also:
MouseEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    mouseScrolled(MouseEvent e)
Sent when the mouse wheel is scrolled.

Method Detail

mouseScrolled
void mouseScrolled(MouseEvent e)
Sent when the mouse wheel is scrolled.
Parameters:
e - an event containing information about the mouse wheel action


org.eclipse.swt.internal.image
Class OS2BMPFileFormat
java.lang.Object
org.eclipse.swt.internal.image.FileFormat
org.eclipse.swt.internal.image.OS2BMPFileFormat


public final class OS2BMPFileFormat extends FileFormat

Constructor Summary
Constructors

Constructor and Description
OS2BMPFileFormat()

Method Summary

Methods inherited from class org.eclipse.swt.internal.image.FileFormat
load, loadFromStream, save, unloadIntoStream

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

OS2BMPFileFormat
public OS2BMPFileFormat()


org.eclipse.swt.events
Class PaintEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.PaintEvent
All Implemented Interfaces:
java.io.Serializable


public final class PaintEvent extends TypedEvent
Instances of this class are sent as a result of visible areas of controls requiring re-painting.
See Also:
PaintListener, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
int count
the number of following paint events which are pending which may always be zero on some platforms
GC  gc
the graphics context to use when painting that is configured to use the colors, font and damaged region of the control.
int height
the height of the bounding rectangle of the region that requires painting
int width
the width of the bounding rectangle of the region that requires painting
int x
the x offset of the bounding rectangle of the region that requires painting
int y
the y offset of the bounding rectangle of the region that requires painting

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
PaintEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

gc
public GC gc
the graphics context to use when painting that is configured to use the colors, font and damaged region of the control. It is valid only during the paint and must not be disposed

x
public int x
the x offset of the bounding rectangle of the region that requires painting

y
public int y
the y offset of the bounding rectangle of the region that requires painting

width
public int width
the width of the bounding rectangle of the region that requires painting

height
public int height
the height of the bounding rectangle of the region that requires painting

count
public int count
the number of following paint events which are pending which may always be zero on some platforms

Constructor Detail

PaintEvent
public PaintEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class TypedEvent
Returns:
a string representation of the event


org.eclipse.swt.events
Interface PaintListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
Functional Interface:
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.


@FunctionalInterface public interface PaintListener extends SWTEventListener
Classes which implement this interface provide methods that deal with the events that are generated when the control needs to be painted. After creating an instance of a class that implements this interface it can be added to a control using the addPaintListener method and removed using the removePaintListener method. When a paint event occurs, the paintControl method will be invoked.
See Also:
PaintEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    paintControl(PaintEvent e)
Sent when a paint event occurs for the control.

Method Detail

paintControl
void paintControl(PaintEvent e)
Sent when a paint event occurs for the control.
Parameters:
e - an event containing information about the paint


org.eclipse.swt.graphics
Class PaletteData
java.lang.Object
org.eclipse.swt.graphics.PaletteData


public final class PaletteData extends java.lang.Object
Instances of this class describe the color data used by an image. Depending on the depth of the image, the PaletteData can take one of two forms, indicated by the isDirect field:
isDirect is false
If isDirect is false, this palette is an indexed palette which maps pixel values to RGBs. The actual RGB values may be retrieved by using the getRGBs() method.
isDirect is true
If isDirect is true, this palette is a direct color palette. Instead of containing RGB values, it contains red, green and blue mask and shift information which indicates how the color components may be extracted from a given pixel. This means that the RGB value is actually encoded in the pixel value.
In this case, the shift data is the number of bits required to shift the RGB value to the left in order to align the high bit of the corresponding mask with the high bit of the first byte. This number may be negative, so care must be taken when shifting. For example, with a red mask of 0xFF0000, the red shift would be -16. With a red mask of 0x1F, the red shift would be 3.
See Also:
Image, RGB, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
int blueMask
the blue mask for a direct palette
int blueShift
the blue shift for a direct palette
RGB[]   colors
the RGB values for an indexed palette, where the indices of the array correspond to pixel values
int greenMask
the green mask for a direct palette
int greenShift
the green shift for a direct palette
boolean isDirect
true if the receiver is a direct palette, and false otherwise
int redMask
the red mask for a direct palette
int redShift
the red shift for a direct palette

Constructor Summary
Constructors

Constructor and Description
PaletteData(int redMask,            int greenMask,            int blueM ask)
Constructs a new direct palette given the red, green and blue masks.
PaletteData(RGB... colors)
Constructs a new indexed palette given an array of RGB values.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
int getPixel(RGB rgb)
Returns the pixel value corresponding to the given RGB.
RGB getRGB(int pixel)
Returns an RGB corresponding to the given pixel value.
RGB[]   getRGBs()
Returns all the RGB values in the receiver if it is an indexed palette, or null if it is a direct palette.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Field Detail

isDirect
public boolean isDirect
true if the receiver is a direct palette, and false otherwise

colors
public RGB[] colors
the RGB values for an indexed palette, where the indices of the array correspond to pixel values

redMask
public int redMask
the red mask for a direct palette

greenMask
public int greenMask
the green mask for a direct palette

blueMask
public int blueMask
the blue mask for a direct palette

redShift
public int redShift
the red shift for a direct palette

greenShift
public int greenShift
the green shift for a direct palette

blueShift
public int blueShift
the blue shift for a direct palette

Constructor Detail

PaletteData
public PaletteData(RGB... colors)
Constructs a new indexed palette given an array of RGB values.
Parameters:
colors - the array of RGBs for the palette
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null

PaletteData
public PaletteData(int redMask,
                   int greenMask,
                   int blueMask)
Constructs a new direct palette given the red, green and blue masks.
Parameters:
redMask - the red mask
greenMask - the green mask
blueMask - the blue mask

Method Detail

getPixel
public int getPixel(RGB rgb)
Returns the pixel value corresponding to the given RGB.
Parameters:
rgb - the RGB to get the pixel value for
Returns:
the pixel value for the given RGB
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
ERROR_INVALID_ARGUMENT - if the RGB is not found in the palette

getRGB
public RGB getRGB(int pixel)
Returns an RGB corresponding to the given pixel value.
Parameters:
pixel - the pixel to get the RGB value for
Returns:
the RGB value for the given pixel
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
ERROR_INVALID_ARGUMENT - if the pixel does not exist in the palette

getRGBs
public RGB[] getRGBs()
Returns all the RGB values in the receiver if it is an indexed palette, or null if it is a direct palette.
Returns:
the RGBs for the receiver or null


org.eclipse.swt.graphics
Class Path
java.lang.Object
org.eclipse.swt.graphics.Resource
org.eclipse.swt.graphics.Path


public class Path extends Resource
Instances of this class represent paths through the two-dimensional coordinate system. Paths do not have to be continuous, and can be described using lines, rectangles, arcs, cubic or quadratic bezier curves, glyphs, or other paths. Application code must explicitly invoke the Path.dispose() method to release the operating system resources managed by each instance when those instances are no longer required.
This class requires the operating system's advanced graphics subsystem which may not be available on some platforms.
since. :
3.1
See Also:
Path, Pattern snippets, SWT Example: GraphicsExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
long    handle
the OS resource for the Path (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.

Constructor Summary
Constructors

Constructor and Description
Path(Device device)
Constructs a new empty Path.
Path(Device device,     PathData data)
Constructs a new Path with the specified PathData.
Path(Device device,     Path path,     float flatness)
Constructs a new Path that is a copy of path.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addArc(float x,       float y,   float width,       float height,      float startAngle,       float a rcAngle)
Adds to the receiver a circular or elliptical arc that lies within the specified rectangular area.
void    addPath(Path path)
Adds to the receiver the path described by the parameter.
void    addRectangle(float x,             f loat y,             float width,          float height)
Adds to the receiver the rectangle specified by x, y, width and height.
void    addString(java.lang.String string,          float x,          float y,          Font font)
Adds to the receiver the pattern of glyphs generated by drawing the given string using the given font starting at the point (x, y).
void    close()
Closes the current sub path by adding to the receiver a line from the current point of the path back to the starting point of the sub path.
boolean contains(float x,         float y,         GC gc,         boolean outli ne)
Returns true if the specified point is contained by the receiver and false otherwise.
void    cubicTo(float cx1,        float cy1 ,        float cx2,        float cy2 ,        float x,        float y)
Adds to the receiver a cubic bezier curve based on the parameters.
void    getBounds(float[] bounds)
Replaces the first four elements in the parameter with values that describe the smallest rectangle that will completely contain the receiver (i.e. the bounding box).
void    getCurrentPoint(float[] point)
Replaces the first two elements in the parameter with values that describe the current point of the path.
PathData    getPathData()
Returns a device independent representation of the receiver.
boolean isDisposed()
Returns true if the Path has been disposed, and false otherwise.
void    lineTo(float x,       float y)
Adds to the receiver a line from the current point to the point specified by (x, y).
void    moveTo(float x,       float y)
Sets the current point of the receiver to the point specified by (x, y).
void    quadTo(float cx,       float cy,     float x,       float y)
Adds to the receiver a quadratic curve based on the parameters.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class org.eclipse.swt.graphics.Resource
dispose, getDevice

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

handle
public long handle
the OS resource for the Path (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

Constructor Detail

Path
public Path(Device device)
Constructs a new empty Path. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
You must dispose the path when it is no longer required.
Parameters:
device - the device on which to allocate the path
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the device is null and there is no current device
SWTException -
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
SWTError -
ERROR_NO_HANDLES if a handle for the path could not be obtained
See Also:
Resource.dispose()

Path
public Path(Device device,
            Path path,
            float flatness)
Constructs a new Path that is a copy of path. If flatness is less than or equal to zero, an unflatten copy of the path is created. Otherwise, it specifies the maximum error between the path and its flatten copy. Smaller numbers give better approximation. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
You must dispose the path when it is no longer required.
Parameters:
device - the device on which to allocate the path
path - the path to make a copy
flatness - the flatness value
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the device is null and there is no current device
ERROR_NULL_ARGUMENT - if the path is null
ERROR_INVALID_ARGUMENT - if the path has been disposed
SWTException -
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
SWTError -
ERROR_NO_HANDLES if a handle for the path could not be obtained
since. :
3.4
See Also:
Resource.dispose()

Path
public Path(Device device,
            PathData data)
Constructs a new Path with the specified PathData. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
You must dispose the path when it is no longer required.
Parameters:
device - the device on which to allocate the path
data - the data for the path
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the device is null and there is no current device
ERROR_NULL_ARGUMENT - if the data is null
SWTException -
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
SWTError -
ERROR_NO_HANDLES if a handle for the path could not be obtained
since. :
3.4
See Also:
Resource.dispose()

Method Detail

addArc
public void addArc(float x,
                   float y,
                   float width,
                   float height,
                   float startAngle,
                   float arcAngle)
Adds to the receiver a circular or elliptical arc that lies within the specified rectangular area. The resulting arc begins at startAngle and extends for arcAngle degrees. Angles are interpreted such that 0 degrees is at the 3 o'clock position. A positive value indicates a counter-clockwise rotation while a negative value indicates a clockwise rotation.
The center of the arc is the center of the rectangle whose origin is (x, y) and whose size is specified by the width and height arguments.
The resulting arc covers an area width + 1 pixels wide by height + 1 pixels tall.
Parameters:
x - the x coordinate of the upper-left corner of the arc
y - the y coordinate of the upper-left corner of the arc
width - the width of the arc
height - the height of the arc
startAngle - the beginning angle
arcAngle - the angular extent of the arc, relative to the start angle
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

addPath
public void addPath(Path path)
Adds to the receiver the path described by the parameter.
Parameters:
path - the path to add to the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parameter is null
ERROR_INVALID_ARGUMENT - if the parameter has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

addRectangle
public void addRectangle(float x,
                         float y,
                         float width,
                         float height)
Adds to the receiver the rectangle specified by x, y, width and height.
Parameters:
x - the x coordinate of the rectangle to add
y - the y coordinate of the rectangle to add
width - the width of the rectangle to add
height - the height of the rectangle to add
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

addString
public void addString(java.lang.String string,
                      float x,
                      float y,
                      Font font)
Adds to the receiver the pattern of glyphs generated by drawing the given string using the given font starting at the point (x, y).
Parameters:
string - the text to use
x - the x coordinate of the starting point
y - the y coordinate of the starting point
font - the font to use
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the font is null
ERROR_INVALID_ARGUMENT - if the font has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

close
public void close()
Closes the current sub path by adding to the receiver a line from the current point of the path back to the starting point of the sub path.
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

contains
public boolean contains(float x,
                        float y,
                        GC gc,
                        boolean outline)
Returns true if the specified point is contained by the receiver and false otherwise. If outline is true, the point (x, y) checked for containment in the receiver's outline. If outline is false, the point is checked to see if it is contained within the bounds of the (closed) area covered by the receiver.
Parameters:
x - the x coordinate of the point to test for containment
y - the y coordinate of the point to test for containment
gc - the GC to use when testing for containment
outline - controls whether to check the outline or contained area of the path
Returns:
true if the path contains the point and false otherwise
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the gc is null
ERROR_INVALID_ARGUMENT - if the gc has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

cubicTo
public void cubicTo(float cx1,
                    float cy1,
                    float cx2,
                    float cy2,
                    float x,
                    float y)
Adds to the receiver a cubic bezier curve based on the parameters.
Parameters:
cx1 - the x coordinate of the first control point of the spline
cy1 - the y coordinate of the first control of the spline
cx2 - the x coordinate of the second control of the spline
cy2 - the y coordinate of the second control of the spline
x - the x coordinate of the end point of the spline
y - the y coordinate of the end point of the spline
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getBounds
public void getBounds(float[] bounds)
Replaces the first four elements in the parameter with values that describe the smallest rectangle that will completely contain the receiver (i.e. the bounding box).
Parameters:
bounds - the array to hold the result
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parameter is null
ERROR_INVALID_ARGUMENT - if the parameter is too small to hold the bounding box
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getCurrentPoint
public void getCurrentPoint(float[] point)
Replaces the first two elements in the parameter with values that describe the current point of the path.
Parameters:
point - the array to hold the result
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parameter is null
ERROR_INVALID_ARGUMENT - if the parameter is too small to hold the end point
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getPathData
public PathData getPathData()
Returns a device independent representation of the receiver.
Returns:
the PathData for the receiver
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
PathData

lineTo
public void lineTo(float x,
                   float y)
Adds to the receiver a line from the current point to the point specified by (x, y).
Parameters:
x - the x coordinate of the end of the line to add
y - the y coordinate of the end of the line to add
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

isDisposed
public boolean isDisposed()
Returns true if the Path has been disposed, and false otherwise. This method gets the dispose state for the Path. When a Path has been disposed, it is an error to invoke any other method (except Resource.dispose()) using the Path.
Specified by:
isDisposed in class Resource
Returns:
true when the Path is disposed, and false otherwise

moveTo
public void moveTo(float x,
                   float y)
Sets the current point of the receiver to the point specified by (x, y). Note that this starts a new sub path.
Parameters:
x - the x coordinate of the new end point
y - the y coordinate of the new end point
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

quadTo
public void quadTo(float cx,
                   float cy,
                   float x,
                   float y)
Adds to the receiver a quadratic curve based on the parameters.
Parameters:
cx - the x coordinate of the control point of the spline
cy - the y coordinate of the control point of the spline
x - the x coordinate of the end point of the spline
y - the y coordinate of the end point of the spline
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the receiver


org.eclipse.swt.graphics
Class PathData
java.lang.Object
org.eclipse.swt.graphics.PathData


public final class PathData extends java.lang.Object
Instances of this class describe device-independent paths.
since. :
3.1
See Also:
Path, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
float[] points
The points of a path.
byte[]  types
The type of each point.

Constructor Summary
Constructors

Constructor and Description
PathData()

Method Summary

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Field Detail

types
public byte[] types
The type of each point.

points
public float[] points
The points of a path.

Constructor Detail

PathData
public PathData()


org.eclipse.swt.graphics
Class Pattern
java.lang.Object
org.eclipse.swt.graphics.Resource
org.eclipse.swt.graphics.Pattern


public class Pattern extends Resource
Instances of this class represent patterns to use while drawing. Patterns can be specified either as bitmaps or gradients. Application code must explicitly invoke the Pattern.dispose() method to release the operating system resources managed by each instance when those instances are no longer required.
This class requires the operating system's advanced graphics subsystem which may not be available on some platforms.
since. :
3.1
See Also:
Path, Pattern snippets, SWT Example: GraphicsExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
long    handle
the OS resource for the Pattern (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.

Constructor Summary
Constructors

Constructor and Description
Pattern(Device device,        float x1,        float y1,        float x 2,        float y2,        Color color1,        Color color2)
Constructs a new Pattern that represents a linear, two color gradient.
Pattern(Device device,        float x1,        float y1,        float x 2,        float y2,        Color color1,        int alpha1,        Color  color2,        int alpha2)
Constructs a new Pattern that represents a linear, two color gradient.
Pattern(Device device,        Image image)
Constructs a new Pattern given an image.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
boolean isDisposed()
Returns true if the Pattern has been disposed, and false otherwise.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class org.eclipse.swt.graphics.Resource
dispose, getDevice

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

handle
public long handle
the OS resource for the Pattern (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

Constructor Detail

Pattern
public Pattern(Device device,
               Image image)
Constructs a new Pattern given an image. Drawing with the resulting pattern will cause the image to be tiled over the resulting area. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
You must dispose the pattern when it is no longer required.
Parameters:
device - the device on which to allocate the pattern
image - the image that the pattern will draw
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the device is null and there is no current device, or the image is null
ERROR_INVALID_ARGUMENT - if the image has been disposed
SWTException -
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
SWTError -
ERROR_NO_HANDLES if a handle for the pattern could not be obtained
See Also:
Resource.dispose()

Pattern
public Pattern(Device device,
               float x1,
               float y1,
               float x2,
               float y2,
               Color color1,
               Color color2)
Constructs a new Pattern that represents a linear, two color gradient. Drawing with the pattern will cause the resulting area to be tiled with the gradient specified by the arguments. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
You must dispose the pattern when it is no longer required.
Parameters:
device - the device on which to allocate the pattern
x1 - the x coordinate of the starting corner of the gradient
y1 - the y coordinate of the starting corner of the gradient
x2 - the x coordinate of the ending corner of the gradient
y2 - the y coordinate of the ending corner of the gradient
color1 - the starting color of the gradient
color2 - the ending color of the gradient
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the device is null and there is no current device, or if either color1 or color2 is null
ERROR_INVALID_ARGUMENT - if either color1 or color2 has been disposed
SWTException -
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
SWTError -
ERROR_NO_HANDLES if a handle for the pattern could not be obtained
See Also:
Resource.dispose()

Pattern
public Pattern(Device device,
               float x1,
               float y1,
               float x2,
               float y2,
               Color color1,
               int alpha1,
               Color color2,
               int alpha2)
Constructs a new Pattern that represents a linear, two color gradient. Drawing with the pattern will cause the resulting area to be tiled with the gradient specified by the arguments. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
You must dispose the pattern when it is no longer required.
Parameters:
device - the device on which to allocate the pattern
x1 - the x coordinate of the starting corner of the gradient
y1 - the y coordinate of the starting corner of the gradient
x2 - the x coordinate of the ending corner of the gradient
y2 - the y coordinate of the ending corner of the gradient
color1 - the starting color of the gradient
alpha1 - the starting alpha value of the gradient
color2 - the ending color of the gradient
alpha2 - the ending alpha value of the gradient
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the device is null and there is no current device, or if either color1 or color2 is null
ERROR_INVALID_ARGUMENT - if either color1 or color2 has been disposed
SWTException -
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
SWTError -
ERROR_NO_HANDLES if a handle for the pattern could not be obtained
since. :
3.2
See Also:
Resource.dispose()

Method Detail

isDisposed
public boolean isDisposed()
Returns true if the Pattern has been disposed, and false otherwise. This method gets the dispose state for the Pattern. When a Pattern has been disposed, it is an error to invoke any other method (except Resource.dispose()) using the Pattern.
Specified by:
isDisposed in class Resource
Returns:
true when the Pattern is disposed, and false otherwise

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the receiver


org.eclipse.swt.internal.image
Class PngChunkReader
java.lang.Object
org.eclipse.swt.internal.image.PngChunkReader


public class PngChunkReader extends java.lang.Object

Method Summary

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait


org.eclipse.swt.internal.image
Class PngDecodingDataStream
java.lang.Object
java.io.InputStream
org.eclipse.swt.internal.image.PngDecodingDataStream
All Implemented Interfaces:
java.io.Closeable, java.lang.AutoCloseable


public class PngDecodingDataStream extends java.io.InputStream

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    close()
int read()
int read(byte[] buffer,     int off,     int len)

Methods inherited from class java.io.InputStream
available, mark, markSupported, read, reset, skip

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Method Detail

close
public void close()
           throws java.io.IOException
Specified by:
close in interface java.io.Closeable
Specified by:
close in interface java.lang.AutoCloseable
Overrides:
close in class java.io.InputStream
Throws:
java.io.IOException

read
public int read()
         throws java.io.IOException
Specified by:
read in class java.io.InputStream
Throws:
java.io.IOException

read
public int read(byte[] buffer,
                int off,
                int len)
         throws java.io.IOException
Overrides:
read in class java.io.InputStream
Throws:
java.io.IOException


org.eclipse.swt.internal.image
Class PngDeflater
java.lang.Object
org.eclipse.swt.internal.image.PngDeflater


public class PngDeflater extends java.lang.Object

Constructor Summary
Constructors

Constructor and Description
PngDeflater()

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
byte[]  deflate(byte[] input)

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

PngDeflater
public PngDeflater()

Method Detail

deflate
public byte[] deflate(byte[] input)


org.eclipse.swt.internal.image
Class PNGFileFormat
java.lang.Object
org.eclipse.swt.internal.image.FileFormat
org.eclipse.swt.internal.image.PNGFileFormat


public final class PNGFileFormat extends FileFormat

Constructor Summary
Constructors

Constructor and Description
PNGFileFormat()

Method Summary

Methods inherited from class org.eclipse.swt.internal.image.FileFormat
load, loadFromStream, save, unloadIntoStream

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

PNGFileFormat
public PNGFileFormat()


org.eclipse.swt.internal.image
Class PngHuffmanTable
java.lang.Object
org.eclipse.swt.internal.image.PngHuffmanTable


public class PngHuffmanTable extends java.lang.Object

Method Summary

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait


org.eclipse.swt.internal.image
Class PngHuffmanTables
java.lang.Object
org.eclipse.swt.internal.image.PngHuffmanTables


public class PngHuffmanTables extends java.lang.Object

Method Summary

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait


org.eclipse.swt.internal.image
Class PngInputStream
java.lang.Object
java.io.InputStream
org.eclipse.swt.internal.image.PngInputStream
All Implemented Interfaces:
java.io.Closeable, java.lang.AutoCloseable


public class PngInputStream extends java.io.InputStream

Constructor Summary
Constructors

Constructor and Description
PngInputStream(org.eclipse.swt.internal.image.PngIdatChunk chunk,               PngChunkReader reader)

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    close()
int read()
int read(byte[] b,     int off,     int len)

Methods inherited from class java.io.InputStream
available, mark, markSupported, read, reset, skip

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

PngInputStream
public PngInputStream(org.eclipse.swt.internal.image.PngIdatChunk chunk,
                      PngChunkReader reader)

Method Detail

close
public void close()
           throws java.io.IOException
Specified by:
close in interface java.io.Closeable
Specified by:
close in interface java.lang.AutoCloseable
Overrides:
close in class java.io.InputStream
Throws:
java.io.IOException

read
public int read()
         throws java.io.IOException
Specified by:
read in class java.io.InputStream
Throws:
java.io.IOException

read
public int read(byte[] b,
                int off,
                int len)
         throws java.io.IOException
Overrides:
read in class java.io.InputStream
Throws:
java.io.IOException


org.eclipse.swt.internal.image
Class PngLzBlockReader
java.lang.Object
org.eclipse.swt.internal.image.PngLzBlockReader


public class PngLzBlockReader extends java.lang.Object

Method Summary

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait


org.eclipse.swt.internal.image
Class PngTrnsChunk
java.lang.Object
org.eclipse.swt.internal.image.PngTrnsChunk


public class PngTrnsChunk extends java.lang.Object

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the event


org.eclipse.swt.graphics
Class Point
java.lang.Object
org.eclipse.swt.graphics.Point
All Implemented Interfaces:
java.io.Serializable


public final class Point extends java.lang.Object implements java.io.Serializable
Instances of this class represent places on the (x, y) coordinate plane. The coordinate space for rectangles and points is considered to have increasing values downward and to the right from its origin making this the normal, computer graphics oriented notion of (x, y) coordinates rather than the strict mathematical one.
The hashCode() method in this class uses the values of the public fields to compute the hash value. When storing instances of the class in hashed collections, do not modify these fields after the object has been inserted.
Application code does not need to explicitly release the resources managed by each instance when those instances are no longer required, and thus no dispose() method is provided.
See Also:
Rectangle, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
int x
the x coordinate of the point
int y
the y coordinate of the point

Constructor Summary
Constructors

Constructor and Description
Point(int x,      int y)
Constructs a new point with the given x and y coordinates.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
int hashCode()
Returns an integer hash code for the receiver.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait

Field Detail

x
public int x
the x coordinate of the point

y
public int y
the y coordinate of the point

Constructor Detail

Point
public Point(int x,
             int y)
Constructs a new point with the given x and y coordinates.
Parameters:
x - the x coordinate of the new point
y - the y coordinate of the new point

Method Detail

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
See Also:
equals(Object)

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the point


org.eclipse.swt.widgets
Class ProgressBar
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.ProgressBar
All Implemented Interfaces:
Drawable


public class ProgressBar extends Control
Instances of the receiver represent an unselectable user interface object that is used to display progress, typically in the form of a bar.
Styles:
SMOOTH, HORIZONTAL, VERTICAL, INDETERMINATE
Events:
(none)
Note: Only one of the styles HORIZONTAL and VERTICAL may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
ProgressBar snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
ProgressBar(Composite parent,            int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
int getMaximum()
Returns the maximum value which the receiver will allow.
int getMinimum()
Returns the minimum value which the receiver will allow.
int getSelection()
Returns the single 'selection' that is the receiver's position.
int getState()
Returns the state of the receiver.
void    setMaximum(int value)
Sets the maximum value that the receiver will allow.
void    setMinimum(int value)
Sets the minimum value that the receiver will allow.
void    setSelection(int value)
Sets the single 'selection' that is the receiver's position to the argument which must be greater than or equal to zero.
void    setState(int state)
Sets the state of the receiver.

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setFocus, setFont, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

ProgressBar
public ProgressBar(Composite parent,
                   int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.SMOOTH, SWT.HORIZONTAL, SWT.VERTICAL, SWT.INDETERMINATE, Widget.checkSubclass(), Widget.getStyle()

Method Detail

getMaximum
public int getMaximum()
Returns the maximum value which the receiver will allow.
Returns:
the maximum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMinimum
public int getMinimum()
Returns the minimum value which the receiver will allow.
Returns:
the minimum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelection
public int getSelection()
Returns the single 'selection' that is the receiver's position.
Returns:
the selection
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getState
public int getState()
Returns the state of the receiver. The value will be one of:
SWT.NORMAL
SWT.ERROR
SWT.PAUSED
Returns:
the state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

setMaximum
public void setMaximum(int value)
Sets the maximum value that the receiver will allow. This new value will be ignored if it is not greater than the receiver's current minimum value. If the new maximum is applied then the receiver's selection value will be adjusted if necessary to fall within its new range.
Parameters:
value - the new maximum, which must be greater than the current minimum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMinimum
public void setMinimum(int value)
Sets the minimum value that the receiver will allow. This new value will be ignored if it is negative or is not less than the receiver's current maximum value. If the new minimum is applied then the receiver's selection value will be adjusted if necessary to fall within its new range.
Parameters:
value - the new minimum, which must be nonnegative and less than the current maximum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setSelection
public void setSelection(int value)
Sets the single 'selection' that is the receiver's position to the argument which must be greater than or equal to zero.
Parameters:
value - the new selection (must be zero or greater)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setState
public void setState(int state)
Sets the state of the receiver. The state must be one of these values:
SWT.NORMAL
SWT.ERROR
SWT.PAUSED
Note: This operation is a hint and is not supported on platforms that do not have this concept.
Parameters:
state - the new state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4


org.eclipse.swt.graphics
Class Rectangle
java.lang.Object
org.eclipse.swt.graphics.Rectangle
All Implemented Interfaces:
java.io.Serializable


public final class Rectangle extends java.lang.Object implements java.io.Serializable
Instances of this class represent rectangular areas in an (x, y) coordinate system. The top left corner of the rectangle is specified by its x and y values, and the extent of the rectangle is specified by its width and height. The coordinate space for rectangles and points is considered to have increasing values downward and to the right from its origin making this the normal, computer graphics oriented notion of (x, y) coordinates rather than the strict mathematical one.
The hashCode() method in this class uses the values of the public fields to compute the hash value. When storing instances of the class in hashed collections, do not modify these fields after the object has been inserted.
Application code does not need to explicitly release the resources managed by each instance when those instances are no longer required, and thus no dispose() method is provided.
See Also:
Point, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
int height
the height of the rectangle
int width
the width of the rectangle
int x
the x coordinate of the rectangle
int y
the y coordinate of the rectangle

Constructor Summary
Constructors

Constructor and Description
Rectangle(int x,          int y,          int width,          int heigh t)
Construct a new instance of this class given the x, y, width and height values.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    add(Rectangle rect)
Destructively replaces the x, y, width and height values in the receiver with ones which represent the union of the rectangles specified by the receiver and the given rectangle.
boolean contains(int x,         int y)
Returns true if the point specified by the arguments is inside the area specified by the receiver, and false otherwise.
boolean contains(Point pt)
Returns true if the given point is inside the area specified by the receiver, and false otherwise.
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
int hashCode()
Returns an integer hash code for the receiver.
void    intersect(Rectangle rect)
Destructively replaces the x, y, width and height values in the receiver with ones which represent the intersection of the rectangles specified by the receiver and the given rectangle.
Rectangle   intersection(Rectangle rect)
Returns a new rectangle which represents the intersection of the receiver and the given rectangle.
boolean intersects(int x,           int y,           int width,           int h eight)
Returns true if the rectangle described by the arguments intersects with the receiver and false otherwise.
boolean intersects(Rectangle rect)
Returns true if the given rectangle intersects with the receiver and false otherwise.
boolean isEmpty()
Returns true if the receiver does not cover any area in the (x, y) coordinate plane, and false if the receiver does cover some area in the plane.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.
Rectangle   union(Rectangle rect)
Returns a new rectangle which represents the union of the receiver and the given rectangle.

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait

Field Detail

x
public int x
the x coordinate of the rectangle

y
public int y
the y coordinate of the rectangle

width
public int width
the width of the rectangle

height
public int height
the height of the rectangle

Constructor Detail

Rectangle
public Rectangle(int x,
                 int y,
                 int width,
                 int height)
Construct a new instance of this class given the x, y, width and height values.
Parameters:
x - the x coordinate of the origin of the rectangle
y - the y coordinate of the origin of the rectangle
width - the width of the rectangle
height - the height of the rectangle

Method Detail

add
public void add(Rectangle rect)
Destructively replaces the x, y, width and height values in the receiver with ones which represent the union of the rectangles specified by the receiver and the given rectangle. The union of two rectangles is the smallest single rectangle that completely covers both of the areas covered by the two given rectangles.
Parameters:
rect - the rectangle to merge with the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null

contains
public boolean contains(int x,
                        int y)
Returns true if the point specified by the arguments is inside the area specified by the receiver, and false otherwise.
Parameters:
x - the x coordinate of the point to test for containment
y - the y coordinate of the point to test for containment
Returns:
true if the rectangle contains the point and false otherwise

contains
public boolean contains(Point pt)
Returns true if the given point is inside the area specified by the receiver, and false otherwise.
Parameters:
pt - the point to test for containment
Returns:
true if the rectangle contains the point and false otherwise
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
See Also:
equals(Object)

intersect
public void intersect(Rectangle rect)
Destructively replaces the x, y, width and height values in the receiver with ones which represent the intersection of the rectangles specified by the receiver and the given rectangle.
Parameters:
rect - the rectangle to intersect with the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
since.  3.0

intersection
public Rectangle intersection(Rectangle rect)
Returns a new rectangle which represents the intersection of the receiver and the given rectangle. The intersection of two rectangles is the rectangle that covers the area which is contained within both rectangles.
Parameters:
rect - the rectangle to intersect with the receiver
Returns:
the intersection of the receiver and the argument
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null

intersects
public boolean intersects(int x,
                          int y,
                          int width,
                          int height)
Returns true if the rectangle described by the arguments intersects with the receiver and false otherwise. Two rectangles intersect if the area of the rectangle representing their intersection is not empty.
Parameters:
x - the x coordinate of the origin of the rectangle
y - the y coordinate of the origin of the rectangle
width - the width of the rectangle
height - the height of the rectangle
Returns:
true if the rectangle intersects with the receiver, and false otherwise
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
since. :
3.0
See Also:
intersection(Rectangle), isEmpty()

intersects
public boolean intersects(Rectangle rect)
Returns true if the given rectangle intersects with the receiver and false otherwise. Two rectangles intersect if the area of the rectangle representing their intersection is not empty.
Parameters:
rect - the rectangle to test for intersection
Returns:
true if the rectangle intersects with the receiver, and false otherwise
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
See Also:
intersection(Rectangle), isEmpty()

isEmpty
public boolean isEmpty()
Returns true if the receiver does not cover any area in the (x, y) coordinate plane, and false if the receiver does cover some area in the plane. A rectangle is considered to cover area in the (x, y) coordinate plane if both its width and height are non-zero.
Returns:
true if the receiver is empty, and false otherwise

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the rectangle

union
public Rectangle union(Rectangle rect)
Returns a new rectangle which represents the union of the receiver and the given rectangle. The union of two rectangles is the smallest single rectangle that completely covers both of the areas covered by the two given rectangles.
Parameters:
rect - the rectangle to perform union with
Returns:
the union of the receiver and the argument
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
See Also:
add(Rectangle)


org.eclipse.swt.graphics
Class Region
java.lang.Object
org.eclipse.swt.graphics.Resource
org.eclipse.swt.graphics.Region


public final class Region extends Resource
Instances of this class represent areas of an x-y coordinate system that are aggregates of the areas covered by a number of polygons. Application code must explicitly invoke the Region.dispose() method to release the operating system resources managed by each instance when those instances are no longer required.
See Also:
SWT Example: GraphicsExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
long    handle
the OS resource for the region (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.

Constructor Summary
Constructors

Constructor and Description
Region()
Constructs a new empty region.
Region(Device device)
Constructs a new empty region.

Method Summary
All Methods Static Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    add(int[] pointArray)
Adds the given polygon to the collection of polygons the receiver maintains to describe its area.
void    add(int x,    int y,    int width,    int height)
Adds the given rectangle to the collection of polygons the receiver maintains to describe its area.
void    add(Rectangle rect)
Adds the given rectangle to the collection of polygons the receiver maintains to describe its area.
void    add(Region region)
Adds all of the polygons which make up the area covered by the argument to the collection of polygons the receiver maintains to describe its area.
boolean contains(int x,         int y)
Returns true if the point specified by the arguments is inside the area specified by the receiver, and false otherwise.
boolean contains(Point pt)
Returns true if the given point is inside the area specified by the receiver, and false otherwise.
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Rectangle   getBounds()
Returns a rectangle which represents the rectangular union of the collection of polygons the receiver maintains to describe its area.
int hashCode()
Returns an integer hash code for the receiver.
void    intersect(int x,          int y,        int width,          int heigh t)
Intersects the given rectangle to the collection of polygons the receiver maintains to describe its area.
void    intersect(Rectangle rect)
Intersects the given rectangle to the collection of polygons the receiver maintains to describe its area.
void    intersect(Region region)
Intersects all of the polygons which make up the area covered by the argument to the collection of polygons the receiver maintains to describe its area.
boolean intersects(int x,           int y,           int width,           int h eight)
Returns true if the rectangle described by the arguments intersects with any of the polygons the receiver maintains to describe its area, and false otherwise.
boolean intersects(Rectangle rect)
Returns true if the given rectangle intersects with any of the polygons the receiver maintains to describe its area and false otherwise.
boolean isDisposed()
Returns true if the region has been disposed, and false otherwise.
boolean isEmpty()
Returns true if the receiver does not cover any area in the (x, y) coordinate plane, and false if the receiver does cover some area in the plane.
void    subtract(int[] pointArray)
Subtracts the given polygon from the collection of polygons the receiver maintains to describe its area.
void    subtract(int x,         int y,     int width,         int height)
Subtracts the given rectangle from the collection of polygons the receiver maintains to describe its area.
void    subtract(Rectangle rect)
Subtracts the given rectangle from the collection of polygons the receiver maintains to describe its area.
void    subtract(Region region)
Subtracts all of the polygons which make up the area covered by the argument from the collection of polygons the receiver maintains to describe its area.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.
void    translate(int x,          int y)
Translate all of the polygons the receiver maintains to describe its area by the specified point.
void    translate(Point pt)
Translate all of the polygons the receiver maintains to describe its area by the specified point.
static Region   win32_new(Device device,          i nt handle)
Invokes platform specific functionality to allocate a new region.

Methods inherited from class org.eclipse.swt.graphics.Resource
dispose, getDevice

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait

Field Detail

handle
public long handle
the OS resource for the region (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

Constructor Detail

Region
public Region()
Constructs a new empty region. You must dispose the region when it is no longer required.
Throws:
SWTError -
ERROR_NO_HANDLES if a handle could not be obtained for region creation
See Also:
Resource.dispose()

Region
public Region(Device device)
Constructs a new empty region. You must dispose the region when it is no longer required.
Parameters:
device - the device on which to allocate the region
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
SWTError -
ERROR_NO_HANDLES if a handle could not be obtained for region creation
since. :
3.0
See Also:
Resource.dispose()

Method Detail

add
public void add(int[] pointArray)
Adds the given polygon to the collection of polygons the receiver maintains to describe its area.
Parameters:
pointArray - points that describe the polygon to merge with the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.0

add
public void add(Rectangle rect)
Adds the given rectangle to the collection of polygons the receiver maintains to describe its area.
Parameters:
rect - the rectangle to merge with the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

add
public void add(int x,
                int y,
                int width,
                int height)
Adds the given rectangle to the collection of polygons the receiver maintains to describe its area.
Parameters:
x - the x coordinate of the rectangle
y - the y coordinate of the rectangle
width - the width coordinate of the rectangle
height - the height coordinate of the rectangle
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

add
public void add(Region region)
Adds all of the polygons which make up the area covered by the argument to the collection of polygons the receiver maintains to describe its area.
Parameters:
region - the region to merge
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

contains
public boolean contains(int x,
                        int y)
Returns true if the point specified by the arguments is inside the area specified by the receiver, and false otherwise.
Parameters:
x - the x coordinate of the point to test for containment
y - the y coordinate of the point to test for containment
Returns:
true if the region contains the point and false otherwise
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

contains
public boolean contains(Point pt)
Returns true if the given point is inside the area specified by the receiver, and false otherwise.
Parameters:
pt - the point to test for containment
Returns:
true if the region contains the point and false otherwise
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

getBounds
public Rectangle getBounds()
Returns a rectangle which represents the rectangular union of the collection of polygons the receiver maintains to describe its area.
Returns:
a bounding rectangle for the region
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
Rectangle.union(org.eclipse.swt.graphics.Rectangle)

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
See Also:
equals(java.lang.Object)

intersect
public void intersect(Rectangle rect)
Intersects the given rectangle to the collection of polygons the receiver maintains to describe its area.
Parameters:
rect - the rectangle to intersect with the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.0

intersect
public void intersect(int x,
                      int y,
                      int width,
                      int height)
Intersects the given rectangle to the collection of polygons the receiver maintains to describe its area.
Parameters:
x - the x coordinate of the rectangle
y - the y coordinate of the rectangle
width - the width coordinate of the rectangle
height - the height coordinate of the rectangle
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

intersect
public void intersect(Region region)
Intersects all of the polygons which make up the area covered by the argument to the collection of polygons the receiver maintains to describe its area.
Parameters:
region - the region to intersect
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.0

intersects
public boolean intersects(int x,
                          int y,
                          int width,
                          int height)
Returns true if the rectangle described by the arguments intersects with any of the polygons the receiver maintains to describe its area, and false otherwise.
Parameters:
x - the x coordinate of the origin of the rectangle
y - the y coordinate of the origin of the rectangle
width - the width of the rectangle
height - the height of the rectangle
Returns:
true if the rectangle intersects with the receiver, and false otherwise
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
Rectangle.intersects(Rectangle)

intersects
public boolean intersects(Rectangle rect)
Returns true if the given rectangle intersects with any of the polygons the receiver maintains to describe its area and false otherwise.
Parameters:
rect - the rectangle to test for intersection
Returns:
true if the rectangle intersects with the receiver, and false otherwise
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
Rectangle.intersects(Rectangle)

isDisposed
public boolean isDisposed()
Returns true if the region has been disposed, and false otherwise. This method gets the dispose state for the region. When a region has been disposed, it is an error to invoke any other method (except Resource.dispose()) using the region.
Specified by:
isDisposed in class Resource
Returns:
true when the region is disposed, and false otherwise

isEmpty
public boolean isEmpty()
Returns true if the receiver does not cover any area in the (x, y) coordinate plane, and false if the receiver does cover some area in the plane.
Returns:
true if the receiver is empty, and false otherwise
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

subtract
public void subtract(int[] pointArray)
Subtracts the given polygon from the collection of polygons the receiver maintains to describe its area.
Parameters:
pointArray - points that describe the polygon to merge with the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.0

subtract
public void subtract(Rectangle rect)
Subtracts the given rectangle from the collection of polygons the receiver maintains to describe its area.
Parameters:
rect - the rectangle to subtract from the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.0

subtract
public void subtract(int x,
                     int y,
                     int width,
                     int height)
Subtracts the given rectangle from the collection of polygons the receiver maintains to describe its area.
Parameters:
x - the x coordinate of the rectangle
y - the y coordinate of the rectangle
width - the width coordinate of the rectangle
height - the height coordinate of the rectangle
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the rectangle's width or height is negative
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

subtract
public void subtract(Region region)
Subtracts all of the polygons which make up the area covered by the argument from the collection of polygons the receiver maintains to describe its area.
Parameters:
region - the region to subtract
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.0

translate
public void translate(int x,
                      int y)
Translate all of the polygons the receiver maintains to describe its area by the specified point.
Parameters:
x - the x coordinate of the point to translate
y - the y coordinate of the point to translate
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

translate
public void translate(Point pt)
Translate all of the polygons the receiver maintains to describe its area by the specified point.
Parameters:
pt - the point to translate
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the argument is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.1

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the receiver

win32_new
public static Region win32_new(Device device,
                               int handle)
Invokes platform specific functionality to allocate a new region. IMPORTANT: This method is not part of the public API for Region. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Parameters:
device - the device on which to allocate the region
handle - the handle for the region
Returns:
a new region object containing the specified device and handle


org.eclipse.swt.graphics
Class Resource
java.lang.Object
org.eclipse.swt.graphics.Resource
Direct Known Subclasses:
Color, Cursor, Font, GC, Image, Path, Pattern, Region, TextLayout, Transform


public abstract class Resource extends java.lang.Object
This class is the abstract superclass of all graphics resource objects. Resources created by the application must be disposed. IMPORTANT: This class is intended to be subclassed only within the SWT implementation. However, it has not been marked final to allow those outside of the SWT development team to implement patched versions of the class in order to get around specific limitations in advance of when those limitations can be addressed by the team. Any class built using subclassing to access the internals of this class will likely fail to compile or run between releases and may be strongly platform specific. Subclassing should not be attempted without an intimate and detailed understanding of the workings of the hierarchy. No support is provided for user-written classes which are implemented as subclasses of this class.
since. :
3.1
See Also:
dispose(), isDisposed(), Sample code and further information

Constructor Summary
Constructors

Constructor and Description
Resource()

Method Summary
All Methods Instance Methods Abstract Methods Concrete Methods

Modifier and Type   Method and Description
void    dispose()
Disposes of the operating system resources associated with this resource.
Device  getDevice()
Returns the Device where this resource was created.
abstract boolean    isDisposed()
Returns true if the resource has been disposed, and false otherwise.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

Resource
public Resource()

Method Detail

dispose
public void dispose()
Disposes of the operating system resources associated with this resource. Applications must dispose of all resources which they allocate. This method does nothing if the resource is already disposed.

getDevice
public Device getDevice()
Returns the Device where this resource was created.
Returns:
Device the device of the receiver
since. :
3.2

isDisposed
public abstract boolean isDisposed()
Returns true if the resource has been disposed, and false otherwise. This method gets the dispose state for the resource. When a resource has been disposed, it is an error to invoke any other method (except dispose()) using the resource.
Returns:
true when the resource is disposed and false otherwise


org.eclipse.swt.graphics
Class RGB
java.lang.Object
org.eclipse.swt.graphics.RGB
All Implemented Interfaces:
java.io.Serializable


public final class RGB extends java.lang.Object implements java.io.Serializable
Instances of this class are descriptions of colors in terms of the primary additive color model (red, green and blue). A color may be described in terms of the relative intensities of these three primary colors. The brightness of each color is specified by a value in the range 0 to 255, where 0 indicates no color (blackness) and 255 indicates maximum intensity. The hashCode() method in this class uses the values of the public fields to compute the hash value. When storing instances of the class in hashed collections, do not modify these fields after the object has been inserted.
Application code does not need to explicitly release the resources managed by each instance when those instances are no longer required, and thus no dispose() method is provided.
See Also:
Color, Color and RGB snippets, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
int blue
the blue component of the RGB
int green
the green component of the RGB
int red
the red component of the RGB

Constructor Summary
Constructors

Constructor and Description
RGB(float hue,    float saturation,    float brightness)
Constructs an instance of this class with the given hue, saturation, and brightness.
RGB(int red,    int green,    int blue)
Constructs an instance of this class with the given red, green and blue values.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
float[] getHSB()
Returns the hue, saturation, and brightness of the color.
int hashCode()
Returns an integer hash code for the receiver.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait

Field Detail

red
public int red
the red component of the RGB

green
public int green
the green component of the RGB

blue
public int blue
the blue component of the RGB

Constructor Detail

RGB
public RGB(int red,
           int green,
           int blue)
Constructs an instance of this class with the given red, green and blue values.
Parameters:
red - the red component of the new instance
green - the green component of the new instance
blue - the blue component of the new instance
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the red, green or blue argument is not between 0 and 255

RGB
public RGB(float hue,
           float saturation,
           float brightness)
Constructs an instance of this class with the given hue, saturation, and brightness.
Parameters:
hue - the hue value for the HSB color (from 0 to 360)
saturation - the saturation value for the HSB color (from 0 to 1)
brightness - the brightness value for the HSB color (from 0 to 1)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the hue is not between 0 and 360 or the saturation or brightness is not between 0 and 1
since. :
3.2

Method Detail

getHSB
public float[] getHSB()
Returns the hue, saturation, and brightness of the color.
Returns:
color space values in float format:
hue (from 0 to 360)
saturation (from 0 to 1)
brightness (from 0 to 1)
since. :
3.2
See Also:
RGB(float, float, float)

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
See Also:
equals(Object)

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the RGB


org.eclipse.swt.graphics
Class RGBA
java.lang.Object
org.eclipse.swt.graphics.RGBA
All Implemented Interfaces:
java.io.Serializable


public final class RGBA extends java.lang.Object implements java.io.Serializable
Instances of this class are descriptions of colors in terms of the primary additive color model (red, green, blue and alpha). A color may be described in terms of the relative intensities of these three primary colors. The brightness of each color is specified by a value in the range 0 to 255, where 0 indicates no color (blackness) and 255 indicates maximum intensity and for alpha 0 indicates transparent and 255 indicates opaque. The hashCode() method in this class uses the values of the public fields to compute the hash value. When storing instances of the class in hashed collections, do not modify these fields after the object has been inserted.
Application code does not need to explicitly release the resources managed by each instance when those instances are no longer required, and thus no dispose() method is provided.
since. :
3.104
See Also:
Color, Color and RGB snippets, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
int alpha
the alpha component of the RGBA
RGB rgb
the RGB component of the RGBA

Constructor Summary
Constructors

Constructor and Description
RGBA(float hue,     float saturation,     float brightness,     float a lpha)
Constructs an instance of this class with the given hue, saturation, and brightness.
RGBA(int red,     int green,     int blue,     int alpha)
Constructs an instance of this class with the given red, green, blue and alpha values.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
float[] getHSBA()
Returns the hue, saturation, and brightness of the color.
int hashCode()
Returns an integer hash code for the receiver.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait

Field Detail

rgb
public final RGB rgb
the RGB component of the RGBA

alpha
public int alpha
the alpha component of the RGBA

Constructor Detail

RGBA
public RGBA(int red,
            int green,
            int blue,
            int alpha)
Constructs an instance of this class with the given red, green, blue and alpha values.
Parameters:
red - the red component of the new instance
green - the green component of the new instance
blue - the blue component of the new instance
alpha - the alpha component of the new instance
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the red, green, blue or alpha argument is not between 0 and 255

RGBA
public RGBA(float hue,
            float saturation,
            float brightness,
            float alpha)
Constructs an instance of this class with the given hue, saturation, and brightness.
Parameters:
hue - the hue value for the HSBA color (from 0 to 360)
saturation - the saturation value for the HSBA color (from 0 to 1)
brightness - the brightness value for the HSBA color (from 0 to 1)
alpha - the alpha value for the HSBA color (from 0 to 255)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the hue is not between 0 and 360 or the saturation or brightness is not between 0 and 1 or if the alpha is not between 0 and 255

Method Detail

getHSBA
public float[] getHSBA()
Returns the hue, saturation, and brightness of the color.
Returns:
color space values in float format:
hue (from 0 to 360)
saturation (from 0 to 1)
brightness (from 0 to 1)
alpha (from 0 to 255)
See Also:
RGBA(float, float, float, float)

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
See Also:
equals(Object)

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the RGBA


org.eclipse.swt.layout
Class RowData
java.lang.Object
org.eclipse.swt.layout.RowData


public final class RowData extends java.lang.Object
Each control controlled by a RowLayout can have its initial width and height specified by setting a RowData object into the control. The following code uses a RowData object to change the initial size of a Button in a Shell:
                Display display = new Display();
                Shell shell = new Shell(display);
                shell.setLayout(new RowLayout());
                Button button1 = new Button(shell, SWT.PUSH);
                button1.setText("Button 1");
                button1.setLayoutData(new RowData(50, 40));
See Also:
RowLayout, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
boolean exclude
exclude informs the layout to ignore this control when sizing and positioning controls.
int height
height specifies the preferred height in pixels.
int width
width specifies the desired width in pixels.

Constructor Summary
Constructors

Constructor and Description
RowData()
Constructs a new instance of RowData using default values.
RowData(int width,        int height)
Constructs a new instance of RowData according to the parameters.
RowData(Point point)
Constructs a new instance of RowData according to the parameter.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

width
public int width
width specifies the desired width in pixels. This value is the wHint passed into Control.computeSize(int, int, boolean) to determine the preferred size of the control. The default value is SWT.DEFAULT.
See Also:
Control.computeSize(int, int, boolean)

height
public int height
height specifies the preferred height in pixels. This value is the hHint passed into Control.computeSize(int, int, boolean) to determine the preferred size of the control. The default value is SWT.DEFAULT.
See Also:
Control.computeSize(int, int, boolean)

exclude
public boolean exclude
exclude informs the layout to ignore this control when sizing and positioning controls. If this value is true, the size and position of the control will not be managed by the layout. If this value is false, the size and position of the control will be computed and assigned. The default value is false.
since. :
3.1

Constructor Detail

RowData
public RowData()
Constructs a new instance of RowData using default values.

RowData
public RowData(int width,
               int height)
Constructs a new instance of RowData according to the parameters. A value of SWT.DEFAULT indicates that no minimum width or no minimum height is specified.
Parameters:
width - a minimum width for the control
height - a minimum height for the control

RowData
public RowData(Point point)
Constructs a new instance of RowData according to the parameter. A value of SWT.DEFAULT indicates that no minimum width or no minimum height is specified.
Parameters:
point - a point whose x coordinate specifies a minimum width for the control and y coordinate specifies a minimum height for the control

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the RowData object


org.eclipse.swt.layout
Class RowLayout
java.lang.Object
org.eclipse.swt.widgets.Layout
org.eclipse.swt.layout.RowLayout


public final class RowLayout extends Layout
Instances of this class determine the size and position of the children of a Composite by placing them either in horizontal rows or vertical columns within the parent Composite. RowLayout aligns all controls in one row if the type is set to horizontal, and one column if it is set to vertical. It has the ability to wrap, and provides configurable margins and spacing. RowLayout has a number of configuration fields. In addition, the height and width of each control in a RowLayout can be specified by setting a RowData object into the control using setLayoutData ().
The following example code creates a RowLayout, sets all of its fields to non-default values, and then sets it into a Shell.
                RowLayout rowLayout = new RowLayout();
                rowLayout.wrap = false;
                rowLayout.pack = false;
                rowLayout.justify = true;
                rowLayout.type = SWT.VERTICAL;
                rowLayout.marginLeft = 5;
                rowLayout.marginTop = 5;
                rowLayout.marginRight = 5;
                rowLayout.marginBottom = 5;
                rowLayout.spacing = 0;
                shell.setLayout(rowLayout);
If you are using the default field values, you only need one line of code: shell.setLayout(new RowLayout());
See Also:
RowData, RowLayout snippets, SWT Example: LayoutExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
boolean center
center specifies whether the controls in a row should be centered vertically in each cell for horizontal layouts, or centered horizontally in each cell for vertical layouts.
boolean fill
fill specifies whether the controls in a row should be all the same height for horizontal layouts, or the same width for vertical layouts.
boolean justify
justify specifies whether the controls in a row should be fully justified, with any extra space placed between the controls.
int marginBottom
marginBottom specifies the number of pixels of vertical margin that will be placed along the bottom edge of the layout.
int marginHeight
marginHeight specifies the number of pixels of vertical margin that will be placed along the top and bottom edges of the layout.
int marginLeft
marginLeft specifies the number of pixels of horizontal margin that will be placed along the left edge of the layout.
int marginRight
marginRight specifies the number of pixels of horizontal margin that will be placed along the right edge of the layout.
int marginTop
marginTop specifies the number of pixels of vertical margin that will be placed along the top edge of the layout.
int marginWidth
marginWidth specifies the number of pixels of horizontal margin that will be placed along the left and right edges of the layout.
boolean pack
pack specifies whether all controls in the layout take their preferred size.
int spacing
spacing specifies the number of pixels between the edge of one cell and the edge of its neighbouring cell.
int type
type specifies whether the layout places controls in rows or columns.
boolean wrap
wrap specifies whether a control will be wrapped to the next row if there is insufficient space on the current row.

Constructor Summary
Constructors

Constructor and Description
RowLayout()
Constructs a new instance of this class with type HORIZONTAL.
RowLayout(int type)
Constructs a new instance of this class given the type.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
protected Point computeSize(Composite composite,          int wHint,            int h Hint,            boolean flushCache)
Computes and returns the size of the specified composite's client area according to this layout.
protected boolean   flushCache(Control control)
Instruct the layout to flush any cached values associated with the control specified in the argument control.
protected void  layout(Composite composite,       b oolean flushCache)
Lays out the children of the specified composite according to this layout.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

type
public int type
type specifies whether the layout places controls in rows or columns. The default value is HORIZONTAL. Possible values are:
HORIZONTAL: Position the controls horizontally from left to right
VERTICAL: Position the controls vertically from top to bottom
since. :
2.0

marginWidth
public int marginWidth
marginWidth specifies the number of pixels of horizontal margin that will be placed along the left and right edges of the layout. The default value is 0.
since. :
3.0

marginHeight
public int marginHeight
marginHeight specifies the number of pixels of vertical margin that will be placed along the top and bottom edges of the layout. The default value is 0.
since. :
3.0

spacing
public int spacing
spacing specifies the number of pixels between the edge of one cell and the edge of its neighbouring cell. The default value is 3.

wrap
public boolean wrap
wrap specifies whether a control will be wrapped to the next row if there is insufficient space on the current row. The default value is true.

pack
public boolean pack
pack specifies whether all controls in the layout take their preferred size. If pack is false, all controls will have the same size which is the size required to accommodate the largest preferred height and the largest preferred width of all the controls in the layout. The default value is true.

fill
public boolean fill
fill specifies whether the controls in a row should be all the same height for horizontal layouts, or the same width for vertical layouts. The default value is false.
since. :
3.0

center
public boolean center
center specifies whether the controls in a row should be centered vertically in each cell for horizontal layouts, or centered horizontally in each cell for vertical layouts. The default value is false.
since. :
3.4

justify
public boolean justify
justify specifies whether the controls in a row should be fully justified, with any extra space placed between the controls. The default value is false.

marginLeft
public int marginLeft
marginLeft specifies the number of pixels of horizontal margin that will be placed along the left edge of the layout. The default value is 3.

marginTop
public int marginTop
marginTop specifies the number of pixels of vertical margin that will be placed along the top edge of the layout. The default value is 3.

marginRight
public int marginRight
marginRight specifies the number of pixels of horizontal margin that will be placed along the right edge of the layout. The default value is 3.

marginBottom
public int marginBottom
marginBottom specifies the number of pixels of vertical margin that will be placed along the bottom edge of the layout. The default value is 3.

Constructor Detail

RowLayout
public RowLayout()
Constructs a new instance of this class with type HORIZONTAL.

RowLayout
public RowLayout(int type)
Constructs a new instance of this class given the type.
Parameters:
type - the type of row layout
since. :
2.0

Method Detail

computeSize
protected Point computeSize(Composite composite,
                            int wHint,
                            int hHint,
                            boolean flushCache)
Description copied from class: Layout
Computes and returns the size of the specified composite's client area according to this layout. This method computes the size that the client area of the composite must be in order to position all children at their preferred size inside the composite according to the layout algorithm encoded by this layout.
When a width or height hint is supplied, it is used to constrain the result. For example, if a width hint is provided that is less than the width of the client area, the layout may choose to wrap and increase height, clip, overlap, or otherwise constrain the children.
Specified by:
computeSize in class Layout
Parameters:
composite - a composite widget using this layout
wHint - width (SWT.DEFAULT for preferred size)
hHint - height (SWT.DEFAULT for preferred size)
flushCache - true means flush cached layout values
Returns:
a point containing the computed size (width, height)
See Also:
Layout.layout(org.eclipse.swt.widgets.Composite, boolean), Control.getBorderWidth(), Control.getBounds(), Control.getSize(), Control.pack(boolean), "computeTrim, getClientArea for controls that implement them"

flushCache
protected boolean flushCache(Control control)
Description copied from class: Layout
Instruct the layout to flush any cached values associated with the control specified in the argument control.
Overrides:
flushCache in class Layout
Parameters:
control - a control managed by this layout
Returns:
true if the Layout has flushed all cached information associated with control

layout
protected void layout(Composite composite,
                      boolean flushCache)
Description copied from class: Layout
Lays out the children of the specified composite according to this layout. This method positions and sizes the children of a composite using the layout algorithm encoded by this layout. Children of the composite are positioned in the client area of the composite. The position of the composite is not altered by this method.
When the flush cache hint is true, the layout is instructed to flush any cached values associated with the children. Typically, a layout will cache the preferred sizes of the children to avoid the expense of computing these values each time the widget is laid out.
When layout is triggered explicitly by the programmer the flush cache hint is true. When layout is triggered by a resize, either caused by the programmer or by the user, the hint is false.
Specified by:
layout in class Layout
Parameters:
composite - a composite widget using this layout
flushCache - true means flush cached layout values

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the layout


org.eclipse.swt.widgets
Class Sash
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Sash
All Implemented Interfaces:
Drawable


public class Sash extends Control
Instances of the receiver represent a selectable user interface object that allows the user to drag a rubber banded outline of the sash within the parent control.
Styles:
HORIZONTAL, VERTICAL, SMOOTH
Events:
Selection
Note: Only one of the styles HORIZONTAL and VERTICAL may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
Sash snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Sash(Composite parent,     int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setFocus, setFont, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

Sash
public Sash(Composite parent,
            int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.HORIZONTAL, SWT.VERTICAL, SWT.SMOOTH, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface. When widgetSelected is called, the x, y, width, and height fields of the event object are valid. If the receiver is being dragged, the event object detail field contains the value SWT.DRAG. widgetDefaultSelected is not called.
Parameters:
listener - the listener which should be notified when the control is selected by the user
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)


org.eclipse.swt.widgets
Class Scale
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scale
All Implemented Interfaces:
Drawable


public class Scale extends Control
Instances of the receiver represent a selectable user interface object that present a range of continuous numeric values.
Styles:
HORIZONTAL, VERTICAL
Events:
Selection
Note: Only one of the styles HORIZONTAL and VERTICAL may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
Scale snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Scale(Composite parent,      int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's value, by sending it one of the messages defined in the SelectionListener interface.
int getIncrement()
Returns the amount that the receiver's value will be modified by when the up/down (or right/left) arrows are pressed.
int getMaximum()
Returns the maximum value which the receiver will allow.
int getMinimum()
Returns the minimum value which the receiver will allow.
int getPageIncrement()
Returns the amount that the receiver's value will be modified by when the page increment/decrement areas are selected.
int getSelection()
Returns the 'selection', which is the receiver's position.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's value.
void    setIncrement(int increment)
Sets the amount that the receiver's value will be modified by when the up/down (or right/left) arrows are pressed to the argument, which must be at least one.
void    setMaximum(int value)
Sets the maximum value that the receiver will allow.
void    setMinimum(int value)
Sets the minimum value that the receiver will allow.
void    setPageIncrement(int pageIncrement)
Sets the amount that the receiver's value will be modified by when the page increment/decrement areas are selected to the argument, which must be at least one.
void    setSelection(int value)
Sets the 'selection', which is the receiver's value, to the argument which must be greater than or equal to zero.

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setFocus, setFont, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

Scale
public Scale(Composite parent,
             int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.HORIZONTAL, SWT.VERTICAL, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's value, by sending it one of the messages defined in the SelectionListener interface. widgetSelected is called when the user changes the receiver's value. widgetDefaultSelected is not called.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener)

getIncrement
public int getIncrement()
Returns the amount that the receiver's value will be modified by when the up/down (or right/left) arrows are pressed.
Returns:
the increment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMaximum
public int getMaximum()
Returns the maximum value which the receiver will allow.
Returns:
the maximum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMinimum
public int getMinimum()
Returns the minimum value which the receiver will allow.
Returns:
the minimum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getPageIncrement
public int getPageIncrement()
Returns the amount that the receiver's value will be modified by when the page increment/decrement areas are selected.
Returns:
the page increment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelection
public int getSelection()
Returns the 'selection', which is the receiver's position.
Returns:
the selection
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's value.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

setIncrement
public void setIncrement(int increment)
Sets the amount that the receiver's value will be modified by when the up/down (or right/left) arrows are pressed to the argument, which must be at least one.
Parameters:
increment - the new increment (must be greater than zero)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMaximum
public void setMaximum(int value)
Sets the maximum value that the receiver will allow. This new value will be ignored if it is not greater than the receiver's current minimum value. If the new maximum is applied then the receiver's selection value will be adjusted if necessary to fall within its new range.
Parameters:
value - the new maximum, which must be greater than the current minimum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMinimum
public void setMinimum(int value)
Sets the minimum value that the receiver will allow. This new value will be ignored if it is negative or is not less than the receiver's current maximum value. If the new minimum is applied then the receiver's selection value will be adjusted if necessary to fall within its new range.
Parameters:
value - the new minimum, which must be nonnegative and less than the current maximum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setPageIncrement
public void setPageIncrement(int pageIncrement)
Sets the amount that the receiver's value will be modified by when the page increment/decrement areas are selected to the argument, which must be at least one.
Parameters:
pageIncrement - the page increment (must be greater than zero)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setSelection
public void setSelection(int value)
Sets the 'selection', which is the receiver's value, to the argument which must be greater than or equal to zero.
Parameters:
value - the new selection (must be zero or greater)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class Scrollable
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
All Implemented Interfaces:
Drawable
Direct Known Subclasses:
Composite, List, Text


public abstract class Scrollable extends Control
This class is the abstract superclass of all classes which represent controls that have standard scroll bars.
Styles:
H_SCROLL, V_SCROLL
Events:
(none)
IMPORTANT: This class is intended to be subclassed only within the SWT implementation.
See Also:
Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Scrollable(Composite parent,           int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
Rectangle   computeTrim(int x,            int y ,            int width,            i nt height)
Given a desired client area for the receiver (as described by the arguments), returns the bounding rectangle which would be required to produce that client area.
Rectangle   getClientArea()
Returns a rectangle which describes the area of the receiver which is capable of displaying data (that is, not covered by the "trimmings").
ScrollBar   getHorizontalBar()
Returns the receiver's horizontal scroll bar if it has one, and null if it does not.
int getScrollbarsMode()
Returns the mode of the receiver's scrollbars.
ScrollBar   getVerticalBar()
Returns the receiver's vertical scroll bar if it has one, and null if it does not.

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setFocus, setFont, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

Scrollable
public Scrollable(Composite parent,
                  int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.H_SCROLL, SWT.V_SCROLL, Widget.checkSubclass(), Widget.getStyle()

Method Detail

computeTrim
public Rectangle computeTrim(int x,
                             int y,
                             int width,
                             int height)
Given a desired client area for the receiver (as described by the arguments), returns the bounding rectangle which would be required to produce that client area. In other words, it returns a rectangle such that, if the receiver's bounds were set to that rectangle, the area of the receiver which is capable of displaying data (that is, not covered by the "trimmings") would be the rectangle described by the arguments (relative to the receiver's parent).
Parameters:
x - the desired x coordinate of the client area
y - the desired y coordinate of the client area
width - the desired width of the client area
height - the desired height of the client area
Returns:
the required bounds to produce the given client area
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getClientArea()

getClientArea
public Rectangle getClientArea()
Returns a rectangle which describes the area of the receiver which is capable of displaying data (that is, not covered by the "trimmings").
Returns:
the client area
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
computeTrim(int, int, int, int)

getHorizontalBar
public ScrollBar getHorizontalBar()
Returns the receiver's horizontal scroll bar if it has one, and null if it does not.
Returns:
the horizontal scroll bar (or null)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getScrollbarsMode
public int getScrollbarsMode()
Returns the mode of the receiver's scrollbars. This will be bitwise OR of one or more of the constants defined in class SWT.
SWT.SCROLLBAR_OVERLAY - if receiver uses overlay scrollbars SWT.NONE - otherwise
Returns:
the mode of scrollbars
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.8
See Also:
SWT.SCROLLBAR_OVERLAY

getVerticalBar
public ScrollBar getVerticalBar()
Returns the receiver's vertical scroll bar if it has one, and null if it does not.
Returns:
the vertical scroll bar (or null)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class ScrollBar
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.ScrollBar


public class ScrollBar extends Widget
Instances of this class are selectable user interface objects that represent a range of positive, numeric values. At any given moment, a given scroll bar will have a single 'selection' that is considered to be its value, which is constrained to be within the range of values the scroll bar represents (that is, between its minimum and maximum values).
Typically, scroll bars will be made up of five areas:
an arrow button for decrementing the value
a page decrement area for decrementing the value by a larger amount
a thumb for modifying the value by mouse dragging
a page increment area for incrementing the value by a larger amount
an arrow button for incrementing the value
Based on their style, scroll bars are either HORIZONTAL (which have a left facing button for decrementing the value and a right facing button for incrementing it) or VERTICAL (which have an upward facing button for decrementing the value and a downward facing buttons for incrementing it). On some platforms, the size of the scroll bar's thumb can be varied relative to the magnitude of the range of values it represents (that is, relative to the difference between its maximum and minimum values). Typically, this is used to indicate some proportional value such as the ratio of the visible area of a document to the total amount of space that it would take to display it. SWT supports setting the thumb size even if the underlying platform does not, but in this case the appearance of the scroll bar will not change.
Scroll bars are created by specifying either H_SCROLL, V_SCROLL or both when creating a Scrollable. They are accessed from the Scrollable using getHorizontalBar and getVerticalBar.
Note: Scroll bars are not Controls. On some platforms, scroll bars that appear as part of some standard controls such as a text or list have no operating system resources and are not children of the control. For this reason, scroll bars are treated specially. To create a control that looks like a scroll bar but has operating system resources, use Slider.
Styles:
HORIZONTAL, VERTICAL
Events:
Selection
Note: Only one of the styles HORIZONTAL and VERTICAL may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
Slider, Scrollable, Scrollable.getHorizontalBar(), Scrollable.getVerticalBar(), SWT Example: ControlExample, Sample code and further information

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's value, by sending it one of the messages defined in the SelectionListener interface.
boolean getEnabled()
Returns true if the receiver is enabled, and false otherwise.
int getIncrement()
Returns the amount that the receiver's value will be modified by when the up/down (or right/left) arrows are pressed.
int getMaximum()
Returns the maximum value which the receiver will allow.
int getMinimum()
Returns the minimum value which the receiver will allow.
int getPageIncrement()
Returns the amount that the receiver's value will be modified by when the page increment/decrement areas are selected.
Scrollable  getParent()
Returns the receiver's parent, which must be a Scrollable.
int getSelection()
Returns the single 'selection' that is the receiver's value.
Point   getSize()
Returns a point describing the receiver's size.
int getThumb()
Returns the receiver's thumb value.
Rectangle   getThumbBounds()
Returns a rectangle describing the size and location of the receiver's thumb relative to its parent.
Rectangle   getThumbTrackBounds()
Returns a rectangle describing the size and location of the receiver's thumb track relative to its parent.
boolean getVisible()
Returns true if the receiver is visible, and false otherwise.
boolean isEnabled()
Returns true if the receiver is enabled and all of the receiver's ancestors are enabled, and false otherwise.
boolean isVisible()
Returns true if the receiver is visible and all of the receiver's ancestors are visible and false otherwise.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's value.
void    setEnabled(boolean enabled)
Enables the receiver if the argument is true, and disables it otherwise.
void    setIncrement(int value)
Sets the amount that the receiver's value will be modified by when the up/down (or right/left) arrows are pressed to the argument, which must be at least one.
void    setMaximum(int value)
Sets the maximum.
void    setMinimum(int value)
Sets the minimum value.
void    setPageIncrement(int value)
Sets the amount that the receiver's value will be modified by when the page increment/decrement areas are selected to the argument, which must be at least one.
void    setSelection(int selection)
Sets the single selection that is the receiver's value to the argument which must be greater than or equal to zero.
void    setThumb(int value)
Sets the thumb value.
void    setValues(int selection,          i nt minimum,          int maximum,        int thumb,          int incre ment,          int pageIncrement)
Sets the receiver's selection, minimum value, maximum value, thumb, increment and page increment all at once.
void    setVisible(boolean visible)
Marks the receiver as visible if the argument is true, and marks it invisible otherwise.

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Method Detail

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's value, by sending it one of the messages defined in the SelectionListener interface. When widgetSelected is called, the event object detail field contains one of the following values: SWT.NONE - for the end of a drag. SWT.DRAG. SWT.HOME. SWT.END. SWT.ARROW_DOWN. SWT.ARROW_UP. SWT.PAGE_DOWN. SWT.PAGE_UP. widgetDefaultSelected is not called.
Parameters:
listener - the listener which should be notified when the user changes the receiver's value
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

getEnabled
public boolean getEnabled()
Returns true if the receiver is enabled, and false otherwise. A disabled control is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Returns:
the receiver's enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
isEnabled()

getIncrement
public int getIncrement()
Returns the amount that the receiver's value will be modified by when the up/down (or right/left) arrows are pressed.
Returns:
the increment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMaximum
public int getMaximum()
Returns the maximum value which the receiver will allow.
Returns:
the maximum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMinimum
public int getMinimum()
Returns the minimum value which the receiver will allow.
Returns:
the minimum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getPageIncrement
public int getPageIncrement()
Returns the amount that the receiver's value will be modified by when the page increment/decrement areas are selected.
Returns:
the page increment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getParent
public Scrollable getParent()
Returns the receiver's parent, which must be a Scrollable.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelection
public int getSelection()
Returns the single 'selection' that is the receiver's value.
Returns:
the selection
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSize
public Point getSize()
Returns a point describing the receiver's size. The x coordinate of the result is the width of the receiver. The y coordinate of the result is the height of the receiver.
Returns:
the receiver's size
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getThumb
public int getThumb()
Returns the receiver's thumb value.
Returns:
the thumb value
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ScrollBar

getThumbBounds
public Rectangle getThumbBounds()
Returns a rectangle describing the size and location of the receiver's thumb relative to its parent.
Returns:
the thumb bounds, relative to the parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.6

getThumbTrackBounds
public Rectangle getThumbTrackBounds()
Returns a rectangle describing the size and location of the receiver's thumb track relative to its parent. This rectangle comprises the areas 2, 3, and 4 as described in ScrollBar.
Returns:
the thumb track bounds, relative to the parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.6

getVisible
public boolean getVisible()
Returns true if the receiver is visible, and false otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, this method may still indicate that it is considered visible even though it may not actually be showing.
Returns:
the receiver's visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

isEnabled
public boolean isEnabled()
Returns true if the receiver is enabled and all of the receiver's ancestors are enabled, and false otherwise. A disabled control is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Returns:
the receiver's enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getEnabled()

isVisible
public boolean isVisible()
Returns true if the receiver is visible and all of the receiver's ancestors are visible and false otherwise.
Returns:
the receiver's visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getVisible()

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's value.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

setEnabled
public void setEnabled(boolean enabled)
Enables the receiver if the argument is true, and disables it otherwise. A disabled control is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Parameters:
enabled - the new enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setIncrement
public void setIncrement(int value)
Sets the amount that the receiver's value will be modified by when the up/down (or right/left) arrows are pressed to the argument, which must be at least one.
Parameters:
value - the new increment (must be greater than zero)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMaximum
public void setMaximum(int value)
Sets the maximum. If this value is negative or less than or equal to the minimum, the value is ignored. If necessary, first the thumb and then the selection are adjusted to fit within the new range.
Parameters:
value - the new maximum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMinimum
public void setMinimum(int value)
Sets the minimum value. If this value is negative or greater than or equal to the maximum, the value is ignored. If necessary, first the thumb and then the selection are adjusted to fit within the new range.
Parameters:
value - the new minimum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setPageIncrement
public void setPageIncrement(int value)
Sets the amount that the receiver's value will be modified by when the page increment/decrement areas are selected to the argument, which must be at least one.
Parameters:
value - the page increment (must be greater than zero)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setSelection
public void setSelection(int selection)
Sets the single selection that is the receiver's value to the argument which must be greater than or equal to zero.
Parameters:
selection - the new selection (must be zero or greater)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setThumb
public void setThumb(int value)
Sets the thumb value. The thumb value should be used to represent the size of the visual portion of the current range. This value is usually the same as the page increment value. This new value will be ignored if it is less than one, and will be clamped if it exceeds the receiver's current range.
Parameters:
value - the new thumb value, which must be at least one and not larger than the size of the current range
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setValues
public void setValues(int selection,
                      int minimum,
                      int maximum,
                      int thumb,
                      int increment,
                      int pageIncrement)
Sets the receiver's selection, minimum value, maximum value, thumb, increment and page increment all at once. Note: This is similar to setting the values individually using the appropriate methods, but may be implemented in a more efficient fashion on some platforms.
Parameters:
selection - the new selection value
minimum - the new minimum value
maximum - the new maximum value
thumb - the new thumb value
increment - the new increment value
pageIncrement - the new pageIncrement value
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setVisible
public void setVisible(boolean visible)
Marks the receiver as visible if the argument is true, and marks it invisible otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, marking it visible may not actually cause it to be displayed.
Parameters:
visible - the new visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.events
Class SegmentEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.SegmentEvent
All Implemented Interfaces:
java.io.Serializable


public class SegmentEvent extends TypedEvent
This event is sent to SegmentListeners when a text content is to be modified. The segments field can be used in conjunction with the segmentsChars field or by itself. Setting only the segmentsChars field has no effect. When used by itself, the segments field specify text ranges that should be treated as separate segments. The elements in the segments field specify the start offset of a segment relative to the start of the text. They must follow the following rules:
elements must be in ascending order and must not have duplicates
elements must not exceed the text length
In addition, the first element may be set to zero and the last element may be set to the end of the line but this is not required. The segments field may be left null if the entire text content doesn't require segmentation. A SegmentListener may be used when adjacent segments of right-to-left text should not be reordered relative to each other. For example, within a Java editor, you may wish multiple right-to-left string literals to be reordered differently than the bidi algorithm specifies. Example: stored text = "R1R2R3" + "R4R5R6" R1 to R6 are right-to-left characters. The quotation marks are part of the text. The text is 13 characters long.
        segments = null:
                entire text content will be reordered and thus the two R2L segments
                swapped (as per the bidi algorithm).
                visual display (rendered on screen) = "R6R5R4" + "R3R2R1"

        segments = [0, 5, 8]
                "R1R2R3" will be reordered, followed by [blank]+[blank] and
                "R4R5R6".
                visual display = "R3R2R1" + "R6R5R4"
The segments and segmentsChars fields can be used together to obtain different types of bidi reordering and text display. The application can use these two fields to insert Unicode Control Characters in specific offsets in the text, the character at segmentsChars[i] is inserted at the offset specified by segments[i]. When both fields are set, the rules for the segments field are less restrictive:
elements must be in ascending order, duplicates are allowed
elements must not exceed the text length
since. :
3.8
See Also:
Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
int lineOffset
The start offset of the lineText relative to text (always zero for single line widget)
java.lang.String    lineText
Text used to calculate the segments
int[]   segments
Text ranges that should be treated as separate segments (e.g. for bidi reordering)
char[]  segmentsChars
Characters to be used in the segment boundaries (optional)

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
SegmentEvent(Event e)

Method Summary

Methods inherited from class org.eclipse.swt.events.TypedEvent
toString

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

lineOffset
public int lineOffset
The start offset of the lineText relative to text (always zero for single line widget)

lineText
public java.lang.String lineText
Text used to calculate the segments

segments
public int[] segments
Text ranges that should be treated as separate segments (e.g. for bidi reordering)

segmentsChars
public char[] segmentsChars
Characters to be used in the segment boundaries (optional)

Constructor Detail

SegmentEvent
public SegmentEvent(Event e)


org.eclipse.swt.events
Interface SegmentListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
Functional Interface:
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.


@FunctionalInterface public interface SegmentListener extends SWTEventListener
This listener interface may be implemented in order to receive SegmentEvents.
since. :
3.8
See Also:
SegmentEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    getSegments(SegmentEvent event)
This method is called when text content is being modified.

Method Detail

getSegments
void getSegments(SegmentEvent event)
This method is called when text content is being modified. The following event fields are used:
event.lineText text content (input)
event.segments text offsets for segment characters (output)
event.segmentsChars characters that should be inserted (output, optional)
Parameters:
event - the given event
See Also:
SegmentEvent


org.eclipse.swt.events
Class SelectionAdapter
java.lang.Object
org.eclipse.swt.events.SelectionAdapter
All Implemented Interfaces:
java.util.EventListener, SelectionListener, SWTEventListener


public abstract class SelectionAdapter extends java.lang.Object implements SelectionListener
This adapter class provides default implementations for the methods described by the SelectionListener interface. Classes that wish to deal with SelectionEvents can extend this class and override only the methods which they are interested in.
See Also:
SelectionListener, SelectionEvent, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
SelectionAdapter()

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    widgetDefaultSelected(SelectionEven t e)
Sent when default selection occurs in the control.
void    widgetSelected(SelectionEvent e)
Sent when selection occurs in the control.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Methods inherited from interface org.eclipse.swt.events.SelectionListener
widgetDefaultSelectedAdapter, widgetSelectedAdapter

Constructor Detail

SelectionAdapter
public SelectionAdapter()

Method Detail

widgetSelected
public void widgetSelected(SelectionEvent e)
Sent when selection occurs in the control. The default behavior is to do nothing.
Specified by:
widgetSelected in interface SelectionListener
Parameters:
e - an event containing information about the selection

widgetDefaultSelected
public void widgetDefaultSelected(SelectionEvent e)
Sent when default selection occurs in the control. The default behavior is to do nothing.
Specified by:
widgetDefaultSelected in interface SelectionListener
Parameters:
e - an event containing information about the default selection


org.eclipse.swt.events
Class SelectionEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.SelectionEvent
All Implemented Interfaces:
java.io.Serializable
Direct Known Subclasses:
ExpandEvent, TreeEvent


public class SelectionEvent extends TypedEvent
Instances of this class are sent as a result of widgets being selected. Note: The fields that are filled in depend on the widget.
See Also:
SelectionListener, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
int detail
Extra detail information about the selection, depending on the widget.
boolean doit
A flag indicating whether the operation should be allowed.
int height
The height of selected area.
Widget  item
The item that was selected.
int stateMask
The state of the keyboard modifier keys and mouse masks at the time the event was generated.
java.lang.String    text
The text of the hyperlink that was selected.
int width
The width of selected area.
int x
The x location of the selected area.
int y
The y location of selected area.

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
SelectionEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

item
public Widget item
The item that was selected.

detail
public int detail
Extra detail information about the selection, depending on the widget. Sash
SWT.DRAG
ScrollBar and Slider
SWT.DRAG
SWT.HOME
SWT.END
SWT.ARROW_DOWN
SWT.ARROW_UP
SWT.PAGE_DOWN
SWT.PAGE_UP
Table and Tree
SWT.CHECK
Text
SWT.CANCEL
CoolItem and ToolItem
SWT.ARROW

x
public int x
The x location of the selected area.

y
public int y
The y location of selected area.

width
public int width
The width of selected area.

height
public int height
The height of selected area.

stateMask
public int stateMask
The state of the keyboard modifier keys and mouse masks at the time the event was generated. Note: Mouse button states are currently not included consistently for all widgets on all platforms. Clients should be prepared to receive button states, but should not rely on getting them everywhere.
See Also:
SWT.MODIFIER_MASK, SWT.BUTTON_MASK

text
public java.lang.String text
The text of the hyperlink that was selected. This will be either the text of the hyperlink or the value of its HREF, if one was specified.
since. :
3.1
See Also:
Link.setText(String)

doit
public boolean doit
A flag indicating whether the operation should be allowed. Setting this field to false will cancel the operation, depending on the widget.

Constructor Detail

SelectionEvent
public SelectionEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class TypedEvent
Returns:
a string representation of the event


org.eclipse.swt.events
Interface SelectionListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
All Known Implementing Classes:
SelectionAdapter


public interface SelectionListener extends SWTEventListener
Classes which implement this interface provide methods that deal with the events that are generated when selection occurs in a control. After creating an instance of a class that implements this interface it can be added to a control using the addSelectionListener method and removed using the removeSelectionListener method. When selection occurs in a control the appropriate method will be invoked.
See Also:
SelectionAdapter, SelectionEvent

Method Summary
All Methods Static Methods Instance Methods Abstract Methods Default Methods

Modifier and Type   Method and Description
void    widgetDefaultSelected(SelectionEven t e)
Sent when default selection occurs in the control.
static SelectionListener    widgetDefaultSelectedAdapter(java.u til.function.Consumer<SelectionEvent > c)
Static helper method to create a selection listener for the widgetDefaultSelected(SelectionEve nt e)) method with a lambda expression.
void    widgetSelected(SelectionEvent e)
Sent when selection occurs in the control.
static SelectionListener    widgetSelectedAdapter(java.util.fun ction.Consumer<SelectionEvent> c)
Static helper method to create a selection listener for the [widgetSelected(SelectionEvent e)] (../../../../org/eclipse/swt/events/ SelectionListener.html#widgetSelecte d-org.eclipse.swt.events.SelectionEv ent-)) method with a lambda expression.

Method Detail

widgetSelected
void widgetSelected(SelectionEvent e)
Sent when selection occurs in the control. For example, selection occurs in a List when the user selects an item or items with the keyboard or mouse. On some platforms, the event occurs when a mouse button or key is pressed. On others, it happens when the mouse or key is released. The exact key or mouse gesture that causes this event is platform specific.
Parameters:
e - an event containing information about the selection

widgetDefaultSelected
void widgetDefaultSelected(SelectionEvent e)
Sent when default selection occurs in the control. For example, on some platforms default selection occurs in a List when the user double-clicks an item or types return in a Text. On some platforms, the event occurs when a mouse button or key is pressed. On others, it happens when the mouse or key is released. The exact key or mouse gesture that causes this event is platform specific.
Parameters:
e - an event containing information about the default selection

widgetSelectedAdapter
static SelectionListener widgetSelectedAdapter(java.util.function.Consumer<SelectionEvent> c)
Static helper method to create a selection listener for the widgetSelected(SelectionEvent e)) method with a lambda expression.
Parameters:
c - the consumer of the event
Returns:
SelectionListener
since. :
3.106

widgetDefaultSelectedAdapter
static SelectionListener widgetDefaultSelectedAdapter(java.util.function.Consumer<SelectionEvent> c)
Static helper method to create a selection listener for the widgetDefaultSelected(SelectionEvent e)) method with a lambda expression.
Parameters:
c - the consumer of the event
Returns:
SelectionListener
since. :
3.106


org.eclipse.swt.widgets
Class Shell
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.Composite
org.eclipse.swt.widgets.Canvas
org.eclipse.swt.widgets.Decorations
org.eclipse.swt.widgets.Shell
All Implemented Interfaces:
Drawable


public class Shell extends Decorations
Instances of this class represent the "windows" which the desktop or "window manager" is managing. Instances that do not have a parent (that is, they are built using the constructor, which takes a Display as the argument) are described as top level shells. Instances that do have a parent are described as secondary or dialog shells. Instances are always displayed in one of the maximized, minimized or normal states:
When an instance is marked as maximized, the window manager will typically resize it to fill the entire visible area of the display, and the instance is usually put in a state where it can not be resized (even if it has style RESIZE) until it is no longer maximized.
When an instance is in the normal state (neither maximized or minimized), its appearance is controlled by the style constants which were specified when it was created and the restrictions of the window manager (see below).
When an instance has been marked as minimized, its contents (client area) will usually not be visible, and depending on the window manager, it may be "iconified" (that is, replaced on the desktop by a small simplified representation of itself), relocated to a distinguished area of the screen, or hidden. Combinations of these changes are also possible.
The modality of an instance may be specified using style bits. The modality style bits are used to determine whether input is blocked for other shells on the display. The PRIMARY_MODAL style allows an instance to block input to its parent. The APPLICATION_MODAL style allows an instance to block input to every other shell in the display. The SYSTEM_MODAL style allows an instance to block input to all shells, including shells belonging to different applications.
Note: The styles supported by this class are treated as HINTs, since.  the window manager for the desktop on which the instance is visible has ultimate control over the appearance and behavior of decorations and modality. For example, some window managers only support resizable windows and will always assume the RESIZE style, even if it is not set. In addition, if a modality style is not supported, it is "upgraded" to a more restrictive modality style that is supported. For example, if PRIMARY_MODAL is not supported, it would be upgraded to APPLICATION_MODAL. A modality style may also be "downgraded" to a less restrictive style. For example, most operating systems no longer support SYSTEM_MODAL because it can freeze up the desktop, so this is typically downgraded to APPLICATION_MODAL.
Styles:
BORDER, CLOSE, MIN, MAX, NO_MOVE, NO_TRIM, RESIZE, TITLE, ON_TOP, TOOL, SHEET
APPLICATION_MODAL, MODELESS, PRIMARY_MODAL, SYSTEM_MODAL
Events:
Activate, Close, Deactivate, Deiconify, Iconify
Class SWT provides two "convenience constants" for the most commonly required style combinations:
SHELL_TRIM
the result of combining the constants which are required to produce a typical application top level shell: (that is, CLOSE | TITLE | MIN | MAX | RESIZE)
DIALOG_TRIM
the result of combining the constants which are required to produce a typical application dialog shell: (that is, TITLE | CLOSE | BORDER)
Note: Only one of the styles APPLICATION_MODAL, MODELESS, PRIMARY_MODAL and SYSTEM_MODAL may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
Decorations, SWT, Shell snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Shell()
Constructs a new instance of this class.
Shell(Display display)
Constructs a new instance of this class given only the display to create it on.
Shell(Display display,      int style)
Constructs a new instance of this class given the display to create it on and a style value describing its behavior and appearance.
Shell(int style)
Constructs a new instance of this class given only the style value describing its behavior and appearance.
Shell(Shell parent)
Constructs a new instance of this class given only its parent.
Shell(Shell parent,      int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Static Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addShellListener(ShellListener list ener)
Adds the listener to the collection of listeners who will be notified when operations are performed on the receiver, by sending the listener one of the messages defined in the ShellListener interface.
void    close()
Requests that the window manager close the receiver in the same way it would be closed when the user clicks on the "close box" or performs some other platform specific key or mouse combination that indicates the window should be removed.
void    dispose()
Disposes of the operating system resources associated with the receiver and all its descendants.
void    forceActive()
If the receiver is visible, moves it to the top of the drawing order for the display on which it was created (so that all other shells on that display, which are not the receiver's children will be drawn behind it) and forces the window manager to make the shell active.
int getAlpha()
Returns the receiver's alpha value.
boolean getEnabled()
Returns true if the receiver is enabled, and false otherwise.
boolean getFullScreen()
Returns true if the receiver is currently in fullscreen state, and false otherwise.
int getImeInputMode()
Returns the receiver's input method editor mode.
boolean getMaximized()
Returns true if the receiver is currently maximized, and false otherwise.
Point   getMinimumSize()
Returns a point describing the minimum receiver's size.
boolean getModified()
Gets the receiver's modified state.
Region  getRegion()
Returns the region that defines the shape of the shell, or null if the shell has the default shape.
Shell   getShell()
Returns the receiver's shell.
Shell[] getShells()
Returns an array containing all shells which are descendants of the receiver.
ToolBar getToolBar()
Returns a ToolBar object representing the tool bar that can be shown in the receiver's trim.
static Shell    internal_new(Display display,        long handle)
Invokes platform specific functionality to allocate a new shell that is not embedded.
boolean isEnabled()
Returns true if the receiver is enabled and all ancestors up to and including the receiver's nearest ancestor shell are enabled.
boolean isVisible()
Returns true if the receiver is visible and all ancestors up to and including the receiver's nearest ancestor shell are visible.
void    open()
Moves the receiver to the top of the drawing order for the display on which it was created (so that all other shells on that display, which are not the receiver's children will be drawn behind it), marks it visible, sets the focus and asks the window manager to make the shell active.
boolean print(GC gc)
Prints the receiver and all children.
void    removeShellListener(ShellListener l istener)
Removes the listener from the collection of listeners who will be notified when operations are performed on the receiver.
void    requestLayout()
Requests that this control and all of its ancestors be repositioned by their layouts at the earliest opportunity.
void    setActive()
If the receiver is visible, moves it to the top of the drawing order for the display on which it was created (so that all other shells on that display, which are not the receiver's children will be drawn behind it) and asks the window manager to make the shell active
void    setAlpha(int alpha)
Sets the receiver's alpha value which must be between 0 (transparent) and 255 (opaque).
void    setEnabled(boolean enabled)
Enables the receiver if the argument is true, and disables it otherwise.
void    setFullScreen(boolean fullScreen)
Sets the full screen state of the receiver.
void    setImeInputMode(int mode)
Sets the input method editor mode to the argument which should be the result of bitwise OR'ing together one or more of the following constants defined in class SWT: NONE, ROMAN, DBCS, PHONETIC, NATIVE, ALPHA.
void    setMinimumSize(int width,      int height)
Sets the receiver's minimum size to the size specified by the arguments.
void    setMinimumSize(Point size)
Sets the receiver's minimum size to the size specified by the argument.
void    setModified(boolean modified)
Sets the receiver's modified state as specified by the argument.
void    setRegion(Region region)
Sets the shape of the shell to the region specified by the argument.
void    setVisible(boolean visible)
Marks the receiver as visible if the argument is true, and marks it invisible otherwise.
static Shell    win32_new(Display display,  long handle)
Invokes platform specific functionality to allocate a new shell that is embedded.

Methods inherited from class org.eclipse.swt.widgets.Decorations
checkSubclass, getDefaultButton, getImage, getImages, getMenuBar, getMinimized, getText, isReparentable, setDefaultButton, setImage, setImages, setMaximized, setMenuBar, setMinimized, setOrientation, setText

Methods inherited from class org.eclipse.swt.widgets.Canvas
drawBackground, getCaret, getIME, scroll, setCaret, setFont, setIME

Methods inherited from class org.eclipse.swt.widgets.Composite
changed, drawBackground, getBackgroundMode, getChildren, getLayout, getLayoutDeferred, getTabList, isLayoutDeferred, layout, layout, layout, layout, layout, setBackgroundMode, setFocus, setLayout, setLayoutDeferred, setTabList

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isFocusControl, moveAbove, moveBelow, pack, pack, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setForeground, setLayoutData, setLocation, setLocation, setMenu, setParent, setRedraw, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

Shell
public Shell()
Constructs a new instance of this class. This is equivalent to calling Shell((Display) null).
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass

Shell
public Shell(int style)
Constructs a new instance of this class given only the style value describing its behavior and appearance. This is equivalent to calling Shell((Display) null, style). The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
style - the style of control to construct
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.BORDER, SWT.CLOSE, SWT.MIN, SWT.MAX, SWT.RESIZE, SWT.TITLE, SWT.TOOL, SWT.NO_TRIM, SWT.NO_MOVE, SWT.SHELL_TRIM, SWT.DIALOG_TRIM, SWT.ON_TOP, SWT.MODELESS, SWT.PRIMARY_MODAL, SWT.APPLICATION_MODAL, SWT.SYSTEM_MODAL, SWT.SHEET

Shell
public Shell(Display display)
Constructs a new instance of this class given only the display to create it on. It is created with style SWT.SHELL_TRIM. Note: Currently, null can be passed in for the display argument. This has the effect of creating the shell on the currently active display if there is one. If there is no current display, the shell is created on a "default" display. Passing in null as the display argument is not considered to be good coding style, and may not be supported in a future release of SWT.
Parameters:
display - the display to create the shell on
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass

Shell
public Shell(Display display,
             int style)
Constructs a new instance of this class given the display to create it on and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Note: Currently, null can be passed in for the display argument. This has the effect of creating the shell on the currently active display if there is one. If there is no current display, the shell is created on a "default" display. Passing in null as the display argument is not considered to be good coding style, and may not be supported in a future release of SWT.
Parameters:
display - the display to create the shell on
style - the style of control to construct
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.BORDER, SWT.CLOSE, SWT.MIN, SWT.MAX, SWT.RESIZE, SWT.TITLE, SWT.TOOL, SWT.NO_TRIM, SWT.NO_MOVE, SWT.SHELL_TRIM, SWT.DIALOG_TRIM, SWT.ON_TOP, SWT.MODELESS, SWT.PRIMARY_MODAL, SWT.APPLICATION_MODAL, SWT.SYSTEM_MODAL, SWT.SHEET

Shell
public Shell(Shell parent)
Constructs a new instance of this class given only its parent. It is created with style SWT.DIALOG_TRIM. Note: Currently, null can be passed in for the parent. This has the effect of creating the shell on the currently active display if there is one. If there is no current display, the shell is created on a "default" display. Passing in null as the parent is not considered to be good coding style, and may not be supported in a future release of SWT.
Parameters:
parent - a shell which will be the parent of the new instance
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the parent is disposed
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass

Shell
public Shell(Shell parent,
             int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Note: Currently, null can be passed in for the parent. This has the effect of creating the shell on the currently active display if there is one. If there is no current display, the shell is created on a "default" display. Passing in null as the parent is not considered to be good coding style, and may not be supported in a future release of SWT.
Parameters:
parent - a shell which will be the parent of the new instance
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the parent is disposed
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.BORDER, SWT.CLOSE, SWT.MIN, SWT.MAX, SWT.RESIZE, SWT.TITLE, SWT.NO_TRIM, SWT.NO_MOVE, SWT.SHELL_TRIM, SWT.DIALOG_TRIM, SWT.ON_TOP, SWT.TOOL, SWT.MODELESS, SWT.PRIMARY_MODAL, SWT.APPLICATION_MODAL, SWT.SYSTEM_MODAL, SWT.SHEET

Method Detail

win32_new
public static Shell win32_new(Display display,
                              long handle)
Invokes platform specific functionality to allocate a new shell that is embedded. IMPORTANT: This method is not part of the public API for Shell. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Parameters:
display - the display for the shell
handle - the handle for the shell
Returns:
a new shell object containing the specified display and handle

internal_new
public static Shell internal_new(Display display,
                                 long handle)
Invokes platform specific functionality to allocate a new shell that is not embedded. IMPORTANT: This method is not part of the public API for Shell. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms, and should never be called from application code.
Parameters:
display - the display for the shell
handle - the handle for the shell
Returns:
a new shell object containing the specified display and handle
since. :
3.3

addShellListener
public void addShellListener(ShellListener listener)
Adds the listener to the collection of listeners who will be notified when operations are performed on the receiver, by sending the listener one of the messages defined in the ShellListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ShellListener, removeShellListener(org.eclipse.swt.events.ShellListener)

close
public void close()
Requests that the window manager close the receiver in the same way it would be closed when the user clicks on the "close box" or performs some other platform specific key or mouse combination that indicates the window should be removed.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SWT.Close, dispose()

dispose
public void dispose()
Description copied from class: Widget
Disposes of the operating system resources associated with the receiver and all its descendants. After this method has been invoked, the receiver and all descendants will answer true when sent the message isDisposed(). Any internal connections between the widgets in the tree will have been removed to facilitate garbage collection. This method does nothing if the widget is already disposed. NOTE: This method is not called recursively on the descendants of the receiver. This means that, widget implementers can not detect when a widget is being disposed of by re-implementing this method, but should instead listen for the Dispose event.
Overrides:
dispose in class Decorations
See Also:
Widget.addDisposeListener(org.eclipse.swt.events.DisposeListener), Widget.removeDisposeListener(org.eclipse.swt.events.DisposeListener), Widget.checkWidget()

forceActive
public void forceActive()
If the receiver is visible, moves it to the top of the drawing order for the display on which it was created (so that all other shells on that display, which are not the receiver's children will be drawn behind it) and forces the window manager to make the shell active.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0
See Also:
Control.moveAbove(org.eclipse.swt.widgets.Control), Control.setFocus(), Control.setVisible(boolean), Display.getActiveShell(), Decorations.setDefaultButton(Button), open(), setActive()

getAlpha
public int getAlpha()
Returns the receiver's alpha value. The alpha value is between 0 (transparent) and 255 (opaque).
Returns:
the alpha value
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

getEnabled
public boolean getEnabled()
Description copied from class: Control
Returns true if the receiver is enabled, and false otherwise. A disabled control is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Overrides:
getEnabled in class Control
Returns:
the receiver's enabled state
See Also:
Control.isEnabled()

getFullScreen
public boolean getFullScreen()
Returns true if the receiver is currently in fullscreen state, and false otherwise.
Returns:
the fullscreen state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

getImeInputMode
public int getImeInputMode()
Returns the receiver's input method editor mode. This will be the result of bitwise OR'ing together one or more of the following constants defined in class SWT: NONE, ROMAN, DBCS, PHONETIC, NATIVE, ALPHA.
Returns:
the IME mode
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SWT

getMaximized
public boolean getMaximized()
Description copied from class: Decorations
Returns true if the receiver is currently maximized, and false otherwise.
Overrides:
getMaximized in class Decorations
Returns:
the maximized state
See Also:
Decorations.setMaximized(boolean)

getMinimumSize
public Point getMinimumSize()
Returns a point describing the minimum receiver's size. The x coordinate of the result is the minimum width of the receiver. The y coordinate of the result is the minimum height of the receiver.
Returns:
the receiver's size
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

getModified
public boolean getModified()
Gets the receiver's modified state.
Returns:
true if the receiver is marked as modified, or false otherwise
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.5

getRegion
public Region getRegion()
Returns the region that defines the shape of the shell, or null if the shell has the default shape.
Overrides:
getRegion in class Control
Returns:
the region that defines the shape of the shell, or null
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

getShell
public Shell getShell()
Description copied from class: Control
Returns the receiver's shell. For all controls other than shells, this simply returns the control's nearest ancestor shell. Shells return themselves, even if they are children of other shells.
Overrides:
getShell in class Control
Returns:
the receiver's shell
See Also:
Control.getParent()

getShells
public Shell[] getShells()
Returns an array containing all shells which are descendants of the receiver.
Returns:
the dialog shells
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getToolBar
public ToolBar getToolBar()
Returns a ToolBar object representing the tool bar that can be shown in the receiver's trim. This will return null if the platform does not support tool bars that are not part of the content area of the shell, or if the Shell's style does not support having a tool bar.
Returns:
a ToolBar object representing the Shell's tool bar, or null.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.7

isEnabled
public boolean isEnabled()
Description copied from class: Control
Returns true if the receiver is enabled and all ancestors up to and including the receiver's nearest ancestor shell are enabled. Otherwise, false is returned. A disabled control is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Overrides:
isEnabled in class Control
Returns:
the receiver's enabled state
See Also:
Control.getEnabled()

isVisible
public boolean isVisible()
Description copied from class: Control
Returns true if the receiver is visible and all ancestors up to and including the receiver's nearest ancestor shell are visible. Otherwise, false is returned.
Overrides:
isVisible in class Control
Returns:
the receiver's visibility state
See Also:
Control.getVisible()

open
public void open()
Moves the receiver to the top of the drawing order for the display on which it was created (so that all other shells on that display, which are not the receiver's children will be drawn behind it), marks it visible, sets the focus and asks the window manager to make the shell active.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
Control.moveAbove(org.eclipse.swt.widgets.Control), Control.setFocus(), Control.setVisible(boolean), Display.getActiveShell(), Decorations.setDefaultButton(Button), setActive(), forceActive()

print
public boolean print(GC gc)
Description copied from class: Control
Prints the receiver and all children.
Overrides:
print in class Control
Parameters:
gc - the gc where the drawing occurs
Returns:
true if the operation was successful and false otherwise

removeShellListener
public void removeShellListener(ShellListener listener)
Removes the listener from the collection of listeners who will be notified when operations are performed on the receiver.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ShellListener, addShellListener(org.eclipse.swt.events.ShellListener)

requestLayout
public void requestLayout()
Description copied from class: Control
Requests that this control and all of its ancestors be repositioned by their layouts at the earliest opportunity. This should be invoked after modifying the control in order to inform any dependent layouts of the change. The control will not be repositioned synchronously. This method is fast-running and only marks the control for future participation in a deferred layout.
Invoking this method multiple times before the layout occurs is an inexpensive no-op.
Overrides:
requestLayout in class Control

setActive
public void setActive()
If the receiver is visible, moves it to the top of the drawing order for the display on which it was created (so that all other shells on that display, which are not the receiver's children will be drawn behind it) and asks the window manager to make the shell active
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0
See Also:
Control.moveAbove(org.eclipse.swt.widgets.Control), Control.setFocus(), Control.setVisible(boolean), Display.getActiveShell(), Decorations.setDefaultButton(Button), open(), setActive()

setAlpha
public void setAlpha(int alpha)
Sets the receiver's alpha value which must be between 0 (transparent) and 255 (opaque). This operation requires the operating system's advanced widgets subsystem which may not be available on some platforms.
Parameters:
alpha - the alpha value
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

setEnabled
public void setEnabled(boolean enabled)
Description copied from class: Control
Enables the receiver if the argument is true, and disables it otherwise. A disabled control is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Overrides:
setEnabled in class Control
Parameters:
enabled - the new enabled state

setFullScreen
public void setFullScreen(boolean fullScreen)
Sets the full screen state of the receiver. If the argument is true causes the receiver to switch to the full screen state, and if the argument is false and the receiver was previously switched into full screen state, causes the receiver to switch back to either the maximized or normal states. Note: The result of intermixing calls to setFullScreen(true), setMaximized(true) and setMinimized(true) will vary by platform. Typically, the behavior will match the platform user's expectations, but not always. This should be avoided if possible.
Parameters:
fullScreen - the new fullscreen state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

setImeInputMode
public void setImeInputMode(int mode)
Sets the input method editor mode to the argument which should be the result of bitwise OR'ing together one or more of the following constants defined in class SWT: NONE, ROMAN, DBCS, PHONETIC, NATIVE, ALPHA.
Parameters:
mode - the new IME mode
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SWT

setMinimumSize
public void setMinimumSize(int width,
                           int height)
Sets the receiver's minimum size to the size specified by the arguments. If the new minimum size is larger than the current size of the receiver, the receiver is resized to the new minimum size.
Parameters:
width - the new minimum width for the receiver
height - the new minimum height for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

setMinimumSize
public void setMinimumSize(Point size)
Sets the receiver's minimum size to the size specified by the argument. If the new minimum size is larger than the current size of the receiver, the receiver is resized to the new minimum size.
Parameters:
size - the new minimum size for the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

setModified
public void setModified(boolean modified)
Sets the receiver's modified state as specified by the argument.
Parameters:
modified - the new modified state for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.5

setRegion
public void setRegion(Region region)
Sets the shape of the shell to the region specified by the argument. When the argument is null, the default shape of the shell is restored. The shell must be created with the style SWT.NO_TRIM in order to specify a region. NOTE: This method also sets the size of the shell. Clients should not call Control.setSize(int, int) or Control.setBounds(int, int, int, int) on this shell. Furthermore, the passed region should not be modified any more.
Overrides:
setRegion in class Control
Parameters:
region - the region that defines the shape of the shell (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the region has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

setVisible
public void setVisible(boolean visible)
Description copied from class: Control
Marks the receiver as visible if the argument is true, and marks it invisible otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, marking it visible may not actually cause it to be displayed.
Overrides:
setVisible in class Decorations
Parameters:
visible - the new visibility state


org.eclipse.swt.events
Class ShellAdapter
java.lang.Object
org.eclipse.swt.events.ShellAdapter
All Implemented Interfaces:
java.util.EventListener, ShellListener, SWTEventListener


public abstract class ShellAdapter extends java.lang.Object implements ShellListener
This adapter class provides default implementations for the methods described by the ShellListener interface. Classes that wish to deal with ShellEvents can extend this class and override only the methods which they are interested in.
See Also:
ShellListener, ShellEvent, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
ShellAdapter()

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    shellActivated(ShellEvent e)
Sent when a shell becomes the active window.
void    shellClosed(ShellEvent e)
Sent when a shell is closed.
void    shellDeactivated(ShellEvent e)
Sent when a shell stops being the active window.
void    shellDeiconified(ShellEvent e)
Sent when a shell is un-minimized.
void    shellIconified(ShellEvent e)
Sent when a shell is minimized.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

ShellAdapter
public ShellAdapter()

Method Detail

shellActivated
public void shellActivated(ShellEvent e)
Sent when a shell becomes the active window. The default behavior is to do nothing.
Specified by:
shellActivated in interface ShellListener
Parameters:
e - an event containing information about the activation

shellClosed
public void shellClosed(ShellEvent e)
Sent when a shell is closed. The default behavior is to do nothing.
Specified by:
shellClosed in interface ShellListener
Parameters:
e - an event containing information about the close

shellDeactivated
public void shellDeactivated(ShellEvent e)
Sent when a shell stops being the active window. The default behavior is to do nothing.
Specified by:
shellDeactivated in interface ShellListener
Parameters:
e - an event containing information about the deactivation

shellDeiconified
public void shellDeiconified(ShellEvent e)
Sent when a shell is un-minimized. The default behavior is to do nothing.
Specified by:
shellDeiconified in interface ShellListener
Parameters:
e - an event containing information about the un-minimization

shellIconified
public void shellIconified(ShellEvent e)
Sent when a shell is minimized. The default behavior is to do nothing.
Specified by:
shellIconified in interface ShellListener
Parameters:
e - an event containing information about the minimization


org.eclipse.swt.events
Class ShellEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.ShellEvent
All Implemented Interfaces:
java.io.Serializable


public final class ShellEvent extends TypedEvent
Instances of this class are sent as a result of operations being performed on shells.
See Also:
ShellListener, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
boolean doit
A flag indicating whether the operation should be allowed.

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
ShellEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

doit
public boolean doit
A flag indicating whether the operation should be allowed. Setting this field to false will cancel the operation.

Constructor Detail

ShellEvent
public ShellEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class TypedEvent
Returns:
a string representation of the event


org.eclipse.swt.events
Interface ShellListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
All Known Implementing Classes:
ShellAdapter


public interface ShellListener extends SWTEventListener
Classes which implement this interface provide methods that deal with changes in state of Shells. After creating an instance of a class that implements this interface it can be added to a shell using the addShellListener method and removed using the removeShellListener method. When the state of the shell changes, the appropriate method will be invoked.
See Also:
ShellAdapter, ShellEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    shellActivated(ShellEvent e)
Sent when a shell becomes the active window.
void    shellClosed(ShellEvent e)
Sent when a shell is closed.
void    shellDeactivated(ShellEvent e)
Sent when a shell stops being the active window.
void    shellDeiconified(ShellEvent e)
Sent when a shell is un-minimized.
void    shellIconified(ShellEvent e)
Sent when a shell is minimized.

Method Detail

shellActivated
void shellActivated(ShellEvent e)
Sent when a shell becomes the active window.
Parameters:
e - an event containing information about the activation

shellClosed
void shellClosed(ShellEvent e)
Sent when a shell is closed.
Parameters:
e - an event containing information about the close

shellDeactivated
void shellDeactivated(ShellEvent e)
Sent when a shell stops being the active window.
Parameters:
e - an event containing information about the deactivation

shellDeiconified
void shellDeiconified(ShellEvent e)
Sent when a shell is un-minimized.
Parameters:
e - an event containing information about the un-minimization

shellIconified
void shellIconified(ShellEvent e)
Sent when a shell is minimized.
Parameters:
e - an event containing information about the minimization


org.eclipse.swt.widgets
Class Slider
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Slider
All Implemented Interfaces:
Drawable


public class Slider extends Control
Instances of this class are selectable user interface objects that represent a range of positive, numeric values. At any given moment, a given slider will have a single 'selection' that is considered to be its value, which is constrained to be within the range of values the slider represents (that is, between its minimum and maximum values).
Typically, sliders will be made up of five areas:
an arrow button for decrementing the value
a page decrement area for decrementing the value by a larger amount
a thumb for modifying the value by mouse dragging
a page increment area for incrementing the value by a larger amount
an arrow button for incrementing the value
Based on their style, sliders are either HORIZONTAL (which have a left facing button for decrementing the value and a right facing button for incrementing it) or VERTICAL (which have an upward facing button for decrementing the value and a downward facing buttons for incrementing it). On some platforms, the size of the slider's thumb can be varied relative to the magnitude of the range of values it represents (that is, relative to the difference between its maximum and minimum values). Typically, this is used to indicate some proportional value such as the ratio of the visible area of a document to the total amount of space that it would take to display it. SWT supports setting the thumb size even if the underlying platform does not, but in this case the appearance of the slider will not change.
Styles:
HORIZONTAL, VERTICAL
Events:
Selection
Note: Only one of the styles HORIZONTAL and VERTICAL may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
ScrollBar, Slider snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Slider(Composite parent,       int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's value, by sending it one of the messages defined in the SelectionListener interface.
boolean getEnabled()
Returns true if the receiver is enabled, and false otherwise.
int getIncrement()
Returns the amount that the receiver's value will be modified by when the up/down (or right/left) arrows are pressed.
int getMaximum()
Returns the maximum value which the receiver will allow.
int getMinimum()
Returns the minimum value which the receiver will allow.
int getPageIncrement()
Returns the amount that the receiver's value will be modified by when the page increment/decrement areas are selected.
int getSelection()
Returns the 'selection', which is the receiver's value.
int getThumb()
Returns the receiver's thumb value.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's value.
void    setIncrement(int value)
Sets the amount that the receiver's value will be modified by when the up/down (or right/left) arrows are pressed to the argument, which must be at least one.
void    setMaximum(int value)
Sets the maximum.
void    setMinimum(int value)
Sets the minimum value.
void    setPageIncrement(int value)
Sets the amount that the receiver's value will be modified by when the page increment/decrement areas are selected to the argument, which must be at least one.
void    setSelection(int value)
Sets the 'selection', which is the receiver's value, to the argument which must be greater than or equal to zero.
void    setThumb(int value)
Sets the thumb value.
void    setValues(int selection,          i nt minimum,          int maximum,        int thumb,          int incre ment,          int pageIncrement)
Sets the receiver's selection, minimum value, maximum value, thumb, increment and page increment all at once.

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setFocus, setFont, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

Slider
public Slider(Composite parent,
              int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.HORIZONTAL, SWT.VERTICAL, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's value, by sending it one of the messages defined in the SelectionListener interface. When widgetSelected is called, the event object detail field contains one of the following values: SWT.NONE - for the end of a drag. SWT.DRAG. SWT.HOME. SWT.END. SWT.ARROW_DOWN. SWT.ARROW_UP. SWT.PAGE_DOWN. SWT.PAGE_UP. widgetDefaultSelected is not called.
Parameters:
listener - the listener which should be notified when the user changes the receiver's value
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

getEnabled
public boolean getEnabled()
Description copied from class: Control
Returns true if the receiver is enabled, and false otherwise. A disabled control is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Overrides:
getEnabled in class Control
Returns:
the receiver's enabled state
See Also:
Control.isEnabled()

getIncrement
public int getIncrement()
Returns the amount that the receiver's value will be modified by when the up/down (or right/left) arrows are pressed.
Returns:
the increment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMaximum
public int getMaximum()
Returns the maximum value which the receiver will allow.
Returns:
the maximum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMinimum
public int getMinimum()
Returns the minimum value which the receiver will allow.
Returns:
the minimum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getPageIncrement
public int getPageIncrement()
Returns the amount that the receiver's value will be modified by when the page increment/decrement areas are selected.
Returns:
the page increment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelection
public int getSelection()
Returns the 'selection', which is the receiver's value.
Returns:
the selection
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getThumb
public int getThumb()
Returns the receiver's thumb value.
Returns:
the thumb value
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's value.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

setIncrement
public void setIncrement(int value)
Sets the amount that the receiver's value will be modified by when the up/down (or right/left) arrows are pressed to the argument, which must be at least one.
Parameters:
value - the new increment (must be greater than zero)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMaximum
public void setMaximum(int value)
Sets the maximum. If this value is negative or less than or equal to the minimum, the value is ignored. If necessary, first the thumb and then the selection are adjusted to fit within the new range.
Parameters:
value - the new maximum, which must be greater than the current minimum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMinimum
public void setMinimum(int value)
Sets the minimum value. If this value is negative or greater than or equal to the maximum, the value is ignored. If necessary, first the thumb and then the selection are adjusted to fit within the new range.
Parameters:
value - the new minimum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setPageIncrement
public void setPageIncrement(int value)
Sets the amount that the receiver's value will be modified by when the page increment/decrement areas are selected to the argument, which must be at least one.
Parameters:
value - the page increment (must be greater than zero)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setSelection
public void setSelection(int value)
Sets the 'selection', which is the receiver's value, to the argument which must be greater than or equal to zero.
Parameters:
value - the new selection (must be zero or greater)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setThumb
public void setThumb(int value)
Sets the thumb value. The thumb value should be used to represent the size of the visual portion of the current range. This value is usually the same as the page increment value. This new value will be ignored if it is less than one, and will be clamped if it exceeds the receiver's current range.
Parameters:
value - the new thumb value, which must be at least one and not larger than the size of the current range
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setValues
public void setValues(int selection,
                      int minimum,
                      int maximum,
                      int thumb,
                      int increment,
                      int pageIncrement)
Sets the receiver's selection, minimum value, maximum value, thumb, increment and page increment all at once. Note: This is similar to setting the values individually using the appropriate methods, but may be implemented in a more efficient fashion on some platforms.
Parameters:
selection - the new selection value
minimum - the new minimum value
maximum - the new maximum value
thumb - the new thumb value
increment - the new increment value
pageIncrement - the new pageIncrement value
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class Spinner
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.Composite
org.eclipse.swt.widgets.Spinner
All Implemented Interfaces:
Drawable


public class Spinner extends Composite
Instances of this class are selectable user interface objects that allow the user to enter and modify numeric values. Note that although this class is a subclass of Composite, it does not make sense to add children to it, or set a layout on it.
Styles:
READ_ONLY, WRAP
Events:
Selection, Modify, Verify
IMPORTANT: This class is not intended to be subclassed.
since. :
3.1
See Also:
Spinner snippets, SWT Example: ControlExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
static int  LIMIT
the operating system limit for the number of characters that the text field in an instance of this class can hold

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Spinner(Composite parent,        int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addModifyListener(ModifyListener li stener)
Adds the listener to the collection of listeners who will be notified when the receiver's text is modified, by sending it one of the messages defined in the ModifyListener interface.
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface.
protected void  checkSubclass()
Checks that this class can be subclassed.
void    copy()
Copies the selected text.
void    cut()
Cuts the selected text.
int getDigits()
Returns the number of decimal places used by the receiver.
int getIncrement()
Returns the amount that the receiver's value will be modified by when the up/down arrows are pressed.
int getMaximum()
Returns the maximum value which the receiver will allow.
int getMinimum()
Returns the minimum value which the receiver will allow.
int getPageIncrement()
Returns the amount that the receiver's position will be modified by when the page up/down keys are pressed.
int getSelection()
Returns the selection, which is the receiver's position.
java.lang.String    getText()
Returns a string containing a copy of the contents of the receiver's text field, or an empty string if there are no contents.
int getTextLimit()
Returns the maximum number of characters that the receiver's text field is capable of holding.
void    paste()
Pastes text from clipboard.
void    removeModifyListener(ModifyListener  listener)
Removes the listener from the collection of listeners who will be notified when the receiver's text is modified.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
void    setDigits(int value)
Sets the number of decimal places used by the receiver.
void    setIncrement(int value)
Sets the amount that the receiver's value will be modified by when the up/down arrows are pressed to the argument, which must be at least one.
void    setMaximum(int value)
Sets the maximum value that the receiver will allow.
void    setMinimum(int value)
Sets the minimum value that the receiver will allow.
void    setPageIncrement(int value)
Sets the amount that the receiver's position will be modified by when the page up/down keys are pressed to the argument, which must be at least one.
void    setSelection(int value)
Sets the selection, which is the receiver's position, to the argument.
void    setTextLimit(int limit)
Sets the maximum number of characters that the receiver's text field is capable of holding to be the argument.
void    setValues(int selection,          i nt minimum,          int maximum,        int digits,          int incr ement,          int pageIncrement)
Sets the receiver's selection, minimum value, maximum value, digits, increment and page increment all at once.

Methods inherited from class org.eclipse.swt.widgets.Composite
changed, drawBackground, getBackgroundMode, getChildren, getLayout, getLayoutDeferred, getTabList, isLayoutDeferred, layout, layout, layout, layout, layout, setBackgroundMode, setFocus, setLayout, setLayoutDeferred, setTabList

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setFont, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Field Detail

LIMIT
public static final int LIMIT
the operating system limit for the number of characters that the text field in an instance of this class can hold
since. :
3.4

Constructor Detail

Spinner
public Spinner(Composite parent,
               int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.READ_ONLY, SWT.WRAP, Widget.checkSubclass(), Widget.getStyle()

Method Detail

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Composite

addModifyListener
public void addModifyListener(ModifyListener listener)
Adds the listener to the collection of listeners who will be notified when the receiver's text is modified, by sending it one of the messages defined in the ModifyListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ModifyListener, removeModifyListener(org.eclipse.swt.events.ModifyListener)

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface. widgetSelected is not called for texts. widgetDefaultSelected is typically called when ENTER is pressed in a single-line text.
Parameters:
listener - the listener which should be notified when the control is selected by the user
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

copy
public void copy()
Copies the selected text. The current selection is copied to the clipboard.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

cut
public void cut()
Cuts the selected text. The current selection is first copied to the clipboard and then deleted from the widget.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getDigits
public int getDigits()
Returns the number of decimal places used by the receiver.
Returns:
the digits
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getIncrement
public int getIncrement()
Returns the amount that the receiver's value will be modified by when the up/down arrows are pressed.
Returns:
the increment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMaximum
public int getMaximum()
Returns the maximum value which the receiver will allow.
Returns:
the maximum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMinimum
public int getMinimum()
Returns the minimum value which the receiver will allow.
Returns:
the minimum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getPageIncrement
public int getPageIncrement()
Returns the amount that the receiver's position will be modified by when the page up/down keys are pressed.
Returns:
the page increment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelection
public int getSelection()
Returns the selection, which is the receiver's position.
Returns:
the selection
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getText
public java.lang.String getText()
Returns a string containing a copy of the contents of the receiver's text field, or an empty string if there are no contents.
Returns:
the receiver's text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

getTextLimit
public int getTextLimit()
Returns the maximum number of characters that the receiver's text field is capable of holding. If this has not been changed by setTextLimit(), it will be the constant Spinner.LIMIT.
Returns:
the text limit
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4
See Also:
LIMIT

paste
public void paste()
Pastes text from clipboard. The selected text is deleted from the widget and new text inserted from the clipboard.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeModifyListener
public void removeModifyListener(ModifyListener listener)
Removes the listener from the collection of listeners who will be notified when the receiver's text is modified.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ModifyListener, addModifyListener(org.eclipse.swt.events.ModifyListener)

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

setDigits
public void setDigits(int value)
Sets the number of decimal places used by the receiver. The digit setting is used to allow for floating point values in the receiver. For example, to set the selection to a floating point value of 1.37 call setDigits() with a value of 2 and setSelection() with a value of 137. Similarly, if getDigits() has a value of 2 and getSelection() returns 137 this should be interpreted as 1.37. This applies to all numeric APIs.
Parameters:
value - the new digits (must be greater than or equal to zero)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the value is less than zero
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setIncrement
public void setIncrement(int value)
Sets the amount that the receiver's value will be modified by when the up/down arrows are pressed to the argument, which must be at least one.
Parameters:
value - the new increment (must be greater than zero)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMaximum
public void setMaximum(int value)
Sets the maximum value that the receiver will allow. This new value will be ignored if it is less than the receiver's current minimum value. If the new maximum is applied then the receiver's selection value will be adjusted if necessary to fall within its new range.
Parameters:
value - the new maximum, which must be greater than or equal to the current minimum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMinimum
public void setMinimum(int value)
Sets the minimum value that the receiver will allow. This new value will be ignored if it is greater than the receiver's current maximum value. If the new minimum is applied then the receiver's selection value will be adjusted if necessary to fall within its new range.
Parameters:
value - the new minimum, which must be less than or equal to the current maximum
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setPageIncrement
public void setPageIncrement(int value)
Sets the amount that the receiver's position will be modified by when the page up/down keys are pressed to the argument, which must be at least one.
Parameters:
value - the page increment (must be greater than zero)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setSelection
public void setSelection(int value)
Sets the selection, which is the receiver's position, to the argument. If the argument is not within the range specified by minimum and maximum, it will be adjusted to fall within this range.
Parameters:
value - the new selection (must be zero or greater)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setTextLimit
public void setTextLimit(int limit)
Sets the maximum number of characters that the receiver's text field is capable of holding to be the argument. To reset this value to the default, use setTextLimit(Spinner.LIMIT). Specifying a limit value larger than Spinner.LIMIT sets the receiver's limit to Spinner.LIMIT.
Parameters:
limit - new text limit
Throws:
java.lang.IllegalArgumentException -
ERROR_CANNOT_BE_ZERO - if the limit is zero
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4
See Also:
LIMIT

setValues
public void setValues(int selection,
                      int minimum,
                      int maximum,
                      int digits,
                      int increment,
                      int pageIncrement)
Sets the receiver's selection, minimum value, maximum value, digits, increment and page increment all at once. Note: This is similar to setting the values individually using the appropriate methods, but may be implemented in a more efficient fashion on some platforms.
Parameters:
selection - the new selection value
minimum - the new minimum value
maximum - the new maximum value
digits - the new digits value
increment - the new increment value
pageIncrement - the new pageIncrement value
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2


org.eclipse.swt
Class SWT
java.lang.Object
org.eclipse.swt.SWT


public class SWT extends java.lang.Object
This class provides access to a small number of SWT system-wide methods, and in addition defines the public constants provided by SWT. By defining constants like UP and DOWN in a single class, SWT can share common names and concepts at the same time minimizing the number of classes, names and constants for the application programmer.
Note that some of the constants provided by this class represent optional, appearance related aspects of widgets which are available either only on some window systems, or for a differing set of widgets on each window system. These constants are marked as HINTs. The set of widgets which support a particular HINT may change from release to release, although we typically will not withdraw support for a HINT once it is made available.
See Also:
Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
static int  ABORT
The MessageBox style constant for an ABORT button; the only valid combination is ABORT|RETRY|IGNORE (value is 1<<9).
static int  Activate
The activate event type (value is 26).
static int  ALL
A constant indicating that a given operation should be performed on all widgets (value is 1<<0).
static int  ALPHA
Input Method Editor style constant for alpha input behavior (value is 1<<2).
static int  ALT
keyboard and/or mouse event mask indicating that the ALT key was pushed on the keyboard when the event was generated (value is 1<<16).
static int  APPLICATION_MODAL
Style constant for application modal behavior (value is 1<<16).
static int  Arm
The arm event type (value is 30).
static int  ARROW
Style constant for arrow button behavior (value is 1<<2).
static int  ARROW_DOWN
Keyboard event constant representing the DOWN ARROW key (value is (1<<24)+2).
static int  ARROW_LEFT
Keyboard event constant representing the LEFT ARROW key (value is (1<<24)+3).
static int  ARROW_RIGHT
Keyboard event constant representing the RIGHT ARROW key (value is (1<<24)+4).
static int  ARROW_UP
Keyboard event constant representing the UP ARROW key (value is (1<<24)+1).
static int  AUTO_TEXT_DIRECTION
A bit mask to indicate Bidi "auto" text direction.
static int  BACKGROUND
Event detail field that indicates a user-interface component draws the background (value is 1<<3).
static int  BALLOON
Style constant for balloon behavior (value is 1<<12).
static int  BAR
Style constant for menu bar behavior (value is 1<<1).
static int  BEGINNING
Style constant for vertical alignment or orientation behavior (value is 1).
static int  BITMAP
Constant indicating that an image or operation is of type bitmap (value is 0).
static int  BOLD
The font style constant indicating a bold weight font (value is 1<<0).
static int  BORDER
Style constant for bordered behavior (value is 1<<11).
static int  BORDER_DASH
Style constant to indicate dashed border (value is 2).
static int  BORDER_DOT
Style constant to indicate dotted border (value is 4).
static int  BORDER_SOLID
Style constant to indicate solid border (value is 1).
static int  BOTTOM
Style constant for align bottom behavior (value is 1<<10, since.  align DOWN and align BOTTOM are considered the same).
static int  BREAK
Keyboard event constant representing the break key (value is (1<<24)+86).
static char BS
ASCII character convenience constant for the backspace character (value is the char '\b').
static int  BUTTON_MASK
Keyboard and/or mouse event mask indicating all possible mouse buttons.
static int  BUTTON1
Keyboard and/or mouse event mask indicating that mouse button one (usually 'left') was pushed when the event was generated.
static int  BUTTON2
Keyboard and/or mouse event mask indicating that mouse button two (usually 'middle') was pushed when the event was generated.
static int  BUTTON3
Keyboard and/or mouse event mask indicating that mouse button three (usually 'right') was pushed when the event was generated.
static int  BUTTON4
Keyboard and/or mouse event mask indicating that mouse button four was pushed when the event was generated.
static int  BUTTON5
Keyboard and/or mouse event mask indicating that mouse button five was pushed when the event was generated.
static int  CALENDAR
Style constant for calendar display (value is 1<<10).
static int  CANCEL
The MessageBox style constant for a CANCEL button; valid combinations are OK|CANCEL, YES|NO|CANCEL, RETRY|CANCEL (value is 1<<8).
static int  CAP_FLAT
Line drawing style for flat end caps (value is 1).
static int  CAP_ROUND
Line drawing style for rounded end caps (value is 2).
static int  CAP_SQUARE
Line drawing style for square end caps (value is 3).
static int  CAPS_LOCK
Keyboard event constant representing the caps lock key (value is (1<<24)+82).
static int  CASCADE
Style constant for cascade behavior (value is 1<<6).
static int  CENTER
Style constant for align center behavior (value is 1<<24).
static int  CHANGED
A constant indicating that widgets have changed.
static int  CHECK
Style constant for check box behavior (value is 1<<5).
static int  CLIP_CHILDREN
Style constant indicating that the window manager should clip a widget's children with respect to its viewable area.
static int  CLIP_SIBLINGS
Style constant indicating that the window manager should clip a widget's siblings with respect to its viewable area.
static int  Close
The close event type (value is 21).
static int  CLOSE
Style constant for close box trim (value is 1<<6, since.  we do not distinguish between CLOSE style and MENU style).
static int  Collapse
The collapse event type (value is 18).
static int  COLOR_BLACK
Default color black (value is 2).
static int  COLOR_BLUE
Default color blue (value is 9).
static int  COLOR_CYAN
Default color cyan (value is 13).
static int  COLOR_DARK_BLUE
Default color dark blue (value is 10).
static int  COLOR_DARK_CYAN
Default color dark cyan (value is 14).
static int  COLOR_DARK_GRAY
Default color dark gray (value is 16).
static int  COLOR_DARK_GREEN
Default color dark green (value is 6).
static int  COLOR_DARK_MAGENTA
Default color dark magenta (value is 12).
static int  COLOR_DARK_RED
Default color dark red (value is 4).
static int  COLOR_DARK_YELLOW
Default color dark yellow (value is 8).
static int  COLOR_GRAY
Default color gray (value is 15).
static int  COLOR_GREEN
Default color green (value is 5).
static int  COLOR_INFO_BACKGROUND
System color used to paint tooltip background areas (value is 29).
static int  COLOR_INFO_FOREGROUND
System color used to paint tooltip text (value is 28).
static int  COLOR_LINK_FOREGROUND
System color used to paint link text (value is 36).
static int  COLOR_LIST_BACKGROUND
System color used to paint list background areas (value is 25).
static int  COLOR_LIST_FOREGROUND
System color used to paint list foreground areas (value is 24).
static int  COLOR_LIST_SELECTION
System color used to paint list selection background areas (value is 26).
static int  COLOR_LIST_SELECTION_TEXT
System color used to paint list selected text (value is 27).
static int  COLOR_MAGENTA
Default color magenta (value is 11).
static int  COLOR_RED
Default color red (value is 3).
static int  COLOR_TITLE_BACKGROUND
System color used to paint title background areas (value is 31).
static int  COLOR_TITLE_BACKGROUND_GRADIENT
System color used to paint title background gradient (value is 32).
static int  COLOR_TITLE_FOREGROUND
System color used to paint title text (value is 30).
static int  COLOR_TITLE_INACTIVE_BACKGROUND
System color used to paint inactive title background areas (value is 34).
static int  COLOR_TITLE_INACTIVE_BACKGROUND_GRA DIENT
System color used to paint inactive title background gradient (value is 35).
static int  COLOR_TITLE_INACTIVE_FOREGROUND
System color used to paint inactive title text (value is 33).
static int  COLOR_TRANSPARENT
System color used to paint with alpha 0 (value is 37).
static int  COLOR_WHITE
Default color white (value is 1).
static int  COLOR_WIDGET_BACKGROUND
System color used to paint background areas (value is 22).
static int  COLOR_WIDGET_BORDER
System color used to paint border areas (value is 23).
static int  COLOR_WIDGET_DARK_SHADOW
System color used to paint dark shadow areas (value is 17).
static int  COLOR_WIDGET_FOREGROUND
System color used to paint foreground areas (value is 21).
static int  COLOR_WIDGET_HIGHLIGHT_SHADOW
System color used to paint highlight shadow areas (value is 20).
static int  COLOR_WIDGET_LIGHT_SHADOW
System color used to paint light shadow areas (value is 19).
static int  COLOR_WIDGET_NORMAL_SHADOW
System color used to paint normal shadow areas (value is 18).
static int  COLOR_YELLOW
Default color yellow (value is 7).
static int  COMMAND
Keyboard and/or mouse event mask indicating that the COMMAND key was pushed on the keyboard when the event was generated (value is 1<<22).
static int  COMPOSITION_CHANGED
The IME composition event detail that indicates a change in the IME composition.
static int  COMPOSITION_OFFSET
The IME composition event detail that indicates that the IME needs the offset for a given location.
static int  COMPOSITION_SELECTION
The IME composition event detail that indicates that IME needs the selected text and its start and end offsets (value is 3).
static int  CONTROL
Keyboard and/or mouse event mask indicating that the CTRL key was pushed on the keyboard when the event was generated.
static char CR
ASCII character convenience constant for the carriage return character (value is the char '\r').
static int  CTRL
Keyboard and/or mouse event mask indicating that the CTRL key was pushed on the keyboard when the event was generated (value is 1<<18).
static int  CURSOR_APPSTARTING
System app startup cursor (value is 3).
static int  CURSOR_ARROW
System arrow cursor (value is 0).
static int  CURSOR_CROSS
System cross hair cursor (value is 2).
static int  CURSOR_HAND
System hand cursor (value is 21).
static int  CURSOR_HELP
System help cursor (value is 4).
static int  CURSOR_IBEAM
System i-beam cursor (value is 19).
static int  CURSOR_NO
System "not allowed" cursor (value is 20).
static int  CURSOR_SIZEALL
System resize all directions cursor (value is 5).
static int  CURSOR_SIZEE
System resize east cursor (value is 12).
static int  CURSOR_SIZEN
System resize north cursor (value is 10).
static int  CURSOR_SIZENE
System resize north-east cursor (value is 14).
static int  CURSOR_SIZENESW
System resize north-east-south-west cursor (value is 6).
static int  CURSOR_SIZENS
System resize north-south cursor (value is 7).
static int  CURSOR_SIZENW
System resize north-west cursor (value is 17).
static int  CURSOR_SIZENWSE
System resize north-west-south-east cursor (value is 8).
static int  CURSOR_SIZES
System resize south cursor (value is 11).
static int  CURSOR_SIZESE
System resize south-east cursor (value is 15).
static int  CURSOR_SIZESW
System resize south-west cursor (value is 16).
static int  CURSOR_SIZEW
System resize west cursor (value is 13).
static int  CURSOR_SIZEWE
System resize west-east cursor (value is 9).
static int  CURSOR_UPARROW
System up arrow cursor (value is 18).
static int  CURSOR_WAIT
System wait cursor (value is 1).
static int  DATE
Style constant for date display (value is 1<<5).
static int  DBCS
Input Method Editor style constant for double byte input behavior (value is 1<<1).
static int  Deactivate
The deactivate event type (value is 27).
static int  DEFAULT
Indicates that a default should be used (value is -1).
static int  DefaultSelection
The default selection event type (value is 14).
static int  DEFER
A constant indicating that a given operation should be deferred.
static int  Deiconify
The de-iconify event type (value is 20).
static char DEL
ASCII character convenience constant for the delete character (value is the char with value 127).
static int  DELIMITER_SELECTION
Selection constant indicating that a line delimiter should be drawn (value is 1<<17).
static int  DIALOG_TRIM
Trim style convenience constant for the most common dialog shell appearance (value is CLOSE|TITLE|BORDER).
static int  Dispose
The dispose event type (value is 12).
static int  DM_FILL_BACKGROUND
GIF image disposal method constants indicating that the the previous images should be covered with the background color before displaying the next image (value is 2).
static int  DM_FILL_NONE
GIF image disposal method constants indicating that the disposal method is to do nothing; that is, to leave the previous image in place (value is 1).
static int  DM_FILL_PREVIOUS
GIF image disposal method constants indicating that the disposal method is to restore the previous picture (value is 3).
static int  DM_UNSPECIFIED
GIF image disposal method constants indicating that the disposal method is unspecified (value is 0).
static int  DOUBLE_BUFFERED
Style constant to indicate double buffering (value is 1<<29).
static int  DOWN
Style constant for align down behavior (value is 1<<10, since.  align DOWN and align BOTTOM are considered the same).
static int  DRAG
Indicates that a user-interface component is being dragged, for example dragging the thumb of a scroll bar (value is 1).
static int  DragDetect
The drag detect event type (value is 29).
static int  DRAW_DELIMITER
Draw constant indicating whether the string drawing operation should handle line-delimiters (value is 1<<1).
static int  DRAW_MNEMONIC
Draw constant indicating whether the string drawing operation should handle mnemonics (value is 1<<3).
static int  DRAW_TAB
Draw constant indicating whether the string drawing operation should expand TAB characters (value is 1<<2).
static int  DRAW_TRANSPARENT
Draw constant indicating whether the drawing operation should fill the background (value is 1<<0).
static int  DROP_DOWN
Style constant for drop down menu/list behavior (value is 1<<2).
static int  EMBEDDED
Style constant to allow embedding (value is 1<<24).
static int  END
Keyboard event constant representing the END key (value is (1<<24)+8).
static int  EraseItem
The erase item event type (value is 40).
static int  ERROR
Constant to indicate an error state (value is 1).
static int  ERROR_CANNOT_BE_ZERO
SWT error constant indicating that a value which can not be zero was found to be (value is 7).
static int  ERROR_CANNOT_GET_COUNT
SWT error constant indicating that the underlying operating system was unable to provide count information (value is 36).
static int  ERROR_CANNOT_GET_ENABLED
SWT error constant indicating that the underlying operating system was unable to provide enabled/disabled state information (value is 31).
static int  ERROR_CANNOT_GET_ITEM
SWT error constant indicating that the underlying operating system was unable to provide the value of an item (value is 8).
static int  ERROR_CANNOT_GET_ITEM_HEIGHT
SWT error constant indicating that the underlying operating system was unable to provide the height of an item (value is 11).
static int  ERROR_CANNOT_GET_SELECTION
SWT error constant indicating that the underlying operating system was unable to provide the selection (value is 9).
static int  ERROR_CANNOT_GET_TEXT
SWT error constant indicating that the underlying operating system was unable to provide the text of a widget (value is 12).
static int  ERROR_CANNOT_INVERT_MATRIX
SWT error constant indicating that the matrix is not invertible (value is 10).
static int  ERROR_CANNOT_SET_ENABLED
SWT error constant indicating that the underlying operating system was unable to set the enabled state (value is 30).
static int  ERROR_CANNOT_SET_MENU
SWT error constant indicating that the underlying operating system was unable to set the menu (value is 29).
static int  ERROR_CANNOT_SET_SELECTION
SWT error constant indicating that the underlying operating system was unable to set the selection of a widget (value is 28).
static int  ERROR_CANNOT_SET_TEXT
SWT error constant indicating that the underlying operating system was unable to set the text of a widget (value is 13).
static int  ERROR_DEVICE_DISPOSED
SWT error constant indicating that an attempt was made to invoke an SWT operation using a device which had already been disposed (value is 45).
static int  ERROR_FAILED_EVALUATE
SWT error constant indicating that an exception happened when evaluating a javascript expression (value is 50).
static int  ERROR_FAILED_EXEC
SWT error constant indicating that an exception happened when executing a runnable (value is 46).
static int  ERROR_FAILED_LOAD_LIBRARY
SWT error constant indicating that an unsatisfied link error occurred while attempting to load a library (value is 47).
static int  ERROR_FUNCTION_DISPOSED
SWT error constant indicating that an attempt was made to use an BrowserFunction object which had already been disposed (value is 49).
static int  ERROR_GRAPHIC_DISPOSED
SWT error constant indicating that an attempt was made to invoke an SWT operation using a graphics object which had already been disposed (value is 44).
static int  ERROR_INVALID_ARGUMENT
SWT error constant indicating that an invalid argument was passed in (value is 5).
static int  ERROR_INVALID_FONT
SWT error constant indicating that a font is not valid (value is 48).
static int  ERROR_INVALID_IMAGE
SWT error constant indicating that a graphics operation was attempted with an image having an invalid format (value is 40).
static int  ERROR_INVALID_PARENT
SWT error constant indicating that a provided widget can not be used as a parent in the current operation (value is 32).
static int  ERROR_INVALID_RANGE
SWT error constant indicating that a value was found to be outside the allowable range (value is 6).
static int  ERROR_INVALID_RETURN_VALUE
SWT error constant indicating that an invalid value was returned (value is 51).
static int  ERROR_INVALID_SUBCLASS
SWT error constant indicating that an attempt was made to subclass an SWT widget class without implementing the checkSubclass() method (value is 43).
static int  ERROR_IO
SWT error constant indicating that an input/output operation failed during the execution of an SWT operation (value is 39).
static int  ERROR_ITEM_NOT_ADDED
SWT error constant indicating that the underlying operating system was unable to add an item (value is 14).
static int  ERROR_ITEM_NOT_REMOVED
SWT error constant indicating that the underlying operating system was unable to remove an item (value is 15).
static int  ERROR_MENU_NOT_BAR
SWT error constant indicating that a menu which needed to have the menu bar style had some other style instead (value is 33).
static int  ERROR_MENU_NOT_DROP_DOWN
SWT error constant indicating that a menu which needed to have the drop down style had some other style instead (value is 21).
static int  ERROR_MENU_NOT_POP_UP
SWT error constant indicating that a menu which needed to have the pop up menu style had some other style instead (value is 37).
static int  ERROR_MENUITEM_NOT_CASCADE
SWT error constant indicating that a menu item which needed to have the cascade style had some other style instead (value is 27).
static int  ERROR_NO_GRAPHICS_LIBRARY
SWT error constant indicating that the graphics library is not available (value is 16).
static int  ERROR_NO_HANDLES
SWT error constant indicating that no more handles for an operating system resource are available (value is 2).
static int  ERROR_NO_MORE_CALLBACKS
SWT error constant indicating that no more callback resources are available (value is 3).
static int  ERROR_NOT_IMPLEMENTED
SWT error constant indicating that a particular feature has not been implemented on this platform (value is 20).
static int  ERROR_NULL_ARGUMENT
SWT error constant indicating that a null argument was passed in (value is 4).
static int  ERROR_THREAD_INVALID_ACCESS
SWT error constant indicating that an attempt was made to invoke an SWT operation which can only be executed by the user-interface thread from some other thread (value is 22).
static int  ERROR_UNSPECIFIED
SWT error constant indicating that no error number was specified (value is 1).
static int  ERROR_UNSUPPORTED_DEPTH
SWT error constant indicating that a graphics operation was attempted with an image of an unsupported depth (value is 38).
static int  ERROR_UNSUPPORTED_FORMAT
SWT error constant indicating that a graphics operation was attempted with an image having a valid but unsupported format (value is 42).
static int  ERROR_WIDGET_DISPOSED
SWT error constant indicating that an attempt was made to invoke an SWT operation using a widget which had already been disposed (value is 24).
static char ESC
ASCII character convenience constant for the escape character (value is the char with value 27).
static int  Expand
The expand event type (value is 17).
static int  F1
Keyboard event constant representing the F1 key (value is (1<<24)+10).
static int  F10
Keyboard event constant representing the F10 key (value is (1<<24)+19).
static int  F11
Keyboard event constant representing the F11 key (value is (1<<24)+20).
static int  F12
Keyboard event constant representing the F12 key (value is (1<<24)+21).
static int  F13
Keyboard event constant representing the F13 key (value is (1<<24)+22).
static int  F14
Keyboard event constant representing the F14 key (value is (1<<24)+23).
static int  F15
Keyboard event constant representing the F15 key (value is (1<<24)+24).
static int  F16
Keyboard event constant representing the F16 key (value is (1<<25)+25).
static int  F17
Keyboard event constant representing the F17 key (value is (1<<26)+26).
static int  F18
Keyboard event constant representing the F18 key (value is (1<<27)+27).
static int  F19
Keyboard event constant representing the F19 key (value is (1<<28)+28).
static int  F2
Keyboard event constant representing the F2 key (value is (1<<24)+11).
static int  F20
Keyboard event constant representing the F20 key (value is (1<<29)+29).
static int  F3
Keyboard event constant representing the F3 key (value is (1<<24)+12).
static int  F4
Keyboard event constant representing the F4 key (value is (1<<24)+13).
static int  F5
Keyboard event constant representing the F5 key (value is (1<<24)+14).
static int  F6
Keyboard event constant representing the F6 key (value is (1<<24)+15).
static int  F7
Keyboard event constant representing the F7 key (value is (1<<24)+16).
static int  F8
Keyboard event constant representing the F8 key (value is (1<<24)+17).
static int  F9
Keyboard event constant representing the F9 key (value is (1<<24)+18).
static int  FILL
Style constant for vertical alignment or orientation behavior (value is 4).
static int  FILL_EVEN_ODD
Even odd rule for filling operations (value is 1).
static int  FILL_WINDING
Winding rule for filling operations (value is 2).
static int  FLAT
Style constant for flat appearance.
static int  FLIP_TEXT_DIRECTION
Style constant to indicate base text direction (value is 1<<31).
static int  FOCUSED
Event detail field that indicates a user-interface component state is focused (value is 1<<2).
static int  FocusIn
The focus in event type (value is 15).
static int  FocusOut
The focus out event type (value is 16).
static int  FOREGROUND
Event detail field that indicates a user-interface component draws the foreground (value is 1<<4).
static int  FULL_SELECTION
Style constant for full row selection behavior and selection constant indicating that a full line should be drawn.
static int  Gesture
The gesture event type (value is 48).
static int  GESTURE_BEGIN
Gesture event detail field value indicating that a continuous gesture is about to begin.
static int  GESTURE_END
Gesture event detail field value indicating that a continuous gesture has ended.
static int  GESTURE_MAGNIFY
Gesture event detail field value indicating that a magnification gesture has happened.
static int  GESTURE_PAN
Gesture event detail field value indicating that a panning (two-finger scroll) gesture has happened.
static int  GESTURE_ROTATE
Gesture event detail field value indicating that a rotation gesture has happened.
static int  GESTURE_SWIPE
Gesture event detail field value indicating that a swipe gesture has happened.
static int  H_SCROLL
Style constant for horizontal scrollbar behavior (value is 1<<8).
static int  HardKeyDown
The hardware key down event type (value is 33).
static int  HardKeyUp
The hardware key up event type (value is 34).
static int  Help
The help event type (value is 28).
static int  HELP
Keyboard event constant representing the help key (value is (1<<24)+81).
static int  Hide
The hide event type (value is 23).
static int  HIDE_SELECTION
Style constant for selection hiding behavior when the widget loses focus (value is 1<<15).
static int  HIGH
Indicates high quality (value is 2).
static int  HOME
Keyboard event constant representing the HOME key (value is (1<<24)+7).
static int  HORIZONTAL
Style constant for horizontal alignment or orientation behavior (value is 1<<8).
static int  HOT
Event detail field that indicates a user-interface component state is hot (value is 1<<5).
static int  ICON
Constant indicating that an image or operation is of type icon (value is 1).
static int  ICON_CANCEL
The style constant for "cancel" icon.
static int  ICON_ERROR
The MessageBox style constant for error icon behavior (value is 1).
static int  ICON_INFORMATION
The MessageBox style constant for information icon behavior (value is 1<<1).
static int  ICON_QUESTION
The MessageBox style constant for question icon behavior (value is 1<<2).
static int  ICON_SEARCH
The style constant for "search" icon.
static int  ICON_WARNING
The MessageBox style constant for warning icon behavior (value is 1<<3).
static int  ICON_WORKING
The MessageBox style constant for "working" icon behavior (value is 1<<4).
static int  Iconify
The iconify event type (value is 19).
static int  ID_ABOUT
ID for the About menu item (value is -1).
static int  ID_HIDE
ID for the Hide menu item (value is -3).
static int  ID_HIDE_OTHERS
ID for the Hide Others menu item (value is -4).
static int  ID_PREFERENCES
ID for the Preferences menu item (value is -2).
static int  ID_QUIT
ID for the Quit menu item (value is -6).
static int  ID_SHOW_ALL
ID for the Show All menu item (value is -5).
static int  IGNORE
The MessageBox style constant for an IGNORE button; the only valid combination is ABORT|RETRY|IGNORE (value is 1<<11).
static int  IMAGE_BMP
Image format constant indicating a Windows BMP format image (value is 0).
static int  IMAGE_BMP_RLE
Image format constant indicating a run-length encoded Windows BMP format image (value is 1).
static int  IMAGE_COPY
The Image constructor argument indicating that the new image should be a copy of the image provided as an argument (value is 0).
static int  IMAGE_DISABLE
The Image constructor argument indicating that the new image should have the appearance of a "disabled" (using the platform's rules for how this should look) copy of the image provided as an argument (value is 1).
static int  IMAGE_GIF
Image format constant indicating a GIF format image (value is 2).
static int  IMAGE_GRAY
The Image constructor argument indicating that the new image should have the appearance of a "gray scaled" copy of the image provided as an argument (value is 2).
static int  IMAGE_ICO
Image format constant indicating a ICO format image (value is 3).
static int  IMAGE_JPEG
Image format constant indicating a JPEG format image (value is 4).
static int  IMAGE_OS2_BMP
Image format constant indicating an OS/2 BMP format image (value is 7).
static int  IMAGE_PNG
Image format constant indicating a PNG format image (value is 5).
static int  IMAGE_TIFF
Image format constant indicating a TIFF format image (value is 6).
static int  IMAGE_UNDEFINED
Image format constant indicating an unknown image type (value is -1).
static int  ImeComposition
The IME composition event type (value is 43).
static int  INDETERMINATE
Style constant for progress bar behavior (value is 1<<1).
static int  INHERIT_DEFAULT
The Composite constant to indicate that an attribute (such as background) is inherited by children who choose this value as their "default" (value is 1).
static int  INHERIT_FORCE
The Composite constant to indicate that an attribute (such as background) is inherited by all children.
static int  INHERIT_NONE
The Composite constant to indicate that an attribute (such as background) is not inherited by the children (value is 0).
static int  INSERT
Keyboard event constant representing the INSERT key (value is (1<<24)+9).
static int  ITALIC
The font style constant indicating an italic font (value is 1<<1).
static int  JOIN_BEVEL
Line drawing style for bevel joins (value is 3).
static int  JOIN_MITER
Line drawing style for miter joins (value is 1).
static int  JOIN_ROUND
Line drawing style for rounded joins (value is 2).
static int  KEY_MASK
Accelerator constant used to extract the key stroke portion of an accelerator.
static int  KEYCODE_BIT
Accelerator constant used to differentiate a key code from a unicode character.
static int  KeyDown
The key down event type (value is 1).
static int  KEYPAD
Keyboard event constant representing the keypad location.
static int  KEYPAD_0
Keyboard event constant representing the numeric key pad zero key (value is (1<<24)+48).
static int  KEYPAD_1
Keyboard event constant representing the numeric key pad one key (value is (1<<24)+49).
static int  KEYPAD_2
Keyboard event constant representing the numeric key pad two key (value is (1<<24)+50).
static int  KEYPAD_3
Keyboard event constant representing the numeric key pad three key (value is (1<<24)+51).
static int  KEYPAD_4
Keyboard event constant representing the numeric key pad four key (value is (1<<24)+52).
static int  KEYPAD_5
Keyboard event constant representing the numeric key pad five key (value is (1<<24)+53).
static int  KEYPAD_6
Keyboard event constant representing the numeric key pad six key (value is (1<<24)+54).
static int  KEYPAD_7
Keyboard event constant representing the numeric key pad seven key (value is (1<<24)+55).
static int  KEYPAD_8
Keyboard event constant representing the numeric key pad eight key (value is (1<<24)+56).
static int  KEYPAD_9
Keyboard event constant representing the numeric key pad nine key (value is (1<<24)+57).
static int  KEYPAD_ADD
Keyboard event constant representing the numeric key pad add key (value is (1<<24)+43).
static int  KEYPAD_CR
Keyboard event constant representing the numeric key pad enter key (value is (1<<24)+80).
static int  KEYPAD_DECIMAL
Keyboard event constant representing the numeric key pad decimal key (value is (1<<24)+46).
static int  KEYPAD_DIVIDE
Keyboard event constant representing the numeric key pad divide key (value is (1<<24)+47).
static int  KEYPAD_EQUAL
Keyboard event constant representing the numeric key pad equal key (value is (1<<24)+61).
static int  KEYPAD_MULTIPLY
Keyboard event constant representing the numeric key pad multiply key (value is (1<<24)+42).
static int  KEYPAD_SUBTRACT
Keyboard event constant representing the numeric key pad subtract key (value is (1<<24)+45).
static int  KeyUp
The key up event type (value is 2).
static int  LAST_LINE_SELECTION
Selection constant indicating that the last line is selected to the end and should be drawn using either a line delimiter or full line selection (value is 1<<20).
static int  LEAD
Style constant for leading alignment (value is 1<<14).
static int  LEFT
Style constant for align left behavior (value is 1<<14).
static int  LEFT_TO_RIGHT
Style constant for left to right orientation (value is 1<<25).
static char LF
ASCII character convenience constant for the line feed character (value is the char '\n').
static int  LINE_CUSTOM
Line drawing style for custom dashed lines (value is 6).
static int  LINE_DASH
Line drawing style for dashed lines (value is 2).
static int  LINE_DASHDOT
Line drawing style for alternating dash-dot lines (value is 4).
static int  LINE_DASHDOTDOT
Line drawing style for dash-dot-dot lines (value is 5).
static int  LINE_DOT
Line drawing style for dotted lines (value is 3).
static int  LINE_SOLID
Line drawing style for solid lines (value is 1).
static int  LONG
Style constant for long date/time format (value is 1<<28).
static int  LOW
Indicates low quality (value is 1).
static int  MAX
Style constant for maximize box trim (value is 1<<10).
static int  MeasureItem
The measure item event type (value is 41).
static int  MEDIUM
Style constant for medium date/time format (value is 1<<16).
static int  MENU
Style constant for shell menu trim (value is 1<<6, since.  we do not distinguish between CLOSE style and MENU style).
static int  MENU_KEYBOARD
MenuDetect event detail value indicating that a context menu was requested by a keyboard or other focus-based device (value is 1).
static int  MENU_MOUSE
MenuDetect event detail value indicating that a context menu was requested by a mouse or other pointing device (value is 0).
static int  MenuDetect
The menu detect event type (value is 35).
static int  MIN
Style constant for minimize box trim (value is 1<<7).
static int  MIRRORED
Style constant to indicate coordinate mirroring (value is 1<<27).
static int  MOD1
Keyboard and/or mouse event mask indicating that the MOD1 key was pushed on the keyboard when the event was generated.
static int  MOD2
Keyboard and/or mouse event mask indicating that the MOD2 key was pushed on the keyboard when the event was generated.
static int  MOD3
Keyboard and/or mouse event mask indicating that the MOD3 key was pushed on the keyboard when the event was generated.
static int  MOD4
Keyboard and/or mouse event mask indicating that the MOD4 key was pushed on the keyboard when the event was generated.
static int  MODELESS
Style constant for modeless behavior (value is 0).
static int  MODIFIER_MASK
Keyboard and/or mouse event mask indicating all possible keyboard modifiers.
static int  Modify
The modify event type (value is 24).
static int  MouseDoubleClick
The mouse double click event type (value is 8).
static int  MouseDown
The mouse down event type (value is 3).
static int  MouseEnter
The mouse enter event type (value is 6).
static int  MouseExit
The mouse exit event type (value is 7).
static int  MouseHorizontalWheel
The mouse horizontal wheel event type (value is 38).
static int  MouseHover
The mouse hover event type (value is 32).
static int  MouseMove
The mouse move event type (value is 5).
static int  MouseUp
The mouse up event type (value is 4).
static int  MouseVerticalWheel
The mouse vertical wheel event type (value is 37).
static int  MouseWheel
The mouse wheel event type (value is 37).
static int  Move
The move event type (value is 10).
static int  MOVEMENT_CHAR
The character movement type (value is 1<<0).
static int  MOVEMENT_CLUSTER
The cluster movement type (value is 1<<1).
static int  MOVEMENT_WORD
The word movement type (value is 1<<2).
static int  MOVEMENT_WORD_END
The word end movement type (value is 1<<3).
static int  MOVEMENT_WORD_START
The word start movement type (value is 1<<4).
static int  MOZILLA
Style constant specifying that a Browser should use a Mozilla GRE for rendering its content (value is 1<<15).
static int  MULTI
Style constant for multi-selection behavior in lists and multiple line support on text fields (value is 1<<1).
static int  NATIVE
Input Method Editor style constant for native input behavior (value is 1<<3).
static int  NO
The MessageBox style constant for NO button; valid combinations are YES|NO, YES|NO|CANCEL (value is 1<<7).
static int  NO_BACKGROUND
Style constant for no background behavior (value is 1<<18).
static int  NO_FOCUS
Style constant for no focus from the mouse behavior (value is 1<<19).
static int  NO_MERGE_PAINTS
Style constant for no paint event merging behavior (value is 1<<21).
static int  NO_MOVE
Style constant for the no move behavior (value is 1<<23).
static int  NO_RADIO_GROUP
Style constant for preventing child radio group behavior (value is 1<<22).
static int  NO_REDRAW_RESIZE
Style constant for no redraw on resize behavior (value is 1<<20).
static int  NO_SCROLL
Style constant for no scrollbar behavior (value is 1<<4).
static int  NO_TRIM
Style constant to ensure no trimmings are used (value is 1<<3).
static int  None
The null event type (value is 0).
static int  NONE
A constant known to be zero (0), typically used in operations which take bit flags to indicate that "no bits are set".
static int  NORMAL
The font style constant indicating a normal weight, non-italic font (value is 0).
static int  NULL
A constant known to be zero (0), used in operations which take pointers to indicate a null argument.
static int  NUM_LOCK
Keyboard event constant representing the num lock key (value is (1<<24)+83).
static int  OFF
Indicates that a property is off (value is 0).
static int  OK
The MessageBox style constant for an OK button; valid combinations are OK, OK|CANCEL (value is 1<<5).
static int  ON
Indicates that a property is on (value is 1).
static int  ON_TOP
Style constant for always on top behavior (value is 1<<14).
static int  OPEN
The FileDialog style constant for open file dialog behavior (value is 1<<12).
static int  OpenDocument
The open document event type (value is 46).
static int  OrientationChange
The orientation change event type (value is 44).
static int  PAGE_DOWN
Keyboard event constant representing the PAGE DOWN key (value is (1<<24)+6).
static int  PAGE_UP
Keyboard event constant representing the PAGE UP key (value is (1<<24)+5).
static int  Paint
The paint event type (value is 9).
static int  PaintItem
The paint item event type (value is 42).
static int  PASSWORD
Style constant for password behavior (value is 1<<22).
static int  PATH_CLOSE
Path constant that represents a "close" operation (value is 5).
static int  PATH_CUBIC_TO
Path constant that represents a "cubic curve to" operation (value is 4).
static int  PATH_LINE_TO
Path constant that represents a "line to" operation (value is 2).
static int  PATH_MOVE_TO
Path constant that represents a "move to" operation (value is 1).
static int  PATH_QUAD_TO
Path constant that represents a "quadratic curve to" operation (value is 3).
static int  PAUSE
Keyboard event constant representing the pause key (value is (1<<24)+85).
static int  PAUSED
Constant to a indicate a paused state (value is 4).
static int  PHONETIC
Input Method Editor style constant for phonetic input behavior (value is 1<<4).
static int  POP_UP
Style constant for pop up menu behavior (value is 1<<3).
static int  PostEvent
The PostEvent event type (value is 51).
static int  PostExternalEventDispatch
The PostExternalEventDispatch event type (value is 53).
static int  PreEvent
The PreEvent event type (value is 50).
static int  PreExternalEventDispatch
The PreExternalEventDispatch event type (value is 52).
static int  PRIMARY_MODAL
Style constant for primary modal behavior (value is 1<<15).
static int  PRINT_SCREEN
Keyboard event constant representing the print screen key (value is (1<<24)+87).
static int  PUSH
Style constant for push button behavior (value is 1<<3).
static int  RADIO
Style constant for radio button behavior (value is 1<<4).
static int  READ_ONLY
Style constant for read-only behavior (value is 1<<3).
static int  Resize
The resize event type (value is 11).
static int  RESIZE
Style constant for resize box trim (value is 1<<4).
static int  RETRY
The MessageBox style constant for a RETRY button; valid combinations are ABORT|RETRY|IGNORE, RETRY|CANCEL (value is 1<<10).
static int  RIGHT
Style constant for align right behavior (value is 1<<17).
static int  RIGHT_TO_LEFT
Style constant for right to left orientation (value is 1<<26).
static int  ROMAN
Input Method Editor style constant for romanicized input behavior (value is 1<<5).
static int  SAVE
The FileDialog style constant for save file dialog behavior (value is 1<<13).
static int  SCROLL_LINE
Constants to indicate line scrolling (value is 1).
static int  SCROLL_LOCK
Keyboard event constant representing the scroll lock key (value is (1<<24)+84).
static int  SCROLL_PAGE
Constants to indicate page scrolling (value is 2).
static int  SCROLLBAR_OVERLAY
The Scrollable constant to indicate that the receiver is using overlay scrollbars.
static int  SEARCH
Style constant for search behavior (value is 1<<7).
static int  Segments
The segments event type (value is 49).
static int  SELECTED
Event detail field that indicates a user-interface component state is selected (value is 1<<1).
static int  Selection
The selection event type (value is 13).
static int  SEPARATOR
Style constant for line separator behavior (value is 1<<1).
static int  SEPARATOR_FILL
Constant representing a flexible space separator in a ToolBar.
static int  SetData
The set data event type (value is 36).
static int  Settings
The settings changed event type (value is 39).
static int  SHADOW_ETCHED_IN
Style constant for shadow etched in behavior (value is 1<<4).
static int  SHADOW_ETCHED_OUT
Style constant for shadow etched out behavior (value is 1<<6).
static int  SHADOW_IN
Style constant for shadow in behavior (value is 1<<2).
static int  SHADOW_NONE
Style constant for no shadow behavior (value is 1<<5).
static int  SHADOW_OUT
Style constant for shadow out behavior (value is 1<<3).
static int  SHEET
Style constant for sheet window behavior (value is 1<<28).
static int  SHELL_TRIM
Trim style convenience constant for the most common top level shell appearance (value is CLOSE|TITLE|MIN|MAX|RESIZE).
static int  SHIFT
Keyboard and/or mouse event mask indicating that the SHIFT key was pushed on the keyboard when the event was generated (value is 1<<17).
static int  SHORT
Style constant for short date/time format (value is 1<<15).
static int  Show
The show event type (value is 22).
static int  SIMPLE
Style constant for simple (not drop down) behavior (value is 1<<6).
static int  SINGLE
Style constant for single selection behavior in lists and single line support on text fields (value is 1<<2).
static int  Skin
The skin event type (value is 45).
static java.lang.String SKIN_CLASS
Key name for setting and getting the skin class of a widget.
static java.lang.String SKIN_ID
Key name for setting and getting the skin id of a widget.
static int  Sleep
Deprecated.< /span>
The same as PreExternalEventDispatch (value is 52).
static int  SMOOTH
Style constant for smooth appearance.
static char SPACE
ASCII character convenience constant for the space character (value is the char ' ').
static int  SYSTEM_MODAL
Style constant for system modal behavior (value is 1<<17).
static char TAB
ASCII character convenience constant for the tab character (value is the char '\t').
static int  TIME
Style constant for time display (value is 1<<7).
static int  TITLE
Style constant for title area trim (value is 1<<5).
static int  TOGGLE
Style constant for toggle button behavior (value is 1<<1).
static int  TOOL
Style constant for tool window behavior (value is 1<<2).
static int  TOP
Style constant for align top behavior (value is 1<<7, since.  align UP and align TOP are considered the same).
static int  Touch
The touch event type (value is 47).
static int  TOUCHSTATE_DOWN
A constant indicating that a finger touched the device.
static int  TOUCHSTATE_MOVE
A constant indicating that a finger moved on the device.
static int  TOUCHSTATE_UP
A constant indicating that a finger was lifted from the device.
static int  TRAIL
Style constant for trailing alignment (value is 1<<17).
static int  TRANSPARENCY_ALPHA
Image transparency constant indicating that the image contains alpha transparency information (value is 1<<0).
static int  TRANSPARENCY_MASK
Image transparency constant indicating that the image contains a transparency mask (value is 1<<1).
static int  TRANSPARENCY_NONE
Image transparency constant indicating that the image contains no transparency information (value is 0).
static int  TRANSPARENCY_PIXEL
Image transparency constant indicating that the image contains a transparent pixel (value is 1<<2).
static int  TRANSPARENT
Style constant for transparent behavior (value is 1<<30).
static int  Traverse
The traverse event type (value is 31).
static int  TRAVERSE_ARROW_NEXT
Traversal event detail field value indicating that the key which designates that focus should be given to the previous tab item was pressed; typically, this is either the RIGHT-ARROW or DOWN-ARROW keys (value is 1<<6).
static int  TRAVERSE_ARROW_PREVIOUS
Traversal event detail field value indicating that the key which designates that focus should be given to the previous tab item was pressed; typically, this is either the LEFT-ARROW or UP-ARROW keys (value is 1<<5).
static int  TRAVERSE_ESCAPE
Traversal event detail field value indicating that the key which designates that a dialog should be cancelled was pressed; typically, this is the ESC key (value is 1<<1).
static int  TRAVERSE_MNEMONIC
Traversal event detail field value indicating that a mnemonic key sequence was pressed (value is 1<<7).
static int  TRAVERSE_NONE
Traversal event detail field value indicating that no traversal action should be taken (value is 0).
static int  TRAVERSE_PAGE_NEXT
Traversal event detail field value indicating that the key which designates that the next page of a multi-page window should be shown was pressed; typically, this is the CTRL-PAGEDOWN key sequence (value is 1<<9).
static int  TRAVERSE_PAGE_PREVIOUS
Traversal event detail field value indicating that the key which designates that the previous page of a multi-page window should be shown was pressed; typically, this is the CTRL-PAGEUP key sequence (value is 1<<8).
static int  TRAVERSE_RETURN
Traversal event detail field value indicating that the key which activates the default button in a dialog was pressed; typically, this is the ENTER key (value is 1<<2).
static int  TRAVERSE_TAB_NEXT
Traversal event detail field value indicating that the key which designates that focus should be given to the next tab group was pressed; typically, this is the TAB key (value is 1<<4).
static int  TRAVERSE_TAB_PREVIOUS
Traversal event detail field value indicating that the key which designates that focus should be given to the previous tab group was pressed; typically, this is the SHIFT-TAB key sequence (value is 1<<3).
static int  UNDERLINE_DOUBLE
Style constant to indicate double underline (value is 1).
static int  UNDERLINE_ERROR
Style constant to indicate error underline (value is 2).
static int  UNDERLINE_LINK
Style constant to indicate link underline (value is 0).
static int  UNDERLINE_SINGLE
Style constant to indicate single underline (value is 0).
static int  UNDERLINE_SQUIGGLE
Style constant to indicate squiggle underline (value is 3).
static int  UP
Style constant for align up behavior (value is 1<<7, since.  align UP and align TOP are considered the same).
static int  V_SCROLL
Style constant for vertical scrollbar behavior (value is 1<<9).
static int  Verify
The verify event type (value is 25).
static int  VERTICAL
Style constant for vertical alignment or orientation behavior (value is 1<<9).
static int  VIRTUAL
Style constant to allow virtual data (value is 1<<28).
static int  Wakeup
Deprecated.< /span>
The same as PostExternalEventDispatch (value is 53).
static int  WEBKIT
Style constant specifying that a Browser should use WebKit for rendering its content (value is 1<<16).
static int  WRAP
Style constant for automatic line wrap behavior (value is 1<<6).
static int  YES
The MessageBox style constant for YES button; valid combinations are YES|NO, YES|NO|CANCEL (value is 1<<6).

Constructor Summary
Constructors

Constructor and Description
SWT()

Method Summary
All Methods Static Methods Concrete Methods

Modifier and Type   Method and Description
static void error(int code)
Throws an appropriate exception based on the passed in error code.
static void error(int code,      java.lang.Thro wable throwable)
Throws an appropriate exception based on the passed in error code.
static void error(int code,      java.lang.Thro wable throwable,      java.lang.Stri ng detail)
Throws an appropriate exception based on the passed in error code.
static java.lang.String getMessage(java.lang.String key)
Returns the NLS'ed message for the given argument.
static java.lang.String getMessage(java.lang.String key,         java.lang.Object[] args)
Returns the NLS'ed message for the given arguments.
static java.lang.String getPlatform()
Returns the SWT platform name.
static int  getVersion()
Returns the SWT version number as an integer.
static boolean  isLoadable()
Returns a boolean indicating whether this SWT implementation can be loaded.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Field Detail

None
public static final int None
The null event type (value is 0).
since. :
3.0
See Also:
Constant Field Values

KeyDown
public static final int KeyDown
The key down event type (value is 1).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addKeyListener(org.eclipse.swt.events.KeyListener), Tracker.addKeyListener(org.eclipse.swt.events.KeyListener), KeyListener.keyPressed(org.eclipse.swt.events.KeyEvent), KeyEvent, Constant Field Values

KeyUp
public static final int KeyUp
The key up event type (value is 2).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addKeyListener(org.eclipse.swt.events.KeyListener), Tracker.addKeyListener(org.eclipse.swt.events.KeyListener), KeyListener.keyReleased(org.eclipse.swt.events.KeyEvent), KeyEvent, Constant Field Values

MouseDown
public static final int MouseDown
The mouse down event type (value is 3).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addMouseListener(org.eclipse.swt.events.MouseListener), MouseListener.mouseDown(org.eclipse.swt.events.MouseEvent), MouseEvent, Constant Field Values

MouseUp
public static final int MouseUp
The mouse up event type (value is 4).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addMouseListener(org.eclipse.swt.events.MouseListener), MouseListener.mouseUp(org.eclipse.swt.events.MouseEvent), MouseEvent, Constant Field Values

MouseMove
public static final int MouseMove
The mouse move event type (value is 5).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addMouseMoveListener(org.eclipse.swt.events.MouseMoveListener), MouseMoveListener.mouseMove(org.eclipse.swt.events.MouseEvent), MouseEvent, Constant Field Values

MouseEnter
public static final int MouseEnter
The mouse enter event type (value is 6).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addMouseTrackListener(org.eclipse.swt.events.MouseTrackListener), MouseTrackListener.mouseEnter(org.eclipse.swt.events.MouseEvent), MouseEvent, Constant Field Values

MouseExit
public static final int MouseExit
The mouse exit event type (value is 7).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addMouseTrackListener(org.eclipse.swt.events.MouseTrackListener), MouseTrackListener.mouseExit(org.eclipse.swt.events.MouseEvent), MouseEvent, Constant Field Values

MouseDoubleClick
public static final int MouseDoubleClick
The mouse double click event type (value is 8).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addMouseListener(org.eclipse.swt.events.MouseListener), MouseListener.mouseDoubleClick(org.eclipse.swt.events.MouseEvent), MouseEvent, Constant Field Values

Paint
public static final int Paint
The paint event type (value is 9).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addPaintListener(org.eclipse.swt.events.PaintListener), PaintListener.paintControl(org.eclipse.swt.events.PaintEvent), PaintEvent, Constant Field Values

Move
public static final int Move
The move event type (value is 10).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addControlListener(org.eclipse.swt.events.ControlListener), TableColumn.addControlListener(org.eclipse.swt.events.ControlListener), Tracker.addControlListener(org.eclipse.swt.events.ControlListener), TreeColumn.addControlListener(org.eclipse.swt.events.ControlListener), ControlListener.controlMoved(org.eclipse.swt.events.ControlEvent), ControlEvent, Constant Field Values

Resize
public static final int Resize
The resize event type (value is 11).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addControlListener(org.eclipse.swt.events.ControlListener), TableColumn.addControlListener(org.eclipse.swt.events.ControlListener), Tracker.addControlListener(org.eclipse.swt.events.ControlListener), TreeColumn.addControlListener(org.eclipse.swt.events.ControlListener), ControlListener.controlResized(org.eclipse.swt.events.ControlEvent), ControlEvent, Constant Field Values

Dispose
public static final int Dispose
The dispose event type (value is 12).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Widget.addDisposeListener(org.eclipse.swt.events.DisposeListener), DisposeListener.widgetDisposed(org.eclipse.swt.events.DisposeEvent), DisposeEvent, Constant Field Values

Selection
public static final int Selection
The selection event type (value is 13).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Button.addSelectionListener(org.eclipse.swt.events.SelectionListener), Combo.addSelectionListener(org.eclipse.swt.events.SelectionListener), CoolItem.addSelectionListener(org.eclipse.swt.events.SelectionListener), Link.addSelectionListener(org.eclipse.swt.events.SelectionListener), List.addSelectionListener(org.eclipse.swt.events.SelectionListener), MenuItem.addSelectionListener(org.eclipse.swt.events.SelectionListener), Sash.addSelectionListener(org.eclipse.swt.events.SelectionListener), Scale.addSelectionListener(org.eclipse.swt.events.SelectionListener), ScrollBar.addSelectionListener(org.eclipse.swt.events.SelectionListener), Slider.addSelectionListener(org.eclipse.swt.events.SelectionListener), TabFolder.addSelectionListener(org.eclipse.swt.events.SelectionListener), Table.addSelectionListener(org.eclipse.swt.events.SelectionListener), TableColumn.addSelectionListener(org.eclipse.swt.events.SelectionListener), ToolItem.addSelectionListener(org.eclipse.swt.events.SelectionListener), TrayItem.addSelectionListener(org.eclipse.swt.events.SelectionListener), Tree.addSelectionListener(org.eclipse.swt.events.SelectionListener), TreeColumn.addSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionListener.widgetSelected(org.eclipse.swt.events.SelectionEvent), SelectionEvent, Constant Field Values

DefaultSelection
public static final int DefaultSelection
The default selection event type (value is 14).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Combo.addSelectionListener(org.eclipse.swt.events.SelectionListener), List.addSelectionListener(org.eclipse.swt.events.SelectionListener), Spinner.addSelectionListener(org.eclipse.swt.events.SelectionListener), Table.addSelectionListener(org.eclipse.swt.events.SelectionListener), Text.addSelectionListener(org.eclipse.swt.events.SelectionListener), TrayItem.addSelectionListener(org.eclipse.swt.events.SelectionListener), Tree.addSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionListener.widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent), SelectionEvent, Constant Field Values

FocusIn
public static final int FocusIn
The focus in event type (value is 15).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addFocusListener(org.eclipse.swt.events.FocusListener), FocusListener.focusGained(org.eclipse.swt.events.FocusEvent), FocusEvent, Constant Field Values

FocusOut
public static final int FocusOut
The focus out event type (value is 16).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addFocusListener(org.eclipse.swt.events.FocusListener), FocusListener.focusLost(org.eclipse.swt.events.FocusEvent), FocusEvent, Constant Field Values

Expand
public static final int Expand
The expand event type (value is 17).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Tree.addTreeListener(org.eclipse.swt.events.TreeListener), TreeListener.treeExpanded(org.eclipse.swt.events.TreeEvent), TreeEvent, Constant Field Values

Collapse
public static final int Collapse
The collapse event type (value is 18).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Tree.addTreeListener(org.eclipse.swt.events.TreeListener), TreeListener.treeCollapsed(org.eclipse.swt.events.TreeEvent), TreeEvent, Constant Field Values

Iconify
public static final int Iconify
The iconify event type (value is 19).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Shell.addShellListener(org.eclipse.swt.events.ShellListener), ShellListener.shellIconified(org.eclipse.swt.events.ShellEvent), ShellEvent, Constant Field Values

Deiconify
public static final int Deiconify
The de-iconify event type (value is 20).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Shell.addShellListener(org.eclipse.swt.events.ShellListener), ShellListener.shellDeiconified(org.eclipse.swt.events.ShellEvent), ShellEvent, Constant Field Values

Close
public static final int Close
The close event type (value is 21).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Shell.addShellListener(org.eclipse.swt.events.ShellListener), ShellListener.shellClosed(org.eclipse.swt.events.ShellEvent), ShellEvent, Constant Field Values

Show
public static final int Show
The show event type (value is 22).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Menu.addMenuListener(org.eclipse.swt.events.MenuListener), MenuListener.menuShown(org.eclipse.swt.events.MenuEvent), MenuEvent, Constant Field Values

Hide
public static final int Hide
The hide event type (value is 23).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Menu.addMenuListener(org.eclipse.swt.events.MenuListener), MenuListener.menuHidden(org.eclipse.swt.events.MenuEvent), MenuEvent, Constant Field Values

Modify
public static final int Modify
The modify event type (value is 24).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Combo.addModifyListener(org.eclipse.swt.events.ModifyListener), Spinner.addModifyListener(org.eclipse.swt.events.ModifyListener), Text.addModifyListener(org.eclipse.swt.events.ModifyListener), ModifyListener.modifyText(org.eclipse.swt.events.ModifyEvent), ModifyEvent, Constant Field Values

Verify
public static final int Verify
The verify event type (value is 25).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, org.eclipse.swt.custom.CCombo#addVerifyListener, Combo.addVerifyListener(org.eclipse.swt.events.VerifyListener), org.eclipse.swt.custom.StyledText#addVerifyListener, Text.addVerifyListener(org.eclipse.swt.events.VerifyListener), VerifyListener.verifyText(org.eclipse.swt.events.VerifyEvent), VerifyEvent, Constant Field Values

Activate
public static final int Activate
The activate event type (value is 26).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Shell.addShellListener(org.eclipse.swt.events.ShellListener), ShellListener.shellActivated(org.eclipse.swt.events.ShellEvent), ShellEvent, Constant Field Values

Deactivate
public static final int Deactivate
The deactivate event type (value is 27).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Shell.addShellListener(org.eclipse.swt.events.ShellListener), ShellListener.shellDeactivated(org.eclipse.swt.events.ShellEvent), ShellEvent, Constant Field Values

Help
public static final int Help
The help event type (value is 28).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addHelpListener(org.eclipse.swt.events.HelpListener), Menu.addHelpListener(org.eclipse.swt.events.HelpListener), MenuItem.addHelpListener(org.eclipse.swt.events.HelpListener), HelpListener.helpRequested(org.eclipse.swt.events.HelpEvent), HelpEvent, Constant Field Values

DragDetect
public static final int DragDetect
The drag detect event type (value is 29).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addDragDetectListener(org.eclipse.swt.events.DragDetectListener), DragDetectListener.dragDetected(org.eclipse.swt.events.DragDetectEvent), DragDetectEvent, org.eclipse.swt.dnd.DragSource, Constant Field Values

Arm
public static final int Arm
The arm event type (value is 30).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, MenuItem.addArmListener(org.eclipse.swt.events.ArmListener), ArmListener.widgetArmed(org.eclipse.swt.events.ArmEvent), ArmEvent, Constant Field Values

Traverse
public static final int Traverse
The traverse event type (value is 31).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addTraverseListener(org.eclipse.swt.events.TraverseListener), TraverseListener.keyTraversed(org.eclipse.swt.events.TraverseEvent), TraverseEvent, Constant Field Values

MouseHover
public static final int MouseHover
The mouse hover event type (value is 32).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addMouseTrackListener(org.eclipse.swt.events.MouseTrackListener), MouseTrackListener.mouseHover(org.eclipse.swt.events.MouseEvent), MouseEvent, Constant Field Values

HardKeyDown
public static final int HardKeyDown
The hardware key down event type (value is 33).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Constant Field Values

HardKeyUp
public static final int HardKeyUp
The hardware key up event type (value is 34).
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Constant Field Values

MenuDetect
public static final int MenuDetect
The menu detect event type (value is 35).
since. :
3.0
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Control.addMenuDetectListener(org.eclipse.swt.events.MenuDetectListener), TrayItem.addMenuDetectListener(org.eclipse.swt.events.MenuDetectListener), MenuDetectListener.menuDetected(org.eclipse.swt.events.MenuDetectEvent), MenuDetectEvent, Constant Field Values

SetData
public static final int SetData
The set data event type (value is 36).
since. :
3.0
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Table, Tree, Constant Field Values

MouseVerticalWheel
public static final int MouseVerticalWheel
The mouse vertical wheel event type (value is 37).
since. :
3.6
See Also:
Control.addMouseWheelListener(org.eclipse.swt.events.MouseWheelListener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Constant Field Values

MouseHorizontalWheel
public static final int MouseHorizontalWheel
The mouse horizontal wheel event type (value is 38).
since. :
3.6
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Constant Field Values

MouseWheel
public static final int MouseWheel
The mouse wheel event type (value is 37). This is a synonym for MouseVerticalWheel (value is 37). Newer applications should use MouseVerticalWheel instead of MouseWheel to make code more understandable.
since. :
3.1
See Also:
Control.addMouseWheelListener(org.eclipse.swt.events.MouseWheelListener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Constant Field Values

Settings
public static final int Settings
The settings changed event type (value is 39). The settings changed event is sent when an operating system property, such as a system font or color, has been changed. The event occurs after the property has been changed, but before any widget is redrawn. Applications that cache operating system properties can use this event to update their caches. A specific property change can be detected by querying the new value of a property and comparing it with the equivalent cached value. The operating system automatically redraws and lays out all widgets after this event is sent.
since. :
3.2
See Also:
Display.addListener(int, org.eclipse.swt.widgets.Listener), Event, Constant Field Values

EraseItem
public static final int EraseItem
The erase item event type (value is 40).
since. :
3.2
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Constant Field Values

MeasureItem
public static final int MeasureItem
The measure item event type (value is 41).
since. :
3.2
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Constant Field Values

PaintItem
public static final int PaintItem
The paint item event type (value is 42).
since. :
3.2
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Constant Field Values

ImeComposition
public static final int ImeComposition
The IME composition event type (value is 43). The IME composition event is sent to allow custom text editors to implement in-line editing of international text.
The detail field indicates the action to be taken:
SWT#COMPOSITION_CHANGED
SWT#COMPOSITION_OFFSET
SWT#COMPOSITION_SELECTION
since. :
3.4
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Constant Field Values

OrientationChange
public static final int OrientationChange
The orientation change event type (value is 44). On some platforms the orientation of text widgets can be changed by keyboard shortcut. The application can use the doit field of the event to stop the change from happening.
since. :
3.6
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Constant Field Values

Skin
public static final int Skin
The skin event type (value is 45). The skin event is sent by the display when a widget needs to be skinned.
since. :
3.6
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Widget.reskin(int), Constant Field Values

OpenDocument
public static final int OpenDocument
The open document event type (value is 46). This event is sent when SWT receives notification that a document should be opened.
since. :
3.6
See Also:
Display.addListener(int, org.eclipse.swt.widgets.Listener), Event, Constant Field Values

Touch
public static final int Touch
The touch event type (value is 47). This event is sent when a touch has been performed on a touch-based input source.
since. :
3.7
See Also:
Display.addListener(int, org.eclipse.swt.widgets.Listener), Event, Constant Field Values

Gesture
public static final int Gesture
The gesture event type (value is 48). This event is sent when a gesture has been performed.
since. :
3.7
See Also:
Display.addListener(int, org.eclipse.swt.widgets.Listener), Event, SWT#GESTURE_MAGNIFY, SWT#GESTURE_PAN, SWT#GESTURE_ROTATE, SWT#GESTURE_SWIPE, Constant Field Values

Segments
public static final int Segments
The segments event type (value is 49). This event is sent when text content has been changed.
since. :
3.8
See Also:
Widget.addListener(int, org.eclipse.swt.widgets.Listener), Display.addFilter(int, org.eclipse.swt.widgets.Listener), Event, Text.addSegmentListener(org.eclipse.swt.events.SegmentListener), SegmentEvent, Constant Field Values

PreEvent
public static final int PreEvent
The PreEvent event type (value is 50). This event is sent before an event other than PreExternalEventDispatch or PostExternalEventDispatch is dispatched.
The detail field of the event contains the type of the following event.
since. :
3.103
See Also:
Constant Field Values

PostEvent
public static final int PostEvent
The PostEvent event type (value is 51). This event is sent after an event other than PreExternalEventDispatch or PostExternalEventDispatch is dispatched.
The detail field of the event contains the type of the prior event.
since. :
3.103
See Also:
Constant Field Values

PreExternalEventDispatch
public static final int PreExternalEventDispatch
The PreExternalEventDispatch event type (value is 52). This event is sent before calling a blocking method that does its own event dispatch outside of the SWT code.
since. :
3.104
See Also:
Constant Field Values

PostExternalEventDispatch
public static final int PostExternalEventDispatch
The PostExternalEventDispatch event type (value is 53). This event is sent after calling a blocking method that does its own event dispatch outside of the SWT code.
since. :
3.104
See Also:
Constant Field Values

Sleep
@Deprecated
public static final int Sleep
Deprecated. The same as PreExternalEventDispatch (value is 52).
since. :
3.103
See Also:
Constant Field Values

Wakeup
@Deprecated
public static final int Wakeup
Deprecated. The same as PostExternalEventDispatch (value is 53).
since. :
3.103
See Also:
Constant Field Values

COMPOSITION_CHANGED
public static final int COMPOSITION_CHANGED
The IME composition event detail that indicates a change in the IME composition. The text field of the event is the new composition text. The start and end indicate the offsets where the composition text should be inserted. The styles and ranges are stored in the IME object (value is 1).
since. :
3.4
See Also:
ImeComposition, Constant Field Values

COMPOSITION_OFFSET
public static final int COMPOSITION_OFFSET
The IME composition event detail that indicates that the IME needs the offset for a given location. The x and y fields of the event are used by the application to determine the offset. The index field of the event should be set to the text offset at that location. The count field should be set to indicate whether the location is closer to the leading edge (0) or the trailing edge (1) (value is 2).
since. :
3.4
See Also:
ImeComposition, TextLayout.getOffset(int, int, int[]), Constant Field Values

COMPOSITION_SELECTION
public static final int COMPOSITION_SELECTION
The IME composition event detail that indicates that IME needs the selected text and its start and end offsets (value is 3).
since. :
3.4
See Also:
ImeComposition, Constant Field Values

DRAG
public static final int DRAG
Indicates that a user-interface component is being dragged, for example dragging the thumb of a scroll bar (value is 1).
See Also:
Constant Field Values

SELECTED
public static final int SELECTED
Event detail field that indicates a user-interface component state is selected (value is 1<<1).
since. :
3.2
See Also:
Constant Field Values

FOCUSED
public static final int FOCUSED
Event detail field that indicates a user-interface component state is focused (value is 1<<2).
since. :
3.2
See Also:
Constant Field Values

BACKGROUND
public static final int BACKGROUND
Event detail field that indicates a user-interface component draws the background (value is 1<<3).
since. :
3.2
See Also:
Constant Field Values

FOREGROUND
public static final int FOREGROUND
Event detail field that indicates a user-interface component draws the foreground (value is 1<<4).
since. :
3.2
See Also:
Constant Field Values

HOT
public static final int HOT
Event detail field that indicates a user-interface component state is hot (value is 1<<5).
since. :
3.3
See Also:
Constant Field Values

TRAVERSE_NONE
public static final int TRAVERSE_NONE
Traversal event detail field value indicating that no traversal action should be taken (value is 0).
See Also:
Constant Field Values

TRAVERSE_ESCAPE
public static final int TRAVERSE_ESCAPE
Traversal event detail field value indicating that the key which designates that a dialog should be cancelled was pressed; typically, this is the ESC key (value is 1<<1).
See Also:
Constant Field Values

TRAVERSE_RETURN
public static final int TRAVERSE_RETURN
Traversal event detail field value indicating that the key which activates the default button in a dialog was pressed; typically, this is the ENTER key (value is 1<<2).
See Also:
Constant Field Values

TRAVERSE_TAB_PREVIOUS
public static final int TRAVERSE_TAB_PREVIOUS
Traversal event detail field value indicating that the key which designates that focus should be given to the previous tab group was pressed; typically, this is the SHIFT-TAB key sequence (value is 1<<3).
See Also:
Constant Field Values

TRAVERSE_TAB_NEXT
public static final int TRAVERSE_TAB_NEXT
Traversal event detail field value indicating that the key which designates that focus should be given to the next tab group was pressed; typically, this is the TAB key (value is 1<<4).
See Also:
Constant Field Values

TRAVERSE_ARROW_PREVIOUS
public static final int TRAVERSE_ARROW_PREVIOUS
Traversal event detail field value indicating that the key which designates that focus should be given to the previous tab item was pressed; typically, this is either the LEFT-ARROW or UP-ARROW keys (value is 1<<5).
See Also:
Constant Field Values

TRAVERSE_ARROW_NEXT
public static final int TRAVERSE_ARROW_NEXT
Traversal event detail field value indicating that the key which designates that focus should be given to the previous tab item was pressed; typically, this is either the RIGHT-ARROW or DOWN-ARROW keys (value is 1<<6).
See Also:
Constant Field Values

TRAVERSE_MNEMONIC
public static final int TRAVERSE_MNEMONIC
Traversal event detail field value indicating that a mnemonic key sequence was pressed (value is 1<<7).
See Also:
Constant Field Values

TRAVERSE_PAGE_PREVIOUS
public static final int TRAVERSE_PAGE_PREVIOUS
Traversal event detail field value indicating that the key which designates that the previous page of a multi-page window should be shown was pressed; typically, this is the CTRL-PAGEUP key sequence (value is 1<<8).
See Also:
Constant Field Values

TRAVERSE_PAGE_NEXT
public static final int TRAVERSE_PAGE_NEXT
Traversal event detail field value indicating that the key which designates that the next page of a multi-page window should be shown was pressed; typically, this is the CTRL-PAGEDOWN key sequence (value is 1<<9).
See Also:
Constant Field Values

GESTURE_BEGIN
public static final int GESTURE_BEGIN
Gesture event detail field value indicating that a continuous gesture is about to begin.
since. :
3.7
See Also:
Constant Field Values

GESTURE_END
public static final int GESTURE_END
Gesture event detail field value indicating that a continuous gesture has ended.
since. :
3.7
See Also:
Constant Field Values

GESTURE_ROTATE
public static final int GESTURE_ROTATE
Gesture event detail field value indicating that a rotation gesture has happened. Only the rotation field of the event is valid.
since. :
3.7
See Also:
Constant Field Values

GESTURE_SWIPE
public static final int GESTURE_SWIPE
Gesture event detail field value indicating that a swipe gesture has happened.
since. :
3.7
See Also:
Constant Field Values

GESTURE_MAGNIFY
public static final int GESTURE_MAGNIFY
Gesture event detail field value indicating that a magnification gesture has happened.
since. :
3.7
See Also:
Constant Field Values

GESTURE_PAN
public static final int GESTURE_PAN
Gesture event detail field value indicating that a panning (two-finger scroll) gesture has happened.
since. :
3.7
See Also:
Constant Field Values

TOUCHSTATE_DOWN
public static final int TOUCHSTATE_DOWN
A constant indicating that a finger touched the device.
since. :
3.7
See Also:
Touch.state, Constant Field Values

TOUCHSTATE_MOVE
public static final int TOUCHSTATE_MOVE
A constant indicating that a finger moved on the device.
since. :
3.7
See Also:
Touch.state, Constant Field Values

TOUCHSTATE_UP
public static final int TOUCHSTATE_UP
A constant indicating that a finger was lifted from the device.
since. :
3.7
See Also:
Touch.state, Constant Field Values

MENU_MOUSE
public static final int MENU_MOUSE
MenuDetect event detail value indicating that a context menu was requested by a mouse or other pointing device (value is 0).
since. :
3.8
See Also:
Constant Field Values

MENU_KEYBOARD
public static final int MENU_KEYBOARD
MenuDetect event detail value indicating that a context menu was requested by a keyboard or other focus-based device (value is 1).
since. :
3.8
See Also:
Constant Field Values

CHANGED
public static final int CHANGED
A constant indicating that widgets have changed. (value is 1<<1). Used By:
Composite layout
since. :
3.6
See Also:
Composite.layout(org.eclipse.swt.widgets.Control[], int), Constant Field Values

DEFER
public static final int DEFER
A constant indicating that a given operation should be deferred. (value is 1<<2). Used By:
Composite layout
since. :
3.6
See Also:
Composite.layout(org.eclipse.swt.widgets.Control[], int), Constant Field Values

NONE
public static final int NONE
A constant known to be zero (0), typically used in operations which take bit flags to indicate that "no bits are set".
See Also:
Constant Field Values

NULL
public static final int NULL
A constant known to be zero (0), used in operations which take pointers to indicate a null argument.
See Also:
Constant Field Values

DEFAULT
public static final int DEFAULT
Indicates that a default should be used (value is -1).
See Also:
Constant Field Values

OFF
public static final int OFF
Indicates that a property is off (value is 0).
since. :
3.1
See Also:
Constant Field Values

ON
public static final int ON
Indicates that a property is on (value is 1).
since. :
3.1
See Also:
Constant Field Values

LOW
public static final int LOW
Indicates low quality (value is 1).
since. :
3.1
See Also:
Constant Field Values

HIGH
public static final int HIGH
Indicates high quality (value is 2).
since. :
3.1
See Also:
Constant Field Values

BAR
public static final int BAR
Style constant for menu bar behavior (value is 1<<1). Used By:
Menu
See Also:
Constant Field Values

DROP_DOWN
public static final int DROP_DOWN
Style constant for drop down menu/list behavior (value is 1<<2). Used By:
Menu
ToolItem
CoolItem
Combo
DateTime
See Also:
Constant Field Values

POP_UP
public static final int POP_UP
Style constant for pop up menu behavior (value is 1<<3). Used By:
Menu
See Also:
Constant Field Values

SEPARATOR
public static final int SEPARATOR
Style constant for line separator behavior (value is 1<<1). Used By:
Label
MenuItem
ToolItem
See Also:
Constant Field Values

SEPARATOR_FILL
public static final int SEPARATOR_FILL
Constant representing a flexible space separator in a ToolBar. Used By:
ToolItem.setWidth()
since. :
3.7
See Also:
Constant Field Values

TOGGLE
public static final int TOGGLE
Style constant for toggle button behavior (value is 1<<1). Used By:
Button
See Also:
Constant Field Values

ARROW
public static final int ARROW
Style constant for arrow button behavior (value is 1<<2). Used By:
Button
See Also:
Constant Field Values

PUSH
public static final int PUSH
Style constant for push button behavior (value is 1<<3). Used By:
Button
MenuItem
ToolItem
See Also:
Constant Field Values

RADIO
public static final int RADIO
Style constant for radio button behavior (value is 1<<4). Used By:
Button
MenuItem
ToolItem
See Also:
Constant Field Values

CHECK
public static final int CHECK
Style constant for check box behavior (value is 1<<5). Used By:
Button
MenuItem
ToolItem
Table
Tree
See Also:
Constant Field Values

CASCADE
public static final int CASCADE
Style constant for cascade behavior (value is 1<<6). Used By:
MenuItem
See Also:
Constant Field Values

MULTI
public static final int MULTI
Style constant for multi-selection behavior in lists and multiple line support on text fields (value is 1<<1). Used By:
Text
List
Table
Tree
FileDialog
See Also:
Constant Field Values

SINGLE
public static final int SINGLE
Style constant for single selection behavior in lists and single line support on text fields (value is 1<<2). Used By:
Text
List
Table
Tree
See Also:
Constant Field Values

READ_ONLY
public static final int READ_ONLY
Style constant for read-only behavior (value is 1<<3). Used By:
Combo
Text
See Also:
Constant Field Values

WRAP
public static final int WRAP
Style constant for automatic line wrap behavior (value is 1<<6). Used By:
Button
Label
Text
ToolBar
Spinner
See Also:
Constant Field Values

SEARCH
public static final int SEARCH
Style constant for search behavior (value is 1<<7). Used By:
Text
since. :
3.3
See Also:
Constant Field Values

SIMPLE
public static final int SIMPLE
Style constant for simple (not drop down) behavior (value is 1<<6).
Note that this is a HINT. Used By:
Combo
See Also:
Constant Field Values

PASSWORD
public static final int PASSWORD
Style constant for password behavior (value is 1<<22). Used By:
Text
since. :
3.0
See Also:
Constant Field Values

SHADOW_IN
public static final int SHADOW_IN
Style constant for shadow in behavior (value is 1<<2).
Note that this is a HINT. Used By:
Label
Group
See Also:
Constant Field Values

SHADOW_OUT
public static final int SHADOW_OUT
Style constant for shadow out behavior (value is 1<<3).
Note that this is a HINT. Used By:
Label
Group
ToolBar
See Also:
Constant Field Values

SHADOW_ETCHED_IN
public static final int SHADOW_ETCHED_IN
Style constant for shadow etched in behavior (value is 1<<4).
Note that this is a HINT. It is currently ignored on all platforms. Used By:
Group
See Also:
Constant Field Values

SHADOW_ETCHED_OUT
public static final int SHADOW_ETCHED_OUT
Style constant for shadow etched out behavior (value is 1<<6).
Note that this is a HINT. It is currently ignored on all platforms. Used By:
Group
See Also:
Constant Field Values

SHADOW_NONE
public static final int SHADOW_NONE
Style constant for no shadow behavior (value is 1<<5).
Note that this is a HINT. Used By:
Label
Group
See Also:
Constant Field Values

INDETERMINATE
public static final int INDETERMINATE
Style constant for progress bar behavior (value is 1<<1). Used By:
ProgressBar
See Also:
Constant Field Values

TOOL
public static final int TOOL
Style constant for tool window behavior (value is 1<<2). A tool window is a window intended to be used as a floating toolbar. It typically has a title bar that is shorter than a normal title bar, and the window title is typically drawn using a smaller font.
Note that this is a HINT.
Used By:
Decorations and subclasses
See Also:
Constant Field Values

NO_TRIM
public static final int NO_TRIM
Style constant to ensure no trimmings are used (value is 1<<3).
Note that this overrides all other trim styles. Used By:
Decorations and subclasses
See Also:
Constant Field Values

RESIZE
public static final int RESIZE
Style constant for resize box trim (value is 1<<4). Used By:
Decorations and subclasses
Tracker
See Also:
Constant Field Values

TITLE
public static final int TITLE
Style constant for title area trim (value is 1<<5). Used By:
Decorations and subclasses
See Also:
Constant Field Values

CLOSE
public static final int CLOSE
Style constant for close box trim (value is 1<<6, since.  we do not distinguish between CLOSE style and MENU style). Used By:
Decorations and subclasses
See Also:
Constant Field Values

MENU
public static final int MENU
Style constant for shell menu trim (value is 1<<6, since.  we do not distinguish between CLOSE style and MENU style). Used By:
Decorations and subclasses
See Also:
Constant Field Values

MIN
public static final int MIN
Style constant for minimize box trim (value is 1<<7). Used By:
Decorations and subclasses
See Also:
Constant Field Values

MAX
public static final int MAX
Style constant for maximize box trim (value is 1<<10). Used By:
Decorations and subclasses
See Also:
Constant Field Values

NO_MOVE
public static final int NO_MOVE
Style constant for the no move behavior (value is 1<<23). Creates the title trim when no other trim style is specified. Doesn't create the title trim when NO_TRIM is specified. Note that this is a HINT.
Used By:
Shell
since. :
3.105
See Also:
Constant Field Values

H_SCROLL
public static final int H_SCROLL
Style constant for horizontal scrollbar behavior (value is 1<<8). Used By:
Scrollable and subclasses
See Also:
Constant Field Values

V_SCROLL
public static final int V_SCROLL
Style constant for vertical scrollbar behavior (value is 1<<9). Used By:
Scrollable and subclasses
See Also:
Constant Field Values

NO_SCROLL
public static final int NO_SCROLL
Style constant for no scrollbar behavior (value is 1<<4). When neither H_SCROLL or V_SCROLL are specified, controls are free to create the default scroll bars for the control. Using NO_SCROLL overrides the default and forces the control to have no scroll bars. Used By:
Tree
Table
since. :
3.4
See Also:
Constant Field Values

BORDER
public static final int BORDER
Style constant for bordered behavior (value is 1<<11).
Note that this is a HINT. Used By:
Control and subclasses
See Also:
Constant Field Values

CLIP_CHILDREN
public static final int CLIP_CHILDREN
Style constant indicating that the window manager should clip a widget's children with respect to its viewable area. (value is 1<<12).
Note that this is a HINT. Used By:
Control and subclasses
See Also:
Constant Field Values

CLIP_SIBLINGS
public static final int CLIP_SIBLINGS
Style constant indicating that the window manager should clip a widget's siblings with respect to its viewable area. (value is 1<<13).
Note that this is a HINT. Used By:
Control and subclasses
See Also:
Constant Field Values

ON_TOP
public static final int ON_TOP
Style constant for always on top behavior (value is 1<<14).
Note that this is a HINT. Used By:
Shell and subclasses
See Also:
Constant Field Values

SHEET
public static final int SHEET
Style constant for sheet window behavior (value is 1<<28). A sheet window is a window intended to be used as a temporary modal dialog that is attached to a parent window. It is typically used to prompt the user before proceeding. The window trim, positioning and general look of a sheet window is platform specific. For example, on the Macintosh, at the time this documentation was written, the window title is not visible.
Note that this is a HINT.
Used By:
Dialog and subclasses
Shell and subclasses
since. :
3.5
See Also:
Constant Field Values

SHELL_TRIM
public static final int SHELL_TRIM
Trim style convenience constant for the most common top level shell appearance (value is CLOSE|TITLE|MIN|MAX|RESIZE). Used By:
Shell
See Also:
Constant Field Values

DIALOG_TRIM
public static final int DIALOG_TRIM
Trim style convenience constant for the most common dialog shell appearance (value is CLOSE|TITLE|BORDER). Used By:
Shell
See Also:
Constant Field Values

MODELESS
public static final int MODELESS
Style constant for modeless behavior (value is 0).
Note that this is a HINT. Used By:
Dialog
Shell
See Also:
Constant Field Values

PRIMARY_MODAL
public static final int PRIMARY_MODAL
Style constant for primary modal behavior (value is 1<<15).
Note that this is a HINT. Used By:
Dialog
Shell
See Also:
Constant Field Values

APPLICATION_MODAL
public static final int APPLICATION_MODAL
Style constant for application modal behavior (value is 1<<16).
Note that this is a HINT. Used By:
Dialog
Shell
See Also:
Constant Field Values

SYSTEM_MODAL
public static final int SYSTEM_MODAL
Style constant for system modal behavior (value is 1<<17).
Note that this is a HINT. Used By:
Dialog
Shell
See Also:
Constant Field Values

HIDE_SELECTION
public static final int HIDE_SELECTION
Style constant for selection hiding behavior when the widget loses focus (value is 1<<15).
Note that this is a HINT. Used By:
Table
See Also:
Constant Field Values

FULL_SELECTION
public static final int FULL_SELECTION
Style constant for full row selection behavior and selection constant indicating that a full line should be drawn. (value is 1<<16).
Note that for some widgets this is a HINT. Used By:
Table
Tree
StyledText
TextLayout
See Also:
Constant Field Values

FLAT
public static final int FLAT
Style constant for flat appearance. (value is 1<<23).
Note that this is a HINT. Used By:
Button
ToolBar
See Also:
Constant Field Values

SMOOTH
public static final int SMOOTH
Style constant for smooth appearance. (value is 1<<16).
Note that this is a HINT. Used By:
ProgressBar
Sash
See Also:
Constant Field Values

NO_BACKGROUND
public static final int NO_BACKGROUND
Style constant for no background behavior (value is 1<<18). By default, before a widget paints, the client area is filled with the current background. When this style is specified, the background is not filled, and the application is responsible for filling every pixel of the client area. This style might be used as an alternative to "double-buffering" in order to reduce flicker. This style does not mean "transparent" - widgets that are obscured will not draw through.
Used By:
Composite
See Also:
Constant Field Values

NO_FOCUS
public static final int NO_FOCUS
Style constant for no focus from the mouse behavior (value is 1<<19). Normally, when the user clicks on a control, focus is assigned to that control, providing the control has no children. Some controls, such as tool bars and sashes, don't normally take focus when the mouse is clicked or accept focus when assigned from within the program. This style allows Composites to implement "no focus" mouse behavior.
Note that this is a HINT.
Used By:
Composite
See Also:
Constant Field Values

NO_REDRAW_RESIZE
public static final int NO_REDRAW_RESIZE
Style constant for no redraw on resize behavior (value is 1<<20). This style stops the entire client area from being invalidated when the size of the Canvas changes. Specifically, when the size of the Canvas gets smaller, the SWT.Paint event is not sent. When it gets bigger, an SWT.Paint event is sent with a GC clipped to only the new areas to be painted. Without this style, the entire client area will be repainted.
Note that this is a HINT.
Used By:
Composite
See Also:
Constant Field Values

NO_MERGE_PAINTS
public static final int NO_MERGE_PAINTS
Style constant for no paint event merging behavior (value is 1<<21).
Note that this is a HINT. Used By:
Composite
See Also:
Constant Field Values

NO_RADIO_GROUP
public static final int NO_RADIO_GROUP
Style constant for preventing child radio group behavior (value is 1<<22). Used By:
Composite
Menu
See Also:
Constant Field Values

LEFT_TO_RIGHT
public static final int LEFT_TO_RIGHT
Style constant for left to right orientation (value is 1<<25). When orientation is not explicitly specified, orientation is inherited. This means that children will be assigned the orientation of their parent. To override this behavior and force an orientation for a child, explicitly set the orientation of the child when that child is created.
Note that this is a HINT.
Used By:
Control
Menu
GC
since. :
2.1.2
See Also:
Constant Field Values

RIGHT_TO_LEFT
public static final int RIGHT_TO_LEFT
Style constant for right to left orientation (value is 1<<26). When orientation is not explicitly specified, orientation is inherited. This means that children will be assigned the orientation of their parent. To override this behavior and force an orientation for a child, explicitly set the orientation of the child when that child is created.
Note that this is a HINT.
Used By:
Control
Menu
GC
since. :
2.1.2
See Also:
Constant Field Values

MIRRORED
public static final int MIRRORED
Style constant to indicate coordinate mirroring (value is 1<<27). Used By:
Control
Menu
since. :
2.1.2
See Also:
Constant Field Values

EMBEDDED
public static final int EMBEDDED
Style constant to allow embedding (value is 1<<24). Used By:
Composite
since. :
3.0
See Also:
Constant Field Values

VIRTUAL
public static final int VIRTUAL
Style constant to allow virtual data (value is 1<<28). Used By:
Table
Tree
since. :
3.0
See Also:
Constant Field Values

DOUBLE_BUFFERED
public static final int DOUBLE_BUFFERED
Style constant to indicate double buffering (value is 1<<29). Used By:
Control
since. :
3.1
See Also:
Constant Field Values

TRANSPARENT
public static final int TRANSPARENT
Style constant for transparent behavior (value is 1<<30). By default, before a widget paints, the client area is filled with the current background. When this style is specified, the background is not filled and widgets that are obscured will draw through.
Used By:
Composite
since. :
3.4 WARNING: THIS API IS UNDER CONSTRUCTION AND SHOULD NOT BE USED
See Also:
Constant Field Values

FLIP_TEXT_DIRECTION
public static final int FLIP_TEXT_DIRECTION
Style constant to indicate base text direction (value is 1<<31). When the bit is set, text direction mismatches the widget orientation.
Note that this is a HINT.
Used By:
Control
since. :
3.102
See Also:
Control.setTextDirection(int), Control.getTextDirection(), Constant Field Values

AUTO_TEXT_DIRECTION
public static final int AUTO_TEXT_DIRECTION
A bit mask to indicate Bidi "auto" text direction. When the bit is set, text direction is derived from the direction of the first strong Bidi character.

Note that this is a HINT and it works on Windows only. Used By:
Control
TextLayout
since. :
3.105
See Also:
Control.setTextDirection(int), TextLayout.setTextDirection(int), Constant Field Values

UP
public static final int UP
Style constant for align up behavior (value is 1<<7, since.  align UP and align TOP are considered the same). Used By:
Button with ARROW style
Tracker
Table
Tree
See Also:
Constant Field Values

UNDERLINE_SINGLE
public static final int UNDERLINE_SINGLE
Style constant to indicate single underline (value is 0). Used By:
TextStyle
since. :
3.4
See Also:
Constant Field Values

UNDERLINE_DOUBLE
public static final int UNDERLINE_DOUBLE
Style constant to indicate double underline (value is 1). Used By:
TextStyle
since. :
3.4
See Also:
Constant Field Values

UNDERLINE_ERROR
public static final int UNDERLINE_ERROR
Style constant to indicate error underline (value is 2). Used By:
TextStyle
since. :
3.4
See Also:
Constant Field Values

UNDERLINE_SQUIGGLE
public static final int UNDERLINE_SQUIGGLE
Style constant to indicate squiggle underline (value is 3). Used By:
TextStyle
since. :
3.4
See Also:
Constant Field Values

UNDERLINE_LINK
public static final int UNDERLINE_LINK
Style constant to indicate link underline (value is 0). If the text color or the underline color are not set in the range the usage of UNDERLINE_LINK will change these colors to the preferred link color of the platform.
Note that clients that use this style, such as StyledText, will include code to track the mouse and change the cursor to the hand cursor when mouse is over the link.
Used By:
TextStyle
since. :
3.5
See Also:
Constant Field Values

BORDER_SOLID
public static final int BORDER_SOLID
Style constant to indicate solid border (value is 1). Used By:
TextStyle
since. :
3.4
See Also:
Constant Field Values

BORDER_DASH
public static final int BORDER_DASH
Style constant to indicate dashed border (value is 2). Used By:
TextStyle
since. :
3.4
See Also:
Constant Field Values

BORDER_DOT
public static final int BORDER_DOT
Style constant to indicate dotted border (value is 4). Used By:
TextStyle
since. :
3.4
See Also:
Constant Field Values

TOP
public static final int TOP
Style constant for align top behavior (value is 1<<7, since.  align UP and align TOP are considered the same). Used By:
FormAttachment in a FormLayout
See Also:
Constant Field Values

DOWN
public static final int DOWN
Style constant for align down behavior (value is 1<<10, since.  align DOWN and align BOTTOM are considered the same). Used By:
Button with ARROW style
Tracker
Table
Tree
See Also:
Constant Field Values

BOTTOM
public static final int BOTTOM
Style constant for align bottom behavior (value is 1<<10, since.  align DOWN and align BOTTOM are considered the same). Used By:
FormAttachment in a FormLayout
TabFolder
See Also:
Constant Field Values

LEAD
public static final int LEAD
Style constant for leading alignment (value is 1<<14). Used By:
Button
Label
Text
TableColumn
TreeColumn
Tracker
FormAttachment in a FormLayout
since. :
2.1.2
See Also:
Constant Field Values

LEFT
public static final int LEFT
Style constant for align left behavior (value is 1<<14). This is a synonym for LEAD (value is 1<<14). Newer applications should use LEAD instead of LEFT to make code more understandable on right-to-left platforms. This constant can also be used to representing the left keyboard location during a key event.
See Also:
Constant Field Values

TRAIL
public static final int TRAIL
Style constant for trailing alignment (value is 1<<17). Used By:
Button
Label
Text
TableColumn
TreeColumn
Tracker
FormAttachment in a FormLayout
since. :
2.1.2
See Also:
Constant Field Values

RIGHT
public static final int RIGHT
Style constant for align right behavior (value is 1<<17). This is a synonym for TRAIL (value is 1<<17). Newer applications should use TRAIL instead of RIGHT to make code more understandable on right-to-left platforms. This constant can also be used to representing the right keyboard location during a key event.
See Also:
Constant Field Values

CENTER
public static final int CENTER
Style constant for align center behavior (value is 1<<24). Used By:
Button
Label
TableColumn
FormAttachment in a FormLayout
See Also:
Constant Field Values

HORIZONTAL
public static final int HORIZONTAL
Style constant for horizontal alignment or orientation behavior (value is 1<<8). Used By:
Label
ProgressBar
Sash
Scale
ScrollBar
Slider
ToolBar
FillLayout type
RowLayout type
See Also:
Constant Field Values

VERTICAL
public static final int VERTICAL
Style constant for vertical alignment or orientation behavior (value is 1<<9). Used By:
Label
ProgressBar
Sash
Scale
ScrollBar
Slider
ToolBar
CoolBar
FillLayout type
RowLayout type
See Also:
Constant Field Values

DATE
public static final int DATE
Style constant for date display (value is 1<<5). Used By:
DateTime
since. :
3.3
See Also:
Constant Field Values

TIME
public static final int TIME
Style constant for time display (value is 1<<7). Used By:
DateTime
since. :
3.3
See Also:
Constant Field Values

CALENDAR
public static final int CALENDAR
Style constant for calendar display (value is 1<<10). Used By:
DateTime
since. :
3.3
See Also:
Constant Field Values

SHORT
public static final int SHORT
Style constant for short date/time format (value is 1<<15). A short date displays the month and year. A short time displays hours and minutes.
Note that this is a HINT.
Used By:
DateTime
since. :
3.3
See Also:
Constant Field Values

MEDIUM
public static final int MEDIUM
Style constant for medium date/time format (value is 1<<16). A medium date displays the day, month and year. A medium time displays hours, minutes, and seconds.
Note that this is a HINT.
Used By:
DateTime
since. :
3.3
See Also:
Constant Field Values

LONG
public static final int LONG
Style constant for long date/time format (value is 1<<28). A long date displays the day, month and year. A long time displays hours, minutes, and seconds. The day and month names may be displayed.
Note that this is a HINT.
Used By:
DateTime
since. :
3.3
See Also:
Constant Field Values

MOZILLA
public static final int MOZILLA
Style constant specifying that a Browser should use a Mozilla GRE for rendering its content (value is 1<<15).
Used By:
Browser
since. :
3.3
See Also:
Constant Field Values

WEBKIT
public static final int WEBKIT
Style constant specifying that a Browser should use WebKit for rendering its content (value is 1<<16).
Used By:
Browser
since. :
3.7
See Also:
Constant Field Values

BALLOON
public static final int BALLOON
Style constant for balloon behavior (value is 1<<12). Used By:
ToolTip
since. :
3.2
See Also:
Constant Field Values

BEGINNING
public static final int BEGINNING
Style constant for vertical alignment or orientation behavior (value is 1). Used By:
GridLayout type
See Also:
Constant Field Values

FILL
public static final int FILL
Style constant for vertical alignment or orientation behavior (value is 4). Used By:
GridLayout type
See Also:
Constant Field Values

DBCS
public static final int DBCS
Input Method Editor style constant for double byte input behavior (value is 1<<1).
See Also:
Constant Field Values

ALPHA
public static final int ALPHA
Input Method Editor style constant for alpha input behavior (value is 1<<2).
See Also:
Constant Field Values

NATIVE
public static final int NATIVE
Input Method Editor style constant for native input behavior (value is 1<<3).
See Also:
Constant Field Values

PHONETIC
public static final int PHONETIC
Input Method Editor style constant for phonetic input behavior (value is 1<<4).
See Also:
Constant Field Values

ROMAN
public static final int ROMAN
Input Method Editor style constant for romanicized input behavior (value is 1<<5).
See Also:
Constant Field Values

BS
public static final char BS
ASCII character convenience constant for the backspace character (value is the char '\b').
See Also:
Constant Field Values

CR
public static final char CR
ASCII character convenience constant for the carriage return character (value is the char '\r').
See Also:
Constant Field Values

DEL
public static final char DEL
ASCII character convenience constant for the delete character (value is the char with value 127).
See Also:
Constant Field Values

ESC
public static final char ESC
ASCII character convenience constant for the escape character (value is the char with value 27).
See Also:
Constant Field Values

LF
public static final char LF
ASCII character convenience constant for the line feed character (value is the char '\n').
See Also:
Constant Field Values

TAB
public static final char TAB
ASCII character convenience constant for the tab character (value is the char '\t').
since. :
2.1
See Also:
Constant Field Values

SPACE
public static final char SPACE
ASCII character convenience constant for the space character (value is the char ' ').
since. :
3.7
See Also:
Constant Field Values

ALT
public static final int ALT
keyboard and/or mouse event mask indicating that the ALT key was pushed on the keyboard when the event was generated (value is 1<<16).
See Also:
Constant Field Values

SHIFT
public static final int SHIFT
Keyboard and/or mouse event mask indicating that the SHIFT key was pushed on the keyboard when the event was generated (value is 1<<17).
See Also:
Constant Field Values

CTRL
public static final int CTRL
Keyboard and/or mouse event mask indicating that the CTRL key was pushed on the keyboard when the event was generated (value is 1<<18).
See Also:
Constant Field Values

CONTROL
public static final int CONTROL
Keyboard and/or mouse event mask indicating that the CTRL key was pushed on the keyboard when the event was generated. This is a synonym for CTRL (value is 1<<18).
See Also:
Constant Field Values

COMMAND
public static final int COMMAND
Keyboard and/or mouse event mask indicating that the COMMAND key was pushed on the keyboard when the event was generated (value is 1<<22).
since. :
2.1
See Also:
Constant Field Values

MODIFIER_MASK
public static final int MODIFIER_MASK
Keyboard and/or mouse event mask indicating all possible keyboard modifiers. To allow for the future, this mask is intended to be used in place of code that references each individual keyboard mask. For example, the following expression will determine whether any modifier is pressed and will continue to work as new modifier masks are added. (stateMask & SWT.MODIFIER_MASK) != 0.
since. :
2.1

BUTTON1
public static final int BUTTON1
Keyboard and/or mouse event mask indicating that mouse button one (usually 'left') was pushed when the event was generated. (value is 1<<19).
See Also:
Constant Field Values

BUTTON2
public static final int BUTTON2
Keyboard and/or mouse event mask indicating that mouse button two (usually 'middle') was pushed when the event was generated. (value is 1<<20).
See Also:
Constant Field Values

BUTTON3
public static final int BUTTON3
Keyboard and/or mouse event mask indicating that mouse button three (usually 'right') was pushed when the event was generated. (value is 1<<21).
See Also:
Constant Field Values

BUTTON4
public static final int BUTTON4
Keyboard and/or mouse event mask indicating that mouse button four was pushed when the event was generated. (value is 1<<23).
since. :
3.1
See Also:
Constant Field Values

BUTTON5
public static final int BUTTON5
Keyboard and/or mouse event mask indicating that mouse button five was pushed when the event was generated. (value is 1<<25).
since. :
3.1
See Also:
Constant Field Values

BUTTON_MASK
public static final int BUTTON_MASK
Keyboard and/or mouse event mask indicating all possible mouse buttons. To allow for the future, this mask is intended to be used in place of code that references each individual button mask. For example, the following expression will determine whether any button is pressed and will continue to work as new button masks are added. (stateMask & SWT.BUTTON_MASK) != 0.
since. :
2.1

MOD1
public static final int MOD1
Keyboard and/or mouse event mask indicating that the MOD1 key was pushed on the keyboard when the event was generated. This is the primary keyboard modifier for the platform. CTRL on most platforms (COMMAND on the Mac).
since. :
2.1

MOD2
public static final int MOD2
Keyboard and/or mouse event mask indicating that the MOD2 key was pushed on the keyboard when the event was generated. This is the secondary keyboard modifier for the platform. SHIFT on most platforms.
since. :
2.1

MOD3
public static final int MOD3
Keyboard and/or mouse event mask indicating that the MOD3 key was pushed on the keyboard when the event was generated. ALT on most platforms.
since. :
2.1

MOD4
public static final int MOD4
Keyboard and/or mouse event mask indicating that the MOD4 key was pushed on the keyboard when the event was generated. Undefined on most platforms (CTRL on the Mac).
since. :
2.1

SCROLL_LINE
public static final int SCROLL_LINE
Constants to indicate line scrolling (value is 1). Used By:
Control
since. :
3.1
See Also:
Constant Field Values

SCROLL_PAGE
public static final int SCROLL_PAGE
Constants to indicate page scrolling (value is 2). Used By:
Control
since. :
3.1
See Also:
Constant Field Values

KEYCODE_BIT
public static final int KEYCODE_BIT
Accelerator constant used to differentiate a key code from a unicode character. If this bit is set, then the key stroke portion of an accelerator represents a key code. If this bit is not set, then the key stroke portion of an accelerator is a unicode character. The following expression is false: ((SWT.MOD1 | SWT.MOD2 | 'T') & SWT.KEYCODE_BIT) != 0. The following expression is true: ((SWT.MOD3 | SWT.F2) & SWT.KEYCODE_BIT) != 0. (value is (1<<24))
since. :
2.1
See Also:
Constant Field Values

KEY_MASK
public static final int KEY_MASK
Accelerator constant used to extract the key stroke portion of an accelerator. The key stroke may be a key code or a unicode value. If the key stroke is a key code KEYCODE_BIT will be set.
since. :
2.1
See Also:
Constant Field Values

ARROW_UP
public static final int ARROW_UP
Keyboard event constant representing the UP ARROW key (value is (1<<24)+1).
See Also:
Constant Field Values

ARROW_DOWN
public static final int ARROW_DOWN
Keyboard event constant representing the DOWN ARROW key (value is (1<<24)+2).
See Also:
Constant Field Values

ARROW_LEFT
public static final int ARROW_LEFT
Keyboard event constant representing the LEFT ARROW key (value is (1<<24)+3).
See Also:
Constant Field Values

ARROW_RIGHT
public static final int ARROW_RIGHT
Keyboard event constant representing the RIGHT ARROW key (value is (1<<24)+4).
See Also:
Constant Field Values

PAGE_UP
public static final int PAGE_UP
Keyboard event constant representing the PAGE UP key (value is (1<<24)+5).
See Also:
Constant Field Values

PAGE_DOWN
public static final int PAGE_DOWN
Keyboard event constant representing the PAGE DOWN key (value is (1<<24)+6).
See Also:
Constant Field Values

HOME
public static final int HOME
Keyboard event constant representing the HOME key (value is (1<<24)+7).
See Also:
Constant Field Values

END
public static final int END
Keyboard event constant representing the END key (value is (1<<24)+8).
See Also:
Constant Field Values

INSERT
public static final int INSERT
Keyboard event constant representing the INSERT key (value is (1<<24)+9).
See Also:
Constant Field Values

F1
public static final int F1
Keyboard event constant representing the F1 key (value is (1<<24)+10).
See Also:
Constant Field Values

F2
public static final int F2
Keyboard event constant representing the F2 key (value is (1<<24)+11).
See Also:
Constant Field Values

F3
public static final int F3
Keyboard event constant representing the F3 key (value is (1<<24)+12).
See Also:
Constant Field Values

F4
public static final int F4
Keyboard event constant representing the F4 key (value is (1<<24)+13).
See Also:
Constant Field Values

F5
public static final int F5
Keyboard event constant representing the F5 key (value is (1<<24)+14).
See Also:
Constant Field Values

F6
public static final int F6
Keyboard event constant representing the F6 key (value is (1<<24)+15).
See Also:
Constant Field Values

F7
public static final int F7
Keyboard event constant representing the F7 key (value is (1<<24)+16).
See Also:
Constant Field Values

F8
public static final int F8
Keyboard event constant representing the F8 key (value is (1<<24)+17).
See Also:
Constant Field Values

F9
public static final int F9
Keyboard event constant representing the F9 key (value is (1<<24)+18).
See Also:
Constant Field Values

F10
public static final int F10
Keyboard event constant representing the F10 key (value is (1<<24)+19).
See Also:
Constant Field Values

F11
public static final int F11
Keyboard event constant representing the F11 key (value is (1<<24)+20).
See Also:
Constant Field Values

F12
public static final int F12
Keyboard event constant representing the F12 key (value is (1<<24)+21).
See Also:
Constant Field Values

F13
public static final int F13
Keyboard event constant representing the F13 key (value is (1<<24)+22).
since. :
3.0
See Also:
Constant Field Values

F14
public static final int F14
Keyboard event constant representing the F14 key (value is (1<<24)+23).
since. :
3.0
See Also:
Constant Field Values

F15
public static final int F15
Keyboard event constant representing the F15 key (value is (1<<24)+24).
since. :
3.0
See Also:
Constant Field Values

F16
public static final int F16
Keyboard event constant representing the F16 key (value is (1<<25)+25).
since. :
3.6
See Also:
Constant Field Values

F17
public static final int F17
Keyboard event constant representing the F17 key (value is (1<<26)+26).
since. :
3.6
See Also:
Constant Field Values

F18
public static final int F18
Keyboard event constant representing the F18 key (value is (1<<27)+27).
since. :
3.6
See Also:
Constant Field Values

F19
public static final int F19
Keyboard event constant representing the F19 key (value is (1<<28)+28).
since. :
3.6
See Also:
Constant Field Values

F20
public static final int F20
Keyboard event constant representing the F20 key (value is (1<<29)+29).
since. :
3.6
See Also:
Constant Field Values

KEYPAD
public static final int KEYPAD
Keyboard event constant representing the keypad location. (value is 1<<1).
since. :
3.6
See Also:
Constant Field Values

KEYPAD_MULTIPLY
public static final int KEYPAD_MULTIPLY
Keyboard event constant representing the numeric key pad multiply key (value is (1<<24)+42).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_ADD
public static final int KEYPAD_ADD
Keyboard event constant representing the numeric key pad add key (value is (1<<24)+43).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_SUBTRACT
public static final int KEYPAD_SUBTRACT
Keyboard event constant representing the numeric key pad subtract key (value is (1<<24)+45).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_DECIMAL
public static final int KEYPAD_DECIMAL
Keyboard event constant representing the numeric key pad decimal key (value is (1<<24)+46).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_DIVIDE
public static final int KEYPAD_DIVIDE
Keyboard event constant representing the numeric key pad divide key (value is (1<<24)+47).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_0
public static final int KEYPAD_0
Keyboard event constant representing the numeric key pad zero key (value is (1<<24)+48).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_1
public static final int KEYPAD_1
Keyboard event constant representing the numeric key pad one key (value is (1<<24)+49).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_2
public static final int KEYPAD_2
Keyboard event constant representing the numeric key pad two key (value is (1<<24)+50).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_3
public static final int KEYPAD_3
Keyboard event constant representing the numeric key pad three key (value is (1<<24)+51).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_4
public static final int KEYPAD_4
Keyboard event constant representing the numeric key pad four key (value is (1<<24)+52).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_5
public static final int KEYPAD_5
Keyboard event constant representing the numeric key pad five key (value is (1<<24)+53).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_6
public static final int KEYPAD_6
Keyboard event constant representing the numeric key pad six key (value is (1<<24)+54).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_7
public static final int KEYPAD_7
Keyboard event constant representing the numeric key pad seven key (value is (1<<24)+55).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_8
public static final int KEYPAD_8
Keyboard event constant representing the numeric key pad eight key (value is (1<<24)+56).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_9
public static final int KEYPAD_9
Keyboard event constant representing the numeric key pad nine key (value is (1<<24)+57).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_EQUAL
public static final int KEYPAD_EQUAL
Keyboard event constant representing the numeric key pad equal key (value is (1<<24)+61).
since. :
3.0
See Also:
Constant Field Values

KEYPAD_CR
public static final int KEYPAD_CR
Keyboard event constant representing the numeric key pad enter key (value is (1<<24)+80).
since. :
3.0
See Also:
Constant Field Values

HELP
public static final int HELP
Keyboard event constant representing the help key (value is (1<<24)+81). NOTE: The HELP key maps to the key labeled "help", not "F1". If your keyboard does not have a HELP key, you will never see this key press. To listen for help on a control, use SWT.Help.
since. :
3.0
See Also:
SWT#Help, Constant Field Values

CAPS_LOCK
public static final int CAPS_LOCK
Keyboard event constant representing the caps lock key (value is (1<<24)+82).
since. :
3.0
See Also:
Constant Field Values

NUM_LOCK
public static final int NUM_LOCK
Keyboard event constant representing the num lock key (value is (1<<24)+83).
since. :
3.0
See Also:
Constant Field Values

SCROLL_LOCK
public static final int SCROLL_LOCK
Keyboard event constant representing the scroll lock key (value is (1<<24)+84).
since. :
3.0
See Also:
Constant Field Values

PAUSE
public static final int PAUSE
Keyboard event constant representing the pause key (value is (1<<24)+85).
since. :
3.0
See Also:
Constant Field Values

BREAK
public static final int BREAK
Keyboard event constant representing the break key (value is (1<<24)+86).
since. :
3.0
See Also:
Constant Field Values

PRINT_SCREEN
public static final int PRINT_SCREEN
Keyboard event constant representing the print screen key (value is (1<<24)+87).
since. :
3.0
See Also:
Constant Field Values

ICON_ERROR
public static final int ICON_ERROR
The MessageBox style constant for error icon behavior (value is 1).
See Also:
Constant Field Values

ICON_INFORMATION
public static final int ICON_INFORMATION
The MessageBox style constant for information icon behavior (value is 1<<1).
See Also:
Constant Field Values

ICON_QUESTION
public static final int ICON_QUESTION
The MessageBox style constant for question icon behavior (value is 1<<2).
See Also:
Constant Field Values

ICON_WARNING
public static final int ICON_WARNING
The MessageBox style constant for warning icon behavior (value is 1<<3).
See Also:
Constant Field Values

ICON_WORKING
public static final int ICON_WORKING
The MessageBox style constant for "working" icon behavior (value is 1<<4).
See Also:
Constant Field Values

ICON_SEARCH
public static final int ICON_SEARCH
The style constant for "search" icon. This style constant is used with Text in combination with SWT.SEARCH (value is 1<<9).
Note that this is a HINT. Used By:
Text
since. :
3.5
See Also:
SEARCH, ICON_CANCEL, Constant Field Values

ICON_CANCEL
public static final int ICON_CANCEL
The style constant for "cancel" icon. This style constant is used with Text in combination with SWT.SEARCH (value is 1<<8).
Note that this is a HINT. Used By:
Text
since. :
3.5
See Also:
SEARCH, ICON_SEARCH, Constant Field Values

OK
public static final int OK
The MessageBox style constant for an OK button; valid combinations are OK, OK|CANCEL (value is 1<<5).
See Also:
Constant Field Values

YES
public static final int YES
The MessageBox style constant for YES button; valid combinations are YES|NO, YES|NO|CANCEL (value is 1<<6).
See Also:
Constant Field Values

NO
public static final int NO
The MessageBox style constant for NO button; valid combinations are YES|NO, YES|NO|CANCEL (value is 1<<7).
See Also:
Constant Field Values

CANCEL
public static final int CANCEL
The MessageBox style constant for a CANCEL button; valid combinations are OK|CANCEL, YES|NO|CANCEL, RETRY|CANCEL (value is 1<<8). Used By:
MessageBox
See Also:
Constant Field Values

ABORT
public static final int ABORT
The MessageBox style constant for an ABORT button; the only valid combination is ABORT|RETRY|IGNORE (value is 1<<9).
See Also:
Constant Field Values

RETRY
public static final int RETRY
The MessageBox style constant for a RETRY button; valid combinations are ABORT|RETRY|IGNORE, RETRY|CANCEL (value is 1<<10).
See Also:
Constant Field Values

IGNORE
public static final int IGNORE
The MessageBox style constant for an IGNORE button; the only valid combination is ABORT|RETRY|IGNORE (value is 1<<11).
See Also:
Constant Field Values

OPEN
public static final int OPEN
The FileDialog style constant for open file dialog behavior (value is 1<<12).
See Also:
Constant Field Values

SAVE
public static final int SAVE
The FileDialog style constant for save file dialog behavior (value is 1<<13).
See Also:
Constant Field Values

INHERIT_NONE
public static final int INHERIT_NONE
The Composite constant to indicate that an attribute (such as background) is not inherited by the children (value is 0).
since. :
3.2
See Also:
Constant Field Values

INHERIT_DEFAULT
public static final int INHERIT_DEFAULT
The Composite constant to indicate that an attribute (such as background) is inherited by children who choose this value as their "default" (value is 1). For example, a label child will typically choose to inherit the background color of a composite while a list or table will not.
since. :
3.2
See Also:
Constant Field Values

INHERIT_FORCE
public static final int INHERIT_FORCE
The Composite constant to indicate that an attribute (such as background) is inherited by all children.
since. :
3.2
See Also:
Constant Field Values

COLOR_WHITE
public static final int COLOR_WHITE
Default color white (value is 1).
See Also:
Constant Field Values

COLOR_BLACK
public static final int COLOR_BLACK
Default color black (value is 2).
See Also:
Constant Field Values

COLOR_RED
public static final int COLOR_RED
Default color red (value is 3).
See Also:
Constant Field Values

COLOR_DARK_RED
public static final int COLOR_DARK_RED
Default color dark red (value is 4).
See Also:
Constant Field Values

COLOR_GREEN
public static final int COLOR_GREEN
Default color green (value is 5).
See Also:
Constant Field Values

COLOR_DARK_GREEN
public static final int COLOR_DARK_GREEN
Default color dark green (value is 6).
See Also:
Constant Field Values

COLOR_YELLOW
public static final int COLOR_YELLOW
Default color yellow (value is 7).
See Also:
Constant Field Values

COLOR_DARK_YELLOW
public static final int COLOR_DARK_YELLOW
Default color dark yellow (value is 8).
See Also:
Constant Field Values

COLOR_BLUE
public static final int COLOR_BLUE
Default color blue (value is 9).
See Also:
Constant Field Values

COLOR_DARK_BLUE
public static final int COLOR_DARK_BLUE
Default color dark blue (value is 10).
See Also:
Constant Field Values

COLOR_MAGENTA
public static final int COLOR_MAGENTA
Default color magenta (value is 11).
See Also:
Constant Field Values

COLOR_DARK_MAGENTA
public static final int COLOR_DARK_MAGENTA
Default color dark magenta (value is 12).
See Also:
Constant Field Values

COLOR_CYAN
public static final int COLOR_CYAN
Default color cyan (value is 13).
See Also:
Constant Field Values

COLOR_DARK_CYAN
public static final int COLOR_DARK_CYAN
Default color dark cyan (value is 14).
See Also:
Constant Field Values

COLOR_GRAY
public static final int COLOR_GRAY
Default color gray (value is 15).
See Also:
Constant Field Values

COLOR_DARK_GRAY
public static final int COLOR_DARK_GRAY
Default color dark gray (value is 16).
See Also:
Constant Field Values

COLOR_WIDGET_DARK_SHADOW
public static final int COLOR_WIDGET_DARK_SHADOW
System color used to paint dark shadow areas (value is 17).
See Also:
Constant Field Values

COLOR_WIDGET_NORMAL_SHADOW
public static final int COLOR_WIDGET_NORMAL_SHADOW
System color used to paint normal shadow areas (value is 18).
See Also:
Constant Field Values

COLOR_WIDGET_LIGHT_SHADOW
public static final int COLOR_WIDGET_LIGHT_SHADOW
System color used to paint light shadow areas (value is 19).
See Also:
Constant Field Values

COLOR_WIDGET_HIGHLIGHT_SHADOW
public static final int COLOR_WIDGET_HIGHLIGHT_SHADOW
System color used to paint highlight shadow areas (value is 20).
See Also:
Constant Field Values

COLOR_WIDGET_FOREGROUND
public static final int COLOR_WIDGET_FOREGROUND
System color used to paint foreground areas (value is 21).
See Also:
Constant Field Values

COLOR_WIDGET_BACKGROUND
public static final int COLOR_WIDGET_BACKGROUND
System color used to paint background areas (value is 22).
See Also:
Constant Field Values

COLOR_WIDGET_BORDER
public static final int COLOR_WIDGET_BORDER
System color used to paint border areas (value is 23).
See Also:
Constant Field Values

COLOR_LIST_FOREGROUND
public static final int COLOR_LIST_FOREGROUND
System color used to paint list foreground areas (value is 24).
See Also:
Constant Field Values

COLOR_LIST_BACKGROUND
public static final int COLOR_LIST_BACKGROUND
System color used to paint list background areas (value is 25).
See Also:
Constant Field Values

COLOR_LIST_SELECTION
public static final int COLOR_LIST_SELECTION
System color used to paint list selection background areas (value is 26).
See Also:
Constant Field Values

COLOR_LIST_SELECTION_TEXT
public static final int COLOR_LIST_SELECTION_TEXT
System color used to paint list selected text (value is 27).
See Also:
Constant Field Values

COLOR_INFO_FOREGROUND
public static final int COLOR_INFO_FOREGROUND
System color used to paint tooltip text (value is 28).
See Also:
Constant Field Values

COLOR_INFO_BACKGROUND
public static final int COLOR_INFO_BACKGROUND
System color used to paint tooltip background areas (value is 29).
See Also:
Constant Field Values

COLOR_TITLE_FOREGROUND
public static final int COLOR_TITLE_FOREGROUND
System color used to paint title text (value is 30).
See Also:
Constant Field Values

COLOR_TITLE_BACKGROUND
public static final int COLOR_TITLE_BACKGROUND
System color used to paint title background areas (value is 31).
See Also:
Constant Field Values

COLOR_TITLE_BACKGROUND_GRADIENT
public static final int COLOR_TITLE_BACKGROUND_GRADIENT
System color used to paint title background gradient (value is 32).
See Also:
Constant Field Values

COLOR_TITLE_INACTIVE_FOREGROUND
public static final int COLOR_TITLE_INACTIVE_FOREGROUND
System color used to paint inactive title text (value is 33).
See Also:
Constant Field Values

COLOR_TITLE_INACTIVE_BACKGROUND
public static final int COLOR_TITLE_INACTIVE_BACKGROUND
System color used to paint inactive title background areas (value is 34).
See Also:
Constant Field Values

COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT
public static final int COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT
System color used to paint inactive title background gradient (value is 35).
See Also:
Constant Field Values

COLOR_LINK_FOREGROUND
public static final int COLOR_LINK_FOREGROUND
System color used to paint link text (value is 36).
since. :
3.102
See Also:
Constant Field Values

COLOR_TRANSPARENT
public static final int COLOR_TRANSPARENT
System color used to paint with alpha 0 (value is 37). This pseudo-color can be used to set a transparent background on SWT controls.
Note that this is a HINT and may be overridden by the platform. For example:
Combo, List and Tree support transparent background on GTK3 and Windows only.
Text supports transparent background on Windows only whereas Table supports transparent background on GTK3 only.
since. :
3.104
See Also:
Constant Field Values

DRAW_TRANSPARENT
public static final int DRAW_TRANSPARENT
Draw constant indicating whether the drawing operation should fill the background (value is 1<<0).
See Also:
Constant Field Values

DRAW_DELIMITER
public static final int DRAW_DELIMITER
Draw constant indicating whether the string drawing operation should handle line-delimiters (value is 1<<1).
See Also:
Constant Field Values

DRAW_TAB
public static final int DRAW_TAB
Draw constant indicating whether the string drawing operation should expand TAB characters (value is 1<<2).
See Also:
Constant Field Values

DRAW_MNEMONIC
public static final int DRAW_MNEMONIC
Draw constant indicating whether the string drawing operation should handle mnemonics (value is 1<<3).
See Also:
Constant Field Values

DELIMITER_SELECTION
public static final int DELIMITER_SELECTION
Selection constant indicating that a line delimiter should be drawn (value is 1<<17). Used By:
TextLayout
since. :
3.3
See Also:
FULL_SELECTION, LAST_LINE_SELECTION, Constant Field Values

LAST_LINE_SELECTION
public static final int LAST_LINE_SELECTION
Selection constant indicating that the last line is selected to the end and should be drawn using either a line delimiter or full line selection (value is 1<<20). Used By:
TextLayout
since. :
3.3
See Also:
DELIMITER_SELECTION, FULL_SELECTION, Constant Field Values

ERROR_UNSPECIFIED
public static final int ERROR_UNSPECIFIED
SWT error constant indicating that no error number was specified (value is 1).
See Also:
Constant Field Values

ERROR_NO_HANDLES
public static final int ERROR_NO_HANDLES
SWT error constant indicating that no more handles for an operating system resource are available (value is 2).
See Also:
Constant Field Values

ERROR_NO_MORE_CALLBACKS
public static final int ERROR_NO_MORE_CALLBACKS
SWT error constant indicating that no more callback resources are available (value is 3).
See Also:
Constant Field Values

ERROR_NULL_ARGUMENT
public static final int ERROR_NULL_ARGUMENT
SWT error constant indicating that a null argument was passed in (value is 4).
See Also:
Constant Field Values

ERROR_INVALID_ARGUMENT
public static final int ERROR_INVALID_ARGUMENT
SWT error constant indicating that an invalid argument was passed in (value is 5).
See Also:
Constant Field Values

ERROR_INVALID_RANGE
public static final int ERROR_INVALID_RANGE
SWT error constant indicating that a value was found to be outside the allowable range (value is 6).
See Also:
Constant Field Values

ERROR_CANNOT_BE_ZERO
public static final int ERROR_CANNOT_BE_ZERO
SWT error constant indicating that a value which can not be zero was found to be (value is 7).
See Also:
Constant Field Values

ERROR_CANNOT_GET_ITEM
public static final int ERROR_CANNOT_GET_ITEM
SWT error constant indicating that the underlying operating system was unable to provide the value of an item (value is 8).
See Also:
Constant Field Values

ERROR_CANNOT_GET_SELECTION
public static final int ERROR_CANNOT_GET_SELECTION
SWT error constant indicating that the underlying operating system was unable to provide the selection (value is 9).
See Also:
Constant Field Values

ERROR_CANNOT_INVERT_MATRIX
public static final int ERROR_CANNOT_INVERT_MATRIX
SWT error constant indicating that the matrix is not invertible (value is 10).
since. :
3.1
See Also:
Constant Field Values

ERROR_CANNOT_GET_ITEM_HEIGHT
public static final int ERROR_CANNOT_GET_ITEM_HEIGHT
SWT error constant indicating that the underlying operating system was unable to provide the height of an item (value is 11).
See Also:
Constant Field Values

ERROR_CANNOT_GET_TEXT
public static final int ERROR_CANNOT_GET_TEXT
SWT error constant indicating that the underlying operating system was unable to provide the text of a widget (value is 12).
See Also:
Constant Field Values

ERROR_CANNOT_SET_TEXT
public static final int ERROR_CANNOT_SET_TEXT
SWT error constant indicating that the underlying operating system was unable to set the text of a widget (value is 13).
See Also:
Constant Field Values

ERROR_ITEM_NOT_ADDED
public static final int ERROR_ITEM_NOT_ADDED
SWT error constant indicating that the underlying operating system was unable to add an item (value is 14).
See Also:
Constant Field Values

ERROR_ITEM_NOT_REMOVED
public static final int ERROR_ITEM_NOT_REMOVED
SWT error constant indicating that the underlying operating system was unable to remove an item (value is 15).
See Also:
Constant Field Values

ERROR_NO_GRAPHICS_LIBRARY
public static final int ERROR_NO_GRAPHICS_LIBRARY
SWT error constant indicating that the graphics library is not available (value is 16).
See Also:
Constant Field Values

ERROR_NOT_IMPLEMENTED
public static final int ERROR_NOT_IMPLEMENTED
SWT error constant indicating that a particular feature has not been implemented on this platform (value is 20).
See Also:
Constant Field Values

ERROR_MENU_NOT_DROP_DOWN
public static final int ERROR_MENU_NOT_DROP_DOWN
SWT error constant indicating that a menu which needed to have the drop down style had some other style instead (value is 21).
See Also:
Constant Field Values

ERROR_THREAD_INVALID_ACCESS
public static final int ERROR_THREAD_INVALID_ACCESS
SWT error constant indicating that an attempt was made to invoke an SWT operation which can only be executed by the user-interface thread from some other thread (value is 22).
See Also:
Constant Field Values

ERROR_WIDGET_DISPOSED
public static final int ERROR_WIDGET_DISPOSED
SWT error constant indicating that an attempt was made to invoke an SWT operation using a widget which had already been disposed (value is 24).
See Also:
Constant Field Values

ERROR_MENUITEM_NOT_CASCADE
public static final int ERROR_MENUITEM_NOT_CASCADE
SWT error constant indicating that a menu item which needed to have the cascade style had some other style instead (value is 27).
See Also:
Constant Field Values

ERROR_CANNOT_SET_SELECTION
public static final int ERROR_CANNOT_SET_SELECTION
SWT error constant indicating that the underlying operating system was unable to set the selection of a widget (value is 28).
See Also:
Constant Field Values

ERROR_CANNOT_SET_MENU
public static final int ERROR_CANNOT_SET_MENU
SWT error constant indicating that the underlying operating system was unable to set the menu (value is 29).
See Also:
Constant Field Values

ERROR_CANNOT_SET_ENABLED
public static final int ERROR_CANNOT_SET_ENABLED
SWT error constant indicating that the underlying operating system was unable to set the enabled state (value is 30).
See Also:
Constant Field Values

ERROR_CANNOT_GET_ENABLED
public static final int ERROR_CANNOT_GET_ENABLED
SWT error constant indicating that the underlying operating system was unable to provide enabled/disabled state information (value is 31).
See Also:
Constant Field Values

ERROR_INVALID_PARENT
public static final int ERROR_INVALID_PARENT
SWT error constant indicating that a provided widget can not be used as a parent in the current operation (value is 32).
See Also:
Constant Field Values

ERROR_MENU_NOT_BAR
public static final int ERROR_MENU_NOT_BAR
SWT error constant indicating that a menu which needed to have the menu bar style had some other style instead (value is 33).
See Also:
Constant Field Values

ERROR_CANNOT_GET_COUNT
public static final int ERROR_CANNOT_GET_COUNT
SWT error constant indicating that the underlying operating system was unable to provide count information (value is 36).
See Also:
Constant Field Values

ERROR_MENU_NOT_POP_UP
public static final int ERROR_MENU_NOT_POP_UP
SWT error constant indicating that a menu which needed to have the pop up menu style had some other style instead (value is 37).
See Also:
Constant Field Values

ERROR_UNSUPPORTED_DEPTH
public static final int ERROR_UNSUPPORTED_DEPTH
SWT error constant indicating that a graphics operation was attempted with an image of an unsupported depth (value is 38).
See Also:
Constant Field Values

ERROR_IO
public static final int ERROR_IO
SWT error constant indicating that an input/output operation failed during the execution of an SWT operation (value is 39).
See Also:
Constant Field Values

ERROR_INVALID_IMAGE
public static final int ERROR_INVALID_IMAGE
SWT error constant indicating that a graphics operation was attempted with an image having an invalid format (value is 40).
See Also:
Constant Field Values

ERROR_UNSUPPORTED_FORMAT
public static final int ERROR_UNSUPPORTED_FORMAT
SWT error constant indicating that a graphics operation was attempted with an image having a valid but unsupported format (value is 42).
See Also:
Constant Field Values

ERROR_INVALID_SUBCLASS
public static final int ERROR_INVALID_SUBCLASS
SWT error constant indicating that an attempt was made to subclass an SWT widget class without implementing the checkSubclass() method (value is 43). For additional information see the comment in Widget.checkSubclass().
See Also:
Widget.checkSubclass(), Constant Field Values

ERROR_GRAPHIC_DISPOSED
public static final int ERROR_GRAPHIC_DISPOSED
SWT error constant indicating that an attempt was made to invoke an SWT operation using a graphics object which had already been disposed (value is 44).
See Also:
Constant Field Values

ERROR_DEVICE_DISPOSED
public static final int ERROR_DEVICE_DISPOSED
SWT error constant indicating that an attempt was made to invoke an SWT operation using a device which had already been disposed (value is 45).
See Also:
Constant Field Values

ERROR_FAILED_EXEC
public static final int ERROR_FAILED_EXEC
SWT error constant indicating that an exception happened when executing a runnable (value is 46).
See Also:
Constant Field Values

ERROR_FAILED_LOAD_LIBRARY
public static final int ERROR_FAILED_LOAD_LIBRARY
SWT error constant indicating that an unsatisfied link error occurred while attempting to load a library (value is 47).
since. :
3.1
See Also:
Constant Field Values

ERROR_INVALID_FONT
public static final int ERROR_INVALID_FONT
SWT error constant indicating that a font is not valid (value is 48).
since. :
3.1
See Also:
Constant Field Values

ERROR_FUNCTION_DISPOSED
public static final int ERROR_FUNCTION_DISPOSED
SWT error constant indicating that an attempt was made to use an BrowserFunction object which had already been disposed (value is 49).
since. :
3.5
See Also:
Constant Field Values

ERROR_FAILED_EVALUATE
public static final int ERROR_FAILED_EVALUATE
SWT error constant indicating that an exception happened when evaluating a javascript expression (value is 50).
since. :
3.5
See Also:
Constant Field Values

ERROR_INVALID_RETURN_VALUE
public static final int ERROR_INVALID_RETURN_VALUE
SWT error constant indicating that an invalid value was returned (value is 51).
since. :
3.5
See Also:
Constant Field Values

BITMAP
public static final int BITMAP
Constant indicating that an image or operation is of type bitmap (value is 0).
See Also:
Constant Field Values

ICON
public static final int ICON
Constant indicating that an image or operation is of type icon (value is 1).
See Also:
Constant Field Values

IMAGE_COPY
public static final int IMAGE_COPY
The Image constructor argument indicating that the new image should be a copy of the image provided as an argument (value is 0).
See Also:
Constant Field Values

IMAGE_DISABLE
public static final int IMAGE_DISABLE
The Image constructor argument indicating that the new image should have the appearance of a "disabled" (using the platform's rules for how this should look) copy of the image provided as an argument (value is 1).
See Also:
Constant Field Values

IMAGE_GRAY
public static final int IMAGE_GRAY
The Image constructor argument indicating that the new image should have the appearance of a "gray scaled" copy of the image provided as an argument (value is 2).
See Also:
Constant Field Values

ERROR
public static final int ERROR
Constant to indicate an error state (value is 1). Used By:
ProgressBar
since. :
3.4
See Also:
Constant Field Values

PAUSED
public static final int PAUSED
Constant to a indicate a paused state (value is 4). Used By:
ProgressBar
since. :
3.4
See Also:
Constant Field Values

NORMAL
public static final int NORMAL
The font style constant indicating a normal weight, non-italic font (value is 0). This constant is also used with ProgressBar to indicate a normal state. Used By:
ProgressBar
See Also:
Constant Field Values

BOLD
public static final int BOLD
The font style constant indicating a bold weight font (value is 1<<0).
See Also:
Constant Field Values

ITALIC
public static final int ITALIC
The font style constant indicating an italic font (value is 1<<1).
See Also:
Constant Field Values

CURSOR_ARROW
public static final int CURSOR_ARROW
System arrow cursor (value is 0).
See Also:
Constant Field Values

CURSOR_WAIT
public static final int CURSOR_WAIT
System wait cursor (value is 1).
See Also:
Constant Field Values

CURSOR_CROSS
public static final int CURSOR_CROSS
System cross hair cursor (value is 2).
See Also:
Constant Field Values

CURSOR_APPSTARTING
public static final int CURSOR_APPSTARTING
System app startup cursor (value is 3).
See Also:
Constant Field Values

CURSOR_HELP
public static final int CURSOR_HELP
System help cursor (value is 4).
See Also:
Constant Field Values

CURSOR_SIZEALL
public static final int CURSOR_SIZEALL
System resize all directions cursor (value is 5).
See Also:
Constant Field Values

CURSOR_SIZENESW
public static final int CURSOR_SIZENESW
System resize north-east-south-west cursor (value is 6).
See Also:
Constant Field Values

CURSOR_SIZENS
public static final int CURSOR_SIZENS
System resize north-south cursor (value is 7).
See Also:
Constant Field Values

CURSOR_SIZENWSE
public static final int CURSOR_SIZENWSE
System resize north-west-south-east cursor (value is 8).
See Also:
Constant Field Values

CURSOR_SIZEWE
public static final int CURSOR_SIZEWE
System resize west-east cursor (value is 9).
See Also:
Constant Field Values

CURSOR_SIZEN
public static final int CURSOR_SIZEN
System resize north cursor (value is 10).
See Also:
Constant Field Values

CURSOR_SIZES
public static final int CURSOR_SIZES
System resize south cursor (value is 11).
See Also:
Constant Field Values

CURSOR_SIZEE
public static final int CURSOR_SIZEE
System resize east cursor (value is 12).
See Also:
Constant Field Values

CURSOR_SIZEW
public static final int CURSOR_SIZEW
System resize west cursor (value is 13).
See Also:
Constant Field Values

CURSOR_SIZENE
public static final int CURSOR_SIZENE
System resize north-east cursor (value is 14).
See Also:
Constant Field Values

CURSOR_SIZESE
public static final int CURSOR_SIZESE
System resize south-east cursor (value is 15).
See Also:
Constant Field Values

CURSOR_SIZESW
public static final int CURSOR_SIZESW
System resize south-west cursor (value is 16).
See Also:
Constant Field Values

CURSOR_SIZENW
public static final int CURSOR_SIZENW
System resize north-west cursor (value is 17).
See Also:
Constant Field Values

CURSOR_UPARROW
public static final int CURSOR_UPARROW
System up arrow cursor (value is 18).
See Also:
Constant Field Values

CURSOR_IBEAM
public static final int CURSOR_IBEAM
System i-beam cursor (value is 19).
See Also:
Constant Field Values

CURSOR_NO
public static final int CURSOR_NO
System "not allowed" cursor (value is 20).
See Also:
Constant Field Values

CURSOR_HAND
public static final int CURSOR_HAND
System hand cursor (value is 21).
See Also:
Constant Field Values

CAP_FLAT
public static final int CAP_FLAT
Line drawing style for flat end caps (value is 1).
since. :
3.1
See Also:
GC.setLineCap(int), GC.getLineCap(), Constant Field Values

CAP_ROUND
public static final int CAP_ROUND
Line drawing style for rounded end caps (value is 2).
since. :
3.1
See Also:
GC.setLineCap(int), GC.getLineCap(), Constant Field Values

CAP_SQUARE
public static final int CAP_SQUARE
Line drawing style for square end caps (value is 3).
since. :
3.1
See Also:
GC.setLineCap(int), GC.getLineCap(), Constant Field Values

JOIN_MITER
public static final int JOIN_MITER
Line drawing style for miter joins (value is 1).
since. :
3.1
See Also:
GC.setLineJoin(int), GC.getLineJoin(), Constant Field Values

JOIN_ROUND
public static final int JOIN_ROUND
Line drawing style for rounded joins (value is 2).
since. :
3.1
See Also:
GC.setLineJoin(int), GC.getLineJoin(), Constant Field Values

JOIN_BEVEL
public static final int JOIN_BEVEL
Line drawing style for bevel joins (value is 3).
since. :
3.1
See Also:
GC.setLineJoin(int), GC.getLineJoin(), Constant Field Values

LINE_SOLID
public static final int LINE_SOLID
Line drawing style for solid lines (value is 1).
See Also:
Constant Field Values

LINE_DASH
public static final int LINE_DASH
Line drawing style for dashed lines (value is 2).
See Also:
Constant Field Values

LINE_DOT
public static final int LINE_DOT
Line drawing style for dotted lines (value is 3).
See Also:
Constant Field Values

LINE_DASHDOT
public static final int LINE_DASHDOT
Line drawing style for alternating dash-dot lines (value is 4).
See Also:
Constant Field Values

LINE_DASHDOTDOT
public static final int LINE_DASHDOTDOT
Line drawing style for dash-dot-dot lines (value is 5).
See Also:
Constant Field Values

LINE_CUSTOM
public static final int LINE_CUSTOM
Line drawing style for custom dashed lines (value is 6).
since. :
3.1
See Also:
GC.setLineDash(int[]), GC.getLineDash(), Constant Field Values

PATH_MOVE_TO
public static final int PATH_MOVE_TO
Path constant that represents a "move to" operation (value is 1).
since. :
3.1
See Also:
Constant Field Values

PATH_LINE_TO
public static final int PATH_LINE_TO
Path constant that represents a "line to" operation (value is 2).
since. :
3.1
See Also:
Constant Field Values

PATH_QUAD_TO
public static final int PATH_QUAD_TO
Path constant that represents a "quadratic curve to" operation (value is 3).
since. :
3.1
See Also:
Constant Field Values

PATH_CUBIC_TO
public static final int PATH_CUBIC_TO
Path constant that represents a "cubic curve to" operation (value is 4).
since. :
3.1
See Also:
Constant Field Values

PATH_CLOSE
public static final int PATH_CLOSE
Path constant that represents a "close" operation (value is 5).
since. :
3.1
See Also:
Constant Field Values

FILL_EVEN_ODD
public static final int FILL_EVEN_ODD
Even odd rule for filling operations (value is 1).
since. :
3.1
See Also:
Constant Field Values

FILL_WINDING
public static final int FILL_WINDING
Winding rule for filling operations (value is 2).
since. :
3.1
See Also:
Constant Field Values

IMAGE_UNDEFINED
public static final int IMAGE_UNDEFINED
Image format constant indicating an unknown image type (value is -1).
See Also:
Constant Field Values

IMAGE_BMP
public static final int IMAGE_BMP
Image format constant indicating a Windows BMP format image (value is 0).
See Also:
Constant Field Values

IMAGE_BMP_RLE
public static final int IMAGE_BMP_RLE
Image format constant indicating a run-length encoded Windows BMP format image (value is 1).
See Also:
Constant Field Values

IMAGE_GIF
public static final int IMAGE_GIF
Image format constant indicating a GIF format image (value is 2).
See Also:
Constant Field Values

IMAGE_ICO
public static final int IMAGE_ICO
Image format constant indicating a ICO format image (value is 3).
See Also:
Constant Field Values

IMAGE_JPEG
public static final int IMAGE_JPEG
Image format constant indicating a JPEG format image (value is 4).
See Also:
Constant Field Values

IMAGE_PNG
public static final int IMAGE_PNG
Image format constant indicating a PNG format image (value is 5).
See Also:
Constant Field Values

IMAGE_TIFF
public static final int IMAGE_TIFF
Image format constant indicating a TIFF format image (value is 6).
See Also:
Constant Field Values

IMAGE_OS2_BMP
public static final int IMAGE_OS2_BMP
Image format constant indicating an OS/2 BMP format image (value is 7).
See Also:
Constant Field Values

DM_UNSPECIFIED
public static final int DM_UNSPECIFIED
GIF image disposal method constants indicating that the disposal method is unspecified (value is 0).
See Also:
Constant Field Values

DM_FILL_NONE
public static final int DM_FILL_NONE
GIF image disposal method constants indicating that the disposal method is to do nothing; that is, to leave the previous image in place (value is 1).
See Also:
Constant Field Values

DM_FILL_BACKGROUND
public static final int DM_FILL_BACKGROUND
GIF image disposal method constants indicating that the the previous images should be covered with the background color before displaying the next image (value is 2).
See Also:
Constant Field Values

DM_FILL_PREVIOUS
public static final int DM_FILL_PREVIOUS
GIF image disposal method constants indicating that the disposal method is to restore the previous picture (value is 3).
See Also:
Constant Field Values

TRANSPARENCY_NONE
public static final int TRANSPARENCY_NONE
Image transparency constant indicating that the image contains no transparency information (value is 0).
See Also:
Constant Field Values

TRANSPARENCY_ALPHA
public static final int TRANSPARENCY_ALPHA
Image transparency constant indicating that the image contains alpha transparency information (value is 1<<0).
See Also:
Constant Field Values

TRANSPARENCY_MASK
public static final int TRANSPARENCY_MASK
Image transparency constant indicating that the image contains a transparency mask (value is 1<<1).
See Also:
Constant Field Values

TRANSPARENCY_PIXEL
public static final int TRANSPARENCY_PIXEL
Image transparency constant indicating that the image contains a transparent pixel (value is 1<<2).
See Also:
Constant Field Values

MOVEMENT_CHAR
public static final int MOVEMENT_CHAR
The character movement type (value is 1<<0). This constant is used to move a text offset over a character.
since. :
3.0
See Also:
TextLayout.getNextOffset(int, int), TextLayout.getPreviousOffset(int, int), Constant Field Values

MOVEMENT_CLUSTER
public static final int MOVEMENT_CLUSTER
The cluster movement type (value is 1<<1). This constant is used to move a text offset over a cluster. A cluster groups one or more characters. A cluster is undivisible, this means that a caret offset can not be placed in the middle of a cluster.
since. :
3.0
See Also:
TextLayout.getNextOffset(int, int), TextLayout.getPreviousOffset(int, int), Constant Field Values

MOVEMENT_WORD
public static final int MOVEMENT_WORD
The word movement type (value is 1<<2). This constant is used to move a text offset over a word. The behavior of this constant depends on the platform and on the direction of the movement. For example, on Windows the stop is always at the start of the word. On GTK and Mac the stop is at the end of the word if the direction is next and at the start of the word if the direction is previous.
since. :
3.0
See Also:
TextLayout.getNextOffset(int, int), TextLayout.getPreviousOffset(int, int), Constant Field Values

MOVEMENT_WORD_END
public static final int MOVEMENT_WORD_END
The word end movement type (value is 1<<3). This constant is used to move a text offset to the next or previous word end. The behavior of this constant does not depend on the platform.
since. :
3.3
See Also:
TextLayout.getNextOffset(int, int), TextLayout.getPreviousOffset(int, int), Constant Field Values

MOVEMENT_WORD_START
public static final int MOVEMENT_WORD_START
The word start movement type (value is 1<<4). This constant is used to move a text offset to the next or previous word start. The behavior of this constant does not depend on the platform.
since. :
3.3
See Also:
TextLayout.getNextOffset(int, int), TextLayout.getPreviousOffset(int, int), Constant Field Values

ALL
public static final int ALL
A constant indicating that a given operation should be performed on all widgets (value is 1<<0). Used By:
Composite layout
since. :
3.6
See Also:
Composite.layout(org.eclipse.swt.widgets.Control[], int), Constant Field Values

ID_ABOUT
public static final int ID_ABOUT
ID for the About menu item (value is -1).
since. :
3.7
See Also:
MenuItem.setID(int), MenuItem.getID(), Constant Field Values

ID_PREFERENCES
public static final int ID_PREFERENCES
ID for the Preferences menu item (value is -2).
since. :
3.7
See Also:
MenuItem.setID(int), MenuItem.getID(), Constant Field Values

ID_HIDE
public static final int ID_HIDE
ID for the Hide menu item (value is -3).
since. :
3.7
See Also:
MenuItem.setID(int), MenuItem.getID(), Constant Field Values

ID_HIDE_OTHERS
public static final int ID_HIDE_OTHERS
ID for the Hide Others menu item (value is -4).
since. :
3.7
See Also:
MenuItem.setID(int), MenuItem.getID(), Constant Field Values

ID_SHOW_ALL
public static final int ID_SHOW_ALL
ID for the Show All menu item (value is -5).
since. :
3.7
See Also:
MenuItem.setID(int), MenuItem.getID(), Constant Field Values

ID_QUIT
public static final int ID_QUIT
ID for the Quit menu item (value is -6).
since. :
3.7
See Also:
MenuItem.setID(int), MenuItem.getID(), Constant Field Values

SKIN_CLASS
public static final java.lang.String SKIN_CLASS
Key name for setting and getting the skin class of a widget. Note: SWT currently doesn't read or process this property. The only effect of setting this property is to trigger a call to Widget#reskin(SWT.ALL).
since. :
3.6
See Also:
Widget.getData(String), Widget.setData(String, Object), Constant Field Values

SKIN_ID
public static final java.lang.String SKIN_ID
Key name for setting and getting the skin id of a widget. Note: SWT currently doesn't read or process this property. The only effect of setting this property is to trigger a call to Widget#reskin(SWT.ALL).
since. :
3.6
See Also:
Widget.getData(String), Widget.setData(String, Object), Constant Field Values

SCROLLBAR_OVERLAY
public static final int SCROLLBAR_OVERLAY
The Scrollable constant to indicate that the receiver is using overlay scrollbars. (value is 1)
since. :
3.8
See Also:
Constant Field Values

Constructor Detail

SWT
public SWT()

Method Detail

isLoadable
public static boolean isLoadable()
Returns a boolean indicating whether this SWT implementation can be loaded. Examples of criteria that may be used to determine this include the OS and architecture of the JRE that is being used.
Returns:
true if this SWT implementation can be loaded and false otherwise
since. :
3.8

getMessage
public static java.lang.String getMessage(java.lang.String key)
Returns the NLS'ed message for the given argument.
Parameters:
key - the key to look up
Returns:
the message for the given key
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the key is null

getMessage
public static java.lang.String getMessage(java.lang.String key,
                                          java.lang.Object[] args)
Returns the NLS'ed message for the given arguments.
Parameters:
key - the key to look up
args - the parameters to insert into the message
Returns:
the message for the given parameterized key
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the key or args are null
since. :
3.8

getPlatform
public static java.lang.String getPlatform()
Returns the SWT platform name. Examples: "win32", "gtk", "cocoa"
Returns:
the SWT platform name

getVersion
public static int getVersion()
Returns the SWT version number as an integer. Example: "SWT051" == 51
Returns:
the SWT version number

error
public static void error(int code)
Throws an appropriate exception based on the passed in error code.
Parameters:
code - the SWT error code

error
public static void error(int code,
                         java.lang.Throwable throwable)
Throws an appropriate exception based on the passed in error code. The throwable argument should be either null, or the throwable which caused SWT to throw an exception. In SWT, errors are reported by throwing one of three exceptions:
java.lang.IllegalArgumentException thrown whenever one of the API methods is invoked with an illegal argument org.eclipse.swt.SWTException (extends java.lang.RuntimeException) thrown whenever a recoverable error happens internally in SWT org.eclipse.swt.SWTError (extends java.lang.Error) thrown whenever a non-recoverable error happens internally in SWT This method provides the logic which maps between error codes and one of the above exceptions.
Parameters:
code - the SWT error code.
throwable - the exception which caused the error to occur.
See Also:
SWTError, SWTException, IllegalArgumentException

error
public static void error(int code,
                         java.lang.Throwable throwable,
                         java.lang.String detail)
Throws an appropriate exception based on the passed in error code. The throwable argument should be either null, or the throwable which caused SWT to throw an exception. In SWT, errors are reported by throwing one of three exceptions:
java.lang.IllegalArgumentException thrown whenever one of the API methods is invoked with an illegal argument org.eclipse.swt.SWTException (extends java.lang.RuntimeException) thrown whenever a recoverable error happens internally in SWT org.eclipse.swt.SWTError (extends java.lang.Error) thrown whenever a non-recoverable error happens internally in SWT This method provides the logic which maps between error codes and one of the above exceptions.
Parameters:
code - the SWT error code.
throwable - the exception which caused the error to occur.
detail - more information about error.
since. :
3.0
See Also:
SWTError, SWTException, IllegalArgumentException


org.eclipse.swt
Class SWTError
java.lang.Object
java.lang.Throwable
java.lang.Error
org.eclipse.swt.SWTError
All Implemented Interfaces:
java.io.Serializable


public class SWTError extends java.lang.Error
This error is thrown whenever an unrecoverable error occurs internally in SWT. The message text and error code provide a further description of the problem. The exception has a throwable field which holds the underlying throwable that caused the problem (if this information is available (i.e. it may be null)). SWTErrors are thrown when something fails internally which either leaves SWT in an unknown state (eg. the o/s call to remove an item from a list returns an error code) or when SWT is left in a known-to-be-unrecoverable state (eg. it runs out of callback resources). SWTErrors should not occur in typical programs, although "high reliability" applications should still catch them.
This class also provides support methods used by SWT to match error codes to the appropriate exception class (SWTError, SWTException, or IllegalArgumentException) and to provide human readable strings for SWT error codes.
See Also:
SWTException, SWT#error(int), Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
int code
The SWT error code, one of SWT.ERROR_*.
java.lang.Throwable throwable
The underlying throwable that caused the problem, or null if this information is not available.

Constructor Summary
Constructors

Constructor and Description
SWTError()
Constructs a new instance of this class with its stack trace filled in.
SWTError(int code)
Constructs a new instance of this class with its stack trace and error code filled in.
SWTError(int code,         java.lang.String message)
Constructs a new instance of this class with its stack trace, error code and message filled in.
SWTError(java.lang.String message)
Constructs a new instance of this class with its stack trace and message filled in.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.Throwable getCause()
Returns the underlying throwable that caused the problem, or null if this information is not available.
java.lang.String    getMessage()
Returns the string describing this SWTError object.
void    printStackTrace()
Outputs a printable representation of this error's stack trace on the standard error stream.

Methods inherited from class java.lang.Throwable
addSuppressed, fillInStackTrace, getLocalizedMessage, getStackTrace, getSuppressed, initCause, printStackTrace, printStackTrace, setStackTrace, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

code
public int code
The SWT error code, one of SWT.ERROR_*.

throwable
public java.lang.Throwable throwable
The underlying throwable that caused the problem, or null if this information is not available.

Constructor Detail

SWTError
public SWTError()
Constructs a new instance of this class with its stack trace filled in. The error code is set to an unspecified value.

SWTError
public SWTError(java.lang.String message)
Constructs a new instance of this class with its stack trace and message filled in. The error code is set to an unspecified value. Specifying null as the message is equivalent to specifying an empty string.
Parameters:
message - the detail message for the exception

SWTError
public SWTError(int code)
Constructs a new instance of this class with its stack trace and error code filled in.
Parameters:
code - the SWT error code

SWTError
public SWTError(int code,
                java.lang.String message)
Constructs a new instance of this class with its stack trace, error code and message filled in. Specifying null as the message is equivalent to specifying an empty string.
Parameters:
code - the SWT error code
message - the detail message for the exception

Method Detail

getCause
public java.lang.Throwable getCause()
Returns the underlying throwable that caused the problem, or null if this information is not available. NOTE: This method overrides Throwable.getCause() that was added to JDK1.4. It is necessary to override this method in order for inherited printStackTrace() methods to work.
Overrides:
getCause in class java.lang.Throwable
Returns:
the underlying throwable
since. :
3.1

getMessage
public java.lang.String getMessage()
Returns the string describing this SWTError object. It is combined with the message string of the Throwable which caused this SWTError (if this information is available).
Overrides:
getMessage in class java.lang.Throwable
Returns:
the error message string of this SWTError object

printStackTrace
public void printStackTrace()
Outputs a printable representation of this error's stack trace on the standard error stream. Note: printStackTrace(PrintStream) and printStackTrace(PrintWriter) are not provided in order to maintain compatibility with CLDC.
Overrides:
printStackTrace in class java.lang.Throwable


org.eclipse.swt.internal
Interface SWTEventListener
All Superinterfaces:
java.util.EventListener
All Known Subinterfaces:
ArmListener, ControlListener, DisposeListener, DragDetectListener, ExpandListener, FocusListener, GestureListener, HelpListener, ImageLoaderListener, KeyListener, MenuDetectListener, MenuListener, ModifyListener, MouseListener, MouseMoveListener, MouseTrackListener, MouseWheelListener, PaintListener, SegmentListener, SelectionListener, ShellListener, TouchListener, TraverseListener, TreeListener, VerifyListener
All Known Implementing Classes:
ControlAdapter, ExpandAdapter, FocusAdapter, KeyAdapter, MenuAdapter, MouseAdapter, MouseTrackAdapter, SelectionAdapter, ShellAdapter, TreeAdapter


public interface SWTEventListener extends java.util.EventListener
This interface is the cross-platform version of the java.util.EventListener interface. It is part of our effort to provide support for both J2SE and J2ME platforms. Under this scheme, classes need to implement SWTEventListener instead of java.util.EventListener.
Note: java.util.EventListener is not part of CDC and CLDC.


org.eclipse.swt
Class SWTException
java.lang.Object
java.lang.Throwable
java.lang.Exception
java.lang.RuntimeException
org.eclipse.swt.SWTException
All Implemented Interfaces:
java.io.Serializable


public class SWTException extends java.lang.RuntimeException
This runtime exception is thrown whenever a recoverable error occurs internally in SWT. The message text and error code provide a further description of the problem. The exception has a throwable field which holds the underlying exception that caused the problem (if this information is available (i.e. it may be null)). SWTExceptions are thrown when something fails internally, but SWT is left in a known stable state (eg. a widget call was made from a non-u/i thread, or there is failure while reading an Image because the source file was corrupt).
See Also:
SWTError, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
int code
The SWT error code, one of SWT.ERROR_*.
java.lang.Throwable throwable
The underlying throwable that caused the problem, or null if this information is not available.

Constructor Summary
Constructors

Constructor and Description
SWTException()
Constructs a new instance of this class with its stack trace filled in.
SWTException(int code)
Constructs a new instance of this class with its stack trace and error code filled in.
SWTException(int code,             java.lang.String message)
Constructs a new instance of this class with its stack trace, error code and message filled in.
SWTException(java.lang.String message)
Constructs a new instance of this class with its stack trace and message filled in.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.Throwable getCause()
Returns the underlying throwable that caused the problem, or null if this information is not available.
java.lang.String    getMessage()
Returns the string describing this SWTException object.
void    printStackTrace()
Outputs a printable representation of this exception's stack trace on the standard error stream.

Methods inherited from class java.lang.Throwable
addSuppressed, fillInStackTrace, getLocalizedMessage, getStackTrace, getSuppressed, initCause, printStackTrace, printStackTrace, setStackTrace, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

code
public int code
The SWT error code, one of SWT.ERROR_*.

throwable
public java.lang.Throwable throwable
The underlying throwable that caused the problem, or null if this information is not available.

Constructor Detail

SWTException
public SWTException()
Constructs a new instance of this class with its stack trace filled in. The error code is set to an unspecified value.

SWTException
public SWTException(java.lang.String message)
Constructs a new instance of this class with its stack trace and message filled in. The error code is set to an unspecified value. Specifying null as the message is equivalent to specifying an empty string.
Parameters:
message - the detail message for the exception

SWTException
public SWTException(int code)
Constructs a new instance of this class with its stack trace and error code filled in.
Parameters:
code - the SWT error code

SWTException
public SWTException(int code,
                    java.lang.String message)
Constructs a new instance of this class with its stack trace, error code and message filled in. Specifying null as the message is equivalent to specifying an empty string.
Parameters:
code - the SWT error code
message - the detail message for the exception

Method Detail

getCause
public java.lang.Throwable getCause()
Returns the underlying throwable that caused the problem, or null if this information is not available. NOTE: This method overrides Throwable.getCause() that was added to JDK1.4. It is necessary to override this method in order for inherited printStackTrace() methods to work.
Overrides:
getCause in class java.lang.Throwable
Returns:
the underlying throwable
since. :
3.1

getMessage
public java.lang.String getMessage()
Returns the string describing this SWTException object. It is combined with the message string of the Throwable which caused this SWTException (if this information is available).
Overrides:
getMessage in class java.lang.Throwable
Returns:
the error message string of this SWTException object

printStackTrace
public void printStackTrace()
Outputs a printable representation of this exception's stack trace on the standard error stream. Note: printStackTrace(PrintStream) and printStackTrace(PrintWriter) are not provided in order to maintain compatibility with CLDC.
Overrides:
printStackTrace in class java.lang.Throwable


org.eclipse.swt.widgets
Class Synchronizer
java.lang.Object
org.eclipse.swt.widgets.Synchronizer


public class Synchronizer extends java.lang.Object
Instances of this class provide synchronization support for displays. A default instance is created automatically for each display, and this instance is sufficient for almost all applications. IMPORTANT: Typical application code never needs to deal with this class. It is provided only to allow applications which require non-standard synchronization behavior to plug in the support they require. Subclasses which override the methods in this class must ensure that the superclass methods are invoked in their implementations
See Also:
Display.setSynchronizer(org.eclipse.swt.widgets.Synchronizer), Sample code and further information

Constructor Summary
Constructors

Constructor and Description
Synchronizer(Display display)
Constructs a new instance of this class.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
protected void  asyncExec(java.lang.Runnable runnab le)
Causes the run() method of the runnable to be invoked by the user-interface thread at the next reasonable opportunity.
protected void  syncExec(java.lang.Runnable runnabl e)
Causes the run() method of the runnable to be invoked by the user-interface thread at the next reasonable opportunity.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

Synchronizer
public Synchronizer(Display display)
Constructs a new instance of this class.
Parameters:
display - the display to create the synchronizer on

Method Detail

asyncExec
protected void asyncExec(java.lang.Runnable runnable)
Causes the run() method of the runnable to be invoked by the user-interface thread at the next reasonable opportunity. The caller of this method continues to run in parallel, and is not notified when the runnable has completed.
Parameters:
runnable - code to run on the user-interface thread.
See Also:
syncExec(java.lang.Runnable)

syncExec
protected void syncExec(java.lang.Runnable runnable)
Causes the run() method of the runnable to be invoked by the user-interface thread at the next reasonable opportunity. The thread which calls this method is suspended until the runnable completes.
Parameters:
runnable - code to run on the user-interface thread.
Throws:
SWTException -
ERROR_FAILED_EXEC - if an exception occurred when executing the runnable
See Also:
asyncExec(java.lang.Runnable)


org.eclipse.swt.widgets
Class TabFolder
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.Composite
org.eclipse.swt.widgets.TabFolder
All Implemented Interfaces:
Drawable


public class TabFolder extends Composite
Instances of this class implement the notebook user interface metaphor. It allows the user to select a notebook page from set of pages. The item children that may be added to instances of this class must be of type TabItem. Control children are created and then set into a tab item using TabItem#setControl.
Note that although this class is a subclass of Composite, it does not make sense to set a layout on it.
Styles:
TOP, BOTTOM
Events:
Selection
Note: Only one of the styles TOP and BOTTOM may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
TabFolder, TabItem snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
TabFolder(Composite parent,          int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's selection, by sending it one of the messages defined in the SelectionListener interface.
protected void  checkSubclass()
Checks that this class can be subclassed.
TabItem getItem(int index)
Returns the item at the given, zero-relative index in the receiver.
TabItem getItem(Point point)
Returns the tab item at the given point in the receiver or null if no such item exists.
int getItemCount()
Returns the number of items contained in the receiver.
TabItem[]   getItems()
Returns an array of TabItems which are the items in the receiver.
TabItem[]   getSelection()
Returns an array of TabItems that are currently selected in the receiver.
int getSelectionIndex()
Returns the zero-relative index of the item which is currently selected in the receiver, or -1 if no item is selected.
int indexOf(TabItem item)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's selection.
void    setFont(Font font)
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
void    setSelection(int index)
Selects the item at the given zero-relative index in the receiver.
void    setSelection(TabItem item)
Sets the receiver's selection to the given item.
void    setSelection(TabItem[] items)
Sets the receiver's selection to be the given array of items.

Methods inherited from class org.eclipse.swt.widgets.Composite
changed, drawBackground, getBackgroundMode, getChildren, getLayout, getLayoutDeferred, getTabList, isLayoutDeferred, layout, layout, layout, layout, layout, setBackgroundMode, setFocus, setLayout, setLayoutDeferred, setTabList

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRedraw, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

TabFolder
public TabFolder(Composite parent,
                 int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT, SWT.TOP, SWT.BOTTOM, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's selection, by sending it one of the messages defined in the SelectionListener interface. When widgetSelected is called, the item field of the event object is valid. widgetDefaultSelected is not called.
Parameters:
listener - the listener which should be notified when the user changes the receiver's selection
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Composite

getItem
public TabItem getItem(int index)
Returns the item at the given, zero-relative index in the receiver. Throws an exception if the index is out of range.
Parameters:
index - the index of the item to return
Returns:
the item at the given index
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItem
public TabItem getItem(Point point)
Returns the tab item at the given point in the receiver or null if no such item exists. The point is in the coordinate system of the receiver.
Parameters:
point - the point used to locate the item
Returns:
the tab item at the given point, or null if the point is not in a tab item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

getItemCount
public int getItemCount()
Returns the number of items contained in the receiver.
Returns:
the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItems
public TabItem[] getItems()
Returns an array of TabItems which are the items in the receiver. Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the items in the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelection
public TabItem[] getSelection()
Returns an array of TabItems that are currently selected in the receiver. An empty array indicates that no items are selected. Note: This is not the actual structure used by the receiver to maintain its selection, so modifying the array will not affect the receiver.
Returns:
an array representing the selection
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelectionIndex
public int getSelectionIndex()
Returns the zero-relative index of the item which is currently selected in the receiver, or -1 if no item is selected.
Returns:
the index of the selected item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

indexOf
public int indexOf(TabItem item)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item. If no item is found, returns -1.
Parameters:
item - the search item
Returns:
the index of the item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's selection.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

setSelection
public void setSelection(TabItem item)
Sets the receiver's selection to the given item. The current selected is first cleared, then the new item is selected.
Parameters:
item - the item to select
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

setSelection
public void setSelection(TabItem[] items)
Sets the receiver's selection to be the given array of items. The current selected is first cleared, then the new items are selected.
Parameters:
items - the array of items
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the items array is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setFont
public void setFont(Font font)
Description copied from class: Control
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Overrides:
setFont in class Control
Parameters:
font - the new font (or null)

setSelection
public void setSelection(int index)
Selects the item at the given zero-relative index in the receiver. If the item at the index was already selected, it remains selected. The current selection is first cleared, then the new items are selected. Indices that are out of range are ignored.
Parameters:
index - the index of the item to select
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class TabItem
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Item
org.eclipse.swt.widgets.TabItem


public class TabItem extends Item
Instances of this class represent a selectable user interface object corresponding to a tab for a page in a tab folder.
Styles:
(none)
Events:
(none)
IMPORTANT: This class is not intended to be subclassed.
See Also:
TabFolder, TabItem snippets, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
TabItem(TabFolder parent,        int style)
Constructs a new instance of this class given its parent (which must be a TabFolder) and a style value describing its behavior and appearance.
TabItem(TabFolder parent,        int style,        int index)
Constructs a new instance of this class given its parent (which must be a TabFolder), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
protected void  checkSubclass()
Checks that this class can be subclassed.
Rectangle   getBounds()
Returns a rectangle describing the receiver's size and location relative to its parent.
Control getControl()
Returns the control that is used to fill the client area of the tab folder when the user selects the tab item.
TabFolder   getParent()
Returns the receiver's parent, which must be a TabFolder.
java.lang.String    getToolTipText()
Returns the receiver's tool tip text, or null if it has not been set.
void    setControl(Control control)
Sets the control that is used to fill the client area of the tab folder when the user selects the tab item.
void    setImage(Image image)
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
void    setText(java.lang.String string)
Sets the receiver's text.
void    setToolTipText(java.lang.String str ing)
Sets the receiver's tool tip text to the argument, which may be null indicating that the default tool tip for the control will be shown.

Methods inherited from class org.eclipse.swt.widgets.Item
getImage, getText

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

TabItem
public TabItem(TabFolder parent,
               int style)
Constructs a new instance of this class given its parent (which must be a TabFolder) and a style value describing its behavior and appearance. The item is added to the end of the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT, Widget.checkSubclass(), Widget.getStyle()

TabItem
public TabItem(TabFolder parent,
               int style,
               int index)
Constructs a new instance of this class given its parent (which must be a TabFolder), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
index - the zero-relative index to store the receiver in its parent
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT, Widget.checkSubclass(), Widget.getStyle()

Method Detail

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Item

getControl
public Control getControl()
Returns the control that is used to fill the client area of the tab folder when the user selects the tab item. If no control has been set, return null.
Returns:
the control
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getBounds
public Rectangle getBounds()
Returns a rectangle describing the receiver's size and location relative to its parent.
Returns:
the receiver's bounding rectangle
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

getParent
public TabFolder getParent()
Returns the receiver's parent, which must be a TabFolder.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getToolTipText
public java.lang.String getToolTipText()
Returns the receiver's tool tip text, or null if it has not been set.
Returns:
the receiver's tool tip text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setControl
public void setControl(Control control)
Sets the control that is used to fill the client area of the tab folder when the user selects the tab item.
Parameters:
control - the new control (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the control has been disposed
ERROR_INVALID_PARENT - if the control is not in the same widget tree
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setImage
public void setImage(Image image)
Description copied from class: Item
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
Overrides:
setImage in class Item
Parameters:
image - the image to display on the receiver (may be null)

setText
public void setText(java.lang.String string)
Sets the receiver's text. The string may include the mnemonic character. Mnemonics are indicated by an '&' that causes the next character to be the mnemonic. When the user presses a key sequence that matches the mnemonic, a selection event occurs. On most platforms, the mnemonic appears underlined but may be emphasised in a platform specific manner. The mnemonic indicator character '&' can be escaped by doubling it in the string, causing a single '&' to be displayed.
Overrides:
setText in class Item
Parameters:
string - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setToolTipText
public void setToolTipText(java.lang.String string)
Sets the receiver's tool tip text to the argument, which may be null indicating that the default tool tip for the control will be shown. For a control that has a default tool tip, such as the Tree control on Windows, setting the tool tip text to an empty string replaces the default, causing no tool tip text to be shown. The mnemonic indicator (character '&') is not displayed in a tool tip. To display a single '&' in the tool tip, the character '&' can be escaped by doubling it in the string.
Parameters:
string - the new tool tip text (or null)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class Table
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.Composite
org.eclipse.swt.widgets.Table
All Implemented Interfaces:
Drawable


public class Table extends Composite
Instances of this class implement a selectable user interface object that displays a list of images and strings and issues notification when selected. The item children that may be added to instances of this class must be of type TableItem.
Style VIRTUAL is used to create a Table whose TableItems are to be populated by the client on an on-demand basis instead of up-front. This can provide significant performance improvements for tables that are very large or for which TableItem population is expensive (for example, retrieving values from an external source).
Here is an example of using a Table with style VIRTUAL: ``
  final Table table = new Table (parent, SWT.VIRTUAL | SWT.BORDER);
  table.setItemCount (1000000);
  table.addListener (SWT.SetData, new Listener () {
      public void handleEvent (Event event) {
          TableItem item = (TableItem) event.item;
          int index = table.indexOf (item);
          item.setText ("Item " + index);
          System.out.println (item.getText ());
      }
  });
Note that although this class is a subclass of Composite, it does not normally make sense to add Control children to it, or set a layout on it, unless implementing something like a cell editor.
Styles:
SINGLE, MULTI, CHECK, FULL_SELECTION, HIDE_SELECTION, VIRTUAL, NO_SCROLL
Events:
Selection, DefaultSelection, SetData, MeasureItem, EraseItem, PaintItem
Note: Only one of the styles SINGLE, and MULTI may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
Table, TableItem, TableColumn snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Table(Composite parent,      int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's selection, by sending it one of the messages defined in the SelectionListener interface.
protected void  checkSubclass()
Checks that this class can be subclassed.
void    clear(int index)
Clears the item at the given zero-relative index in the receiver.
void    clear(int[] indices)
Clears the items at the given zero-relative indices in the receiver.
void    clear(int start,      int end)
Removes the items from the receiver which are between the given zero-relative start and end indices (inclusive).
void    clearAll()
Clears all the items in the receiver.
void    deselect(int index)
Deselects the item at the given zero-relative index in the receiver.
void    deselect(int[] indices)
Deselects the items at the given zero-relative indices in the receiver.
void    deselect(int start,         int end )
Deselects the items at the given zero-relative indices in the receiver.
void    deselectAll()
Deselects all selected items in the receiver.
TableColumn getColumn(int index)
Returns the column at the given, zero-relative index in the receiver.
int getColumnCount()
Returns the number of columns contained in the receiver.
int[]   getColumnOrder()
Returns an array of zero-relative integers that map the creation order of the receiver's items to the order in which they are currently being displayed.
TableColumn[]   getColumns()
Returns an array of TableColumns which are the columns in the receiver.
int getGridLineWidth()
Returns the width in pixels of a grid line.
int getHeaderHeight()
Returns the height of the receiver's header
boolean getHeaderVisible()
Returns true if the receiver's header is visible, and false otherwise.
TableItem   getItem(int index)
Returns the item at the given, zero-relative index in the receiver.
TableItem   getItem(Point point)
Returns the item at the given point in the receiver or null if no such item exists.
int getItemCount()
Returns the number of items contained in the receiver.
int getItemHeight()
Returns the height of the area which would be used to display one of the items in the receiver.
TableItem[] getItems()
Returns a (possibly empty) array of TableItems which are the items in the receiver.
boolean getLinesVisible()
Returns true if the receiver's lines are visible, and false otherwise.
TableItem[] getSelection()
Returns an array of TableItems that are currently selected in the receiver.
int getSelectionCount()
Returns the number of selected items contained in the receiver.
int getSelectionIndex()
Returns the zero-relative index of the item which is currently selected in the receiver, or -1 if no item is selected.
int[]   getSelectionIndices()
Returns the zero-relative indices of the items which are currently selected in the receiver.
TableColumn getSortColumn()
Returns the column which shows the sort indicator for the receiver.
int getSortDirection()
Returns the direction of the sort indicator for the receiver.
int getTopIndex()
Returns the zero-relative index of the item which is currently at the top of the receiver.
int indexOf(TableColumn column)
Searches the receiver's list starting at the first column (index 0) until a column is found that is equal to the argument, and returns the index of that column.
int indexOf(TableItem item)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item.
boolean isSelected(int index)
Returns true if the item is selected, and false otherwise.
void    remove(int index)
Removes the item from the receiver at the given zero-relative index.
void    remove(int[] indices)
Removes the items from the receiver's list at the given zero-relative indices.
void    remove(int start,       int end)
Removes the items from the receiver which are between the given zero-relative start and end indices (inclusive).
void    removeAll()
Removes all of the items from the receiver.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's selection.
void    select(int index)
Selects the item at the given zero-relative index in the receiver.
void    select(int[] indices)
Selects the items at the given zero-relative indices in the receiver.
void    select(int start,       int end)
Selects the items in the range specified by the given zero-relative indices in the receiver.
void    selectAll()
Selects all of the items in the receiver.
void    setColumnOrder(int[] order)
Sets the order that the items in the receiver should be displayed in to the given argument which is described in terms of the zero-relative ordering of when the items were added.
void    setFont(Font font)
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
void    setHeaderVisible(boolean show)
Marks the receiver's header as visible if the argument is true, and marks it invisible otherwise.
void    setItemCount(int count)
Sets the number of items contained in the receiver.
void    setLinesVisible(boolean show)
Marks the receiver's lines as visible if the argument is true, and marks it invisible otherwise.
void    setRedraw(boolean redraw)
If the argument is false, causes subsequent drawing operations in the receiver to be ignored.
void    setSelection(int index)
Selects the item at the given zero-relative index in the receiver.
void    setSelection(int[] indices)
Selects the items at the given zero-relative indices in the receiver.
void    setSelection(int start,  int end)
Selects the items in the range specified by the given zero-relative indices in the receiver.
void    setSelection(TableItem item)
Sets the receiver's selection to the given item.
void    setSelection(TableItem[] items)
Sets the receiver's selection to be the given array of items.
void    setSortColumn(TableColumn column)
Sets the column used by the sort indicator for the receiver.
void    setSortDirection(int direction)
Sets the direction of the sort indicator for the receiver.
void    setTopIndex(int index)
Sets the zero-relative index of the item which is currently at the top of the receiver.
void    showColumn(TableColumn column)
Shows the column.
void    showItem(TableItem item)
Shows the item.
void    showSelection()
Shows the selection.

Methods inherited from class org.eclipse.swt.widgets.Composite
changed, drawBackground, getBackgroundMode, getChildren, getLayout, getLayoutDeferred, getTabList, isLayoutDeferred, layout, layout, layout, layout, layout, setBackgroundMode, setFocus, setLayout, setLayoutDeferred, setTabList

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

Table
public Table(Composite parent,
             int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.SINGLE, SWT.MULTI, SWT.CHECK, SWT.FULL_SELECTION, SWT.HIDE_SELECTION, SWT.VIRTUAL, SWT.NO_SCROLL, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's selection, by sending it one of the messages defined in the SelectionListener interface. When widgetSelected is called, the item field of the event object is valid. If the receiver has the SWT.CHECK style and the check selection changes, the event object detail field contains the value SWT.CHECK. widgetDefaultSelected is typically called when an item is double-clicked. The item field of the event object is valid for default selection, but the detail field is not used.
Parameters:
listener - the listener which should be notified when the user changes the receiver's selection
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Composite

clear
public void clear(int index)
Clears the item at the given zero-relative index in the receiver. The text, icon and other attributes of the item are set to the default value. If the table was created with the SWT.VIRTUAL style, these attributes are requested again as needed.
Parameters:
index - the index of the item to clear
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0
See Also:
SWT.VIRTUAL, SWT.SetData

clear
public void clear(int start,
                  int end)
Removes the items from the receiver which are between the given zero-relative start and end indices (inclusive). The text, icon and other attributes of the items are set to their default values. If the table was created with the SWT.VIRTUAL style, these attributes are requested again as needed.
Parameters:
start - the start index of the item to clear
end - the end index of the item to clear
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if either the start or end are not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0
See Also:
SWT.VIRTUAL, SWT.SetData

clear
public void clear(int[] indices)
Clears the items at the given zero-relative indices in the receiver. The text, icon and other attributes of the items are set to their default values. If the table was created with the SWT.VIRTUAL style, these attributes are requested again as needed.
Parameters:
indices - the array of indices of the items
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
ERROR_NULL_ARGUMENT - if the indices array is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0
See Also:
SWT.VIRTUAL, SWT.SetData

clearAll
public void clearAll()
Clears all the items in the receiver. The text, icon and other attributes of the items are set to their default values. If the table was created with the SWT.VIRTUAL style, these attributes are requested again as needed.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0
See Also:
SWT.VIRTUAL, SWT.SetData

deselect
public void deselect(int[] indices)
Deselects the items at the given zero-relative indices in the receiver. If the item at the given zero-relative index in the receiver is selected, it is deselected. If the item at the index was not selected, it remains deselected. Indices that are out of range and duplicate indices are ignored.
Parameters:
indices - the array of indices for the items to deselect
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the set of indices is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

deselect
public void deselect(int index)
Deselects the item at the given zero-relative index in the receiver. If the item at the index was already deselected, it remains deselected. Indices that are out of range are ignored.
Parameters:
index - the index of the item to deselect
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

deselect
public void deselect(int start,
                     int end)
Deselects the items at the given zero-relative indices in the receiver. If the item at the given zero-relative index in the receiver is selected, it is deselected. If the item at the index was not selected, it remains deselected. The range of the indices is inclusive. Indices that are out of range are ignored.
Parameters:
start - the start index of the items to deselect
end - the end index of the items to deselect
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

deselectAll
public void deselectAll()
Deselects all selected items in the receiver.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getColumn
public TableColumn getColumn(int index)
Returns the column at the given, zero-relative index in the receiver. Throws an exception if the index is out of range. Columns are returned in the order that they were created. If no TableColumns were created by the programmer, this method will throw ERROR_INVALID_RANGE despite the fact that a single column of data may be visible in the table. This occurs when the programmer uses the table like a list, adding items but never creating a column.
Parameters:
index - the index of the column to return
Returns:
the column at the given index
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getColumnOrder(), setColumnOrder(int[]), TableColumn.getMoveable(), TableColumn.setMoveable(boolean), SWT.Move

getColumnCount
public int getColumnCount()
Returns the number of columns contained in the receiver. If no TableColumns were created by the programmer, this value is zero, despite the fact that visually, one column of items may be visible. This occurs when the programmer uses the table like a list, adding items but never creating a column.
Returns:
the number of columns
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getColumnOrder
public int[] getColumnOrder()
Returns an array of zero-relative integers that map the creation order of the receiver's items to the order in which they are currently being displayed. Specifically, the indices of the returned array represent the current visual order of the items, and the contents of the array represent the creation order of the items.
Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the current visual order of the receiver's items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1
See Also:
setColumnOrder(int[]), TableColumn.getMoveable(), TableColumn.setMoveable(boolean), SWT.Move

getColumns
public TableColumn[] getColumns()
Returns an array of TableColumns which are the columns in the receiver. Columns are returned in the order that they were created. If no TableColumns were created by the programmer, the array is empty, despite the fact that visually, one column of items may be visible. This occurs when the programmer uses the table like a list, adding items but never creating a column. Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the items in the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getColumnOrder(), setColumnOrder(int[]), TableColumn.getMoveable(), TableColumn.setMoveable(boolean), SWT.Move

getGridLineWidth
public int getGridLineWidth()
Returns the width in pixels of a grid line.
Returns:
the width of a grid line in pixels
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getHeaderHeight
public int getHeaderHeight()
Returns the height of the receiver's header
Returns:
the height of the header or zero if the header is not visible
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0

getHeaderVisible
public boolean getHeaderVisible()
Returns true if the receiver's header is visible, and false otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, this method may still indicate that it is considered visible even though it may not actually be showing.
Returns:
the receiver's header's visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItem
public TableItem getItem(int index)
Returns the item at the given, zero-relative index in the receiver. Throws an exception if the index is out of range.
Parameters:
index - the index of the item to return
Returns:
the item at the given index
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItem
public TableItem getItem(Point point)
Returns the item at the given point in the receiver or null if no such item exists. The point is in the coordinate system of the receiver. The item that is returned represents an item that could be selected by the user. For example, if selection only occurs in items in the first column, then null is returned if the point is outside of the item. Note that the SWT.FULL_SELECTION style hint, which specifies the selection policy, determines the extent of the selection.
Parameters:
point - the point used to locate the item
Returns:
the item at the given point, or null if the point is not in a selectable item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItemCount
public int getItemCount()
Returns the number of items contained in the receiver.
Returns:
the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItemHeight
public int getItemHeight()
Returns the height of the area which would be used to display one of the items in the receiver.
Returns:
the height of one item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItems
public TableItem[] getItems()
Returns a (possibly empty) array of TableItems which are the items in the receiver. Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the items in the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getLinesVisible
public boolean getLinesVisible()
Returns true if the receiver's lines are visible, and false otherwise. Note that some platforms draw grid lines while others may draw alternating row colors. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, this method may still indicate that it is considered visible even though it may not actually be showing.
Returns:
the visibility state of the lines
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelection
public TableItem[] getSelection()
Returns an array of TableItems that are currently selected in the receiver. The order of the items is unspecified. An empty array indicates that no items are selected. Note: This is not the actual structure used by the receiver to maintain its selection, so modifying the array will not affect the receiver.
Returns:
an array representing the selection
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelectionCount
public int getSelectionCount()
Returns the number of selected items contained in the receiver.
Returns:
the number of selected items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelectionIndex
public int getSelectionIndex()
Returns the zero-relative index of the item which is currently selected in the receiver, or -1 if no item is selected.
Returns:
the index of the selected item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelectionIndices
public int[] getSelectionIndices()
Returns the zero-relative indices of the items which are currently selected in the receiver. The order of the indices is unspecified. The array is empty if no items are selected. Note: This is not the actual structure used by the receiver to maintain its selection, so modifying the array will not affect the receiver.
Returns:
the array of indices of the selected items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSortColumn
public TableColumn getSortColumn()
Returns the column which shows the sort indicator for the receiver. The value may be null if no column shows the sort indicator.
Returns:
the sort indicator
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2
See Also:
setSortColumn(TableColumn)

getSortDirection
public int getSortDirection()
Returns the direction of the sort indicator for the receiver. The value will be one of UP, DOWN or NONE.
Returns:
the sort direction
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2
See Also:
setSortDirection(int)

getTopIndex
public int getTopIndex()
Returns the zero-relative index of the item which is currently at the top of the receiver. This index can change when items are scrolled or new items are added or removed.
Returns:
the index of the top item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

indexOf
public int indexOf(TableColumn column)
Searches the receiver's list starting at the first column (index 0) until a column is found that is equal to the argument, and returns the index of that column. If no column is found, returns -1.
Parameters:
column - the search column
Returns:
the index of the column
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the column is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

indexOf
public int indexOf(TableItem item)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item. If no item is found, returns -1.
Parameters:
item - the search item
Returns:
the index of the item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

isSelected
public boolean isSelected(int index)
Returns true if the item is selected, and false otherwise. Indices out of range are ignored.
Parameters:
index - the index of the item
Returns:
the selection state of the item at the index
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

remove
public void remove(int[] indices)
Removes the items from the receiver's list at the given zero-relative indices.
Parameters:
indices - the array of indices of the items
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
ERROR_NULL_ARGUMENT - if the indices array is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

remove
public void remove(int index)
Removes the item from the receiver at the given zero-relative index.
Parameters:
index - the index for the item
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

remove
public void remove(int start,
                   int end)
Removes the items from the receiver which are between the given zero-relative start and end indices (inclusive).
Parameters:
start - the start of the range
end - the end of the range
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if either the start or end are not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeAll
public void removeAll()
Removes all of the items from the receiver.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's selection.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(SelectionListener)

select
public void select(int[] indices)
Selects the items at the given zero-relative indices in the receiver. The current selection is not cleared before the new items are selected. If the item at a given index is not selected, it is selected. If the item at a given index was already selected, it remains selected. Indices that are out of range and duplicate indices are ignored. If the receiver is single-select and multiple indices are specified, then all indices are ignored.
Parameters:
indices - the array of indices for the items to select
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the array of indices is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setSelection(int[])

select
public void select(int index)
Selects the item at the given zero-relative index in the receiver. If the item at the index was already selected, it remains selected. Indices that are out of range are ignored.
Parameters:
index - the index of the item to select
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

select
public void select(int start,
                   int end)
Selects the items in the range specified by the given zero-relative indices in the receiver. The range of indices is inclusive. The current selection is not cleared before the new items are selected. If an item in the given range is not selected, it is selected. If an item in the given range was already selected, it remains selected. Indices that are out of range are ignored and no items will be selected if start is greater than end. If the receiver is single-select and there is more than one item in the given range, then all indices are ignored.
Parameters:
start - the start of the range
end - the end of the range
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setSelection(int,int)

selectAll
public void selectAll()
Selects all of the items in the receiver. If the receiver is single-select, do nothing.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setColumnOrder
public void setColumnOrder(int[] order)
Sets the order that the items in the receiver should be displayed in to the given argument which is described in terms of the zero-relative ordering of when the items were added.
Parameters:
order - the new order to display the items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item order is null
ERROR_INVALID_ARGUMENT - if the item order is not the same length as the number of items
since. :
3.1
See Also:
getColumnOrder(), TableColumn.getMoveable(), TableColumn.setMoveable(boolean), SWT.Move

setFont
public void setFont(Font font)
Description copied from class: Control
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Overrides:
setFont in class Control
Parameters:
font - the new font (or null)

setHeaderVisible
public void setHeaderVisible(boolean show)
Marks the receiver's header as visible if the argument is true, and marks it invisible otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, marking it visible may not actually cause it to be displayed.
Parameters:
show - the new visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setItemCount
public void setItemCount(int count)
Sets the number of items contained in the receiver.
Parameters:
count - the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

setLinesVisible
public void setLinesVisible(boolean show)
Marks the receiver's lines as visible if the argument is true, and marks it invisible otherwise. Note that some platforms draw grid lines while others may draw alternating row colors. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, marking it visible may not actually cause it to be displayed.
Parameters:
show - the new visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setRedraw
public void setRedraw(boolean redraw)
Description copied from class: Control
If the argument is false, causes subsequent drawing operations in the receiver to be ignored. No drawing of any kind can occur in the receiver until the flag is set to true. Graphics operations that occurred while the flag was false are lost. When the flag is set to true, the entire widget is marked as needing to be redrawn. Nested calls to this method are stacked. Note: This operation is a hint and may not be supported on some platforms or for some widgets.
Overrides:
setRedraw in class Control
Parameters:
redraw - the new redraw state
See Also:
Control.redraw(int, int, int, int, boolean), Control.update()

setSelection
public void setSelection(int[] indices)
Selects the items at the given zero-relative indices in the receiver. The current selection is cleared before the new items are selected, and if necessary the receiver is scrolled to make the new selection visible. Indices that are out of range and duplicate indices are ignored. If the receiver is single-select and multiple indices are specified, then all indices are ignored.
Parameters:
indices - the indices of the items to select
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the array of indices is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
deselectAll(), select(int[])

setSelection
public void setSelection(TableItem item)
Sets the receiver's selection to the given item. The current selection is cleared before the new item is selected, and if necessary the receiver is scrolled to make the new selection visible. If the item is not in the receiver, then it is ignored.
Parameters:
item - the item to select
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
ERROR_INVALID_ARGUMENT - if the item has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

setSelection
public void setSelection(TableItem[] items)
Sets the receiver's selection to be the given array of items. The current selection is cleared before the new items are selected, and if necessary the receiver is scrolled to make the new selection visible. Items that are not in the receiver are ignored. If the receiver is single-select and multiple items are specified, then all items are ignored.
Parameters:
items - the array of items
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the array of items is null
ERROR_INVALID_ARGUMENT - if one of the items has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
deselectAll(), select(int[]), setSelection(int[])

setSelection
public void setSelection(int index)
Selects the item at the given zero-relative index in the receiver. The current selection is first cleared, then the new item is selected, and if necessary the receiver is scrolled to make the new selection visible.
Parameters:
index - the index of the item to select
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
deselectAll(), select(int)

setSelection
public void setSelection(int start,
                         int end)
Selects the items in the range specified by the given zero-relative indices in the receiver. The range of indices is inclusive. The current selection is cleared before the new items are selected, and if necessary the receiver is scrolled to make the new selection visible. Indices that are out of range are ignored and no items will be selected if start is greater than end. If the receiver is single-select and there is more than one item in the given range, then all indices are ignored.
Parameters:
start - the start index of the items to select
end - the end index of the items to select
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
deselectAll(), select(int,int)

setSortColumn
public void setSortColumn(TableColumn column)
Sets the column used by the sort indicator for the receiver. A null value will clear the sort indicator. The current sort column is cleared before the new column is set.
Parameters:
column - the column used by the sort indicator or null
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the column is disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

setSortDirection
public void setSortDirection(int direction)
Sets the direction of the sort indicator for the receiver. The value can be one of UP, DOWN or NONE.
Parameters:
direction - the direction of the sort indicator
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

setTopIndex
public void setTopIndex(int index)
Sets the zero-relative index of the item which is currently at the top of the receiver. This index can change when items are scrolled or new items are added and removed.
Parameters:
index - the index of the top item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

showColumn
public void showColumn(TableColumn column)
Shows the column. If the column is already showing in the receiver, this method simply returns. Otherwise, the columns are scrolled until the column is visible.
Parameters:
column - the column to be shown
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the column is null
ERROR_INVALID_ARGUMENT - if the column has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

showItem
public void showItem(TableItem item)
Shows the item. If the item is already showing in the receiver, this method simply returns. Otherwise, the items are scrolled until the item is visible.
Parameters:
item - the item to be shown
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
ERROR_INVALID_ARGUMENT - if the item has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
showSelection()

showSelection
public void showSelection()
Shows the selection. If the selection is already showing in the receiver, this method simply returns. Otherwise, the items are scrolled until the selection is visible.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
showItem(TableItem)


org.eclipse.swt.widgets
Class TableColumn
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Item
org.eclipse.swt.widgets.TableColumn


public class TableColumn extends Item
Instances of this class represent a column in a table widget.
Styles:
LEFT, RIGHT, CENTER
Events:
Move, Resize, Selection
Note: Only one of the styles LEFT, RIGHT and CENTER may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
Table, TableItem, TableColumn snippets, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
TableColumn(Table parent,            int style)
Constructs a new instance of this class given its parent (which must be a Table) and a style value describing its behavior and appearance.
TableColumn(Table parent,            int style,            int index)
Constructs a new instance of this class given its parent (which must be a Table), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addControlListener(ControlListener  listener)
Adds the listener to the collection of listeners who will be notified when the control is moved or resized, by sending it one of the messages defined in the ControlListener interface.
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface.
protected void  checkSubclass()
Checks that this class can be subclassed.
int getAlignment()
Returns a value which describes the position of the text or image in the receiver.
boolean getMoveable()
Gets the moveable attribute.
Table   getParent()
Returns the receiver's parent, which must be a Table.
boolean getResizable()
Gets the resizable attribute.
java.lang.String    getToolTipText()
Returns the receiver's tool tip text, or null if it has not been set.
int getWidth()
Gets the width of the receiver.
void    pack()
Causes the receiver to be resized to its preferred size.
void    removeControlListener(ControlListen er listener)
Removes the listener from the collection of listeners who will be notified when the control is moved or resized.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
void    setAlignment(int alignment)
Controls how text and images will be displayed in the receiver.
void    setImage(Image image)
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
void    setMoveable(boolean moveable)
Sets the moveable attribute.
void    setResizable(boolean resizable)
Sets the resizable attribute.
void    setText(java.lang.String string)
Sets the receiver's text.
void    setToolTipText(java.lang.String str ing)
Sets the receiver's tool tip text to the argument, which may be null indicating that the default tool tip for the control will be shown.
void    setWidth(int width)
Sets the width of the receiver.

Methods inherited from class org.eclipse.swt.widgets.Item
getImage, getText

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

TableColumn
public TableColumn(Table parent,
                   int style)
Constructs a new instance of this class given its parent (which must be a Table) and a style value describing its behavior and appearance. The item is added to the end of the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.LEFT, SWT.RIGHT, SWT.CENTER, Widget.checkSubclass(), Widget.getStyle()

TableColumn
public TableColumn(Table parent,
                   int style,
                   int index)
Constructs a new instance of this class given its parent (which must be a Table), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Note that due to a restriction on some platforms, the first column is always left aligned.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
index - the zero-relative index to store the receiver in its parent
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.LEFT, SWT.RIGHT, SWT.CENTER, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addControlListener
public void addControlListener(ControlListener listener)
Adds the listener to the collection of listeners who will be notified when the control is moved or resized, by sending it one of the messages defined in the ControlListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ControlListener, removeControlListener(org.eclipse.swt.events.ControlListener)

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface. widgetSelected is called when the column header is selected. widgetDefaultSelected is not called.
Parameters:
listener - the listener which should be notified when the control is selected by the user
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Item

getAlignment
public int getAlignment()
Returns a value which describes the position of the text or image in the receiver. The value will be one of LEFT, RIGHT or CENTER.
Returns:
the alignment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getParent
public Table getParent()
Returns the receiver's parent, which must be a Table.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMoveable
public boolean getMoveable()
Gets the moveable attribute. A column that is not moveable cannot be reordered by the user by dragging the header but may be reordered by the programmer.
Returns:
the moveable attribute
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1
See Also:
Table.getColumnOrder(), Table.setColumnOrder(int[]), setMoveable(boolean), SWT.Move

getResizable
public boolean getResizable()
Gets the resizable attribute. A column that is not resizable cannot be dragged by the user but may be resized by the programmer.
Returns:
the resizable attribute
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getToolTipText
public java.lang.String getToolTipText()
Returns the receiver's tool tip text, or null if it has not been set.
Returns:
the receiver's tool tip text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

getWidth
public int getWidth()
Gets the width of the receiver.
Returns:
the width
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

pack
public void pack()
Causes the receiver to be resized to its preferred size. For a composite, this involves computing the preferred size from its layout, if there is one.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeControlListener
public void removeControlListener(ControlListener listener)
Removes the listener from the collection of listeners who will be notified when the control is moved or resized.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ControlListener, addControlListener(org.eclipse.swt.events.ControlListener)

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

setAlignment
public void setAlignment(int alignment)
Controls how text and images will be displayed in the receiver. The argument should be one of LEFT, RIGHT or CENTER. Note that due to a restriction on some platforms, the first column is always left aligned.
Parameters:
alignment - the new alignment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setImage
public void setImage(Image image)
Description copied from class: Item
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
Overrides:
setImage in class Item
Parameters:
image - the image to display on the receiver (may be null)

setMoveable
public void setMoveable(boolean moveable)
Sets the moveable attribute. A column that is moveable can be reordered by the user by dragging the header. A column that is not moveable cannot be dragged by the user but may be reordered by the programmer.
Parameters:
moveable - the moveable attribute
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1
See Also:
Table.setColumnOrder(int[]), Table.getColumnOrder(), getMoveable(), SWT.Move

setResizable
public void setResizable(boolean resizable)
Sets the resizable attribute. A column that is resizable can be resized by the user dragging the edge of the header. A column that is not resizable cannot be dragged by the user but may be resized by the programmer.
Parameters:
resizable - the resize attribute
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setText
public void setText(java.lang.String string)
Description copied from class: Item
Sets the receiver's text. Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Overrides:
setText in class Item
Parameters:
string - the new text

setToolTipText
public void setToolTipText(java.lang.String string)
Sets the receiver's tool tip text to the argument, which may be null indicating that the default tool tip for the control will be shown. For a control that has a default tool tip, such as the Tree control on Windows, setting the tool tip text to an empty string replaces the default, causing no tool tip text to be shown. The mnemonic indicator (character '&') is not displayed in a tool tip. To display a single '&' in the tool tip, the character '&' can be escaped by doubling it in the string.
Parameters:
string - the new tool tip text (or null)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

setWidth
public void setWidth(int width)
Sets the width of the receiver.
Parameters:
width - the new width
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class TableItem
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Item
org.eclipse.swt.widgets.TableItem


public class TableItem extends Item
Instances of this class represent a selectable user interface object that represents an item in a table.
Styles:
(none)
Events:
(none)
IMPORTANT: This class is not intended to be subclassed.
See Also:
Table, TableItem, TableColumn snippets, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
TableItem(Table parent,          int style)
Constructs a new instance of this class given its parent (which must be a Table) and a style value describing its behavior and appearance.
TableItem(Table parent,          int style,          int index)
Constructs a new instance of this class given its parent (which must be a Table), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent.

Method Summary
All Methods Instance Methods Concrete Methods Deprecated Methods

Modifier and Type   Method and Description
protected void  checkSubclass()
Checks that this class can be subclassed.
Color   getBackground()
Returns the receiver's background color.
Color   getBackground(int index)
Returns the background color at the given column index in the receiver.
Rectangle   getBounds()
Returns a rectangle describing the size and location of the receiver's text relative to its parent.
Rectangle   getBounds(int index)
Returns a rectangle describing the receiver's size and location relative to its parent at a column in the table.
boolean getChecked()
Returns true if the receiver is checked, and false otherwise.
Font    getFont()
Returns the font that the receiver will use to paint textual information for this item.
Font    getFont(int index)
Returns the font that the receiver will use to paint textual information for the specified cell in this item.
Color   getForeground()
Returns the foreground color that the receiver will use to draw.
Color   getForeground(int index)
Returns the foreground color at the given column index in the receiver.
boolean getGrayed()
Returns true if the receiver is grayed, and false otherwise.
Image   getImage()
Returns the receiver's image if it has one, or null if it does not.
Image   getImage(int index)
Returns the image stored at the given column index in the receiver, or null if the image has not been set or if the column does not exist.
Rectangle   getImageBounds(int index)
Returns a rectangle describing the size and location relative to its parent of an image at a column in the table.
int getImageIndent()
Gets the image indent.
Table   getParent()
Returns the receiver's parent, which must be a Table.
java.lang.String    getText()
Returns the receiver's text, which will be an empty string if it has never been set.
java.lang.String    getText(int index)
Returns the text stored at the given column index in the receiver, or empty string if the text has not been set.
Rectangle   getTextBounds(int index)
Returns a rectangle describing the size and location relative to its parent of the text at a column in the table.
void    setBackground(Color color)
Sets the receiver's background color to the color specified by the argument, or to the default system color for the item if the argument is null.
void    setBackground(int index,    Color color)
Sets the background color at the given column index in the receiver to the color specified by the argument, or to the default system color for the item if the argument is null.
void    setChecked(boolean checked)
Sets the checked state of the checkbox for this item.
void    setFont(Font font)
Sets the font that the receiver will use to paint textual information for this item to the font specified by the argument, or to the default font for that kind of control if the argument is null.
void    setFont(int index,        Font font )
Sets the font that the receiver will use to paint textual information for the specified cell in this item to the font specified by the argument, or to the default font for that kind of control if the argument is null.
void    setForeground(Color color)
Sets the receiver's foreground color to the color specified by the argument, or to the default system color for the item if the argument is null.
void    setForeground(int index,    Color color)
Sets the foreground color at the given column index in the receiver to the color specified by the argument, or to the default system color for the item if the argument is null.
void    setGrayed(boolean grayed)
Sets the grayed state of the checkbox for this item.
void    setImage(Image image)
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
void    setImage(Image[] images)
Sets the image for multiple columns in the table.
void    setImage(int index,         Image i mage)
Sets the receiver's image at a column.
void    setImageIndent(int indent)
Deprecated.< /span>
this functionality is not supported on most platforms
void    setText(int index,        java.lang .String string)
Sets the receiver's text at a column Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
void    setText(java.lang.String string)
Sets the receiver's text.
void    setText(java.lang.String[] strings)
Sets the text for multiple columns in the table.

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

TableItem
public TableItem(Table parent,
                 int style)
Constructs a new instance of this class given its parent (which must be a Table) and a style value describing its behavior and appearance. The item is added to the end of the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT, Widget.checkSubclass(), Widget.getStyle()

TableItem
public TableItem(Table parent,
                 int style,
                 int index)
Constructs a new instance of this class given its parent (which must be a Table), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
index - the zero-relative index to store the receiver in its parent
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT, Widget.checkSubclass(), Widget.getStyle()

Method Detail

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Item

getBackground
public Color getBackground()
Returns the receiver's background color.
Returns:
the background color
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0

getBackground
public Color getBackground(int index)
Returns the background color at the given column index in the receiver.
Parameters:
index - the column index
Returns:
the background color
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

getBounds
public Rectangle getBounds()
Returns a rectangle describing the size and location of the receiver's text relative to its parent.
Returns:
the bounding rectangle of the receiver's text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

getBounds
public Rectangle getBounds(int index)
Returns a rectangle describing the receiver's size and location relative to its parent at a column in the table.
Parameters:
index - the index that specifies the column
Returns:
the receiver's bounding column rectangle
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getChecked
public boolean getChecked()
Returns true if the receiver is checked, and false otherwise. When the parent does not have the CHECK style, return false.
Returns:
the checked state of the checkbox
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getFont
public Font getFont()
Returns the font that the receiver will use to paint textual information for this item.
Returns:
the receiver's font
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

getFont
public Font getFont(int index)
Returns the font that the receiver will use to paint textual information for the specified cell in this item.
Parameters:
index - the column index
Returns:
the receiver's font
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

getForeground
public Color getForeground()
Returns the foreground color that the receiver will use to draw.
Returns:
the receiver's foreground color
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0

getForeground
public Color getForeground(int index)
Returns the foreground color at the given column index in the receiver.
Parameters:
index - the column index
Returns:
the foreground color
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

getGrayed
public boolean getGrayed()
Returns true if the receiver is grayed, and false otherwise. When the parent does not have the CHECK style, return false.
Returns:
the grayed state of the checkbox
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getImage
public Image getImage()
Description copied from class: Item
Returns the receiver's image if it has one, or null if it does not.
Overrides:
getImage in class Item
Returns:
the receiver's image

getImage
public Image getImage(int index)
Returns the image stored at the given column index in the receiver, or null if the image has not been set or if the column does not exist.
Parameters:
index - the column index
Returns:
the image stored at the given column index in the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getImageBounds
public Rectangle getImageBounds(int index)
Returns a rectangle describing the size and location relative to its parent of an image at a column in the table. An empty rectangle is returned if index exceeds the index of the table's last column.
Parameters:
index - the index that specifies the column
Returns:
the receiver's bounding image rectangle
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getImageIndent
public int getImageIndent()
Gets the image indent.
Returns:
the indent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getParent
public Table getParent()
Returns the receiver's parent, which must be a Table.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getText
public java.lang.String getText()
Description copied from class: Item
Returns the receiver's text, which will be an empty string if it has never been set.
Overrides:
getText in class Item
Returns:
the receiver's text

getText
public java.lang.String getText(int index)
Returns the text stored at the given column index in the receiver, or empty string if the text has not been set.
Parameters:
index - the column index
Returns:
the text stored at the given column index in the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getTextBounds
public Rectangle getTextBounds(int index)
Returns a rectangle describing the size and location relative to its parent of the text at a column in the table. An empty rectangle is returned if index exceeds the index of the table's last column.
Parameters:
index - the index that specifies the column
Returns:
the receiver's bounding text rectangle
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3

setBackground
public void setBackground(Color color)
Sets the receiver's background color to the color specified by the argument, or to the default system color for the item if the argument is null.
Parameters:
color - the new color (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0

setBackground
public void setBackground(int index,
                          Color color)
Sets the background color at the given column index in the receiver to the color specified by the argument, or to the default system color for the item if the argument is null.
Parameters:
index - the column index
color - the new color (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

setChecked
public void setChecked(boolean checked)
Sets the checked state of the checkbox for this item. This state change only applies if the Table was created with the SWT.CHECK style.
Parameters:
checked - the new checked state of the checkbox
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setFont
public void setFont(Font font)
Sets the font that the receiver will use to paint textual information for this item to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Parameters:
font - the new font (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

setFont
public void setFont(int index,
                    Font font)
Sets the font that the receiver will use to paint textual information for the specified cell in this item to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Parameters:
index - the column index
font - the new font (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

setForeground
public void setForeground(Color color)
Sets the receiver's foreground color to the color specified by the argument, or to the default system color for the item if the argument is null.
Parameters:
color - the new color (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0

setForeground
public void setForeground(int index,
                          Color color)
Sets the foreground color at the given column index in the receiver to the color specified by the argument, or to the default system color for the item if the argument is null.
Parameters:
index - the column index
color - the new color (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

setGrayed
public void setGrayed(boolean grayed)
Sets the grayed state of the checkbox for this item. This state change only applies if the Table was created with the SWT.CHECK style.
Parameters:
grayed - the new grayed state of the checkbox;
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setImage
public void setImage(Image[] images)
Sets the image for multiple columns in the table.
Parameters:
images - the array of new images
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the array of images is null
ERROR_INVALID_ARGUMENT - if one of the images has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setImage
public void setImage(int index,
                     Image image)
Sets the receiver's image at a column.
Parameters:
index - the column index
image - the new image
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the image has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setImage
public void setImage(Image image)
Description copied from class: Item
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
Overrides:
setImage in class Item
Parameters:
image - the image to display on the receiver (may be null)

setImageIndent
@Deprecated
public void setImageIndent(int indent)
Deprecated. this functionality is not supported on most platforms
Sets the indent of the first column's image, expressed in terms of the image's width.
Parameters:
indent - the new indent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setText
public void setText(java.lang.String[] strings)
Sets the text for multiple columns in the table. Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Parameters:
strings - the array of new strings
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setText
public void setText(int index,
                    java.lang.String string)
Sets the receiver's text at a column Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Parameters:
index - the column index
string - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setText
public void setText(java.lang.String string)
Description copied from class: Item
Sets the receiver's text. Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Overrides:
setText in class Item
Parameters:
string - the new text


org.eclipse.swt.widgets
Class TaskBar
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.TaskBar


public class TaskBar extends Widget
Instances of this class represent the system task bar.
Styles:
(none)
Events:
(none)
since. :
3.6
See Also:
Display.getSystemTaskBar(), Sample code and further information

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
TaskItem    getItem(int index)
Returns the item at the given, zero-relative index in the receiver.
TaskItem    getItem(Shell shell)
Returns the TaskItem for the given Shell or the TaskItem for the application if the Shell parameter is null.
int getItemCount()
Returns the number of items contained in the receiver.
TaskItem[]  getItems()
Returns an array of TaskItems which are the items in the receiver.

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Method Detail

getItem
public TaskItem getItem(int index)
Returns the item at the given, zero-relative index in the receiver. Throws an exception if the index is out of range.
Parameters:
index - the index of the item to return
Returns:
the item at the given index
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItem
public TaskItem getItem(Shell shell)
Returns the TaskItem for the given Shell or the TaskItem for the application if the Shell parameter is null. If the requested item is not supported by the platform it returns null.
Parameters:
shell - the shell for which the task item is requested, or null to request the application item
Returns:
the task item for the given shell or the application
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItemCount
public int getItemCount()
Returns the number of items contained in the receiver.
Returns:
the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItems
public TaskItem[] getItems()
Returns an array of TaskItems which are the items in the receiver. Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the items in the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class TaskItem
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Item
org.eclipse.swt.widgets.TaskItem


public class TaskItem extends Item
Instances of this class represent a task item.
Styles:
(none)
Events:
(none)
since. :
3.6
See Also:
Sample code and further information

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
protected void  checkSubclass()
Checks that this class can be subclassed.
Menu    getMenu()
Returns the receiver's pop up menu if it has one, or null if it does not.
Image   getOverlayImage()
Returns the receiver's overlay image if it has one, or null if it does not.
java.lang.String    getOverlayText()
Returns the receiver's overlay text, which will be an empty string if it has never been set.
TaskBar getParent()
Returns the receiver's parent, which must be a TaskBar.
int getProgress()
Returns the receiver's progress.
int getProgressState()
Returns the receiver's progress state.
void    setMenu(Menu menu)
Sets the receiver's pop up menu to the argument.
void    setOverlayImage(Image overlayImage)
Sets the receiver's overlay image, which may be null indicating that no image should be displayed.
void    setOverlayText(java.lang.String ove rlayText)
Sets the receiver's overlay text.
void    setProgress(int progress)
Sets the receiver's progress, the progress represents a percentage and should be in range from 0 to 100.
void    setProgressState(int progressState)
Sets the receiver's progress state, the state can be one of the following: SWT.DEFAULT SWT.NORMAL SWT.PAUSED SWT.ERROR SWT.INDETERMINATE The percentage of progress shown by the states SWT#NORMAL, SWT#PAUSED, SWT#ERROR is set with setProgress().

Methods inherited from class org.eclipse.swt.widgets.Item
getImage, getText, setImage, setText

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Method Detail

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Item

getMenu
public Menu getMenu()
Returns the receiver's pop up menu if it has one, or null if it does not.
Returns:
the receiver's menu
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getOverlayImage
public Image getOverlayImage()
Returns the receiver's overlay image if it has one, or null if it does not.
Returns:
the receiver's overlay image
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getOverlayText
public java.lang.String getOverlayText()
Returns the receiver's overlay text, which will be an empty string if it has never been set.
Returns:
the receiver's overlay text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getParent
public TaskBar getParent()
Returns the receiver's parent, which must be a TaskBar.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getProgress
public int getProgress()
Returns the receiver's progress.
Returns:
the receiver's progress
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getProgressState
public int getProgressState()
Returns the receiver's progress state.
Returns:
the receiver's progress state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMenu
public void setMenu(Menu menu)
Sets the receiver's pop up menu to the argument. The way the menu is shown is platform specific. This feature might not be available for the receiver on all platforms. The application code can check if it is supported by calling the respective get method. When the feature is not available, the get method will always return the NULL.
For better cross platform support, the application code should set this feature on the TaskItem for application.
On Windows, this feature will only work on RCP applications.
The menu should be fully created before this method is called. Dynamic changes to the menu after the method is called will not be reflected in the native menu.
Parameters:
menu - the new pop up menu
Throws:
java.lang.IllegalArgumentException -
ERROR_MENU_NOT_POP_UP - the menu is not a pop up menu
ERROR_INVALID_ARGUMENT - if the menu has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setOverlayImage
public void setOverlayImage(Image overlayImage)
Sets the receiver's overlay image, which may be null indicating that no image should be displayed. The bounds for the overlay image is determined by the platform and in general it should be a small image. This feature might not be available for the receiver on all platforms. The application code can check if it is supported by calling the respective get method. When the feature is not available, the get method will always return the NULL.
For better cross platform support, the application code should first try to set this feature on the TaskItem for the main shell then on the TaskItem for the application.
Parameters:
overlayImage - the new overlay image (may be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the overlayImage has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setOverlayText
public void setOverlayText(java.lang.String overlayText)
Sets the receiver's overlay text. The space available to display the overlay text is platform dependent and in general it should be no longer than a few characters. This feature might not be available for the receiver on all platforms. The application code can check if it is supported by calling the respective get method. When the feature is not available, the get method will always return an empty string.
For better cross platform support, the application code should first try to set this feature on the TaskItem for the main shell then on the TaskItem for the application.
Parameters:
overlayText - the new overlay text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the overlayText is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setProgress
public void setProgress(int progress)
Sets the receiver's progress, the progress represents a percentage and should be in range from 0 to 100. The progress is only shown when the progress state is different than SWT#DEFAULT. This feature might not be available for the receiver on all platforms. The application code can check if it is supported by calling the respective get method. When the feature is not available, the get method will always return zero.
For better cross platform support, the application code should first try to set this feature on the TaskItem for the main shell then on the TaskItem for the application.
Parameters:
progress - the new progress
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
#see setProgressState(int)

setProgressState
public void setProgressState(int progressState)
Sets the receiver's progress state, the state can be one of the following:
SWT.DEFAULT
SWT.NORMAL
SWT.PAUSED
SWT.ERROR
SWT.INDETERMINATE
The percentage of progress shown by the states SWT#NORMAL, SWT#PAUSED, SWT#ERROR is set with setProgress().
The state SWT#DEFAULT indicates that no progress should be shown. This feature might not be available for the receiver on all platforms. The application code can check if it is supported by calling the respective get method. When the feature is not available, the get method will always return SWT#DEFAULT.
For better cross platform support, the application code should first try to set this feature on the TaskItem for the main shell then on the TaskItem for the application.
Parameters:
progressState - the new progress state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
#see setProgress(int)


org.eclipse.swt.widgets
Class Text
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.Text
All Implemented Interfaces:
Drawable


public class Text extends Scrollable
Instances of this class are selectable user interface objects that allow the user to enter and modify text. Text controls can be either single or multi-line. When a text control is created with a border, the operating system includes a platform specific inset around the contents of the control. When created without a border, an effort is made to remove the inset such that the preferred size of the control is the same size as the contents.
Styles:
CENTER, ICON_CANCEL, ICON_SEARCH, LEFT, MULTI, PASSWORD, SEARCH, SINGLE, RIGHT, READ_ONLY, WRAP
Events:
DefaultSelection, Modify, Verify, OrientationChange
Note: Only one of the styles MULTI and SINGLE may be specified, and only one of the styles LEFT, CENTER, and RIGHT may be specified.
Note: The styles ICON_CANCEL and ICON_SEARCH are hints used in combination with SEARCH. When the platform supports the hint, the text control shows these icons. When an icon is selected, a default selection event is sent with the detail field set to one of ICON_CANCEL or ICON_SEARCH. Normally, application code does not need to check the detail. In the case of ICON_CANCEL, the text is cleared before the default selection event is sent causing the application to search for an empty string.
IMPORTANT: This class is not intended to be subclassed.
See Also:
Text snippets, SWT Example: ControlExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
static java.lang.String DELIMITER
The delimiter used by multi-line text widgets.
static int  LIMIT
The maximum number of characters that can be entered into a text widget.

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Text(Composite parent,     int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addModifyListener(ModifyListener li stener)
Adds the listener to the collection of listeners who will be notified when the receiver's text is modified, by sending it one of the messages defined in the ModifyListener interface.
void    addSegmentListener(SegmentListener  listener)
Adds a segment listener.
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface.
void    addVerifyListener(VerifyListener li stener)
Adds the listener to the collection of listeners who will be notified when the receiver's text is verified, by sending it one of the messages defined in the VerifyListener interface.
void    append(java.lang.String string)
Appends a string.
void    clearSelection()
Clears the selection.
void    copy()
Copies the selected text.
void    cut()
Cuts the selected text.
int getCaretLineNumber()
Returns the line number of the caret.
Point   getCaretLocation()
Returns a point describing the location of the caret relative to the receiver.
int getCaretPosition()
Returns the character position of the caret.
int getCharCount()
Returns the number of characters.
boolean getDoubleClickEnabled()
Returns the double click enabled flag.
char    getEchoChar()
Returns the echo character.
boolean getEditable()
Returns the editable state.
int getLineCount()
Returns the number of lines.
java.lang.String    getLineDelimiter()
Returns the line delimiter.
int getLineHeight()
Returns the height of a line.
java.lang.String    getMessage()
Returns the widget message.
int getOrientation()
Returns the orientation of the receiver, which will be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
Point   getSelection()
Returns a Point whose x coordinate is the character position representing the start of the selected text, and whose y coordinate is the character position representing the end of the selection.
int getSelectionCount()
Returns the number of selected characters.
java.lang.String    getSelectionText()
Gets the selected text, or an empty string if there is no current selection.
int getTabs()
Returns the number of tabs.
java.lang.String    getText()
Returns the widget text.
java.lang.String    getText(int start,        int end)
Returns a range of text.
char[]  getTextChars()
Returns the widget's text as a character array.
int getTextLimit()
Returns the maximum number of characters that the receiver is capable of holding.
int getTopIndex()
Returns the zero-relative index of the line which is currently at the top of the receiver.
int getTopPixel()
Returns the top pixel.
void    insert(java.lang.String string)
Inserts a string.
void    paste()
Pastes text from clipboard.
void    removeModifyListener(ModifyListener  listener)
Removes the listener from the collection of listeners who will be notified when the receiver's text is modified.
void    removeSegmentListener(SegmentListen er listener)
Removes the listener from the collection of listeners who will be notified when the receiver's text is modified.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
void    removeVerifyListener(VerifyListener  listener)
Removes the listener from the collection of listeners who will be notified when the control is verified.
void    selectAll()
Selects all the text in the receiver.
void    setDoubleClickEnabled(boolean doubl eClick)
Sets the double click enabled flag.
void    setEchoChar(char echo)
Sets the echo character.
void    setEditable(boolean editable)
Sets the editable state.
void    setFont(Font font)
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
void    setMessage(java.lang.String message )
Sets the widget message.
void    setOrientation(int orientation)
Sets the orientation of the receiver, which must be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
void    setRedraw(boolean redraw)
If the argument is false, causes subsequent drawing operations in the receiver to be ignored.
void    setSelection(int start)
Sets the selection.
void    setSelection(int start,  int end)
Sets the selection to the range specified by the given start and end indices.
void    setSelection(Point selection)
Sets the selection to the range specified by the given point, where the x coordinate represents the start index and the y coordinate represents the end index.
void    setTabs(int tabs)
Sets the number of tabs.
void    setText(java.lang.String string)
Sets the contents of the receiver to the given string.
void    setTextChars(char[] text)
Sets the contents of the receiver to the characters in the array.
void    setTextLimit(int limit)
Sets the maximum number of characters that the receiver is capable of holding to be the argument.
void    setTopIndex(int index)
Sets the zero-relative index of the line which is currently at the top of the receiver.
void    showSelection()
Shows the selection.

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setFocus, setForeground, setLayoutData, setLocation, setLocation, setMenu, setParent, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Field Detail

LIMIT
public static final int LIMIT
The maximum number of characters that can be entered into a text widget. Note that this value is platform dependent, based upon the native widget implementation.

DELIMITER
public static final java.lang.String DELIMITER
The delimiter used by multi-line text widgets. When text is queried and from the widget, it will be delimited using this delimiter.

Constructor Detail

Text
public Text(Composite parent,
            int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.SINGLE, SWT.MULTI, SWT.READ_ONLY, SWT.WRAP, SWT.LEFT, SWT.RIGHT, SWT.CENTER, SWT.PASSWORD, SWT.SEARCH, SWT.ICON_SEARCH, SWT.ICON_CANCEL, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addModifyListener
public void addModifyListener(ModifyListener listener)
Adds the listener to the collection of listeners who will be notified when the receiver's text is modified, by sending it one of the messages defined in the ModifyListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ModifyListener, removeModifyListener(org.eclipse.swt.events.ModifyListener)

addSegmentListener
public void addSegmentListener(SegmentListener listener)
Adds a segment listener. A SegmentEvent is sent whenever text content is being modified or a segment listener is added or removed. You can customize the appearance of text by indicating certain characters to be inserted at certain text offsets. This may be used for bidi purposes, e.g. when adjacent segments of right-to-left text should not be reordered relative to each other. E.g., multiple Java string literals in a right-to-left language should generally remain in logical order to each other, that is, the way they are stored.
Warning: This API is currently only implemented on Windows and GTK. SegmentEvents won't be sent on Cocoa.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.8
See Also:
SegmentEvent, SegmentListener, removeSegmentListener(org.eclipse.swt.events.SegmentListener)

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface. widgetSelected is not called for texts. widgetDefaultSelected is typically called when ENTER is pressed in a single-line text, or when ENTER is pressed in a search text. If the receiver has the SWT.SEARCH | SWT.ICON_CANCEL style and the user cancels the search, the event object detail field contains the value SWT.ICON_CANCEL. Likewise, if the receiver has the SWT.ICON_SEARCH style and the icon search is selected, the event object detail field contains the value SWT.ICON_SEARCH.
Parameters:
listener - the listener which should be notified when the control is selected by the user
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

addVerifyListener
public void addVerifyListener(VerifyListener listener)
Adds the listener to the collection of listeners who will be notified when the receiver's text is verified, by sending it one of the messages defined in the VerifyListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
VerifyListener, removeVerifyListener(org.eclipse.swt.events.VerifyListener)

append
public void append(java.lang.String string)
Appends a string. The new text is appended to the text at the end of the widget.
Parameters:
string - the string to be appended
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

clearSelection
public void clearSelection()
Clears the selection.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

copy
public void copy()
Copies the selected text. The current selection is copied to the clipboard.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

cut
public void cut()
Cuts the selected text. The current selection is first copied to the clipboard and then deleted from the widget.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getCaretLineNumber
public int getCaretLineNumber()
Returns the line number of the caret. The line number of the caret is returned.
Returns:
the line number
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getCaretLocation
public Point getCaretLocation()
Returns a point describing the location of the caret relative to the receiver.
Returns:
a point, the location of the caret
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getCaretPosition
public int getCaretPosition()
Returns the character position of the caret. Indexing is zero based.
Returns:
the position of the caret
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getCharCount
public int getCharCount()
Returns the number of characters.
Returns:
number of characters in the widget
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getDoubleClickEnabled
public boolean getDoubleClickEnabled()
Returns the double click enabled flag. The double click flag enables or disables the default action of the text widget when the user double clicks.
Returns:
whether or not double click is enabled
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getEchoChar
public char getEchoChar()
Returns the echo character. The echo character is the character that is displayed when the user enters text or the text is changed by the programmer.
Returns:
the echo character
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setEchoChar(char)

getEditable
public boolean getEditable()
Returns the editable state.
Returns:
whether or not the receiver is editable
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getLineCount
public int getLineCount()
Returns the number of lines.
Returns:
the number of lines in the widget
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getLineDelimiter
public java.lang.String getLineDelimiter()
Returns the line delimiter.
Returns:
a string that is the line delimiter
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
DELIMITER

getLineHeight
public int getLineHeight()
Returns the height of a line.
Returns:
the height of a row of text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getOrientation
public int getOrientation()
Returns the orientation of the receiver, which will be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
Overrides:
getOrientation in class Control
Returns:
the orientation style
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.1.2

getMessage
public java.lang.String getMessage()
Returns the widget message. The message text is displayed as a hint for the user, indicating the purpose of the field. Typically this is used in conjunction with SWT.SEARCH.
Returns:
the widget message
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3

getSelection
public Point getSelection()
Returns a Point whose x coordinate is the character position representing the start of the selected text, and whose y coordinate is the character position representing the end of the selection. An "empty" selection is indicated by the x and y coordinates having the same value. Indexing is zero based. The range of a selection is from 0..N where N is the number of characters in the widget.
Returns:
a point representing the selection start and end
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelectionCount
public int getSelectionCount()
Returns the number of selected characters.
Returns:
the number of selected characters.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelectionText
public java.lang.String getSelectionText()
Gets the selected text, or an empty string if there is no current selection.
Returns:
the selected text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getTabs
public int getTabs()
Returns the number of tabs. Tab stop spacing is specified in terms of the space (' ') character. The width of a single tab stop is the pixel width of the spaces.
Returns:
the number of tab characters
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getText
public java.lang.String getText()
Returns the widget text. The text for a text widget is the characters in the widget, or an empty string if this has never been set.
Returns:
the widget text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getTextChars
public char[] getTextChars()
Returns the widget's text as a character array. The text for a text widget is the characters in the widget, or a zero-length array if this has never been set.
Note: Use this API to prevent the text from being written into a String object whose lifecycle is outside of your control. This can help protect the text, for example, when the widget is used as a password field. However, the text can't be protected if an SWT.Segments or SWT.Verify listener has been added to the widget.
Returns:
a character array that contains the widget's text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.7
See Also:
setTextChars(char[])

getText
public java.lang.String getText(int start,
                                int end)
Returns a range of text. Returns an empty string if the start of the range is greater than the end. Indexing is zero based. The range of a selection is from 0..N-1 where N is the number of characters in the widget.
Parameters:
start - the start of the range
end - the end of the range
Returns:
the range of text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getTextLimit
public int getTextLimit()
Returns the maximum number of characters that the receiver is capable of holding. If this has not been changed by setTextLimit(), it will be the constant Text.LIMIT.
Returns:
the text limit
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
LIMIT

getTopIndex
public int getTopIndex()
Returns the zero-relative index of the line which is currently at the top of the receiver. This index can change when lines are scrolled or new lines are added or removed.
Returns:
the index of the top line
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getTopPixel
public int getTopPixel()
Returns the top pixel. The top pixel is the pixel position of the line that is currently at the top of the widget. On some platforms, a text widget can be scrolled by pixels instead of lines so that a partial line is displayed at the top of the widget.
The top pixel changes when the widget is scrolled. The top pixel does not include the widget trimming.
Returns:
the pixel position of the top line
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

insert
public void insert(java.lang.String string)
Inserts a string. The old selection is replaced with the new text.
Parameters:
string - the string
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

paste
public void paste()
Pastes text from clipboard. The selected text is deleted from the widget and new text inserted from the clipboard.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeModifyListener
public void removeModifyListener(ModifyListener listener)
Removes the listener from the collection of listeners who will be notified when the receiver's text is modified.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ModifyListener, addModifyListener(org.eclipse.swt.events.ModifyListener)

removeSegmentListener
public void removeSegmentListener(SegmentListener listener)
Removes the listener from the collection of listeners who will be notified when the receiver's text is modified.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.8
See Also:
SegmentEvent, SegmentListener, addSegmentListener(org.eclipse.swt.events.SegmentListener)

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

removeVerifyListener
public void removeVerifyListener(VerifyListener listener)
Removes the listener from the collection of listeners who will be notified when the control is verified.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
VerifyListener, addVerifyListener(org.eclipse.swt.events.VerifyListener)

selectAll
public void selectAll()
Selects all the text in the receiver.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setDoubleClickEnabled
public void setDoubleClickEnabled(boolean doubleClick)
Sets the double click enabled flag. The double click flag enables or disables the default action of the text widget when the user double clicks.
Note: This operation is a hint and is not supported on platforms that do not have this concept.
Parameters:
doubleClick - the new double click flag
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setEchoChar
public void setEchoChar(char echo)
Sets the echo character. The echo character is the character that is displayed when the user enters text or the text is changed by the programmer. Setting the echo character to '\0' clears the echo character and redraws the original text. If for any reason the echo character is invalid, or if the platform does not allow modification of the echo character, the default echo character for the platform is used.
Parameters:
echo - the new echo character
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setEditable
public void setEditable(boolean editable)
Sets the editable state.
Parameters:
editable - the new editable state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setFont
public void setFont(Font font)
Description copied from class: Control
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Overrides:
setFont in class Control
Parameters:
font - the new font (or null)

setMessage
public void setMessage(java.lang.String message)
Sets the widget message. The message text is displayed as a hint for the user, indicating the purpose of the field. Typically this is used in conjunction with SWT.SEARCH.
Parameters:
message - the new message
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the message is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3

setOrientation
public void setOrientation(int orientation)
Sets the orientation of the receiver, which must be one of the constants SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT. Note: This operation is a hint and is not supported on platforms that do not have this concept.
Overrides:
setOrientation in class Control
Parameters:
orientation - new orientation style
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.1.2

setSelection
public void setSelection(int start)
Sets the selection. Indexing is zero based. The range of a selection is from 0..N where N is the number of characters in the widget.
Text selections are specified in terms of caret positions. In a text widget that contains N characters, there are N+1 caret positions, ranging from 0..N. This differs from other functions that address character position such as getText () that use the regular array indexing rules.
Parameters:
start - new caret position
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setSelection
public void setSelection(int start,
                         int end)
Sets the selection to the range specified by the given start and end indices. Indexing is zero based. The range of a selection is from 0..N where N is the number of characters in the widget.
Text selections are specified in terms of caret positions. In a text widget that contains N characters, there are N+1 caret positions, ranging from 0..N. This differs from other functions that address character position such as getText () that use the usual array indexing rules.
Parameters:
start - the start of the range
end - the end of the range
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setRedraw
public void setRedraw(boolean redraw)
Description copied from class: Control
If the argument is false, causes subsequent drawing operations in the receiver to be ignored. No drawing of any kind can occur in the receiver until the flag is set to true. Graphics operations that occurred while the flag was false are lost. When the flag is set to true, the entire widget is marked as needing to be redrawn. Nested calls to this method are stacked. Note: This operation is a hint and may not be supported on some platforms or for some widgets.
Overrides:
setRedraw in class Control
Parameters:
redraw - the new redraw state
See Also:
Control.redraw(int, int, int, int, boolean), Control.update()

setSelection
public void setSelection(Point selection)
Sets the selection to the range specified by the given point, where the x coordinate represents the start index and the y coordinate represents the end index. Indexing is zero based. The range of a selection is from 0..N where N is the number of characters in the widget.
Text selections are specified in terms of caret positions. In a text widget that contains N characters, there are N+1 caret positions, ranging from 0..N. This differs from other functions that address character position such as getText () that use the usual array indexing rules.
Parameters:
selection - the point
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setTabs
public void setTabs(int tabs)
Sets the number of tabs. Tab stop spacing is specified in terms of the space (' ') character. The width of a single tab stop is the pixel width of the spaces.
Parameters:
tabs - the number of tabs
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setText
public void setText(java.lang.String string)
Sets the contents of the receiver to the given string. If the receiver has style SINGLE and the argument contains multiple lines of text, the result of this operation is undefined and may vary from platform to platform. Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Parameters:
string - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the string is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setTextChars
public void setTextChars(char[] text)
Sets the contents of the receiver to the characters in the array. If the receiver has style SWT.SINGLE and the argument contains multiple lines of text then the result of this operation is undefined and may vary between platforms. Note: Use this API to prevent the text from being written into a String object whose lifecycle is outside of your control. This can help protect the text, for example, when the widget is used as a password field. However, the text can't be protected if an SWT.Segments or SWT.Verify listener has been added to the widget.
Parameters:
text - a character array that contains the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the array is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.7
See Also:
getTextChars()

setTextLimit
public void setTextLimit(int limit)
Sets the maximum number of characters that the receiver is capable of holding to be the argument. Instead of trying to set the text limit to zero, consider creating a read-only text widget.
To reset this value to the default, use setTextLimit(Text.LIMIT). Specifying a limit value larger than Text.LIMIT sets the receiver's limit to Text.LIMIT.
Parameters:
limit - new text limit
Throws:
java.lang.IllegalArgumentException -
ERROR_CANNOT_BE_ZERO - if the limit is zero
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
LIMIT

setTopIndex
public void setTopIndex(int index)
Sets the zero-relative index of the line which is currently at the top of the receiver. This index can change when lines are scrolled or new lines are added and removed.
Parameters:
index - the index of the top item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

showSelection
public void showSelection()
Shows the selection. If the selection is already showing in the receiver, this method simply returns. Otherwise, lines are scrolled until the selection is visible.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.graphics
Class TextLayout
java.lang.Object
org.eclipse.swt.graphics.Resource
org.eclipse.swt.graphics.TextLayout


public final class TextLayout extends Resource
TextLayout is a graphic object that represents styled text. Instances of this class provide support for drawing, cursor navigation, hit testing, text wrapping, alignment, tab expansion line breaking, etc. These are aspects required for rendering internationalized text.
Application code must explicitly invoke the TextLayout#dispose() method to release the operating system resources managed by each instance when those instances are no longer required.
since. :
3.0
See Also:
TextLayout, TextStyle snippets, SWT Example: CustomControlExample, StyledText tab, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
TextLayout(Device device)
Constructs a new instance of this class on the given device.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    draw(GC gc,     int x,     int y)
Draws the receiver's text using the specified GC at the specified point.
void    draw(GC gc,     int x,     int y,    int selectionStart,     int selec tionEnd,     Color selectionForegrou nd,     Color selectionBackground)
Draws the receiver's text using the specified GC at the specified point.
void    draw(GC gc,     int x,     int y,    int selectionStart,     int selec tionEnd,     Color selectionForegrou nd,     Color selectionBackground,    int flags)
Draws the receiver's text using the specified GC at the specified point.
int getAlignment()
Returns the receiver's horizontal text alignment, which will be one of SWT.LEFT, SWT.CENTER or SWT.RIGHT.
int getAscent()
Returns the ascent of the receiver.
Rectangle   getBounds()
Returns the bounds of the receiver.
Rectangle   getBounds(int start,          int e nd)
Returns the bounds for the specified range of characters.
int getDescent()
Returns the descent of the receiver.
Font    getFont()
Returns the default font currently being used by the receiver to draw and measure text.
int getIndent()
Returns the receiver's indent.
boolean getJustify()
Returns the receiver's justification.
int getLevel(int offset)
Returns the embedding level for the specified character offset.
Rectangle   getLineBounds(int lineIndex)
Returns the bounds of the line for the specified line index.
int getLineCount()
Returns the receiver's line count.
int getLineIndex(int offset)
Returns the index of the line that contains the specified character offset.
FontMetrics getLineMetrics(int lineIndex)
Returns the font metrics for the specified line index.
int[]   getLineOffsets()
Returns the line offsets.
Point   getLocation(int offset, boolean trailing)
Returns the location for the specified character offset.
int getNextOffset(int offset,     int movement)
Returns the next offset for the specified offset and movement type.
int getOffset(int x,          int y,        int[] trailing)
Returns the character offset for the specified point.
int getOffset(Point point,          int [] trailing)
Returns the character offset for the specified point.
int getOrientation()
Returns the orientation of the receiver.
int getPreviousOffset(int offset,             int movement)
Returns the previous offset for the specified offset and movement type.
int[]   getRanges()
Gets the ranges of text that are associated with a TextStyle.
int[]   getSegments()
Returns the text segments offsets of the receiver.
char[]  getSegmentsChars()
Returns the segments characters of the receiver.
int getSpacing()
Returns the line spacing of the receiver.
TextStyle   getStyle(int offset)
Gets the style of the receiver at the specified character offset.
TextStyle[] getStyles()
Gets all styles of the receiver.
int[]   getTabs()
Returns the tab list of the receiver.
java.lang.String    getText()
Gets the receiver's text, which will be an empty string if it has never been set.
int getTextDirection()
Returns the text direction of the receiver.
int getWidth()
Returns the width of the receiver.
int getWrapIndent()
Returns the receiver's wrap indent.
boolean isDisposed()
Returns true if the text layout has been disposed, and false otherwise.
void    setAlignment(int alignment)
Sets the text alignment for the receiver.
void    setAscent(int ascent)
Sets the ascent of the receiver.
void    setDescent(int descent)
Sets the descent of the receiver.
void    setFont(Font font)
Sets the default font which will be used by the receiver to draw and measure text.
void    setIndent(int indent)
Sets the indent of the receiver.
void    setJustify(boolean justify)
Sets the justification of the receiver.
void    setOrientation(int orientation)
Sets the orientation of the receiver, which must be one of SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
void    setSegments(int[] segments)
Sets the offsets of the receiver's text segments.
void    setSegmentsChars(char[] segmentsCha rs)
Sets the characters to be used in the segments boundaries.
void    setSpacing(int spacing)
Sets the line spacing of the receiver.
void    setStyle(TextStyle style,         i nt start,         int end)
Sets the style of the receiver for the specified range.
void    setTabs(int[] tabs)
Sets the receiver's tab list.
void    setText(java.lang.String text)
Sets the receiver's text.
void    setTextDirection(int textDirection)
Sets the text direction of the receiver, which must be one of SWT.LEFT_TO_RIGHT, SWT.RIGHT_TO_LEFT or SWT.AUTO_TEXT_DIRECTION.
void    setWidth(int width)
Sets the line width of the receiver, which determines how text should be wrapped and aligned.
void    setWrapIndent(int wrapIndent)
Sets the wrap indent of the receiver.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class org.eclipse.swt.graphics.Resource
dispose, getDevice

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

TextLayout
public TextLayout(Device device)
Constructs a new instance of this class on the given device. You must dispose the text layout when it is no longer required.
Parameters:
device - the device on which to allocate the text layout
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
See Also:
Resource.dispose()

Method Detail

draw
public void draw(GC gc,
                 int x,
                 int y)
Draws the receiver's text using the specified GC at the specified point.
Parameters:
gc - the GC to draw
x - the x coordinate of the top left corner of the rectangular area where the text is to be drawn
y - the y coordinate of the top left corner of the rectangular area where the text is to be drawn
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the gc is null

draw
public void draw(GC gc,
                 int x,
                 int y,
                 int selectionStart,
                 int selectionEnd,
                 Color selectionForeground,
                 Color selectionBackground)
Draws the receiver's text using the specified GC at the specified point.
Parameters:
gc - the GC to draw
x - the x coordinate of the top left corner of the rectangular area where the text is to be drawn
y - the y coordinate of the top left corner of the rectangular area where the text is to be drawn
selectionStart - the offset where the selections starts, or -1 indicating no selection
selectionEnd - the offset where the selections ends, or -1 indicating no selection
selectionForeground - selection foreground, or NULL to use the system default color
selectionBackground - selection background, or NULL to use the system default color
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the gc is null

draw
public void draw(GC gc,
                 int x,
                 int y,
                 int selectionStart,
                 int selectionEnd,
                 Color selectionForeground,
                 Color selectionBackground,
                 int flags)
Draws the receiver's text using the specified GC at the specified point. The parameter flags can include one of SWT.DELIMITER_SELECTION or SWT.FULL_SELECTION to specify the selection behavior on all lines except for the last line, and can also include SWT.LAST_LINE_SELECTION to extend the specified selection behavior to the last line.
Parameters:
gc - the GC to draw
x - the x coordinate of the top left corner of the rectangular area where the text is to be drawn
y - the y coordinate of the top left corner of the rectangular area where the text is to be drawn
selectionStart - the offset where the selections starts, or -1 indicating no selection
selectionEnd - the offset where the selections ends, or -1 indicating no selection
selectionForeground - selection foreground, or NULL to use the system default color
selectionBackground - selection background, or NULL to use the system default color
flags - drawing options
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the gc is null
since. :
3.3

getAlignment
public int getAlignment()
Returns the receiver's horizontal text alignment, which will be one of SWT.LEFT, SWT.CENTER or SWT.RIGHT.
Returns:
the alignment used to positioned text horizontally
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getAscent
public int getAscent()
Returns the ascent of the receiver.
Returns:
the ascent
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
getDescent(), setDescent(int), setAscent(int), getLineMetrics(int)

getBounds
public Rectangle getBounds()
Returns the bounds of the receiver. The width returned is either the width of the longest line or the width set using setWidth(int). To obtain the text bounds of a line use getLineBounds(int).
Returns:
the bounds of the receiver
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
setWidth(int), getLineBounds(int)

getBounds
public Rectangle getBounds(int start,
                           int end)
Returns the bounds for the specified range of characters. The bounds is the smallest rectangle that encompasses all characters in the range. The start and end offsets are inclusive and will be clamped if out of range.
Parameters:
start - the start offset
end - the end offset
Returns:
the bounds of the character range
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getDescent
public int getDescent()
Returns the descent of the receiver.
Returns:
the descent
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
getAscent(), setAscent(int), setDescent(int), getLineMetrics(int)

getFont
public Font getFont()
Returns the default font currently being used by the receiver to draw and measure text.
Returns:
the receiver's font
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getIndent
public int getIndent()
Returns the receiver's indent.
Returns:
the receiver's indent
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.2

getJustify
public boolean getJustify()
Returns the receiver's justification.
Returns:
the receiver's justification
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.2

getLevel
public int getLevel(int offset)
Returns the embedding level for the specified character offset. The embedding level is usually used to determine the directionality of a character in bidirectional text.
Parameters:
offset - the character offset
Returns:
the embedding level
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the character offset is out of range
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getLineBounds
public Rectangle getLineBounds(int lineIndex)
Returns the bounds of the line for the specified line index.
Parameters:
lineIndex - the line index
Returns:
the line bounds
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the line index is out of range
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getLineCount
public int getLineCount()
Returns the receiver's line count. This includes lines caused by wrapping.
Returns:
the line count
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getLineIndex
public int getLineIndex(int offset)
Returns the index of the line that contains the specified character offset.
Parameters:
offset - the character offset
Returns:
the line index
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the character offset is out of range
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getLineMetrics
public FontMetrics getLineMetrics(int lineIndex)
Returns the font metrics for the specified line index.
Parameters:
lineIndex - the line index
Returns:
the font metrics
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the line index is out of range
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getLineOffsets
public int[] getLineOffsets()
Returns the line offsets. Each value in the array is the offset for the first character in a line except for the last value, which contains the length of the text.
Returns:
the line offsets
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getLocation
public Point getLocation(int offset,
                         boolean trailing)
Returns the location for the specified character offset. The trailing argument indicates whether the offset corresponds to the leading or trailing edge of the cluster.
Parameters:
offset - the character offset
trailing - the trailing flag
Returns:
the location of the character offset
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
getOffset(Point, int[]), getOffset(int, int, int[])

getNextOffset
public int getNextOffset(int offset,
                         int movement)
Returns the next offset for the specified offset and movement type. The movement is one of SWT.MOVEMENT_CHAR, SWT.MOVEMENT_CLUSTER, SWT.MOVEMENT_WORD, SWT.MOVEMENT_WORD_END or SWT.MOVEMENT_WORD_START.
Parameters:
offset - the start offset
movement - the movement type
Returns:
the next offset
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the offset is out of range
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
getPreviousOffset(int, int)

getOffset
public int getOffset(Point point,
                     int[] trailing)
Returns the character offset for the specified point. For a typical character, the trailing argument will be filled in to indicate whether the point is closer to the leading edge (0) or the trailing edge (1). When the point is over a cluster composed of multiple characters, the trailing argument will be filled with the position of the character in the cluster that is closest to the point.
Parameters:
point - the point
trailing - the trailing buffer
Returns:
the character offset
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the trailing length is less than 1
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
getLocation(int, boolean)

getOffset
public int getOffset(int x,
                     int y,
                     int[] trailing)
Returns the character offset for the specified point. For a typical character, the trailing argument will be filled in to indicate whether the point is closer to the leading edge (0) or the trailing edge (1). When the point is over a cluster composed of multiple characters, the trailing argument will be filled with the position of the character in the cluster that is closest to the point.
Parameters:
x - the x coordinate of the point
y - the y coordinate of the point
trailing - the trailing buffer
Returns:
the character offset
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the trailing length is less than 1
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
getLocation(int, boolean)

getOrientation
public int getOrientation()
Returns the orientation of the receiver.
Returns:
the orientation style
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getPreviousOffset
public int getPreviousOffset(int offset,
                             int movement)
Returns the previous offset for the specified offset and movement type. The movement is one of SWT.MOVEMENT_CHAR, SWT.MOVEMENT_CLUSTER or SWT.MOVEMENT_WORD, SWT.MOVEMENT_WORD_END or SWT.MOVEMENT_WORD_START.
Parameters:
offset - the start offset
movement - the movement type
Returns:
the previous offset
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the offset is out of range
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
getNextOffset(int, int)

getRanges
public int[] getRanges()
Gets the ranges of text that are associated with a TextStyle.
Returns:
the ranges, an array of offsets representing the start and end of each text style.
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.2
See Also:
getStyles()

getSegments
public int[] getSegments()
Returns the text segments offsets of the receiver.
Returns:
the text segments offsets
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getSegmentsChars
public char[] getSegmentsChars()
Returns the segments characters of the receiver.
Returns:
the segments characters
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.6

getSpacing
public int getSpacing()
Returns the line spacing of the receiver.
Returns:
the line spacing
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getStyle
public TextStyle getStyle(int offset)
Gets the style of the receiver at the specified character offset.
Parameters:
offset - the text offset
Returns:
the style or null if not set
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the character offset is out of range
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getStyles
public TextStyle[] getStyles()
Gets all styles of the receiver.
Returns:
the styles
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.2
See Also:
getRanges()

getTabs
public int[] getTabs()
Returns the tab list of the receiver.
Returns:
the tab list
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getText
public java.lang.String getText()
Gets the receiver's text, which will be an empty string if it has never been set.
Returns:
the receiver's text
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getTextDirection
public int getTextDirection()
Returns the text direction of the receiver.
Returns:
the text direction value
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.103

getWidth
public int getWidth()
Returns the width of the receiver.
Returns:
the width
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

getWrapIndent
public int getWrapIndent()
Returns the receiver's wrap indent.
Returns:
the receiver's wrap indent
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.6

isDisposed
public boolean isDisposed()
Returns true if the text layout has been disposed, and false otherwise. This method gets the dispose state for the text layout. When a text layout has been disposed, it is an error to invoke any other method (except Resource.dispose()) using the text layout.
Specified by:
isDisposed in class Resource
Returns:
true when the text layout is disposed and false otherwise

setAlignment
public void setAlignment(int alignment)
Sets the text alignment for the receiver. The alignment controls how a line of text is positioned horizontally. The argument should be one of SWT.LEFT, SWT.RIGHT or SWT.CENTER. The default alignment is SWT.LEFT. Note that the receiver's width must be set in order to use SWT.RIGHT or SWT.CENTER alignment.
Parameters:
alignment - the new alignment
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
setWidth(int)

setAscent
public void setAscent(int ascent)
Sets the ascent of the receiver. The ascent is distance in pixels from the baseline to the top of the line and it is applied to all lines. The default value is -1 which means that the ascent is calculated from the line fonts.
Parameters:
ascent - the new ascent
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the ascent is less than -1
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
setDescent(int), getLineMetrics(int)

setDescent
public void setDescent(int descent)
Sets the descent of the receiver. The descent is distance in pixels from the baseline to the bottom of the line and it is applied to all lines. The default value is -1 which means that the descent is calculated from the line fonts.
Parameters:
descent - the new descent
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the descent is less than -1
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
setAscent(int), getLineMetrics(int)

setFont
public void setFont(Font font)
Sets the default font which will be used by the receiver to draw and measure text. If the argument is null, then a default font appropriate for the platform will be used instead. Note that a text style can override the default font.
Parameters:
font - the new font for the receiver, or null to indicate a default font
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the font has been disposed
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setIndent
public void setIndent(int indent)
Sets the indent of the receiver. This indent is applied to the first line of each paragraph.
Parameters:
indent - new indent
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.2
See Also:
setWrapIndent(int)

setJustify
public void setJustify(boolean justify)
Sets the justification of the receiver. Note that the receiver's width must be set in order to use justification.
Parameters:
justify - new justify
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.2

setOrientation
public void setOrientation(int orientation)
Sets the orientation of the receiver, which must be one of SWT.LEFT_TO_RIGHT or SWT.RIGHT_TO_LEFT.
Parameters:
orientation - new orientation style
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setSegments
public void setSegments(int[] segments)
Sets the offsets of the receiver's text segments. Text segments are used to override the default behavior of the bidirectional algorithm. Bidirectional reordering can happen within a text segment but not between two adjacent segments. Each text segment is determined by two consecutive offsets in the segments arrays. The first element of the array should always be zero and the last one should always be equals to length of the text.
When segments characters are set, the segments are the offsets where the characters are inserted in the text.
Parameters:
segments - the text segments offset
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
setSegmentsChars(char[])

setSegmentsChars
public void setSegmentsChars(char[] segmentsChars)
Sets the characters to be used in the segments boundaries. The segments are set by calling setSegments(int[]). The application can use this API to insert Unicode Control Characters in the text to control the display of the text and bidi reordering. The characters are not accessible by any other API in TextLayout.
Parameters:
segmentsChars - the segments characters
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.6
See Also:
setSegments(int[])

setSpacing
public void setSpacing(int spacing)
Sets the line spacing of the receiver. The line spacing is the space left between lines.
Parameters:
spacing - the new line spacing
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the spacing is negative
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setStyle
public void setStyle(TextStyle style,
                     int start,
                     int end)
Sets the style of the receiver for the specified range. Styles previously set for that range will be overwritten. The start and end offsets are inclusive and will be clamped if out of range.
Parameters:
style - the style
start - the start offset
end - the end offset
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setTabs
public void setTabs(int[] tabs)
Sets the receiver's tab list. Each value in the tab list specifies the space in points from the origin of the text layout to the respective tab stop. The last tab stop width is repeated continuously.
Parameters:
tabs - the new tab list
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setText
public void setText(java.lang.String text)
Sets the receiver's text. Note: Setting the text also clears all the styles. This method returns without doing anything if the new text is the same as the current text.
Parameters:
text - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setTextDirection
public void setTextDirection(int textDirection)
Sets the text direction of the receiver, which must be one of SWT.LEFT_TO_RIGHT, SWT.RIGHT_TO_LEFT or SWT.AUTO_TEXT_DIRECTION. Warning: This API is currently only implemented on Windows. It doesn't set the base text direction on GTK and Cocoa.
Parameters:
textDirection - the new text direction
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.103

setWidth
public void setWidth(int width)
Sets the line width of the receiver, which determines how text should be wrapped and aligned. The default value is -1 which means wrapping is disabled.
Parameters:
width - the new width
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the width is 0 or less than -1
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
See Also:
setAlignment(int)

setWrapIndent
public void setWrapIndent(int wrapIndent)
Sets the wrap indent of the receiver. This indent is applied to all lines in the paragraph except the first line.
Parameters:
wrapIndent - new wrap indent
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.6
See Also:
setIndent(int)

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the receiver


org.eclipse.swt.graphics
Class TextStyle
java.lang.Object
org.eclipse.swt.graphics.TextStyle


public class TextStyle extends java.lang.Object
TextStyle defines a set of styles that can be applied to a range of text. The hashCode() method in this class uses the values of the public fields to compute the hash value. When storing instances of the class in hashed collections, do not modify these fields after the object has been inserted.
Application code does not need to explicitly release the resources managed by each instance when those instances are no longer required, and thus no dispose() method is provided.
since. :
3.0
See Also:
TextLayout, Font, Color, TextLayout, TextStyle snippets, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
Color   background
the background of the style
Color   borderColor
the border color of the style
int borderStyle
the border style.
java.lang.Object    data
the data.
Font    font
the font of the style
Color   foreground
the foreground of the style
GlyphMetrics    metrics
the GlyphMetrics of the style
int rise
the baseline rise of the style.
boolean strikeout
the strikeout flag of the style
Color   strikeoutColor
the strikeout color of the style
boolean underline
the underline flag of the style.
Color   underlineColor
the underline color of the style
int underlineStyle
the underline style.

Constructor Summary
Constructors

Constructor and Description
TextStyle()
Create an empty text style.
TextStyle(Font font,          Color foreground,          Color backgrou nd)
Create a new text style with the specified font, foreground and background.
TextStyle(TextStyle style)
Create a new text style from an existing text style.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
int hashCode()
Returns an integer hash code for the receiver.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait

Field Detail

font
public Font font
the font of the style

foreground
public Color foreground
the foreground of the style

background
public Color background
the background of the style

underline
public boolean underline
the underline flag of the style. The default underline style is SWT.UNDERLINE_SINGLE.
since. :
3.1

underlineColor
public Color underlineColor
the underline color of the style
since. :
3.4

underlineStyle
public int underlineStyle
the underline style. This style is ignored when underline is false. This value should be one of SWT.UNDERLINE_SINGLE, SWT.UNDERLINE_DOUBLE, SWT.UNDERLINE_ERROR, SWT.UNDERLINE_SQUIGGLE, or SWT.UNDERLINE_LINK.
since. :
3.4
See Also:
SWT.UNDERLINE_SINGLE, SWT.UNDERLINE_DOUBLE, SWT.UNDERLINE_ERROR, SWT.UNDERLINE_SQUIGGLE, SWT.UNDERLINE_LINK

strikeout
public boolean strikeout
the strikeout flag of the style
since. :
3.1

strikeoutColor
public Color strikeoutColor
the strikeout color of the style
since. :
3.4

borderStyle
public int borderStyle
the border style. The default border style is SWT.NONE. This value should be one of SWT.BORDER_SOLID, SWT.BORDER_DASH,SWT.BORDER_DOT or SWT.NONE.
since. :
3.4
See Also:
SWT.BORDER_SOLID, SWT.BORDER_DASH, SWT.BORDER_DOT, SWT.NONE

borderColor
public Color borderColor
the border color of the style
since. :
3.4

metrics
public GlyphMetrics metrics
the GlyphMetrics of the style
since. :
3.2

rise
public int rise
the baseline rise of the style.
since. :
3.2

data
public java.lang.Object data
the data. An user data field. It can be used to hold the HREF when the range is used as a link or the embed object when the range is used with GlyphMetrics.
since. :
3.5

Constructor Detail

TextStyle
public TextStyle()
Create an empty text style.
since. :
3.4

TextStyle
public TextStyle(Font font,
                 Color foreground,
                 Color background)
Create a new text style with the specified font, foreground and background.
Parameters:
font - the font of the style, null if none
foreground - the foreground color of the style, null if none
background - the background color of the style, null if none

TextStyle
public TextStyle(TextStyle style)
Create a new text style from an existing text style.
Parameters:
style - the style to copy
since. :
3.4

Method Detail

equals
public boolean equals(java.lang.Object object)
Compares the argument to the receiver, and returns true if they represent the same object using a class specific comparison.
Overrides:
equals in class java.lang.Object
Parameters:
object - the object to compare with this object
Returns:
true if the object is the same as this object and false otherwise
See Also:
hashCode()

hashCode
public int hashCode()
Returns an integer hash code for the receiver. Any two objects that return true when passed to equals must return the same value for this method.
Overrides:
hashCode in class java.lang.Object
Returns:
the receiver's hash
See Also:
equals(Object)

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the TextStyle


org.eclipse.swt.internal.image
Class TIFFFileFormat
java.lang.Object
org.eclipse.swt.internal.image.FileFormat
org.eclipse.swt.internal.image.TIFFFileFormat


public final class TIFFFileFormat extends FileFormat
Baseline TIFF decoder revision 6.0 Extension T4-encoding CCITT T.4 1D

Constructor Summary
Constructors

Constructor and Description
TIFFFileFormat()

Method Summary

Methods inherited from class org.eclipse.swt.internal.image.FileFormat
load, loadFromStream, save, unloadIntoStream

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

TIFFFileFormat
public TIFFFileFormat()


org.eclipse.swt.widgets
Class ToolBar
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.Composite
org.eclipse.swt.widgets.ToolBar
All Implemented Interfaces:
Drawable


public class ToolBar extends Composite
Instances of this class support the layout of selectable tool bar items. The item children that may be added to instances of this class must be of type ToolItem.
Note that although this class is a subclass of Composite, it does not make sense to add Control children to it, or set a layout on it.
Styles:
FLAT, WRAP, RIGHT, HORIZONTAL, VERTICAL, SHADOW_OUT
Events:
(none)
Note: Only one of the styles HORIZONTAL and VERTICAL may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
ToolBar, ToolItem snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
ToolBar(Composite parent,        int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
protected void  checkSubclass()
Checks that this class can be subclassed.
ToolItem    getItem(int index)
Returns the item at the given, zero-relative index in the receiver.
ToolItem    getItem(Point point)
Returns the item at the given point in the receiver or null if no such item exists.
int getItemCount()
Returns the number of items contained in the receiver.
ToolItem[]  getItems()
Returns an array of ToolItems which are the items in the receiver.
int getRowCount()
Returns the number of rows in the receiver.
int indexOf(ToolItem item)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item.
void    setFont(Font font)
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
boolean setParent(Composite parent)
Changes the parent of the widget to be the one provided if the underlying operating system supports this feature.
void    setRedraw(boolean redraw)
If the argument is false, causes subsequent drawing operations in the receiver to be ignored.

Methods inherited from class org.eclipse.swt.widgets.Composite
changed, drawBackground, getBackgroundMode, getChildren, getLayout, getLayoutDeferred, getTabList, isLayoutDeferred, layout, layout, layout, layout, layout, setBackgroundMode, setFocus, setLayout, setLayoutDeferred, setTabList

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

ToolBar
public ToolBar(Composite parent,
               int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.FLAT, SWT.WRAP, SWT.RIGHT, SWT.HORIZONTAL, SWT.SHADOW_OUT, SWT.VERTICAL, Widget.checkSubclass(), Widget.getStyle()

Method Detail

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Composite

getItem
public ToolItem getItem(int index)
Returns the item at the given, zero-relative index in the receiver. Throws an exception if the index is out of range.
Parameters:
index - the index of the item to return
Returns:
the item at the given index
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItem
public ToolItem getItem(Point point)
Returns the item at the given point in the receiver or null if no such item exists. The point is in the coordinate system of the receiver.
Parameters:
point - the point used to locate the item
Returns:
the item at the given point
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItemCount
public int getItemCount()
Returns the number of items contained in the receiver.
Returns:
the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItems
public ToolItem[] getItems()
Returns an array of ToolItems which are the items in the receiver. Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the items in the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getRowCount
public int getRowCount()
Returns the number of rows in the receiver. When the receiver has the WRAP style, the number of rows can be greater than one. Otherwise, the number of rows is always one.
Returns:
the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

indexOf
public int indexOf(ToolItem item)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item. If no item is found, returns -1.
Parameters:
item - the search item
Returns:
the index of the item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the tool item is null
ERROR_INVALID_ARGUMENT - if the tool item has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setFont
public void setFont(Font font)
Description copied from class: Control
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Overrides:
setFont in class Control
Parameters:
font - the new font (or null)

setParent
public boolean setParent(Composite parent)
Description copied from class: Control
Changes the parent of the widget to be the one provided if the underlying operating system supports this feature. Returns true if the parent is successfully changed.
Overrides:
setParent in class Control
Parameters:
parent - the new parent for the control.
Returns:
true if the parent is changed and false otherwise.

setRedraw
public void setRedraw(boolean redraw)
Description copied from class: Control
If the argument is false, causes subsequent drawing operations in the receiver to be ignored. No drawing of any kind can occur in the receiver until the flag is set to true. Graphics operations that occurred while the flag was false are lost. When the flag is set to true, the entire widget is marked as needing to be redrawn. Nested calls to this method are stacked. Note: This operation is a hint and may not be supported on some platforms or for some widgets.
Overrides:
setRedraw in class Control
Parameters:
redraw - the new redraw state
See Also:
Control.redraw(int, int, int, int, boolean), Control.update()


org.eclipse.swt.widgets
Class ToolItem
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Item
org.eclipse.swt.widgets.ToolItem


public class ToolItem extends Item
Instances of this class represent a selectable user interface object that represents a button in a tool bar.
Styles:
PUSH, CHECK, RADIO, SEPARATOR, DROP_DOWN
Events:
Selection
Note: Only one of the styles CHECK, PUSH, RADIO, SEPARATOR and DROP_DOWN may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
ToolBar, ToolItem snippets, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
ToolItem(ToolBar parent,         int style)
Constructs a new instance of this class given its parent (which must be a ToolBar) and a style value describing its behavior and appearance.
ToolItem(ToolBar parent,         int style,         int index)
Constructs a new instance of this class given its parent (which must be a ToolBar), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface.
protected void  checkSubclass()
Checks that this class can be subclassed.
Rectangle   getBounds()
Returns a rectangle describing the receiver's size and location relative to its parent.
Control getControl()
Returns the control that is used to fill the bounds of the item when the item is a SEPARATOR.
Image   getDisabledImage()
Returns the receiver's disabled image if it has one, or null if it does not.
boolean getEnabled()
Returns true if the receiver is enabled, and false otherwise.
Image   getHotImage()
Returns the receiver's hot image if it has one, or null if it does not.
ToolBar getParent()
Returns the receiver's parent, which must be a ToolBar.
boolean getSelection()
Returns true if the receiver is selected, and false otherwise.
java.lang.String    getToolTipText()
Returns the receiver's tool tip text, or null if it has not been set.
int getWidth()
Gets the width of the receiver.
boolean isEnabled()
Returns true if the receiver is enabled and all of the receiver's ancestors are enabled, and false otherwise.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
void    setControl(Control control)
Sets the control that is used to fill the bounds of the item when the item is a SEPARATOR.
void    setDisabledImage(Image image)
Sets the receiver's disabled image to the argument, which may be null indicating that no disabled image should be displayed.
void    setEnabled(boolean enabled)
Enables the receiver if the argument is true, and disables it otherwise.
void    setHotImage(Image image)
Sets the receiver's hot image to the argument, which may be null indicating that no hot image should be displayed.
void    setImage(Image image)
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
void    setSelection(boolean selected)
Sets the selection state of the receiver.
void    setText(java.lang.String string)
Sets the receiver's text.
void    setToolTipText(java.lang.String str ing)
Sets the receiver's tool tip text to the argument, which may be null indicating that the default tool tip for the control will be shown.
void    setWidth(int width)
Sets the width of the receiver, for SEPARATOR ToolItems.

Methods inherited from class org.eclipse.swt.widgets.Item
getImage, getText

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

ToolItem
public ToolItem(ToolBar parent,
                int style)
Constructs a new instance of this class given its parent (which must be a ToolBar) and a style value describing its behavior and appearance. The item is added to the end of the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.PUSH, SWT.CHECK, SWT.RADIO, SWT.SEPARATOR, SWT.DROP_DOWN, Widget.checkSubclass(), Widget.getStyle()

ToolItem
public ToolItem(ToolBar parent,
                int style,
                int index)
Constructs a new instance of this class given its parent (which must be a ToolBar), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
index - the zero-relative index to store the receiver in its parent
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.PUSH, SWT.CHECK, SWT.RADIO, SWT.SEPARATOR, SWT.DROP_DOWN, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface. When widgetSelected is called when the mouse is over the arrow portion of a drop-down tool, the event object detail field contains the value SWT.ARROW. widgetDefaultSelected is not called.
When the SWT.RADIO style bit is set, the widgetSelected method is also called when the receiver loses selection because another item in the same radio group was selected by the user. During widgetSelected the application can use getSelection() to determine the current selected state of the receiver.
Parameters:
listener - the listener which should be notified when the control is selected by the user,
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Item

getBounds
public Rectangle getBounds()
Returns a rectangle describing the receiver's size and location relative to its parent.
Returns:
the receiver's bounding rectangle
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getControl
public Control getControl()
Returns the control that is used to fill the bounds of the item when the item is a SEPARATOR.
Returns:
the control
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getDisabledImage
public Image getDisabledImage()
Returns the receiver's disabled image if it has one, or null if it does not. The disabled image is displayed when the receiver is disabled.
Returns:
the receiver's disabled image
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getEnabled
public boolean getEnabled()
Returns true if the receiver is enabled, and false otherwise. A disabled control is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Returns:
the receiver's enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
isEnabled()

getHotImage
public Image getHotImage()
Returns the receiver's hot image if it has one, or null if it does not. The hot image is displayed when the mouse enters the receiver.
Returns:
the receiver's hot image
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getParent
public ToolBar getParent()
Returns the receiver's parent, which must be a ToolBar.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelection
public boolean getSelection()
Returns true if the receiver is selected, and false otherwise. When the receiver is of type CHECK or RADIO, it is selected when it is checked (which some platforms draw as a pushed in button). If the receiver is of any other type, this method returns false.
Returns:
the selection state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getToolTipText
public java.lang.String getToolTipText()
Returns the receiver's tool tip text, or null if it has not been set.
Returns:
the receiver's tool tip text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getWidth
public int getWidth()
Gets the width of the receiver.
Returns:
the width
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

isEnabled
public boolean isEnabled()
Returns true if the receiver is enabled and all of the receiver's ancestors are enabled, and false otherwise. A disabled control is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Returns:
the receiver's enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getEnabled()

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

setControl
public void setControl(Control control)
Sets the control that is used to fill the bounds of the item when the item is a SEPARATOR.
Parameters:
control - the new control
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the control has been disposed
ERROR_INVALID_PARENT - if the control is not in the same widget tree
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setEnabled
public void setEnabled(boolean enabled)
Enables the receiver if the argument is true, and disables it otherwise. A disabled control is typically not selectable from the user interface and draws with an inactive or "grayed" look.
Parameters:
enabled - the new enabled state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setDisabledImage
public void setDisabledImage(Image image)
Sets the receiver's disabled image to the argument, which may be null indicating that no disabled image should be displayed. The disabled image is displayed when the receiver is disabled.
Parameters:
image - the disabled image to display on the receiver (may be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the image has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setHotImage
public void setHotImage(Image image)
Sets the receiver's hot image to the argument, which may be null indicating that no hot image should be displayed. The hot image is displayed when the mouse enters the receiver.
Parameters:
image - the hot image to display on the receiver (may be null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the image has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setImage
public void setImage(Image image)
Description copied from class: Item
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
Overrides:
setImage in class Item
Parameters:
image - the image to display on the receiver (may be null)

setSelection
public void setSelection(boolean selected)
Sets the selection state of the receiver. When the receiver is of type CHECK or RADIO, it is selected when it is checked (which some platforms draw as a pushed in button).
Parameters:
selected - the new selection state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setText
public void setText(java.lang.String string)
Sets the receiver's text. The string may include the mnemonic character. Mnemonics are indicated by an '&' that causes the next character to be the mnemonic. When the user presses a key sequence that matches the mnemonic, a selection event occurs. On most platforms, the mnemonic appears underlined but may be emphasised in a platform specific manner. The mnemonic indicator character '&' can be escaped by doubling it in the string, causing a single '&' to be displayed.
Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Overrides:
setText in class Item
Parameters:
string - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setToolTipText
public void setToolTipText(java.lang.String string)
Sets the receiver's tool tip text to the argument, which may be null indicating that the default tool tip for the control will be shown. For a control that has a default tool tip, such as the Tree control on Windows, setting the tool tip text to an empty string replaces the default, causing no tool tip text to be shown. The mnemonic indicator (character '&') is not displayed in a tool tip. To display a single '&' in the tool tip, the character '&' can be escaped by doubling it in the string.
Parameters:
string - the new tool tip text (or null)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setWidth
public void setWidth(int width)
Sets the width of the receiver, for SEPARATOR ToolItems.
Parameters:
width - the new width. If the new value is SWT.DEFAULT, the width is a fixed-width area whose amount is determined by the platform. If the new value is 0 a vertical or horizontal line will be drawn, depending on the setting of the corresponding style bit (SWT.VERTICAL or SWT.HORIZONTAL). If the new value is SWT.SEPARATOR_FILL a variable-width space is inserted that acts as a spring between the two adjoining items which will push them out to the extent of the containing ToolBar.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class ToolTip
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.ToolTip


public class ToolTip extends Widget
Instances of this class represent popup windows that are used to inform or warn the user.
Styles:
BALLOON, ICON_ERROR, ICON_INFORMATION, ICON_WARNING
Events:
Selection
Note: Only one of the styles ICON_ERROR, ICON_INFORMATION, and ICON_WARNING may be specified.
IMPORTANT: This class is not intended to be subclassed.
since. :
3.2
See Also:
Tool Tips snippets, SWT Example: ControlExample, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
ToolTip(Shell parent,        int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the receiver is selected by the user, by sending it one of the messages defined in the SelectionListener interface.
boolean getAutoHide()
Returns true if the receiver is automatically hidden by the platform, and false otherwise.
java.lang.String    getMessage()
Returns the receiver's message, which will be an empty string if it has never been set.
Shell   getParent()
Returns the receiver's parent, which must be a Shell.
java.lang.String    getText()
Returns the receiver's text, which will be an empty string if it has never been set.
boolean getVisible()
Returns true if the receiver is visible, and false otherwise.
boolean isVisible()
Returns true if the receiver is visible and all of the receiver's ancestors are visible and false otherwise.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the receiver is selected by the user.
void    setAutoHide(boolean autoHide)
Makes the receiver hide automatically when true, and remain visible when false.
void    setLocation(int x,            int y )
Sets the location of the receiver, which must be a tooltip, to the point specified by the arguments which are relative to the display.
void    setLocation(Point location)
Sets the location of the receiver, which must be a tooltip, to the point specified by the argument which is relative to the display.
void    setMessage(java.lang.String string)
Sets the receiver's message.
void    setText(java.lang.String string)
Sets the receiver's text.
void    setVisible(boolean visible)
Marks the receiver as visible if the argument is true, and marks it invisible otherwise.

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

ToolTip
public ToolTip(Shell parent,
               int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.BALLOON, SWT.ICON_ERROR, SWT.ICON_INFORMATION, SWT.ICON_WARNING, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the receiver is selected by the user, by sending it one of the messages defined in the SelectionListener interface. widgetSelected is called when the receiver is selected. widgetDefaultSelected is not called.
Parameters:
listener - the listener which should be notified when the receiver is selected by the user
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

getAutoHide
public boolean getAutoHide()
Returns true if the receiver is automatically hidden by the platform, and false otherwise.
Returns:
the receiver's auto hide state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMessage
public java.lang.String getMessage()
Returns the receiver's message, which will be an empty string if it has never been set.
Returns:
the receiver's message
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getParent
public Shell getParent()
Returns the receiver's parent, which must be a Shell.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getText
public java.lang.String getText()
Returns the receiver's text, which will be an empty string if it has never been set.
Returns:
the receiver's text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getVisible
public boolean getVisible()
Returns true if the receiver is visible, and false otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, this method may still indicate that it is considered visible even though it may not actually be showing.
Returns:
the receiver's visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

isVisible
public boolean isVisible()
Returns true if the receiver is visible and all of the receiver's ancestors are visible and false otherwise.
Returns:
the receiver's visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getVisible()

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the receiver is selected by the user.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

setAutoHide
public void setAutoHide(boolean autoHide)
Makes the receiver hide automatically when true, and remain visible when false.
Parameters:
autoHide - the auto hide state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getVisible(), setVisible(boolean)

setLocation
public void setLocation(int x,
                        int y)
Sets the location of the receiver, which must be a tooltip, to the point specified by the arguments which are relative to the display. Note that this is different from most widgets where the location of the widget is relative to the parent.
Parameters:
x - the new x coordinate for the receiver
y - the new y coordinate for the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setLocation
public void setLocation(Point location)
Sets the location of the receiver, which must be a tooltip, to the point specified by the argument which is relative to the display. Note that this is different from most widgets where the location of the widget is relative to the parent.
Note that the platform window manager ultimately has control over the location of tooltips.
Parameters:
location - the new location for the receiver
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setMessage
public void setMessage(java.lang.String string)
Sets the receiver's message.
Parameters:
string - the new message
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setText
public void setText(java.lang.String string)
Sets the receiver's text.
Parameters:
string - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setVisible
public void setVisible(boolean visible)
Marks the receiver as visible if the argument is true, and marks it invisible otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, marking it visible may not actually cause it to be displayed.
Parameters:
visible - the new visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class Touch
java.lang.Object
org.eclipse.swt.widgets.Touch


public final class Touch extends java.lang.Object
Instances of this class are created in response to a touch-based input device being touched. They are found in the touches field of an Event or TouchEvent.
since. :
3.7
See Also:
TouchEvent, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
long    id
The unique identity of the touch.
boolean primary
A flag indicating that the touch is the first touch from a previous state of no touch points.
TouchSource source
The object representing the input source that generated the touch.
int state
The state of this touch at the time it was generated.
int x
The x location of the touch in TouchSource coordinates.
int y
The y location of the touch in TouchSource coordinates.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

id
public long id
The unique identity of the touch. Use this value to track changes to a touch during the touch's life. Two touches may have the same identity even if they come from different sources.

source
public TouchSource source
The object representing the input source that generated the touch.

state
public int state
The state of this touch at the time it was generated. If this field is 0 then the finger is still touching the device but has not moved since.  the last TouchEvent was generated.
See Also:
SWT.TOUCHSTATE_DOWN, SWT.TOUCHSTATE_MOVE, SWT.TOUCHSTATE_UP

primary
public boolean primary
A flag indicating that the touch is the first touch from a previous state of no touch points. Once designated as such, the touch remains the primary touch until all fingers are removed from the device.

x
public int x
The x location of the touch in TouchSource coordinates.

y
public int y
The y location of the touch in TouchSource coordinates.

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the event


org.eclipse.swt.events
Class TouchEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.TouchEvent
All Implemented Interfaces:
java.io.Serializable


public class TouchEvent extends TypedEvent
Instances of this class are sent in response to a touch-based input source being touched.
since. :
3.7
See Also:
TouchListener, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
int stateMask
The state of the keyboard modifier keys and mouse masks at the time the event was generated.
Touch[] touches
The set of touches representing the state of all contacts with touch input device at the time the event was generated.
int x
The widget-relative x coordinate of the pointer at the time the touch occurred.
int y
The widget-relative y coordinate of the pointer at the time the touch occurred.

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
TouchEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

touches
public Touch[] touches
The set of touches representing the state of all contacts with touch input device at the time the event was generated.
See Also:
Touch

stateMask
public int stateMask
The state of the keyboard modifier keys and mouse masks at the time the event was generated.
See Also:
SWT.MODIFIER_MASK, SWT.BUTTON_MASK

x
public int x
The widget-relative x coordinate of the pointer at the time the touch occurred.

y
public int y
The widget-relative y coordinate of the pointer at the time the touch occurred.

Constructor Detail

TouchEvent
public TouchEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class TypedEvent
Returns:
a string representation of the event


org.eclipse.swt.events
Interface TouchListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
Functional Interface:
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.


@FunctionalInterface public interface TouchListener extends SWTEventListener
Classes which implement this interface provide methods that deal with the events that are generated as touches occur on a touch-aware input surface. After creating an instance of a class that implements this interface it can be added to a control using the addTouchListener method and removed using the removeTouchListener method. When a touch occurs or changes state, the touch method will be invoked.
Warning: This API is currently only implemented on Windows and Cocoa. SWT doesn't send Gesture or Touch events on GTK.
since. :
3.7
See Also:
TouchEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    touch(TouchEvent e)
Sent when a touch sequence begins, changes state, or ends.

Method Detail

touch
void touch(TouchEvent e)
Sent when a touch sequence begins, changes state, or ends.
Parameters:
e - an event containing information about the touch


org.eclipse.swt.widgets
Class TouchSource
java.lang.Object
org.eclipse.swt.widgets.TouchSource


public final class TouchSource extends java.lang.Object
Instances of this class represent sources of touch input that generate Touch objects. They also provide information about the input source, which is important for interpreting the information in the Touch object. Instances of this class can be marked as direct or indirect:
When an instance is direct, the touch source is a touch-sensitive digitizer surface such as a tablet or a touch screen. There is a one-to-one mapping between a touch point and a location in a window.
When an instance is indirect (more precisely, not direct), the touch source is a track pad or other device that normally moves the cursor, but is also able to interpret multiple touches on its surface. In this case there is not a one-to-one mapping between the location of the touch on the device and a location on the display because the user can remove their finger or stylus and touch another part of the device and resume what they were doing.
since. :
3.7
See Also:
Touch, Sample code and further information

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
Rectangle   getBounds()
Returns the bounding rectangle of the device.
boolean isDirect()
Returns the type of touch input this source generates, true for direct or false for indirect.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Method Detail

isDirect
public boolean isDirect()
Returns the type of touch input this source generates, true for direct or false for indirect.
Returns:
true if the input source is direct, or false otherwise

getBounds
public Rectangle getBounds()
Returns the bounding rectangle of the device. For a direct source, this corresponds to the bounds of the display device in pixels. For an indirect source, this contains the size of the device in pixels. Note that the x and y values may not necessarily be 0 if the TouchSource is a direct source.
Returns:
the bounding rectangle of the input source

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the event


org.eclipse.swt.widgets
Class Tracker
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Tracker


public class Tracker extends Widget
Instances of this class implement rubber banding rectangles that are drawn onto a parent Composite or Display. These rectangles can be specified to respond to mouse and key events by either moving or resizing themselves accordingly. Trackers are typically used to represent window geometries in a lightweight manner.
Styles:
LEFT, RIGHT, UP, DOWN, RESIZE
Events:
Move, Resize
Note: Rectangle move behavior is assumed unless RESIZE is specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
Tracker snippets, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
Tracker(Composite parent,        int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.
Tracker(Display display,        int style)
Constructs a new instance of this class given the display to create it on and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addControlListener(ControlListener  listener)
Adds the listener to the collection of listeners who will be notified when the control is moved or resized, by sending it one of the messages defined in the ControlListener interface.
void    addKeyListener(KeyListener listener )
Adds the listener to the collection of listeners who will be notified when keys are pressed and released on the system keyboard, by sending it one of the messages defined in the KeyListener interface.
void    close()
Stops displaying the tracker rectangles.
Rectangle[] getRectangles()
Returns the bounds that are being drawn, expressed relative to the parent widget.
boolean getStippled()
Returns true if the rectangles are drawn with a stippled line, false otherwise.
boolean open()
Displays the Tracker rectangles for manipulation by the user.
void    removeControlListener(ControlListen er listener)
Removes the listener from the collection of listeners who will be notified when the control is moved or resized.
void    removeKeyListener(KeyListener liste ner)
Removes the listener from the collection of listeners who will be notified when keys are pressed and released on the system keyboard.
void    setCursor(Cursor newCursor)
Sets the Cursor of the Tracker.
void    setRectangles(Rectangle[] rectangle s)
Specifies the rectangles that should be drawn, expressed relative to the parent widget.
void    setStippled(boolean stippled)
Changes the appearance of the line used to draw the rectangles.

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

Tracker
public Tracker(Composite parent,
               int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a widget which will be the parent of the new instance (cannot be null)
style - the style of widget to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.LEFT, SWT.RIGHT, SWT.UP, SWT.DOWN, SWT.RESIZE, Widget.checkSubclass(), Widget.getStyle()

Tracker
public Tracker(Display display,
               int style)
Constructs a new instance of this class given the display to create it on and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Note: Currently, null can be passed in for the display argument. This has the effect of creating the tracker on the currently active display if there is one. If there is no current display, the tracker is created on a "default" display. Passing in null as the display argument is not considered to be good coding style, and may not be supported in a future release of SWT.
Parameters:
display - the display to create the tracker on
style - the style of control to construct
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.LEFT, SWT.RIGHT, SWT.UP, SWT.DOWN, SWT.RESIZE

Method Detail

addControlListener
public void addControlListener(ControlListener listener)
Adds the listener to the collection of listeners who will be notified when the control is moved or resized, by sending it one of the messages defined in the ControlListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ControlListener, removeControlListener(org.eclipse.swt.events.ControlListener)

addKeyListener
public void addKeyListener(KeyListener listener)
Adds the listener to the collection of listeners who will be notified when keys are pressed and released on the system keyboard, by sending it one of the messages defined in the KeyListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
KeyListener, removeKeyListener(org.eclipse.swt.events.KeyListener)

close
public void close()
Stops displaying the tracker rectangles. Note that this is not considered to be a cancelation by the user.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getRectangles
public Rectangle[] getRectangles()
Returns the bounds that are being drawn, expressed relative to the parent widget. If the parent is a Display then these are screen coordinates.
Returns:
the bounds of the Rectangles being drawn
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getStippled
public boolean getStippled()
Returns true if the rectangles are drawn with a stippled line, false otherwise.
Returns:
the stippled effect of the rectangles
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

open
public boolean open()
Displays the Tracker rectangles for manipulation by the user. Returns when the user has either finished manipulating the rectangles or has cancelled the Tracker.
Returns:
true if the user did not cancel the Tracker, false otherwise
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeControlListener
public void removeControlListener(ControlListener listener)
Removes the listener from the collection of listeners who will be notified when the control is moved or resized.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ControlListener, addControlListener(org.eclipse.swt.events.ControlListener)

removeKeyListener
public void removeKeyListener(KeyListener listener)
Removes the listener from the collection of listeners who will be notified when keys are pressed and released on the system keyboard.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
KeyListener, addKeyListener(org.eclipse.swt.events.KeyListener)

setCursor
public void setCursor(Cursor newCursor)
Sets the Cursor of the Tracker. If this cursor is null then the cursor reverts to the default.
Parameters:
newCursor - the new Cursor to display
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setRectangles
public void setRectangles(Rectangle[] rectangles)
Specifies the rectangles that should be drawn, expressed relative to the parent widget. If the parent is a Display then these are screen coordinates.
Parameters:
rectangles - the bounds of the rectangles to be drawn
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the set of rectangles is null or contains a null rectangle
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setStippled
public void setStippled(boolean stippled)
Changes the appearance of the line used to draw the rectangles.
Parameters:
stippled - true if rectangle should appear stippled
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.graphics
Class Transform
java.lang.Object
org.eclipse.swt.graphics.Resource
org.eclipse.swt.graphics.Transform


public class Transform extends Resource
Instances of this class represent transformation matrices for points expressed as (x, y) pairs of floating point numbers. Application code must explicitly invoke the Transform.dispose() method to release the operating system resources managed by each instance when those instances are no longer required.
This class requires the operating system's advanced graphics subsystem which may not be available on some platforms.
since. :
3.1
See Also:
SWT Example: GraphicsExample, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
long    handle
the OS resource for the Transform (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.

Constructor Summary
Constructors

Constructor and Description
Transform(Device device)
Constructs a new identity Transform.
Transform(Device device,          float[] elements)
Constructs a new Transform given an array of elements that represent the matrix that describes the transformation.
Transform(Device device,          float m11,          float m12,    float m21,          float m22,          float dx,          float dy)
Constructs a new Transform given all of the elements that represent the matrix that describes the transformation.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    getElements(float[] elements)
Fills the parameter with the values of the transformation matrix that the receiver represents, in the order {m11, m12, m21, m22, dx, dy}.
void    identity()
Modifies the receiver such that the matrix it represents becomes the identity matrix.
void    invert()
Modifies the receiver such that the matrix it represents becomes the mathematical inverse of the matrix it previously represented.
boolean isDisposed()
Returns true if the Transform has been disposed, and false otherwise.
boolean isIdentity()
Returns true if the Transform represents the identity matrix and false otherwise.
void    multiply(Transform matrix)
Modifies the receiver such that the matrix it represents becomes the the result of multiplying the matrix it previously represented by the argument.
void    rotate(float angle)
Modifies the receiver so that it represents a transformation that is equivalent to its previous transformation rotated by the specified angle.
void    scale(float scaleX,      float scal eY)
Modifies the receiver so that it represents a transformation that is equivalent to its previous transformation scaled by (scaleX, scaleY).
void    setElements(float m11,            f loat m12,            float m21,        float m22,            float d x,            float dy)
Modifies the receiver to represent a new transformation given all of the elements that represent the matrix that describes that transformation.
void    shear(float shearX,      float shea rY)
Modifies the receiver so that it represents a transformation that is equivalent to its previous transformation sheared by (shearX, shearY).
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.
void    transform(float[] pointArray)
Given an array containing points described by alternating x and y values, modify that array such that each point has been replaced with the result of applying the transformation represented by the receiver to that point.
void    translate(float offsetX,          f loat offsetY)
Modifies the receiver so that it represents a transformation that is equivalent to its previous transformation translated by (offsetX, offsetY).

Methods inherited from class org.eclipse.swt.graphics.Resource
dispose, getDevice

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

handle
public long handle
the OS resource for the Transform (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

Constructor Detail

Transform
public Transform(Device device)
Constructs a new identity Transform. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
You must dispose the transform when it is no longer required.
Parameters:
device - the device on which to allocate the Transform
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
SWTException -
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
SWTError -
ERROR_NO_HANDLES if a handle for the Transform could not be obtained
See Also:
Resource.dispose()

Transform
public Transform(Device device,
                 float[] elements)
Constructs a new Transform given an array of elements that represent the matrix that describes the transformation. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
You must dispose the transform when it is no longer required.
Parameters:
device - the device on which to allocate the Transform
elements - an array of floats that describe the transformation matrix
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device, or the elements array is null
ERROR_INVALID_ARGUMENT - if the elements array is too small to hold the matrix values
SWTException -
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
SWTError -
ERROR_NO_HANDLES if a handle for the Transform could not be obtained
See Also:
Resource.dispose()

Transform
public Transform(Device device,
                 float m11,
                 float m12,
                 float m21,
                 float m22,
                 float dx,
                 float dy)
Constructs a new Transform given all of the elements that represent the matrix that describes the transformation. This operation requires the operating system's advanced graphics subsystem which may not be available on some platforms.
You must dispose the transform when it is no longer required.
Parameters:
device - the device on which to allocate the Transform
m11 - the first element of the first row of the matrix
m12 - the second element of the first row of the matrix
m21 - the first element of the second row of the matrix
m22 - the second element of the second row of the matrix
dx - the third element of the first row of the matrix
dy - the third element of the second row of the matrix
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if device is null and there is no current device
SWTException -
ERROR_NO_GRAPHICS_LIBRARY - if advanced graphics are not available
SWTError -
ERROR_NO_HANDLES if a handle for the Transform could not be obtained
See Also:
Resource.dispose()

Method Detail

getElements
public void getElements(float[] elements)
Fills the parameter with the values of the transformation matrix that the receiver represents, in the order {m11, m12, m21, m22, dx, dy}.
Parameters:
elements - array to hold the matrix values
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parameter is null
ERROR_INVALID_ARGUMENT - if the parameter is too small to hold the matrix values

identity
public void identity()
Modifies the receiver such that the matrix it represents becomes the identity matrix.
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.4

invert
public void invert()
Modifies the receiver such that the matrix it represents becomes the mathematical inverse of the matrix it previously represented.
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
ERROR_CANNOT_INVERT_MATRIX - if the matrix is not invertible

isDisposed
public boolean isDisposed()
Returns true if the Transform has been disposed, and false otherwise. This method gets the dispose state for the Transform. When a Transform has been disposed, it is an error to invoke any other method (except Resource.dispose()) using the Transform.
Specified by:
isDisposed in class Resource
Returns:
true when the Transform is disposed, and false otherwise

isIdentity
public boolean isIdentity()
Returns true if the Transform represents the identity matrix and false otherwise.
Returns:
true if the receiver is an identity Transform, and false otherwise

multiply
public void multiply(Transform matrix)
Modifies the receiver such that the matrix it represents becomes the the result of multiplying the matrix it previously represented by the argument.
Parameters:
matrix - the matrix to multiply the receiver by
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parameter is null
ERROR_INVALID_ARGUMENT - if the parameter has been disposed

rotate
public void rotate(float angle)
Modifies the receiver so that it represents a transformation that is equivalent to its previous transformation rotated by the specified angle. The angle is specified in degrees and for the identity transform 0 degrees is at the 3 o'clock position. A positive value indicates a clockwise rotation while a negative value indicates a counter-clockwise rotation.
Parameters:
angle - the angle to rotate the transformation by
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

scale
public void scale(float scaleX,
                  float scaleY)
Modifies the receiver so that it represents a transformation that is equivalent to its previous transformation scaled by (scaleX, scaleY).
Parameters:
scaleX - the amount to scale in the X direction
scaleY - the amount to scale in the Y direction
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

setElements
public void setElements(float m11,
                        float m12,
                        float m21,
                        float m22,
                        float dx,
                        float dy)
Modifies the receiver to represent a new transformation given all of the elements that represent the matrix that describes that transformation.
Parameters:
m11 - the first element of the first row of the matrix
m12 - the second element of the first row of the matrix
m21 - the first element of the second row of the matrix
m22 - the second element of the second row of the matrix
dx - the third element of the first row of the matrix
dy - the third element of the second row of the matrix
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

shear
public void shear(float shearX,
                  float shearY)
Modifies the receiver so that it represents a transformation that is equivalent to its previous transformation sheared by (shearX, shearY).
Parameters:
shearX - the shear factor in the X direction
shearY - the shear factor in the Y direction
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed
since. :
3.4

transform
public void transform(float[] pointArray)
Given an array containing points described by alternating x and y values, modify that array such that each point has been replaced with the result of applying the transformation represented by the receiver to that point.
Parameters:
pointArray - an array of alternating x and y values to be transformed
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the point array is null
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

translate
public void translate(float offsetX,
                      float offsetY)
Modifies the receiver so that it represents a transformation that is equivalent to its previous transformation translated by (offsetX, offsetY).
Parameters:
offsetX - the distance to translate in the X direction
offsetY - the distance to translate in the Y direction
Throws:
SWTException -
ERROR_GRAPHIC_DISPOSED - if the receiver has been disposed

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the receiver


org.eclipse.swt.events
Class TraverseEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.KeyEvent
org.eclipse.swt.events.TraverseEvent
All Implemented Interfaces:
java.io.Serializable


public final class TraverseEvent extends KeyEvent
Instances of this class are sent as a result of widget traversal actions. The traversal event allows fine control over keyboard traversal in a control both to implement traversal and override the default traversal behavior defined by the system. This is achieved using two fields, detail and doit.
When a control is traversed, a traverse event is sent. The detail describes the type of traversal and the doit field indicates the default behavior of the system. For example, when a right arrow key is pressed in a text control, the detail field is TRAVERSE_ARROW_NEXT and the doit field is false, indicating that the system will not traverse to the next tab item and the arrow key will be delivered to the text control. If the same key is pressed in a radio button, the doit field will be true, indicating that traversal is to proceed to the next tab item, possibly another radio button in the group and that the arrow key is not to be delivered to the radio button.
How can the traversal event be used to implement traversal? When a tab key is pressed in a canvas, the detail field will be TRAVERSE_TAB_NEXT and the doit field will be false. The default behavior of the system is to provide no traversal for canvas controls. This means that by default in a canvas, a key listener will see every key that the user types, including traversal keys. To understand why this is so, it is important to understand that only the widget implementor can decide which traversal is appropriate for the widget. Returning to the TRAVERSE_TAB_NEXT example, a text widget implemented by a canvas would typically want to use the tab key to insert a tab character into the widget. A list widget implementation, on the other hand, would like the system default traversal behavior. Using only the doit flag, both implementations are possible. The text widget implementor sets doit to false, ensuring that the system will not traverse and that the tab key will be delivered to key listeners. The list widget implementor sets doit to true, indicating that the system should perform tab traversal and that the key should not be delivered to the list widget.
How can the traversal event be used to override system traversal? When the return key is pressed in a single line text control, the detail field is TRAVERSE_RETURN and the doit field is true. This means that the return key will be processed by the default button, not the text widget. If the text widget has a default selection listener, it will not run because the return key will be processed by the default button. Imagine that the text control is being used as an in-place editor and return is used to dispose the widget. Setting doit to false will stop the system from activating the default button but the key will be delivered to the text control, running the key and selection listeners for the text. How can TRAVERSE_RETURN be implemented so that the default button will not be activated and the text widget will not see the return key? This is achieved by setting doit to true, and the detail to TRAVERSE_NONE.
Note: A widget implementor will typically implement traversal using only the doit flag to either enable or disable system traversal.
See Also:
TraverseListener, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
int detail
The traversal type.

Fields inherited from class org.eclipse.swt.events.KeyEvent
character, doit, keyCode, keyLocation, stateMask

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
TraverseEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

detail
public int detail
The traversal type.
SWT.TRAVERSE_NONE
SWT.TRAVERSE_ESCAPE
SWT.TRAVERSE_RETURN
SWT.TRAVERSE_TAB_NEXT
SWT.TRAVERSE_TAB_PREVIOUS
SWT.TRAVERSE_ARROW_NEXT
SWT.TRAVERSE_ARROW_PREVIOUS
SWT.TRAVERSE_MNEMONIC
SWT.TRAVERSE_PAGE_NEXT
SWT.TRAVERSE_PAGE_PREVIOUS
Setting this field will change the type of traversal. For example, setting the detail to TRAVERSE_NONE causes no traversal action to be taken. When used in conjunction with the doit field, the traversal detail field can be useful when overriding the default traversal mechanism for a control. For example, setting the doit field to false will cancel the operation and allow the traversal key stroke to be delivered to the control. Setting the doit field to true indicates that the traversal described by the detail field is to be performed.

Constructor Detail

TraverseEvent
public TraverseEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class KeyEvent
Returns:
a string representation of the event


org.eclipse.swt.events
Interface TraverseListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
Functional Interface:
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.


@FunctionalInterface public interface TraverseListener extends SWTEventListener
Classes which implement this interface provide a method that deals with the events that are generated when a traverse event occurs in a control. After creating an instance of a class that implements this interface it can be added to a control using the addTraverseListener method and removed using the removeTraverseListener method. When a traverse event occurs in a control, the keyTraversed method will be invoked.
See Also:
TraverseEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    keyTraversed(TraverseEvent e)
Sent when a traverse event occurs in a control.

Method Detail

keyTraversed
void keyTraversed(TraverseEvent e)
Sent when a traverse event occurs in a control. A traverse event occurs when the user presses a traversal key. Traversal keys are typically tab and arrow keys, along with certain other keys on some platforms. Traversal key constants beginning with TRAVERSE_ are defined in the SWT class.
Parameters:
e - an event containing information about the traverse


org.eclipse.swt.widgets
Class Tray
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Tray


public class Tray extends Widget
Instances of this class represent the system tray that is part of the task bar status area on some operating systems.
Styles:
(none)
Events:
(none)
IMPORTANT: This class is not intended to be subclassed.
since. :
3.0
See Also:
Display.getSystemTray(), Tray, TrayItem snippets, Sample code and further information

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
TrayItem    getItem(int index)
Returns the item at the given, zero-relative index in the receiver.
int getItemCount()
Returns the number of items contained in the receiver.
TrayItem[]  getItems()
Returns an array of TrayItems which are the items in the receiver.

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkSubclass, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Method Detail

getItem
public TrayItem getItem(int index)
Returns the item at the given, zero-relative index in the receiver. Throws an exception if the index is out of range.
Parameters:
index - the index of the item to return
Returns:
the item at the given index
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItemCount
public int getItemCount()
Returns the number of items contained in the receiver.
Returns:
the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItems
public TrayItem[] getItems()
Returns an array of TrayItems which are the items in the receiver. Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the items in the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class TrayItem
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Item
org.eclipse.swt.widgets.TrayItem


public class TrayItem extends Item
Instances of this class represent icons that can be placed on the system tray or task bar status area.
Styles:
(none)
Events:
DefaultSelection, MenuDetect, Selection
IMPORTANT: This class is not intended to be subclassed.
since. :
3.0
See Also:
Tray, TrayItem snippets, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
TrayItem(Tray parent,         int style)
Constructs a new instance of this class given its parent (which must be a Tray) and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addMenuDetectListener(MenuDetectLis tener listener)
Adds the listener to the collection of listeners who will be notified when the platform-specific context menu trigger has occurred, by sending it one of the messages defined in the MenuDetectListener interface.
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the receiver is selected by the user, by sending it one of the messages defined in the SelectionListener interface.
protected void  checkSubclass()
Checks that this class can be subclassed.
Image   getHighlightImage()
Returns the receiver's highlight image if it has one, or null if it does not.
Tray    getParent()
Returns the receiver's parent, which must be a Tray.
ToolTip getToolTip()
Returns the receiver's tool tip, or null if it has not been set.
java.lang.String    getToolTipText()
Returns the receiver's tool tip text, or null if it has not been set.
boolean getVisible()
Returns true if the receiver is visible and false otherwise.
void    removeMenuDetectListener(MenuDetect Listener listener)
Removes the listener from the collection of listeners who will be notified when the platform-specific context menu trigger has occurred.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the receiver is selected by the user.
void    setHighlightImage(Image image)
Sets the receiver's highlight image.
void    setImage(Image image)
Sets the receiver's image.
void    setToolTip(ToolTip toolTip)
Sets the receiver's tool tip to the argument, which may be null indicating that no tool tip should be shown.
void    setToolTipText(java.lang.String str ing)
Sets the receiver's tool tip text to the argument, which may be null indicating that the default tool tip for the control will be shown.
void    setVisible(boolean visible)
Makes the receiver visible if the argument is true, and makes it invisible otherwise.

Methods inherited from class org.eclipse.swt.widgets.Item
getImage, getText, setText

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

TrayItem
public TrayItem(Tray parent,
                int style)
Constructs a new instance of this class given its parent (which must be a Tray) and a style value describing its behavior and appearance. The item is added to the end of the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the receiver is selected by the user, by sending it one of the messages defined in the SelectionListener interface. widgetSelected is called when the receiver is selected widgetDefaultSelected is called when the receiver is double-clicked
Parameters:
listener - the listener which should be notified when the receiver is selected by the user
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

addMenuDetectListener
public void addMenuDetectListener(MenuDetectListener listener)
Adds the listener to the collection of listeners who will be notified when the platform-specific context menu trigger has occurred, by sending it one of the messages defined in the MenuDetectListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3
See Also:
MenuDetectListener, removeMenuDetectListener(org.eclipse.swt.events.MenuDetectListener)

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Item

getHighlightImage
public Image getHighlightImage()
Returns the receiver's highlight image if it has one, or null if it does not.
Returns:
the receiver's highlight image
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.8

getParent
public Tray getParent()
Returns the receiver's parent, which must be a Tray.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

getToolTip
public ToolTip getToolTip()
Returns the receiver's tool tip, or null if it has not been set.
Returns:
the receiver's tool tip text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

getToolTipText
public java.lang.String getToolTipText()
Returns the receiver's tool tip text, or null if it has not been set.
Returns:
the receiver's tool tip text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getVisible
public boolean getVisible()
Returns true if the receiver is visible and false otherwise.
Returns:
the receiver's visibility
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the receiver is selected by the user.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

removeMenuDetectListener
public void removeMenuDetectListener(MenuDetectListener listener)
Removes the listener from the collection of listeners who will be notified when the platform-specific context menu trigger has occurred.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3
See Also:
MenuDetectListener, addMenuDetectListener(org.eclipse.swt.events.MenuDetectListener)

setHighlightImage
public void setHighlightImage(Image image)
Sets the receiver's highlight image.
Parameters:
image - the new highlight image
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the image has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.8

setImage
public void setImage(Image image)
Sets the receiver's image.
Overrides:
setImage in class Item
Parameters:
image - the new image
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the image has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setToolTip
public void setToolTip(ToolTip toolTip)
Sets the receiver's tool tip to the argument, which may be null indicating that no tool tip should be shown.
Parameters:
toolTip - the new tool tip (or null)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

setToolTipText
public void setToolTipText(java.lang.String string)
Sets the receiver's tool tip text to the argument, which may be null indicating that the default tool tip for the control will be shown. For a control that has a default tool tip, such as the Tree control on Windows, setting the tool tip text to an empty string replaces the default, causing no tool tip text to be shown. The mnemonic indicator (character '&') is not displayed in a tool tip. To display a single '&' in the tool tip, the character '&' can be escaped by doubling it in the string.
Parameters:
string - the new tool tip text (or null)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setVisible
public void setVisible(boolean visible)
Makes the receiver visible if the argument is true, and makes it invisible otherwise.
Parameters:
visible - the new visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.widgets
Class Tree
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Control
org.eclipse.swt.widgets.Scrollable
org.eclipse.swt.widgets.Composite
org.eclipse.swt.widgets.Tree
All Implemented Interfaces:
Drawable


public class Tree extends Composite
Instances of this class provide a selectable user interface object that displays a hierarchy of items and issues notification when an item in the hierarchy is selected. The item children that may be added to instances of this class must be of type TreeItem.
Style VIRTUAL is used to create a Tree whose TreeItems are to be populated by the client on an on-demand basis instead of up-front. This can provide significant performance improvements for trees that are very large or for which TreeItem population is expensive (for example, retrieving values from an external source).
Here is an example of using a Tree with style VIRTUAL: ``
  final Tree tree = new Tree(parent, SWT.VIRTUAL | SWT.BORDER);
  tree.setItemCount(20);
  tree.addListener(SWT.SetData, new Listener() {
      public void handleEvent(Event event) {
          TreeItem item = (TreeItem)event.item;
          TreeItem parentItem = item.getParentItem();
          String text = null;
          if (parentItem == null) {
              text = "node " + tree.indexOf(item);
          } else {
              text = parentItem.getText() + " - " + parentItem.indexOf(item);
          }
          item.setText(text);
          System.out.println(text);
          item.setItemCount(10);
      }
  });
Note that although this class is a subclass of Composite, it does not normally make sense to add Control children to it, or set a layout on it, unless implementing something like a cell editor.
Styles:
SINGLE, MULTI, CHECK, FULL_SELECTION, VIRTUAL, NO_SCROLL
Events:
Selection, DefaultSelection, Collapse, Expand, SetData, MeasureItem, EraseItem, PaintItem
Note: Only one of the styles SINGLE and MULTI may be specified.
IMPORTANT: This class is not intended to be subclassed.
See Also:
Tree, TreeItem, TreeColumn snippets, SWT Example: ControlExample, Sample code and further information

Field Summary

Fields inherited from class org.eclipse.swt.widgets.Control
handle

Constructor Summary
Constructors

Constructor and Description
Tree(Composite parent,     int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's selection, by sending it one of the messages defined in the SelectionListener interface.
void    addTreeListener(TreeListener listen er)
Adds the listener to the collection of listeners who will be notified when an item in the receiver is expanded or collapsed by sending it one of the messages defined in the TreeListener interface.
protected void  checkSubclass()
Checks that this class can be subclassed.
void    clear(int index,      boolean all)
Clears the item at the given zero-relative index in the receiver.
void    clearAll(boolean all)
Clears all the items in the receiver.
void    deselect(TreeItem item)
Deselects an item in the receiver.
void    deselectAll()
Deselects all selected items in the receiver.
TreeColumn  getColumn(int index)
Returns the column at the given, zero-relative index in the receiver.
int getColumnCount()
Returns the number of columns contained in the receiver.
int[]   getColumnOrder()
Returns an array of zero-relative integers that map the creation order of the receiver's items to the order in which they are currently being displayed.
TreeColumn[]    getColumns()
Returns an array of TreeColumns which are the columns in the receiver.
int getGridLineWidth()
Returns the width in pixels of a grid line.
int getHeaderHeight()
Returns the height of the receiver's header
boolean getHeaderVisible()
Returns true if the receiver's header is visible, and false otherwise.
TreeItem    getItem(int index)
Returns the item at the given, zero-relative index in the receiver.
int getItemCount()
Returns the number of items contained in the receiver that are direct item children of the receiver.
int getItemHeight()
Returns the height of the area which would be used to display one of the items in the tree.
TreeItem[]  getItems()
Returns a (possibly empty) array of items contained in the receiver that are direct item children of the receiver.
boolean getLinesVisible()
Returns true if the receiver's lines are visible, and false otherwise.
TreeItem    getParentItem()
Returns the receiver's parent item, which must be a TreeItem or null when the receiver is a root.
TreeItem[]  getSelection()
Returns an array of TreeItems that are currently selected in the receiver.
int getSelectionCount()
Returns the number of selected items contained in the receiver.
TreeColumn  getSortColumn()
Returns the column which shows the sort indicator for the receiver.
int getSortDirection()
Returns the direction of the sort indicator for the receiver.
TreeItem    getTopItem()
Returns the item which is currently at the top of the receiver.
int indexOf(TreeColumn column)
Searches the receiver's list starting at the first column (index 0) until a column is found that is equal to the argument, and returns the index of that column.
int indexOf(TreeItem item)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item.
void    removeAll()
Removes all of the items from the receiver.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's selection.
void    removeTreeListener(TreeListener lis tener)
Removes the listener from the collection of listeners who will be notified when items in the receiver are expanded or collapsed.
void    select(TreeItem item)
Selects an item in the receiver.
void    selectAll()
Selects all of the items in the receiver.
void    setColumnOrder(int[] order)
Sets the order that the items in the receiver should be displayed in to the given argument which is described in terms of the zero-relative ordering of when the items were added.
void    setFont(Font font)
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
void    setHeaderVisible(boolean show)
Marks the receiver's header as visible if the argument is true, and marks it invisible otherwise.
void    setInsertMark(TreeItem item,        boolean before)
Display a mark indicating the point at which an item will be inserted.
void    setItemCount(int count)
Sets the number of root-level items contained in the receiver.
void    setLinesVisible(boolean show)
Marks the receiver's lines as visible if the argument is true, and marks it invisible otherwise.
void    setRedraw(boolean redraw)
If the argument is false, causes subsequent drawing operations in the receiver to be ignored.
void    setSelection(TreeItem item)
Sets the receiver's selection to the given item.
void    setSelection(TreeItem[] items)
Sets the receiver's selection to be the given array of items.
void    setSortColumn(TreeColumn column)
Sets the column used by the sort indicator for the receiver.
void    setSortDirection(int direction)
Sets the direction of the sort indicator for the receiver.
void    setTopItem(TreeItem item)
Sets the item which is currently at the top of the receiver.
void    showColumn(TreeColumn column)
Shows the column.
void    showItem(TreeItem item)
Shows the item.
void    showSelection()
Shows the selection.

Methods inherited from class org.eclipse.swt.widgets.Composite
changed, drawBackground, getBackgroundMode, getChildren, getLayout, getLayoutDeferred, getTabList, isLayoutDeferred, layout, layout, layout, layout, layout, setBackgroundMode, setFocus, setLayout, setLayoutDeferred, setTabList

Methods inherited from class org.eclipse.swt.widgets.Scrollable
computeTrim, getClientArea, getHorizontalBar, getScrollbarsMode, getVerticalBar

Methods inherited from class org.eclipse.swt.widgets.Control
addControlListener, addDragDetectListener, addFocusListener, addGestureListener, addHelpListener, addKeyListener, addMenuDetectListener, addMouseListener, addMouseMoveListener, addMouseTrackListener, addMouseWheelListener, addPaintListener, addTouchListener, addTraverseListener, computeSize, computeSize, dragDetect, dragDetect, forceFocus, getAccessible, getBackground, getBackgroundImage, getBorderWidth, getBounds, getCursor, getDragDetect, getEnabled, getFont, getForeground, getLayoutData, getLocation, getMenu, getMonitor, getOrientation, getParent, getRegion, getShell, getSize, getTextDirection, getToolTipText, getTouchEnabled, getVisible, internal_dispose_GC, internal_new_GC, isEnabled, isFocusControl, isReparentable, isVisible, moveAbove, moveBelow, pack, pack, print, redraw, redraw, removeControlListener, removeDragDetectListener, removeFocusListener, removeGestureListener, removeHelpListener, removeKeyListener, removeMenuDetectListener, removeMouseListener, removeMouseMoveListener, removeMouseTrackListener, removeMouseWheelListener, removePaintListener, removeTouchListener, removeTraverseListener, requestLayout, setBackground, setBackgroundImage, setBounds, setBounds, setCapture, setCursor, setDragDetect, setEnabled, setForeground, setLayoutData, setLocation, setLocation, setMenu, setOrientation, setParent, setRegion, setSize, setSize, setTextDirection, setToolTipText, setTouchEnabled, setVisible, toControl, toControl, toDisplay, toDisplay, traverse, traverse, traverse, update

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Methods inherited from interface org.eclipse.swt.graphics.Drawable
isAutoScalable

Constructor Detail

Tree
public Tree(Composite parent,
            int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.SINGLE, SWT.MULTI, SWT.CHECK, SWT.FULL_SELECTION, SWT.VIRTUAL, SWT.NO_SCROLL, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the user changes the receiver's selection, by sending it one of the messages defined in the SelectionListener interface. When widgetSelected is called, the item field of the event object is valid. If the receiver has the SWT.CHECK style and the check selection changes, the event object detail field contains the value SWT.CHECK. widgetDefaultSelected is typically called when an item is double-clicked. The item field of the event object is valid for default selection, but the detail field is not used.
Parameters:
listener - the listener which should be notified when the user changes the receiver's selection
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

addTreeListener
public void addTreeListener(TreeListener listener)
Adds the listener to the collection of listeners who will be notified when an item in the receiver is expanded or collapsed by sending it one of the messages defined in the TreeListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
TreeListener, removeTreeListener(org.eclipse.swt.events.TreeListener)

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Composite

clear
public void clear(int index,
                  boolean all)
Clears the item at the given zero-relative index in the receiver. The text, icon and other attributes of the item are set to the default value. If the tree was created with the SWT.VIRTUAL style, these attributes are requested again as needed.
Parameters:
index - the index of the item to clear
all - true if all child items of the indexed item should be cleared recursively, and false otherwise
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2
See Also:
SWT.VIRTUAL, SWT.SetData

clearAll
public void clearAll(boolean all)
Clears all the items in the receiver. The text, icon and other attributes of the items are set to their default values. If the tree was created with the SWT.VIRTUAL style, these attributes are requested again as needed.
Parameters:
all - true if all child items should be cleared recursively, and false otherwise
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2
See Also:
SWT.VIRTUAL, SWT.SetData

deselect
public void deselect(TreeItem item)
Deselects an item in the receiver. If the item was already deselected, it remains deselected.
Parameters:
item - the item to be deselected
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
ERROR_INVALID_ARGUMENT - if the item has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

deselectAll
public void deselectAll()
Deselects all selected items in the receiver.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getGridLineWidth
public int getGridLineWidth()
Returns the width in pixels of a grid line.
Returns:
the width of a grid line in pixels
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

getHeaderHeight
public int getHeaderHeight()
Returns the height of the receiver's header
Returns:
the height of the header or zero if the header is not visible
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

getHeaderVisible
public boolean getHeaderVisible()
Returns true if the receiver's header is visible, and false otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, this method may still indicate that it is considered visible even though it may not actually be showing.
Returns:
the receiver's header's visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

getColumn
public TreeColumn getColumn(int index)
Returns the column at the given, zero-relative index in the receiver. Throws an exception if the index is out of range. Columns are returned in the order that they were created. If no TreeColumns were created by the programmer, this method will throw ERROR_INVALID_RANGE despite the fact that a single column of data may be visible in the tree. This occurs when the programmer uses the tree like a list, adding items but never creating a column.
Parameters:
index - the index of the column to return
Returns:
the column at the given index
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1
See Also:
getColumnOrder(), setColumnOrder(int[]), TreeColumn.getMoveable(), TreeColumn.setMoveable(boolean), SWT.Move

getColumnCount
public int getColumnCount()
Returns the number of columns contained in the receiver. If no TreeColumns were created by the programmer, this value is zero, despite the fact that visually, one column of items may be visible. This occurs when the programmer uses the tree like a list, adding items but never creating a column.
Returns:
the number of columns
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

getColumnOrder
public int[] getColumnOrder()
Returns an array of zero-relative integers that map the creation order of the receiver's items to the order in which they are currently being displayed. Specifically, the indices of the returned array represent the current visual order of the items, and the contents of the array represent the creation order of the items.
Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the current visual order of the receiver's items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2
See Also:
setColumnOrder(int[]), TreeColumn.getMoveable(), TreeColumn.setMoveable(boolean), SWT.Move

getColumns
public TreeColumn[] getColumns()
Returns an array of TreeColumns which are the columns in the receiver. Columns are returned in the order that they were created. If no TreeColumns were created by the programmer, the array is empty, despite the fact that visually, one column of items may be visible. This occurs when the programmer uses the tree like a list, adding items but never creating a column. Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the items in the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1
See Also:
getColumnOrder(), setColumnOrder(int[]), TreeColumn.getMoveable(), TreeColumn.setMoveable(boolean), SWT.Move

getItem
public TreeItem getItem(int index)
Returns the item at the given, zero-relative index in the receiver. Throws an exception if the index is out of range.
Parameters:
index - the index of the item to return
Returns:
the item at the given index
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

getItemCount
public int getItemCount()
Returns the number of items contained in the receiver that are direct item children of the receiver. The number that is returned is the number of roots in the tree.
Returns:
the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItemHeight
public int getItemHeight()
Returns the height of the area which would be used to display one of the items in the tree.
Returns:
the height of one item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItems
public TreeItem[] getItems()
Returns a (possibly empty) array of items contained in the receiver that are direct item children of the receiver. These are the roots of the tree. Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getLinesVisible
public boolean getLinesVisible()
Returns true if the receiver's lines are visible, and false otherwise. Note that some platforms draw grid lines while others may draw alternating row colors. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, this method may still indicate that it is considered visible even though it may not actually be showing.
Returns:
the visibility state of the lines
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

getParentItem
public TreeItem getParentItem()
Returns the receiver's parent item, which must be a TreeItem or null when the receiver is a root.
Returns:
the receiver's parent item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelection
public TreeItem[] getSelection()
Returns an array of TreeItems that are currently selected in the receiver. The order of the items is unspecified. An empty array indicates that no items are selected. Note: This is not the actual structure used by the receiver to maintain its selection, so modifying the array will not affect the receiver.
Returns:
an array representing the selection
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSelectionCount
public int getSelectionCount()
Returns the number of selected items contained in the receiver.
Returns:
the number of selected items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getSortColumn
public TreeColumn getSortColumn()
Returns the column which shows the sort indicator for the receiver. The value may be null if no column shows the sort indicator.
Returns:
the sort indicator
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2
See Also:
setSortColumn(TreeColumn)

getSortDirection
public int getSortDirection()
Returns the direction of the sort indicator for the receiver. The value will be one of UP, DOWN or NONE.
Returns:
the sort direction
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2
See Also:
setSortDirection(int)

getTopItem
public TreeItem getTopItem()
Returns the item which is currently at the top of the receiver. This item can change when items are expanded, collapsed, scrolled or new items are added or removed.
Returns:
the item at the top of the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.1

indexOf
public int indexOf(TreeColumn column)
Searches the receiver's list starting at the first column (index 0) until a column is found that is equal to the argument, and returns the index of that column. If no column is found, returns -1.
Parameters:
column - the search column
Returns:
the index of the column
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the column is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

indexOf
public int indexOf(TreeItem item)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item. If no item is found, returns -1.
Parameters:
item - the search item
Returns:
the index of the item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
ERROR_INVALID_ARGUMENT - if the item has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

removeAll
public void removeAll()
Removes all of the items from the receiver.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the user changes the receiver's selection.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

removeTreeListener
public void removeTreeListener(TreeListener listener)
Removes the listener from the collection of listeners who will be notified when items in the receiver are expanded or collapsed.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
TreeListener, addTreeListener(org.eclipse.swt.events.TreeListener)

setInsertMark
public void setInsertMark(TreeItem item,
                          boolean before)
Display a mark indicating the point at which an item will be inserted. The drop insert item has a visual hint to show where a dragged item will be inserted when dropped on the tree.
Parameters:
item - the insert item. Null will clear the insertion mark.
before - true places the insert mark above 'item'. false places the insert mark below 'item'.
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the item has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setItemCount
public void setItemCount(int count)
Sets the number of root-level items contained in the receiver.
Parameters:
count - the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

setLinesVisible
public void setLinesVisible(boolean show)
Marks the receiver's lines as visible if the argument is true, and marks it invisible otherwise. Note that some platforms draw grid lines while others may draw alternating row colors. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, marking it visible may not actually cause it to be displayed.
Parameters:
show - the new visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

select
public void select(TreeItem item)
Selects an item in the receiver. If the item was already selected, it remains selected.
Parameters:
item - the item to be selected
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
ERROR_INVALID_ARGUMENT - if the item has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4

selectAll
public void selectAll()
Selects all of the items in the receiver. If the receiver is single-select, do nothing.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setColumnOrder
public void setColumnOrder(int[] order)
Sets the order that the items in the receiver should be displayed in to the given argument which is described in terms of the zero-relative ordering of when the items were added.
Parameters:
order - the new order to display the items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item order is null
ERROR_INVALID_ARGUMENT - if the item order is not the same length as the number of items
since. :
3.2
See Also:
getColumnOrder(), TreeColumn.getMoveable(), TreeColumn.setMoveable(boolean), SWT.Move

setFont
public void setFont(Font font)
Description copied from class: Control
Sets the font that the receiver will use to paint textual information to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Overrides:
setFont in class Control
Parameters:
font - the new font (or null)

setHeaderVisible
public void setHeaderVisible(boolean show)
Marks the receiver's header as visible if the argument is true, and marks it invisible otherwise. If one of the receiver's ancestors is not visible or some other condition makes the receiver not visible, marking it visible may not actually cause it to be displayed.
Parameters:
show - the new visibility state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

setRedraw
public void setRedraw(boolean redraw)
Description copied from class: Control
If the argument is false, causes subsequent drawing operations in the receiver to be ignored. No drawing of any kind can occur in the receiver until the flag is set to true. Graphics operations that occurred while the flag was false are lost. When the flag is set to true, the entire widget is marked as needing to be redrawn. Nested calls to this method are stacked. Note: This operation is a hint and may not be supported on some platforms or for some widgets.
Overrides:
setRedraw in class Control
Parameters:
redraw - the new redraw state
See Also:
Control.redraw(int, int, int, int, boolean), Control.update()

setSelection
public void setSelection(TreeItem item)
Sets the receiver's selection to the given item. The current selection is cleared before the new item is selected, and if necessary the receiver is scrolled to make the new selection visible. If the item is not in the receiver, then it is ignored.
Parameters:
item - the item to select
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
ERROR_INVALID_ARGUMENT - if the item has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

setSelection
public void setSelection(TreeItem[] items)
Sets the receiver's selection to be the given array of items. The current selection is cleared before the new items are selected, and if necessary the receiver is scrolled to make the new selection visible. Items that are not in the receiver are ignored. If the receiver is single-select and multiple items are specified, then all items are ignored.
Parameters:
items - the array of items
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the array of items is null
ERROR_INVALID_ARGUMENT - if one of the items has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
deselectAll()

setSortColumn
public void setSortColumn(TreeColumn column)
Sets the column used by the sort indicator for the receiver. A null value will clear the sort indicator. The current sort column is cleared before the new column is set.
Parameters:
column - the column used by the sort indicator or null
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the column is disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

setSortDirection
public void setSortDirection(int direction)
Sets the direction of the sort indicator for the receiver. The value can be one of UP, DOWN or NONE.
Parameters:
direction - the direction of the sort indicator
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

setTopItem
public void setTopItem(TreeItem item)
Sets the item which is currently at the top of the receiver. This item can change when items are expanded, collapsed, scrolled or new items are added or removed.
Parameters:
item - the item to be shown
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
ERROR_INVALID_ARGUMENT - if the item has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.1
See Also:
getTopItem()

showColumn
public void showColumn(TreeColumn column)
Shows the column. If the column is already showing in the receiver, this method simply returns. Otherwise, the columns are scrolled until the column is visible.
Parameters:
column - the column to be shown
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
ERROR_INVALID_ARGUMENT - if the item has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

showItem
public void showItem(TreeItem item)
Shows the item. If the item is already showing in the receiver, this method simply returns. Otherwise, the items are scrolled and expanded until the item is visible.
Parameters:
item - the item to be shown
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
ERROR_INVALID_ARGUMENT - if the item has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
showSelection()

showSelection
public void showSelection()
Shows the selection. If the selection is already showing in the receiver, this method simply returns. Otherwise, the items are scrolled until the selection is visible.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
showItem(TreeItem)


org.eclipse.swt.events
Class TreeAdapter
java.lang.Object
org.eclipse.swt.events.TreeAdapter
All Implemented Interfaces:
java.util.EventListener, TreeListener, SWTEventListener


public abstract class TreeAdapter extends java.lang.Object implements TreeListener
This adapter class provides default implementations for the methods described by the TreeListener interface. Classes that wish to deal with TreeEvents can extend this class and override only the methods which they are interested in.
See Also:
TreeListener, TreeEvent, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
TreeAdapter()

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    treeCollapsed(TreeEvent e)
Sent when a tree branch is collapsed.
void    treeExpanded(TreeEvent e)
Sent when a tree branch is expanded.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

TreeAdapter
public TreeAdapter()

Method Detail

treeCollapsed
public void treeCollapsed(TreeEvent e)
Sent when a tree branch is collapsed. The default behavior is to do nothing.
Specified by:
treeCollapsed in interface TreeListener
Parameters:
e - an event containing information about the tree operation

treeExpanded
public void treeExpanded(TreeEvent e)
Sent when a tree branch is expanded. The default behavior is to do nothing.
Specified by:
treeExpanded in interface TreeListener
Parameters:
e - an event containing information about the tree operation


org.eclipse.swt.widgets
Class TreeColumn
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Item
org.eclipse.swt.widgets.TreeColumn


public class TreeColumn extends Item
Instances of this class represent a column in a tree widget.
Styles:
LEFT, RIGHT, CENTER
Events:
Move, Resize, Selection
Note: Only one of the styles LEFT, RIGHT and CENTER may be specified.
IMPORTANT: This class is not intended to be subclassed.
since. :
3.1
See Also:
Tree, TreeItem, TreeColumn snippets, Sample code and further information

Constructor Summary
Constructors

Constructor and Description
TreeColumn(Tree parent,           int style)
Constructs a new instance of this class given its parent (which must be a Tree) and a style value describing its behavior and appearance.
TreeColumn(Tree parent,           int style,           int index)
Constructs a new instance of this class given its parent (which must be a Tree), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addControlListener(ControlListener  listener)
Adds the listener to the collection of listeners who will be notified when the control is moved or resized, by sending it one of the messages defined in the ControlListener interface.
void    addSelectionListener(SelectionListe ner listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface.
protected void  checkSubclass()
Checks that this class can be subclassed.
int getAlignment()
Returns a value which describes the position of the text or image in the receiver.
boolean getMoveable()
Gets the moveable attribute.
Tree    getParent()
Returns the receiver's parent, which must be a Tree.
boolean getResizable()
Gets the resizable attribute.
java.lang.String    getToolTipText()
Returns the receiver's tool tip text, or null if it has not been set.
int getWidth()
Gets the width of the receiver.
void    pack()
Causes the receiver to be resized to its preferred size.
void    removeControlListener(ControlListen er listener)
Removes the listener from the collection of listeners who will be notified when the control is moved or resized.
void    removeSelectionListener(SelectionLi stener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
void    setAlignment(int alignment)
Controls how text and images will be displayed in the receiver.
void    setImage(Image image)
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
void    setMoveable(boolean moveable)
Sets the moveable attribute.
void    setResizable(boolean resizable)
Sets the resizable attribute.
void    setText(java.lang.String string)
Sets the receiver's text.
void    setToolTipText(java.lang.String str ing)
Sets the receiver's tool tip text to the argument, which may be null indicating that the default tool tip for the control will be shown.
void    setWidth(int width)
Sets the width of the receiver.

Methods inherited from class org.eclipse.swt.widgets.Item
getImage, getText

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

TreeColumn
public TreeColumn(Tree parent,
                  int style)
Constructs a new instance of this class given its parent (which must be a Tree) and a style value describing its behavior and appearance. The item is added to the end of the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.LEFT, SWT.RIGHT, SWT.CENTER, Widget.checkSubclass(), Widget.getStyle()

TreeColumn
public TreeColumn(Tree parent,
                  int style,
                  int index)
Constructs a new instance of this class given its parent (which must be a Tree), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Note that due to a restriction on some platforms, the first column is always left aligned.
Parameters:
parent - a composite control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
index - the zero-relative index to store the receiver in its parent
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT.LEFT, SWT.RIGHT, SWT.CENTER, Widget.checkSubclass(), Widget.getStyle()

Method Detail

addControlListener
public void addControlListener(ControlListener listener)
Adds the listener to the collection of listeners who will be notified when the control is moved or resized, by sending it one of the messages defined in the ControlListener interface.
Parameters:
listener - the listener which should be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ControlListener, removeControlListener(org.eclipse.swt.events.ControlListener)

addSelectionListener
public void addSelectionListener(SelectionListener listener)
Adds the listener to the collection of listeners who will be notified when the control is selected by the user, by sending it one of the messages defined in the SelectionListener interface. widgetSelected is called when the column header is selected. widgetDefaultSelected is not called.
Parameters:
listener - the listener which should be notified when the control is selected by the user
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, removeSelectionListener(org.eclipse.swt.events.SelectionListener), SelectionEvent

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Item

getAlignment
public int getAlignment()
Returns a value which describes the position of the text or image in the receiver. The value will be one of LEFT, RIGHT or CENTER.
Returns:
the alignment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getMoveable
public boolean getMoveable()
Gets the moveable attribute. A column that is not moveable cannot be reordered by the user by dragging the header but may be reordered by the programmer.
Returns:
the moveable attribute
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2
See Also:
Tree.getColumnOrder(), Tree.setColumnOrder(int[]), setMoveable(boolean), SWT.Move

getParent
public Tree getParent()
Returns the receiver's parent, which must be a Tree.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getResizable
public boolean getResizable()
Gets the resizable attribute. A column that is not resizable cannot be dragged by the user but may be resized by the programmer.
Returns:
the resizable attribute
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getToolTipText
public java.lang.String getToolTipText()
Returns the receiver's tool tip text, or null if it has not been set.
Returns:
the receiver's tool tip text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

getWidth
public int getWidth()
Gets the width of the receiver.
Returns:
the width
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

pack
public void pack()
Causes the receiver to be resized to its preferred size. For a composite, this involves computing the preferred size from its layout, if there is one.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

removeControlListener
public void removeControlListener(ControlListener listener)
Removes the listener from the collection of listeners who will be notified when the control is moved or resized.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
ControlListener, addControlListener(org.eclipse.swt.events.ControlListener)

removeSelectionListener
public void removeSelectionListener(SelectionListener listener)
Removes the listener from the collection of listeners who will be notified when the control is selected by the user.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SelectionListener, addSelectionListener(org.eclipse.swt.events.SelectionListener)

setAlignment
public void setAlignment(int alignment)
Controls how text and images will be displayed in the receiver. The argument should be one of LEFT, RIGHT or CENTER. Note that due to a restriction on some platforms, the first column is always left aligned.
Parameters:
alignment - the new alignment
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setImage
public void setImage(Image image)
Description copied from class: Item
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
Overrides:
setImage in class Item
Parameters:
image - the image to display on the receiver (may be null)

setMoveable
public void setMoveable(boolean moveable)
Sets the moveable attribute. A column that is moveable can be reordered by the user by dragging the header. A column that is not moveable cannot be dragged by the user but may be reordered by the programmer.
Parameters:
moveable - the moveable attribute
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2
See Also:
Tree.setColumnOrder(int[]), Tree.getColumnOrder(), getMoveable(), SWT.Move

setResizable
public void setResizable(boolean resizable)
Sets the resizable attribute. A column that is not resizable cannot be dragged by the user but may be resized by the programmer.
Parameters:
resizable - the resize attribute
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setText
public void setText(java.lang.String string)
Description copied from class: Item
Sets the receiver's text. Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Overrides:
setText in class Item
Parameters:
string - the new text

setToolTipText
public void setToolTipText(java.lang.String string)
Sets the receiver's tool tip text to the argument, which may be null indicating that the default tool tip for the control will be shown. For a control that has a default tool tip, such as the Tree control on Windows, setting the tool tip text to an empty string replaces the default, causing no tool tip text to be shown. The mnemonic indicator (character '&') is not displayed in a tool tip. To display a single '&' in the tool tip, the character '&' can be escaped by doubling it in the string.
Parameters:
string - the new tool tip text (or null)
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

setWidth
public void setWidth(int width)
Sets the width of the receiver.
Parameters:
width - the new width
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver


org.eclipse.swt.events
Class TreeEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.SelectionEvent
org.eclipse.swt.events.TreeEvent
All Implemented Interfaces:
java.io.Serializable


public final class TreeEvent extends SelectionEvent
Instances of this class are sent as a result of trees being expanded and collapsed.
See Also:
TreeListener, Sample code and further information, Serialized Form

Field Summary

Fields inherited from class org.eclipse.swt.events.SelectionEvent
detail, doit, height, item, stateMask, text, width, x, y

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
TreeEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary

Methods inherited from class org.eclipse.swt.events.SelectionEvent
toString

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

TreeEvent
public TreeEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information


org.eclipse.swt.widgets
Class TreeItem
java.lang.Object
org.eclipse.swt.widgets.Widget
org.eclipse.swt.widgets.Item
org.eclipse.swt.widgets.TreeItem


public class TreeItem extends Item
Instances of this class represent a selectable user interface object that represents a hierarchy of tree items in a tree widget.
Styles:
(none)
Events:
(none)
IMPORTANT: This class is not intended to be subclassed.
See Also:
Tree, TreeItem, TreeColumn snippets, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
long    handle
the handle to the OS resource (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API.

Constructor Summary
Constructors

Constructor and Description
TreeItem(Tree parent,         int style)
Constructs a new instance of this class given its parent (which must be a Tree or a TreeItem) and a style value describing its behavior and appearance.
TreeItem(Tree parent,         int style,         int index)
Constructs a new instance of this class given its parent (which must be a Tree or a TreeItem), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent.
TreeItem(TreeItem parentItem,         int style)
Constructs a new instance of this class given its parent (which must be a Tree or a TreeItem) and a style value describing its behavior and appearance.
TreeItem(TreeItem parentItem,         int style,         int index)
Constructs a new instance of this class given its parent (which must be a Tree or a TreeItem), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
protected void  checkSubclass()
Checks that this class can be subclassed.
void    clear(int index,      boolean all)
Clears the item at the given zero-relative index in the receiver.
void    clearAll(boolean all)
Clears all the items in the receiver.
Color   getBackground()
Returns the receiver's background color.
Color   getBackground(int index)
Returns the background color at the given column index in the receiver.
Rectangle   getBounds()
Returns a rectangle describing the size and location of the receiver's text relative to its parent.
Rectangle   getBounds(int index)
Returns a rectangle describing the receiver's size and location relative to its parent at a column in the tree.
boolean getChecked()
Returns true if the receiver is checked, and false otherwise.
boolean getExpanded()
Returns true if the receiver is expanded, and false otherwise.
Font    getFont()
Returns the font that the receiver will use to paint textual information for this item.
Font    getFont(int index)
Returns the font that the receiver will use to paint textual information for the specified cell in this item.
Color   getForeground()
Returns the foreground color that the receiver will use to draw.
Color   getForeground(int index)
Returns the foreground color at the given column index in the receiver.
boolean getGrayed()
Returns true if the receiver is grayed, and false otherwise.
Image   getImage()
Returns the receiver's image if it has one, or null if it does not.
Image   getImage(int index)
Returns the image stored at the given column index in the receiver, or null if the image has not been set or if the column does not exist.
Rectangle   getImageBounds(int index)
Returns a rectangle describing the size and location relative to its parent of an image at a column in the tree.
TreeItem    getItem(int index)
Returns the item at the given, zero-relative index in the receiver.
int getItemCount()
Returns the number of items contained in the receiver that are direct item children of the receiver.
TreeItem[]  getItems()
Returns a (possibly empty) array of TreeItems which are the direct item children of the receiver.
Tree    getParent()
Returns the receiver's parent, which must be a Tree.
TreeItem    getParentItem()
Returns the receiver's parent item, which must be a TreeItem or null when the receiver is a root.
java.lang.String    getText()
Returns the receiver's text, which will be an empty string if it has never been set.
java.lang.String    getText(int index)
Returns the text stored at the given column index in the receiver, or empty string if the text has not been set.
Rectangle   getTextBounds(int index)
Returns a rectangle describing the size and location relative to its parent of the text at a column in the tree.
int indexOf(TreeItem item)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item.
void    removeAll()
Removes all of the items from the receiver.
void    setBackground(Color color)
Sets the receiver's background color to the color specified by the argument, or to the default system color for the item if the argument is null.
void    setBackground(int index,    Color color)
Sets the background color at the given column index in the receiver to the color specified by the argument, or to the default system color for the item if the argument is null.
void    setChecked(boolean checked)
Sets the checked state of the receiver.
void    setExpanded(boolean expanded)
Sets the expanded state of the receiver.
void    setFont(Font font)
Sets the font that the receiver will use to paint textual information for this item to the font specified by the argument, or to the default font for that kind of control if the argument is null.
void    setFont(int index,        Font font )
Sets the font that the receiver will use to paint textual information for the specified cell in this item to the font specified by the argument, or to the default font for that kind of control if the argument is null.
void    setForeground(Color color)
Sets the receiver's foreground color to the color specified by the argument, or to the default system color for the item if the argument is null.
void    setForeground(int index,    Color color)
Sets the foreground color at the given column index in the receiver to the color specified by the argument, or to the default system color for the item if the argument is null.
void    setGrayed(boolean grayed)
Sets the grayed state of the checkbox for this item.
void    setImage(Image image)
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
void    setImage(Image[] images)
Sets the image for multiple columns in the tree.
void    setImage(int index,         Image i mage)
Sets the receiver's image at a column.
void    setItemCount(int count)
Sets the number of child items contained in the receiver.
void    setText(int index,        java.lang .String string)
Sets the receiver's text at a column Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
void    setText(java.lang.String string)
Sets the receiver's text.
void    setText(java.lang.String[] strings)
Sets the text for multiple columns in the tree.

Methods inherited from class org.eclipse.swt.widgets.Widget
addDisposeListener, addListener, checkWidget, dispose, getData, getData, getDisplay, getListeners, getStyle, isAutoDirection, isDisposed, isListening, notifyListeners, removeDisposeListener, removeListener, removeListener, reskin, setData, setData, toString

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

handle
public long handle
the handle to the OS resource (Warning: This field is platform dependent) IMPORTANT: This field is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It is not available on all platforms and should never be accessed from application code.

Constructor Detail

TreeItem
public TreeItem(Tree parent,
                int style)
Constructs a new instance of this class given its parent (which must be a Tree or a TreeItem) and a style value describing its behavior and appearance. The item is added to the end of the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a tree control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT, Widget.checkSubclass(), Widget.getStyle()

TreeItem
public TreeItem(Tree parent,
                int style,
                int index)
Constructs a new instance of this class given its parent (which must be a Tree or a TreeItem), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a tree control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
index - the zero-relative index to store the receiver in its parent
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT, Widget.checkSubclass(), Widget.getStyle()

TreeItem
public TreeItem(TreeItem parentItem,
                int style)
Constructs a new instance of this class given its parent (which must be a Tree or a TreeItem) and a style value describing its behavior and appearance. The item is added to the end of the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parentItem - a tree control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT, Widget.checkSubclass(), Widget.getStyle()

TreeItem
public TreeItem(TreeItem parentItem,
                int style,
                int index)
Constructs a new instance of this class given its parent (which must be a Tree or a TreeItem), a style value describing its behavior and appearance, and the index at which to place it in the items maintained by its parent. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parentItem - a tree control which will be the parent of the new instance (cannot be null)
style - the style of control to construct
index - the zero-relative index to store the receiver in its parent
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the parent (inclusive)
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT, Widget.checkSubclass(), Widget.getStyle()

Method Detail

checkSubclass
protected void checkSubclass()
Description copied from class: Widget
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Overrides:
checkSubclass in class Item

clear
public void clear(int index,
                  boolean all)
Clears the item at the given zero-relative index in the receiver. The text, icon and other attributes of the item are set to the default value. If the tree was created with the SWT.VIRTUAL style, these attributes are requested again as needed.
Parameters:
index - the index of the item to clear
all - true if all child items of the indexed item should be cleared recursively, and false otherwise
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2
See Also:
SWT.VIRTUAL, SWT.SetData

clearAll
public void clearAll(boolean all)
Clears all the items in the receiver. The text, icon and other attributes of the items are set to their default values. If the tree was created with the SWT.VIRTUAL style, these attributes are requested again as needed.
Parameters:
all - true if all child items should be cleared recursively, and false otherwise
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2
See Also:
SWT.VIRTUAL, SWT.SetData

getBackground
public Color getBackground()
Returns the receiver's background color.
Returns:
the background color
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0

getBackground
public Color getBackground(int index)
Returns the background color at the given column index in the receiver.
Parameters:
index - the column index
Returns:
the background color
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

getBounds
public Rectangle getBounds()
Returns a rectangle describing the size and location of the receiver's text relative to its parent.
Returns:
the bounding rectangle of the receiver's text
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getBounds
public Rectangle getBounds(int index)
Returns a rectangle describing the receiver's size and location relative to its parent at a column in the tree.
Parameters:
index - the index that specifies the column
Returns:
the receiver's bounding column rectangle
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

getChecked
public boolean getChecked()
Returns true if the receiver is checked, and false otherwise. When the parent does not have the CHECK style, return false.
Returns:
the checked state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getExpanded
public boolean getExpanded()
Returns true if the receiver is expanded, and false otherwise.
Returns:
the expanded state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getFont
public Font getFont()
Returns the font that the receiver will use to paint textual information for this item.
Returns:
the receiver's font
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

getFont
public Font getFont(int index)
Returns the font that the receiver will use to paint textual information for the specified cell in this item.
Parameters:
index - the column index
Returns:
the receiver's font
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

getForeground
public Color getForeground()
Returns the foreground color that the receiver will use to draw.
Returns:
the receiver's foreground color
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0

getForeground
public Color getForeground(int index)
Returns the foreground color at the given column index in the receiver.
Parameters:
index - the column index
Returns:
the foreground color
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

getGrayed
public boolean getGrayed()
Returns true if the receiver is grayed, and false otherwise. When the parent does not have the CHECK style, return false.
Returns:
the grayed state of the checkbox
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItem
public TreeItem getItem(int index)
Returns the item at the given, zero-relative index in the receiver. Throws an exception if the index is out of range.
Parameters:
index - the index of the item to return
Returns:
the item at the given index
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_RANGE - if the index is not between 0 and the number of elements in the list minus 1 (inclusive)
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

getItemCount
public int getItemCount()
Returns the number of items contained in the receiver that are direct item children of the receiver.
Returns:
the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getItems
public TreeItem[] getItems()
Returns a (possibly empty) array of TreeItems which are the direct item children of the receiver. Note: This is not the actual structure used by the receiver to maintain its list of items, so modifying the array will not affect the receiver.
Returns:
the receiver's items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getImage
public Image getImage()
Description copied from class: Item
Returns the receiver's image if it has one, or null if it does not.
Overrides:
getImage in class Item
Returns:
the receiver's image

getImage
public Image getImage(int index)
Returns the image stored at the given column index in the receiver, or null if the image has not been set or if the column does not exist.
Parameters:
index - the column index
Returns:
the image stored at the given column index in the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

getImageBounds
public Rectangle getImageBounds(int index)
Returns a rectangle describing the size and location relative to its parent of an image at a column in the tree.
Parameters:
index - the index that specifies the column
Returns:
the receiver's bounding image rectangle
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

getParent
public Tree getParent()
Returns the receiver's parent, which must be a Tree.
Returns:
the receiver's parent
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getParentItem
public TreeItem getParentItem()
Returns the receiver's parent item, which must be a TreeItem or null when the receiver is a root.
Returns:
the receiver's parent item
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

getText
public java.lang.String getText()
Description copied from class: Item
Returns the receiver's text, which will be an empty string if it has never been set.
Overrides:
getText in class Item
Returns:
the receiver's text

getText
public java.lang.String getText(int index)
Returns the text stored at the given column index in the receiver, or empty string if the text has not been set.
Parameters:
index - the column index
Returns:
the text stored at the given column index in the receiver
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

getTextBounds
public Rectangle getTextBounds(int index)
Returns a rectangle describing the size and location relative to its parent of the text at a column in the tree.
Parameters:
index - the index that specifies the column
Returns:
the receiver's bounding text rectangle
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.3

indexOf
public int indexOf(TreeItem item)
Searches the receiver's list starting at the first item (index 0) until an item is found that is equal to the argument, and returns the index of that item. If no item is found, returns -1.
Parameters:
item - the search item
Returns:
the index of the item
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the item is null
ERROR_INVALID_ARGUMENT - if the item has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

removeAll
public void removeAll()
Removes all of the items from the receiver.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

setBackground
public void setBackground(Color color)
Sets the receiver's background color to the color specified by the argument, or to the default system color for the item if the argument is null.
Parameters:
color - the new color (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0

setBackground
public void setBackground(int index,
                          Color color)
Sets the background color at the given column index in the receiver to the color specified by the argument, or to the default system color for the item if the argument is null.
Parameters:
index - the column index
color - the new color (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

setChecked
public void setChecked(boolean checked)
Sets the checked state of the receiver.
Parameters:
checked - the new checked state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setExpanded
public void setExpanded(boolean expanded)
Sets the expanded state of the receiver.
Parameters:
expanded - the new expanded state
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setFont
public void setFont(Font font)
Sets the font that the receiver will use to paint textual information for this item to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Parameters:
font - the new font (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.0

setFont
public void setFont(int index,
                    Font font)
Sets the font that the receiver will use to paint textual information for the specified cell in this item to the font specified by the argument, or to the default font for that kind of control if the argument is null.
Parameters:
index - the column index
font - the new font (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

setForeground
public void setForeground(Color color)
Sets the receiver's foreground color to the color specified by the argument, or to the default system color for the item if the argument is null.
Parameters:
color - the new color (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
2.0

setForeground
public void setForeground(int index,
                          Color color)
Sets the foreground color at the given column index in the receiver to the color specified by the argument, or to the default system color for the item if the argument is null.
Parameters:
index - the column index
color - the new color (or null)
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the argument has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

setGrayed
public void setGrayed(boolean grayed)
Sets the grayed state of the checkbox for this item. This state change only applies if the Tree was created with the SWT.CHECK style.
Parameters:
grayed - the new grayed state of the checkbox
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

setImage
public void setImage(Image[] images)
Sets the image for multiple columns in the tree.
Parameters:
images - the array of new images
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the array of images is null
ERROR_INVALID_ARGUMENT - if one of the images has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

setImage
public void setImage(int index,
                     Image image)
Sets the receiver's image at a column.
Parameters:
index - the column index
image - the new image
Throws:
java.lang.IllegalArgumentException -
ERROR_INVALID_ARGUMENT - if the image has been disposed
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

setImage
public void setImage(Image image)
Description copied from class: Item
Sets the receiver's image to the argument, which may be null indicating that no image should be displayed.
Overrides:
setImage in class Item
Parameters:
image - the image to display on the receiver (may be null)

setItemCount
public void setItemCount(int count)
Sets the number of child items contained in the receiver.
Parameters:
count - the number of items
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.2

setText
public void setText(java.lang.String[] strings)
Sets the text for multiple columns in the tree. Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Parameters:
strings - the array of new strings
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

setText
public void setText(int index,
                    java.lang.String string)
Sets the receiver's text at a column Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Parameters:
index - the column index
string - the new text
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the text is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.1

setText
public void setText(java.lang.String string)
Description copied from class: Item
Sets the receiver's text. Note: If control characters like '\n', '\t' etc. are used in the string, then the behavior is platform dependent.
Overrides:
setText in class Item
Parameters:
string - the new text


org.eclipse.swt.events
Interface TreeListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
All Known Implementing Classes:
TreeAdapter


public interface TreeListener extends SWTEventListener
Classes which implement this interface provide methods that deal with the expanding and collapsing of tree branches. After creating an instance of a class that implements this interface it can be added to a tree control using the addTreeListener method and removed using the removeTreeListener method. When a branch of the tree is expanded or collapsed, the appropriate method will be invoked.
See Also:
TreeAdapter, TreeEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    treeCollapsed(TreeEvent e)
Sent when a tree branch is collapsed.
void    treeExpanded(TreeEvent e)
Sent when a tree branch is expanded.

Method Detail

treeCollapsed
void treeCollapsed(TreeEvent e)
Sent when a tree branch is collapsed.
Parameters:
e - an event containing information about the tree operation

treeExpanded
void treeExpanded(TreeEvent e)
Sent when a tree branch is expanded.
Parameters:
e - an event containing information about the tree operation


org.eclipse.swt.events
Class TypedEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
All Implemented Interfaces:
java.io.Serializable
Direct Known Subclasses:
ArmEvent, ControlEvent, DisposeEvent, FocusEvent, GestureEvent, HelpEvent, KeyEvent, MenuDetectEvent, MenuEvent, ModifyEvent, MouseEvent, PaintEvent, SegmentEvent, SelectionEvent, ShellEvent, TouchEvent


public class TypedEvent extends java.util.EventObject
This is the super class for all typed event classes provided by SWT. Typed events contain particular information which is applicable to the event occurrence.
See Also:
Event, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
java.lang.Object    data
a field for application use
Display display
the display where the event occurred
int time
the time that the event occurred.
Widget  widget
the widget that issued the event

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
TypedEvent(Event e)
Constructs a new instance of this class based on the information in the argument.
TypedEvent(java.lang.Object object)
Constructs a new instance of this class.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

display
public Display display
the display where the event occurred
since. :
2.0

widget
public Widget widget
the widget that issued the event

time
public int time
the time that the event occurred. NOTE: This field is an unsigned integer and should be AND'ed with 0xFFFFFFFFL so that it can be treated as a signed long.

data
public java.lang.Object data
a field for application use

Constructor Detail

TypedEvent
public TypedEvent(java.lang.Object object)
Constructs a new instance of this class.
Parameters:
object - the object that fired the event

TypedEvent
public TypedEvent(Event e)
Constructs a new instance of this class based on the information in the argument.
Parameters:
e - the low level event to initialize the receiver with

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.util.EventObject
Returns:
a string representation of the event


org.eclipse.swt.widgets
Class TypedListener
java.lang.Object
org.eclipse.swt.widgets.TypedListener
All Implemented Interfaces:
Listener


public class TypedListener extends java.lang.Object implements Listener
Instances of this class are internal SWT implementation objects which provide a mapping between the typed and untyped listener mechanisms that SWT supports. IMPORTANT: This class is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It should never be referenced from application code.
See Also:
Listener, Sample code and further information

Field Summary
Fields

Modifier and Type   Field and Description
protected SWTEventListener  eventListener
The receiver's event listener

Constructor Summary
Constructors

Constructor and Description
TypedListener(SWTEventListener listener)
Constructs a new instance of this class for the given event listener.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
SWTEventListener    getEventListener()
Returns the receiver's event listener.
void    handleEvent(Event e)
Handles the given event.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Field Detail

eventListener
protected SWTEventListener eventListener
The receiver's event listener

Constructor Detail

TypedListener
public TypedListener(SWTEventListener listener)
Constructs a new instance of this class for the given event listener. IMPORTANT: This method is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It should never be referenced from application code.
Parameters:
listener - the event listener to store in the receiver

Method Detail

getEventListener
public SWTEventListener getEventListener()
Returns the receiver's event listener. IMPORTANT: This method is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It should never be referenced from application code.
Returns:
the receiver's event listener

handleEvent
public void handleEvent(Event e)
Handles the given event. IMPORTANT: This method is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It should never be referenced from application code.
Specified by:
handleEvent in interface Listener
Parameters:
e - the event to handle


org.eclipse.swt.events
Class VerifyEvent
java.lang.Object
java.util.EventObject
org.eclipse.swt.events.TypedEvent
org.eclipse.swt.events.KeyEvent
org.eclipse.swt.events.VerifyEvent
All Implemented Interfaces:
java.io.Serializable


public final class VerifyEvent extends KeyEvent
Instances of this class are sent as a result of widgets handling keyboard events
See Also:
VerifyListener, Sample code and further information, Serialized Form

Field Summary
Fields

Modifier and Type   Field and Description
int end
the range of text being modified.
int start
the range of text being modified.
java.lang.String    text
the new text that will be inserted.

Fields inherited from class org.eclipse.swt.events.KeyEvent
character, doit, keyCode, keyLocation, stateMask

Fields inherited from class org.eclipse.swt.events.TypedEvent
data, display, time, widget

Fields inherited from class java.util.EventObject
source

Constructor Summary
Constructors

Constructor and Description
VerifyEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.util.EventObject
getSource

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Field Detail

start
public int start
the range of text being modified. Setting these fields has no effect.

end
public int end
the range of text being modified. Setting these fields has no effect.

text
public java.lang.String text
the new text that will be inserted. Setting this field will change the text that is about to be inserted or deleted.

Constructor Detail

VerifyEvent
public VerifyEvent(Event e)
Constructs a new instance of this class based on the information in the given untyped event.
Parameters:
e - the untyped event containing the information

Method Detail

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class KeyEvent
Returns:
a string representation of the event


org.eclipse.swt.events
Interface VerifyListener
All Superinterfaces:
java.util.EventListener, SWTEventListener
Functional Interface:
This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.


@FunctionalInterface public interface VerifyListener extends SWTEventListener
Classes which implement this interface provide a method that deals with the events that are generated when text is about to be modified. After creating an instance of a class that implements this interface it can be added to a text control using the addVerifyListener method and removed using the removeVerifyListener method. When the text is about to be modified, the verifyText method will be invoked.
See Also:
VerifyEvent

Method Summary
All Methods Instance Methods Abstract Methods

Modifier and Type   Method and Description
void    verifyText(VerifyEvent e)
Sent when the text is about to be modified.

Method Detail

verifyText
void verifyText(VerifyEvent e)
Sent when the text is about to be modified. A verify event occurs after the user has done something to modify the text (typically typed a key), but before the text is modified. The doit field in the verify event indicates whether or not to modify the text.
Parameters:
e - an event containing information about the verify


org.eclipse.swt.widgets
Class Widget
java.lang.Object
org.eclipse.swt.widgets.Widget
Direct Known Subclasses:
Caret, Control, IME, Item, Menu, ScrollBar, TaskBar, ToolTip, Tracker, Tray


public abstract class Widget extends java.lang.Object
This class is the abstract superclass of all user interface objects. Widgets are created, disposed and issue notification to listeners when events occur which affect them.
Styles:
(none)
Events:
Dispose
IMPORTANT: This class is intended to be subclassed only within the SWT implementation. However, it has not been marked final to allow those outside of the SWT development team to implement patched versions of the class in order to get around specific limitations in advance of when those limitations can be addressed by the team. Any class built using subclassing to access the internals of this class will likely fail to compile or run between releases and may be strongly platform specific. Subclassing should not be attempted without an intimate and detailed understanding of the workings of the hierarchy. No support is provided for user-written classes which are implemented as subclasses of this class.
See Also:
checkSubclass(), Sample code and further information

Constructor Summary
Constructors

Constructor and Description
Widget(Widget parent,       int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance.

Method Summary
All Methods Instance Methods Concrete Methods

Modifier and Type   Method and Description
void    addDisposeListener(DisposeListener  listener)
Adds the listener to the collection of listeners who will be notified when the widget is disposed.
void    addListener(int eventType,    Listener listener)
Adds the listener to the collection of listeners who will be notified when an event of the given type occurs.
protected void  checkSubclass()
Checks that this class can be subclassed.
protected void  checkWidget()
Throws an SWTException if the receiver can not be accessed by the caller.
void    dispose()
Disposes of the operating system resources associated with the receiver and all its descendants.
java.lang.Object    getData()
Returns the application defined widget data associated with the receiver, or null if it has not been set.
java.lang.Object    getData(java.lang.String key)
Returns the application defined property of the receiver with the specified name, or null if it has not been set.
Display getDisplay()
Returns the Display that is associated with the receiver.
Listener[]  getListeners(int eventType)
Returns an array of listeners who will be notified when an event of the given type occurs.
int getStyle()
Returns the receiver's style information.
boolean isAutoDirection()
Returns true if the widget has auto text direction, and false otherwise.
boolean isDisposed()
Returns true if the widget has been disposed, and false otherwise.
boolean isListening(int eventType)
Returns true if there are any listeners for the specified event type associated with the receiver, and false otherwise.
void    notifyListeners(int eventType,            Event event)
Notifies all of the receiver's listeners for events of the given type that one such event has occurred by invoking their handleEvent() method.
void    removeDisposeListener(DisposeListen er listener)
Removes the listener from the collection of listeners who will be notified when the widget is disposed.
void    removeListener(int eventType,          Listener listener)
Removes the listener from the collection of listeners who will be notified when an event of the given type occurs.
protected void  removeListener(int eventType,          SWTEventListener listener)
Removes the listener from the collection of listeners who will be notified when an event of the given type occurs.
void    reskin(int flags)
Marks the widget to be skinned.
void    setData(java.lang.Object data)
Sets the application defined widget data associated with the receiver to be the argument.
void    setData(java.lang.String key,   java.lang.Object value)
Sets the application defined property of the receiver with the specified name to the given value.
java.lang.String    toString()
Returns a string containing a concise, human-readable description of the receiver.

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait

Constructor Detail

Widget
public Widget(Widget parent,
              int style)
Constructs a new instance of this class given its parent and a style value describing its behavior and appearance. The style value is either one of the style constants defined in class SWT which is applicable to instances of this class, or must be built by bitwise OR'ing together (that is, using the int "|" operator) two or more of those SWT style constants. The class description lists the style constants that are applicable to the class. Style bits are also inherited from superclasses.
Parameters:
parent - a widget which will be the parent of the new instance (cannot be null)
style - the style of widget to construct
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the parent is null
ERROR_INVALID_ARGUMENT - if the parent is disposed
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the parent
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass
See Also:
SWT, checkSubclass(), getStyle()

Method Detail

addListener
public void addListener(int eventType,
                        Listener listener)
Adds the listener to the collection of listeners who will be notified when an event of the given type occurs. When the event does occur in the widget, the listener is notified by sending it the handleEvent() message. The event type is one of the event constants defined in class SWT.
Parameters:
eventType - the type of event to listen for
listener - the listener which should be notified when the event occurs
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
Listener, SWT, getListeners(int), removeListener(int, Listener), notifyListeners(int, org.eclipse.swt.widgets.Event)

addDisposeListener
public void addDisposeListener(DisposeListener listener)
Adds the listener to the collection of listeners who will be notified when the widget is disposed. When the widget is disposed, the listener is notified by sending it the widgetDisposed() message.
Parameters:
listener - the listener which should be notified when the receiver is disposed
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
DisposeListener, removeDisposeListener(org.eclipse.swt.events.DisposeListener)

checkSubclass
protected void checkSubclass()
Checks that this class can be subclassed. The SWT class library is intended to be subclassed only at specific, controlled points (most notably, Composite and Canvas when implementing new widgets). This method enforces this rule unless it is overridden.
IMPORTANT: By providing an implementation of this method that allows a subclass of a class which does not normally allow subclassing to be created, the implementer agrees to be fully responsible for the fact that any such subclass will likely fail between SWT releases and will be strongly platform specific. No support is provided for user-written classes which are implemented in this fashion.
The ability to subclass outside of the allowed SWT classes is intended purely to enable those not on the SWT development team to implement patches in order to get around specific limitations in advance of when those limitations can be addressed by the team. Subclassing should not be attempted without an intimate and detailed understanding of the hierarchy.
Throws:
SWTException -
ERROR_INVALID_SUBCLASS - if this class is not an allowed subclass

checkWidget
protected void checkWidget()
Throws an SWTException if the receiver can not be accessed by the caller. This may include both checks on the state of the receiver and more generally on the entire execution context. This method should be called by widget implementors to enforce the standard SWT invariants. Currently, it is an error to invoke any method (other than isDisposed()) on a widget that has had its dispose() method called. It is also an error to call widget methods from any thread that is different from the thread that created the widget.
In future releases of SWT, there may be more or fewer error checks and exceptions may be thrown for different reasons.
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

dispose
public void dispose()
Disposes of the operating system resources associated with the receiver and all its descendants. After this method has been invoked, the receiver and all descendants will answer true when sent the message isDisposed(). Any internal connections between the widgets in the tree will have been removed to facilitate garbage collection. This method does nothing if the widget is already disposed. NOTE: This method is not called recursively on the descendants of the receiver. This means that, widget implementers can not detect when a widget is being disposed of by re-implementing this method, but should instead listen for the Dispose event.
Throws:
SWTException -
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
addDisposeListener(org.eclipse.swt.events.DisposeListener), removeDisposeListener(org.eclipse.swt.events.DisposeListener), checkWidget()

getData
public java.lang.Object getData()
Returns the application defined widget data associated with the receiver, or null if it has not been set. The widget data is a single, unnamed field that is stored with every widget. Applications may put arbitrary objects in this field. If the object stored in the widget data needs to be notified when the widget is disposed of, it is the application's responsibility to hook the Dispose event on the widget and do so.
Returns:
the widget data
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - when the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - when called from the wrong thread
See Also:
setData(Object)

getData
public java.lang.Object getData(java.lang.String key)
Returns the application defined property of the receiver with the specified name, or null if it has not been set. Applications may have associated arbitrary objects with the receiver in this fashion. If the objects stored in the properties need to be notified when the widget is disposed of, it is the application's responsibility to hook the Dispose event on the widget and do so.
Parameters:
key - the name of the property
Returns:
the value of the property or null if it has not been set
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the key is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
setData(String, Object)

getDisplay
public Display getDisplay()
Returns the Display that is associated with the receiver. A widget's display is either provided when it is created (for example, top level Shells) or is the same as its parent's display.
Returns:
the receiver's display
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed

getListeners
public Listener[] getListeners(int eventType)
Returns an array of listeners who will be notified when an event of the given type occurs. The event type is one of the event constants defined in class SWT.
Parameters:
eventType - the type of event to listen for
Returns:
an array of listeners that will be notified when the event occurs
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.4
See Also:
Listener, SWT, addListener(int, Listener), removeListener(int, Listener), notifyListeners(int, org.eclipse.swt.widgets.Event)

getStyle
public int getStyle()
Returns the receiver's style information. Note that the value which is returned by this method may not match the value which was provided to the constructor when the receiver was created. This can occur when the underlying operating system does not support a particular combination of requested styles. For example, if the platform widget used to implement a particular SWT widget always has scroll bars, the result of calling this method would always have the SWT.H_SCROLL and SWT.V_SCROLL bits set.
Returns:
the style bits
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver

isAutoDirection
public boolean isAutoDirection()
Returns true if the widget has auto text direction, and false otherwise.
Returns:
true when the widget has auto direction and false otherwise
since. :
3.105
See Also:
SWT.AUTO_TEXT_DIRECTION

isDisposed
public boolean isDisposed()
Returns true if the widget has been disposed, and false otherwise. This method gets the dispose state for the widget. When a widget has been disposed, it is an error to invoke any other method (except dispose()) using the widget.
Returns:
true when the widget is disposed and false otherwise

isListening
public boolean isListening(int eventType)
Returns true if there are any listeners for the specified event type associated with the receiver, and false otherwise. The event type is one of the event constants defined in class SWT.
Parameters:
eventType - the type of event
Returns:
true if the event is hooked
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SWT

notifyListeners
public void notifyListeners(int eventType,
                            Event event)
Notifies all of the receiver's listeners for events of the given type that one such event has occurred by invoking their handleEvent() method. The event type is one of the event constants defined in class SWT.
Parameters:
eventType - the type of event which has occurred
event - the event data
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
SWT, addListener(int, org.eclipse.swt.widgets.Listener), getListeners(int), removeListener(int, Listener)

removeListener
public void removeListener(int eventType,
                           Listener listener)
Removes the listener from the collection of listeners who will be notified when an event of the given type occurs. The event type is one of the event constants defined in class SWT.
Parameters:
eventType - the type of event to listen for
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
Listener, SWT, addListener(int, org.eclipse.swt.widgets.Listener), getListeners(int), notifyListeners(int, org.eclipse.swt.widgets.Event)

removeListener
protected void removeListener(int eventType,
                              SWTEventListener listener)
Removes the listener from the collection of listeners who will be notified when an event of the given type occurs. IMPORTANT: This method is not part of the SWT public API. It is marked public only so that it can be shared within the packages provided by SWT. It should never be referenced from application code.
Parameters:
eventType - the type of event to listen for
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
Listener, addListener(int, org.eclipse.swt.widgets.Listener)

removeDisposeListener
public void removeDisposeListener(DisposeListener listener)
Removes the listener from the collection of listeners who will be notified when the widget is disposed.
Parameters:
listener - the listener which should no longer be notified
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the listener is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
DisposeListener, addDisposeListener(org.eclipse.swt.events.DisposeListener)

reskin
public void reskin(int flags)
Marks the widget to be skinned. The skin event is sent to the receiver's display when appropriate (usually before the next event is handled). Widgets are automatically marked for skinning upon creation as well as when its skin id or class changes. The skin id and/or class can be changed by calling Display.setData(String, Object) with the keys SWT.SKIN_ID and/or SWT.SKIN_CLASS. Once the skin event is sent to a widget, it will not be sent again unless reskin(int) is called on the widget or on an ancestor while specifying the SWT.ALL flag.
The parameter flags may be either:
SWT.ALL
all children in the receiver's widget tree should be skinned
SWT.NONE
only the receiver should be skinned
Parameters:
flags - the flags specifying how to reskin
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
since. :
3.6

setData
public void setData(java.lang.Object data)
Sets the application defined widget data associated with the receiver to be the argument. The widget data is a single, unnamed field that is stored with every widget. Applications may put arbitrary objects in this field. If the object stored in the widget data needs to be notified when the widget is disposed of, it is the application's responsibility to hook the Dispose event on the widget and do so.
Parameters:
data - the widget data
Throws:
SWTException -
ERROR_WIDGET_DISPOSED - when the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - when called from the wrong thread
See Also:
getData()

setData
public void setData(java.lang.String key,
                    java.lang.Object value)
Sets the application defined property of the receiver with the specified name to the given value. Applications may associate arbitrary objects with the receiver in this fashion. If the objects stored in the properties need to be notified when the widget is disposed of, it is the application's responsibility to hook the Dispose event on the widget and do so.
Parameters:
key - the name of the property
value - the new value for the property
Throws:
java.lang.IllegalArgumentException -
ERROR_NULL_ARGUMENT - if the key is null
SWTException -
ERROR_WIDGET_DISPOSED - if the receiver has been disposed
ERROR_THREAD_INVALID_ACCESS - if not called from the thread that created the receiver
See Also:
getData(String)

toString
public java.lang.String toString()
Returns a string containing a concise, human-readable description of the receiver.
Overrides:
toString in class java.lang.Object
Returns:
a string representation of the receiver


org.eclipse.swt.internal.image
Class WinBMPFileFormat
java.lang.Object
org.eclipse.swt.internal.image.FileFormat
org.eclipse.swt.internal.image.WinBMPFileFormat


public final class WinBMPFileFormat extends FileFormat

Constructor Summary
Constructors

Constructor and Description
WinBMPFileFormat()

Method Summary

Methods inherited from class org.eclipse.swt.internal.image.FileFormat
load, loadFromStream, save, unloadIntoStream

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

WinBMPFileFormat
public WinBMPFileFormat()


org.eclipse.swt.internal.image
Class WinICOFileFormat
java.lang.Object
org.eclipse.swt.internal.image.FileFormat
org.eclipse.swt.internal.image.WinICOFileFormat


public final class WinICOFileFormat extends FileFormat

Constructor Summary
Constructors

Constructor and Description
WinICOFileFormat()

Method Summary

Methods inherited from class org.eclipse.swt.internal.image.FileFormat
load, loadFromStream, save, unloadIntoStream

Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait

Constructor Detail

WinICOFileFormat
public WinICOFileFormat()

