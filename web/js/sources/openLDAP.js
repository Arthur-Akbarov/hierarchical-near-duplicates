function getSource() {
    return '' +
    '<table><tbody>\n' +
        '<tr>\n' +
            '<td><a name=1>1</a></td>\n' +
            '<td>LBER_ENCODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2>2</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3>3</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4>4</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5>5</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6>6</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7>7</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8>8</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9>9</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10>10</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11>11</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12>12</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13>13</a></td>\n' +
            '<td>ber_alloc_t, ber_flush, ber_flush2, ber_printf, ber_put_int, ber_put_enum, ber_put_ostring, ber_put_string, ber_put_null, ber_put_boolean, ber_put_bitstring, ber_start_seq, ber_start_set, ber_put_seq, ber_put_set − OpenLDAP LBER simplified Basic Encoding Rules library routines for encoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14>14</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15>15</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16>16</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17>17</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18>18</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19>19</a></td>\n' +
            '<td>int ber_flush(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20>20</a></td>\n' +
            '<td>int ber_flush2(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=21>21</a></td>\n' +
            '<td>int ber_printf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=22>22</a></td>\n' +
            '<td>int ber_put_int(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=23>23</a></td>\n' +
            '<td>int ber_put_enum(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=24>24</a></td>\n' +
            '<td>int ber_put_ostring(BerElement *ber, const char *str, ber_len_t len, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=25>25</a></td>\n' +
            '<td>int ber_put_string(BerElement *ber, const char *str, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=26>26</a></td>\n' +
            '<td>int ber_put_null(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=27>27</a></td>\n' +
            '<td>int ber_put_boolean(BerElement *ber, ber_int_t bool, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=28>28</a></td>\n' +
            '<td>int ber_put_bitstring(BerElement *ber, const char *str, ber_len_t blen, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=29>29</a></td>\n' +
            '<td>int ber_start_seq(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=30>30</a></td>\n' +
            '<td>int ber_start_set(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=31>31</a></td>\n' +
            '<td>int ber_put_seq(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=32>32</a></td>\n' +
            '<td>int ber_put_set(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=33>33</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=34>34</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the encoding routines in the lber library. See lber-decode(3) for details on the corresponding decoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=35>35</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_alloc_t() to allocate a BER element for encoding, ber_printf() to do the actual encoding, and ber_flush2() to actually write the element. The other routines are provided for those applications that need more control than ber_printf() provides. In general, these routines return the length of the element encoded, or -1 if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=36>36</a></td>\n' +
            '<td>The ber_alloc_t() routine is used to allocate a new BER element. It should be called with an argument of LBER_USE_DER.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=37>37</a></td>\n' +
            '<td>The ber_flush2() routine is used to actually write the element to a socket (or file) descriptor, once it has been fully encoded (using ber_printf() and friends). See lber-sockbuf(3) for more details on the Sockbuf implementation of the sb parameter. If the freeit parameter is non-zero, the supplied ber will be freed. If LBER_FLUSH_FREE_ON_SUCCESS is used, the ber is only freed when successfully flushed, otherwise it is left intact; if LBER_FLUSH_FREE_ON_ERROR is used, the ber is only freed when an error occurs, otherwise it is left intact; if LBER_FLUSH_FREE_ALWAYS is used, the ber is freed anyway. This function differs from the original ber_flush(3) function, whose behavior corresponds to that indicated for LBER_FLUSH_FREE_ON_SUCCESS. Note that in the future, the behavior of ber_flush(3) with freeit non-zero might change into that of ber_flush2(3) with freeit set to LBER_FLUSH_FREE_ALWAYS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=38>38</a></td>\n' +
            '<td>The ber_printf() routine is used to encode a BER element in much the same way that sprintf(3) works. One important difference, though, is that some state information is kept with the ber parameter so that multiple calls can be made to ber_printf() to append things to the end of the BER element. Ber_printf() writes to ber, a pointer to a BerElement such as returned by ber_alloc_t(). It interprets and formats its arguments according to the format string fmt. The format string can contain the following characters:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=39>39</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=40>40</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=41>41</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=42>42</a></td>\n' +
            '<td>Boolean. An ber_int_t parameter should be supplied. A boolean element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=43>43</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=44>44</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=45>45</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=46>46</a></td>\n' +
            '<td>Enumeration. An ber_int_t parameter should be supplied. An enumeration element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=47>47</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=48>48</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=49>49</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=50>50</a></td>\n' +
            '<td>Integer. An ber_int_t parameter should be supplied. An integer element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=51>51</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=52>52</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=53>53</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=54>54</a></td>\n' +
            '<td>Bitstring. A char * pointer to the start of the bitstring is supplied, followed by the number of bits in the bitstring. A bitstring element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=55>55</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=56>56</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=57>57</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=58>58</a></td>\n' +
            '<td>Null. No parameter is required. A null element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=59>59</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=60>60</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=61>61</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=62>62</a></td>\n' +
            '<td>Octet string. A char * is supplied, followed by the length of the string pointed to. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=63>63</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=64>64</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=65>65</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=66>66</a></td>\n' +
            '<td>Octet string. A struct berval * is supplied. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=67>67</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=68>68</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=69>69</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=70>70</a></td>\n' +
            '<td>Octet string. A null-terminated string is supplied. An octet string element is output, not including the trailing NULL octet.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=71>71</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=72>72</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=73>73</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=74>74</a></td>\n' +
            '<td>Tag. A ber_tag_t specifying the tag to give the next element is provided. This works across calls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=75>75</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=76>76</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=77>77</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=78>78</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of char *’s is supplied. Note that a construct like ’{v}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=79>79</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=80>80</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=81>81</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=82>82</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of struct berval *’s is supplied. Note that a construct like ’{V}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=83>83</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=84>84</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=85>85</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=86>86</a></td>\n' +
            '<td>Several octet strings. An array of struct berval’s is supplied. The array is terminated by a struct berval with a NULL bv_val. Note that a construct like ’{W}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=87>87</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=88>88</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=89>89</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=90>90</a></td>\n' +
            '<td>Begin sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=91>91</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=92>92</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=93>93</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=94>94</a></td>\n' +
            '<td>End sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=95>95</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=96>96</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=97>97</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=98>98</a></td>\n' +
            '<td>Begin set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=99>99</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=100>100</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=101>101</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=102>102</a></td>\n' +
            '<td>End set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=103>103</a></td>\n' +
            '<td>The ber_put_int() routine writes the integer element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=104>104</a></td>\n' +
            '<td>The ber_put_enum() routine writes the enumeration element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=105>105</a></td>\n' +
            '<td>The ber_put_boolean() routine writes the boolean value given by bool to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=106>106</a></td>\n' +
            '<td>The ber_put_bitstring() routine writes blen bits starting at str as a bitstring value to the given BER element. Note that blen is the length in bits of the bitstring.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=107>107</a></td>\n' +
            '<td>The ber_put_ostring() routine writes len bytes starting at str to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=108>108</a></td>\n' +
            '<td>The ber_put_string() routine writes the null-terminated string (minus the terminating ’ ’) to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=109>109</a></td>\n' +
            '<td>The ber_put_null() routine writes a NULL element to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=110>110</a></td>\n' +
            '<td>The ber_start_seq() routine is used to start a sequence in the BER element. The ber_start_set() routine works similarly. The end of the sequence or set is marked by the nearest matching call to ber_put_seq() or ber_put_set(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=111>111</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=112>112</a></td>\n' +
            '<td>Assuming the following variable declarations, and that the variables have been assigned appropriately, an lber encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=113>113</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=114>114</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=115>115</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=116>116</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=117>117</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=118>118</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=119>119</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=120>120</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=121>121</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=122>122</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=123>123</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=124>124</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=125>125</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=126>126</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=127>127</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=128>128</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=129>129</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=130>130</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=131>131</a></td>\n' +
            '<td>can be achieved like so:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=132>132</a></td>\n' +
            '<td>int rc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=133>133</a></td>\n' +
            '<td>ber_int_t scope, ali, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=134>134</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=135>135</a></td>\n' +
            '<td>BerElement *ber;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=136>136</a></td>\n' +
            '<td>/* ... fill in values ... */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=137>137</a></td>\n' +
            '<td>ber = ber_alloc_t( LBER_USE_DER );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=138>138</a></td>\n' +
            '<td>if ( ber == NULL ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=139>139</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=140>140</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=141>141</a></td>\n' +
            '<td>rc = ber_printf( ber, "{siiiib{v}}", dn, scope, ali,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=142>142</a></td>\n' +
            '<td>size, time, attrsonly, attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=143>143</a></td>\n' +
            '<td>if( rc == −1 ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=144>144</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=145>145</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=146>146</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=147>147</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=148>148</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=149>149</a></td>\n' +
            '<td>If an error occurs during encoding, generally these routines return −1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=150>150</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=151>151</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=152>152</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=153>153</a></td>\n' +
            '<td>lber-decode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=154>154</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=155>155</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=156>156</a></td>\n' +
            '<td>LBER_TYPES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=157>157</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=158>158</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=159>159</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=160>160</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=161>161</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=162>162</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=163>163</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=164>164</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=165>165</a></td>\n' +
            '<td>ber_int_t, ber_uint_t, ber_len_t, ber_slen_t, ber_tag_t, struct berval, BerValue, BerVarray, BerElement, ber_bvfree, ber_bvecfree, ber_bvecadd, ber_bvarray_free, ber_bvarray_add, ber_bvdup, ber_dupbv, ber_bvstr, ber_bvstrdup, ber_str2bv, ber_alloc_t, ber_init, ber_init2, ber_free − OpenLDAP LBER types and allocation functions</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=166>166</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=167>167</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=168>168</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=169>169</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=170>170</a></td>\n' +
            '<td>typedef impl_tag_t ber_tag_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=171>171</a></td>\n' +
            '<td>typedef impl_int_t ber_int_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=172>172</a></td>\n' +
            '<td>typedef impl_uint_t ber_uint_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=173>173</a></td>\n' +
            '<td>typedef impl_len_t ber_len_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=174>174</a></td>\n' +
            '<td>typedef impl_slen_t ber_slen_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=175>175</a></td>\n' +
            '<td>typedef struct berval {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=176>176</a></td>\n' +
            '<td>ber_len_t bv_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=177>177</a></td>\n' +
            '<td>char *bv_val;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=178>178</a></td>\n' +
            '<td>} BerValue, *BerVarray;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=179>179</a></td>\n' +
            '<td>typedef struct berelement BerElement;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=180>180</a></td>\n' +
            '<td>void ber_bvfree(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=181>181</a></td>\n' +
            '<td>void ber_bvecfree(struct berval **bvec);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=182>182</a></td>\n' +
            '<td>void ber_bvecadd(struct berval ***bvec, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=183>183</a></td>\n' +
            '<td>void ber_bvarray_free(struct berval *bvarray);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=184>184</a></td>\n' +
            '<td>void ber_bvarray_add(BerVarray *bvarray, BerValue *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=185>185</a></td>\n' +
            '<td>struct berval *ber_bvdup(const struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=186>186</a></td>\n' +
            '<td>struct berval *ber_dupbv(const struct berval *dst, struct berval *src);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=187>187</a></td>\n' +
            '<td>struct berval *ber_bvstr(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=188>188</a></td>\n' +
            '<td>struct berval *ber_bvstrdup(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=189>189</a></td>\n' +
            '<td>struct berval *ber_str2bv(const char *str, ber_len_t len, int dup, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=190>190</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=191>191</a></td>\n' +
            '<td>BerElement *ber_init(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=192>192</a></td>\n' +
            '<td>void ber_init2(BerElement *ber, struct berval *bv, int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=193>193</a></td>\n' +
            '<td>void ber_free(BerElement *ber, int freebuf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=194>194</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=195>195</a></td>\n' +
            '<td>The following are the basic types and structures defined for use with the Lightweight BER library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=196>196</a></td>\n' +
            '<td>ber_int_t is a signed integer of at least 32 bits. It is commonly equivalent to int. ber_uint_t is the unsigned variant of ber_int_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=197>197</a></td>\n' +
            '<td>ber_len_t is an unsigned integer of at least 32 bits used to represent a length. It is commonly equivalent to a size_t. ber_slen_t is the signed variant to ber_len_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=198>198</a></td>\n' +
            '<td>ber_tag_t is an unsigned integer of at least 32 bits used to represent a BER tag. It is commonly equivalent to a unsigned long.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=199>199</a></td>\n' +
            '<td>The actual definitions of the integral impl_TYPE_t types are platform specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=200>200</a></td>\n' +
            '<td>BerValue, commonly used as struct berval, is used to hold an arbitrary sequence of octets. bv_val points to bv_len octets. bv_val is not necessarily terminated by a NULL (zero) octet. ber_bvfree() frees a BerValue, pointed to by bv, returned from this API. If bv is NULL, the routine does nothing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=201>201</a></td>\n' +
            '<td>ber_bvecfree() frees an array of BerValues (and the array), pointed to by bvec, returned from this API. If bvec is NULL, the routine does nothing. ber_bvecadd() appends the bv pointer to the bvec array. Space for the array is allocated as needed. The end of the array is marked by a NULL pointer.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=202>202</a></td>\n' +
            '<td>ber_bvarray_free() frees an array of BerValues (and the array), pointed to by bvarray, returned from this API. If bvarray is NULL, the routine does nothing. ber_bvarray_add() appends the contents of the BerValue pointed to by bv to the bvarray array. Space for the new element is allocated as needed. The end of the array is marked by a BerValue with a NULL bv_val field.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=203>203</a></td>\n' +
            '<td>ber_bvdup() returns a copy of a BerValue. The routine returns NULL upon error (e.g. out of memory). The caller should use ber_bvfree() to deallocate the resulting BerValue. ber_dupbv() copies a BerValue from src to dst. If dst is NULL a new BerValue will be allocated to hold the copy. The routine returns NULL upon error, otherwise it returns a pointer to the copy. If dst is NULL the caller should use ber_bvfree() to deallocate the resulting BerValue, otherwise ber_memfree() should be used to deallocate the dst-&gt;bv_val. (The ber_bvdup() function is internally implemented as ber_dupbv(NULL, bv). ber_bvdup() is provided only for compatibility with an expired draft of the LDAP C API; ber_dupbv() is the preferred interface.)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=204>204</a></td>\n' +
            '<td>ber_bvstr() returns a BerValue containing the string pointed to by str. ber_bvstrdup() returns a BerValue containing a copy of the string pointed to by str. ber_str2bv() returns a BerValue containing the string pointed to by str, whose length may be optionally specified in len. If dup is non-zero, the BerValue will contain a copy of str. If len is zero, the number of bytes to copy will be determined by strlen(3), otherwise len bytes will be copied. If bv is non-NULL, the result will be stored in the given BerValue, otherwise a new BerValue will be allocated to store the result. NOTE: Both ber_bvstr() and ber_bvstrdup() are implemented as macros using ber_str2bv() in this version of the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=205>205</a></td>\n' +
            '<td>BerElement is an opaque structure used to maintain state information used in encoding and decoding. ber_alloc_t() is used to create an empty BerElement structure. If LBER_USE_DER is specified for the options parameter then data lengths for data written to the BerElement will be encoded in the minimal number of octets required, otherwise they will always be written as four byte values. ber_init() creates a BerElement structure that is initialized with a copy of the data in its bv parameter. ber_init2() initializes an existing BerElement ber using the data in the bv parameter. The data is referenced directly, not copied. The options parameter is the same as for ber_alloc_t(). ber_free() frees a BerElement pointed to by ber. If ber is NULL, the routine does nothing. If freebuf is zero, the internal buffer is not freed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=206>206</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=207>207</a></td>\n' +
            '<td>lber-encode(3), lber-decode(3), lber-memory(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=208>208</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=209>209</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=210>210</a></td>\n' +
            '<td>LBER_TYPES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=211>211</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=212>212</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=213>213</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=214>214</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=215>215</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=216>216</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=217>217</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=218>218</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=219>219</a></td>\n' +
            '<td>ber_int_t, ber_uint_t, ber_len_t, ber_slen_t, ber_tag_t, struct berval, BerValue, BerVarray, BerElement, ber_bvfree, ber_bvecfree, ber_bvecadd, ber_bvarray_free, ber_bvarray_add, ber_bvdup, ber_dupbv, ber_bvstr, ber_bvstrdup, ber_str2bv, ber_alloc_t, ber_init, ber_init2, ber_free − OpenLDAP LBER types and allocation functions</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=220>220</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=221>221</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=222>222</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=223>223</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=224>224</a></td>\n' +
            '<td>typedef impl_tag_t ber_tag_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=225>225</a></td>\n' +
            '<td>typedef impl_int_t ber_int_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=226>226</a></td>\n' +
            '<td>typedef impl_uint_t ber_uint_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=227>227</a></td>\n' +
            '<td>typedef impl_len_t ber_len_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=228>228</a></td>\n' +
            '<td>typedef impl_slen_t ber_slen_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=229>229</a></td>\n' +
            '<td>typedef struct berval {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=230>230</a></td>\n' +
            '<td>ber_len_t bv_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=231>231</a></td>\n' +
            '<td>char *bv_val;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=232>232</a></td>\n' +
            '<td>} BerValue, *BerVarray;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=233>233</a></td>\n' +
            '<td>typedef struct berelement BerElement;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=234>234</a></td>\n' +
            '<td>void ber_bvfree(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=235>235</a></td>\n' +
            '<td>void ber_bvecfree(struct berval **bvec);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=236>236</a></td>\n' +
            '<td>void ber_bvecadd(struct berval ***bvec, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=237>237</a></td>\n' +
            '<td>void ber_bvarray_free(struct berval *bvarray);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=238>238</a></td>\n' +
            '<td>void ber_bvarray_add(BerVarray *bvarray, BerValue *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=239>239</a></td>\n' +
            '<td>struct berval *ber_bvdup(const struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=240>240</a></td>\n' +
            '<td>struct berval *ber_dupbv(const struct berval *dst, struct berval *src);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=241>241</a></td>\n' +
            '<td>struct berval *ber_bvstr(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=242>242</a></td>\n' +
            '<td>struct berval *ber_bvstrdup(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=243>243</a></td>\n' +
            '<td>struct berval *ber_str2bv(const char *str, ber_len_t len, int dup, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=244>244</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=245>245</a></td>\n' +
            '<td>BerElement *ber_init(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=246>246</a></td>\n' +
            '<td>void ber_init2(BerElement *ber, struct berval *bv, int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=247>247</a></td>\n' +
            '<td>void ber_free(BerElement *ber, int freebuf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=248>248</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=249>249</a></td>\n' +
            '<td>The following are the basic types and structures defined for use with the Lightweight BER library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=250>250</a></td>\n' +
            '<td>ber_int_t is a signed integer of at least 32 bits. It is commonly equivalent to int. ber_uint_t is the unsigned variant of ber_int_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=251>251</a></td>\n' +
            '<td>ber_len_t is an unsigned integer of at least 32 bits used to represent a length. It is commonly equivalent to a size_t. ber_slen_t is the signed variant to ber_len_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=252>252</a></td>\n' +
            '<td>ber_tag_t is an unsigned integer of at least 32 bits used to represent a BER tag. It is commonly equivalent to a unsigned long.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=253>253</a></td>\n' +
            '<td>The actual definitions of the integral impl_TYPE_t types are platform specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=254>254</a></td>\n' +
            '<td>BerValue, commonly used as struct berval, is used to hold an arbitrary sequence of octets. bv_val points to bv_len octets. bv_val is not necessarily terminated by a NULL (zero) octet. ber_bvfree() frees a BerValue, pointed to by bv, returned from this API. If bv is NULL, the routine does nothing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=255>255</a></td>\n' +
            '<td>ber_bvecfree() frees an array of BerValues (and the array), pointed to by bvec, returned from this API. If bvec is NULL, the routine does nothing. ber_bvecadd() appends the bv pointer to the bvec array. Space for the array is allocated as needed. The end of the array is marked by a NULL pointer.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=256>256</a></td>\n' +
            '<td>ber_bvarray_free() frees an array of BerValues (and the array), pointed to by bvarray, returned from this API. If bvarray is NULL, the routine does nothing. ber_bvarray_add() appends the contents of the BerValue pointed to by bv to the bvarray array. Space for the new element is allocated as needed. The end of the array is marked by a BerValue with a NULL bv_val field.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=257>257</a></td>\n' +
            '<td>ber_bvdup() returns a copy of a BerValue. The routine returns NULL upon error (e.g. out of memory). The caller should use ber_bvfree() to deallocate the resulting BerValue. ber_dupbv() copies a BerValue from src to dst. If dst is NULL a new BerValue will be allocated to hold the copy. The routine returns NULL upon error, otherwise it returns a pointer to the copy. If dst is NULL the caller should use ber_bvfree() to deallocate the resulting BerValue, otherwise ber_memfree() should be used to deallocate the dst-&gt;bv_val. (The ber_bvdup() function is internally implemented as ber_dupbv(NULL, bv). ber_bvdup() is provided only for compatibility with an expired draft of the LDAP C API; ber_dupbv() is the preferred interface.)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=258>258</a></td>\n' +
            '<td>ber_bvstr() returns a BerValue containing the string pointed to by str. ber_bvstrdup() returns a BerValue containing a copy of the string pointed to by str. ber_str2bv() returns a BerValue containing the string pointed to by str, whose length may be optionally specified in len. If dup is non-zero, the BerValue will contain a copy of str. If len is zero, the number of bytes to copy will be determined by strlen(3), otherwise len bytes will be copied. If bv is non-NULL, the result will be stored in the given BerValue, otherwise a new BerValue will be allocated to store the result. NOTE: Both ber_bvstr() and ber_bvstrdup() are implemented as macros using ber_str2bv() in this version of the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=259>259</a></td>\n' +
            '<td>BerElement is an opaque structure used to maintain state information used in encoding and decoding. ber_alloc_t() is used to create an empty BerElement structure. If LBER_USE_DER is specified for the options parameter then data lengths for data written to the BerElement will be encoded in the minimal number of octets required, otherwise they will always be written as four byte values. ber_init() creates a BerElement structure that is initialized with a copy of the data in its bv parameter. ber_init2() initializes an existing BerElement ber using the data in the bv parameter. The data is referenced directly, not copied. The options parameter is the same as for ber_alloc_t(). ber_free() frees a BerElement pointed to by ber. If ber is NULL, the routine does nothing. If freebuf is zero, the internal buffer is not freed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=260>260</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=261>261</a></td>\n' +
            '<td>lber-encode(3), lber-decode(3), lber-memory(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=262>262</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=263>263</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=264>264</a></td>\n' +
            '<td>LBER_TYPES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=265>265</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=266>266</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=267>267</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=268>268</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=269>269</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=270>270</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=271>271</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=272>272</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=273>273</a></td>\n' +
            '<td>ber_int_t, ber_uint_t, ber_len_t, ber_slen_t, ber_tag_t, struct berval, BerValue, BerVarray, BerElement, ber_bvfree, ber_bvecfree, ber_bvecadd, ber_bvarray_free, ber_bvarray_add, ber_bvdup, ber_dupbv, ber_bvstr, ber_bvstrdup, ber_str2bv, ber_alloc_t, ber_init, ber_init2, ber_free − OpenLDAP LBER types and allocation functions</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=274>274</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=275>275</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=276>276</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=277>277</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=278>278</a></td>\n' +
            '<td>typedef impl_tag_t ber_tag_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=279>279</a></td>\n' +
            '<td>typedef impl_int_t ber_int_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=280>280</a></td>\n' +
            '<td>typedef impl_uint_t ber_uint_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=281>281</a></td>\n' +
            '<td>typedef impl_len_t ber_len_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=282>282</a></td>\n' +
            '<td>typedef impl_slen_t ber_slen_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=283>283</a></td>\n' +
            '<td>typedef struct berval {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=284>284</a></td>\n' +
            '<td>ber_len_t bv_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=285>285</a></td>\n' +
            '<td>char *bv_val;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=286>286</a></td>\n' +
            '<td>} BerValue, *BerVarray;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=287>287</a></td>\n' +
            '<td>typedef struct berelement BerElement;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=288>288</a></td>\n' +
            '<td>void ber_bvfree(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=289>289</a></td>\n' +
            '<td>void ber_bvecfree(struct berval **bvec);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=290>290</a></td>\n' +
            '<td>void ber_bvecadd(struct berval ***bvec, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=291>291</a></td>\n' +
            '<td>void ber_bvarray_free(struct berval *bvarray);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=292>292</a></td>\n' +
            '<td>void ber_bvarray_add(BerVarray *bvarray, BerValue *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=293>293</a></td>\n' +
            '<td>struct berval *ber_bvdup(const struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=294>294</a></td>\n' +
            '<td>struct berval *ber_dupbv(const struct berval *dst, struct berval *src);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=295>295</a></td>\n' +
            '<td>struct berval *ber_bvstr(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=296>296</a></td>\n' +
            '<td>struct berval *ber_bvstrdup(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=297>297</a></td>\n' +
            '<td>struct berval *ber_str2bv(const char *str, ber_len_t len, int dup, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=298>298</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=299>299</a></td>\n' +
            '<td>BerElement *ber_init(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=300>300</a></td>\n' +
            '<td>void ber_init2(BerElement *ber, struct berval *bv, int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=301>301</a></td>\n' +
            '<td>void ber_free(BerElement *ber, int freebuf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=302>302</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=303>303</a></td>\n' +
            '<td>The following are the basic types and structures defined for use with the Lightweight BER library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=304>304</a></td>\n' +
            '<td>ber_int_t is a signed integer of at least 32 bits. It is commonly equivalent to int. ber_uint_t is the unsigned variant of ber_int_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=305>305</a></td>\n' +
            '<td>ber_len_t is an unsigned integer of at least 32 bits used to represent a length. It is commonly equivalent to a size_t. ber_slen_t is the signed variant to ber_len_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=306>306</a></td>\n' +
            '<td>ber_tag_t is an unsigned integer of at least 32 bits used to represent a BER tag. It is commonly equivalent to a unsigned long.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=307>307</a></td>\n' +
            '<td>The actual definitions of the integral impl_TYPE_t types are platform specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=308>308</a></td>\n' +
            '<td>BerValue, commonly used as struct berval, is used to hold an arbitrary sequence of octets. bv_val points to bv_len octets. bv_val is not necessarily terminated by a NULL (zero) octet. ber_bvfree() frees a BerValue, pointed to by bv, returned from this API. If bv is NULL, the routine does nothing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=309>309</a></td>\n' +
            '<td>ber_bvecfree() frees an array of BerValues (and the array), pointed to by bvec, returned from this API. If bvec is NULL, the routine does nothing. ber_bvecadd() appends the bv pointer to the bvec array. Space for the array is allocated as needed. The end of the array is marked by a NULL pointer.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=310>310</a></td>\n' +
            '<td>ber_bvarray_free() frees an array of BerValues (and the array), pointed to by bvarray, returned from this API. If bvarray is NULL, the routine does nothing. ber_bvarray_add() appends the contents of the BerValue pointed to by bv to the bvarray array. Space for the new element is allocated as needed. The end of the array is marked by a BerValue with a NULL bv_val field.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=311>311</a></td>\n' +
            '<td>ber_bvdup() returns a copy of a BerValue. The routine returns NULL upon error (e.g. out of memory). The caller should use ber_bvfree() to deallocate the resulting BerValue. ber_dupbv() copies a BerValue from src to dst. If dst is NULL a new BerValue will be allocated to hold the copy. The routine returns NULL upon error, otherwise it returns a pointer to the copy. If dst is NULL the caller should use ber_bvfree() to deallocate the resulting BerValue, otherwise ber_memfree() should be used to deallocate the dst-&gt;bv_val. (The ber_bvdup() function is internally implemented as ber_dupbv(NULL, bv). ber_bvdup() is provided only for compatibility with an expired draft of the LDAP C API; ber_dupbv() is the preferred interface.)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=312>312</a></td>\n' +
            '<td>ber_bvstr() returns a BerValue containing the string pointed to by str. ber_bvstrdup() returns a BerValue containing a copy of the string pointed to by str. ber_str2bv() returns a BerValue containing the string pointed to by str, whose length may be optionally specified in len. If dup is non-zero, the BerValue will contain a copy of str. If len is zero, the number of bytes to copy will be determined by strlen(3), otherwise len bytes will be copied. If bv is non-NULL, the result will be stored in the given BerValue, otherwise a new BerValue will be allocated to store the result. NOTE: Both ber_bvstr() and ber_bvstrdup() are implemented as macros using ber_str2bv() in this version of the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=313>313</a></td>\n' +
            '<td>BerElement is an opaque structure used to maintain state information used in encoding and decoding. ber_alloc_t() is used to create an empty BerElement structure. If LBER_USE_DER is specified for the options parameter then data lengths for data written to the BerElement will be encoded in the minimal number of octets required, otherwise they will always be written as four byte values. ber_init() creates a BerElement structure that is initialized with a copy of the data in its bv parameter. ber_init2() initializes an existing BerElement ber using the data in the bv parameter. The data is referenced directly, not copied. The options parameter is the same as for ber_alloc_t(). ber_free() frees a BerElement pointed to by ber. If ber is NULL, the routine does nothing. If freebuf is zero, the internal buffer is not freed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=314>314</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=315>315</a></td>\n' +
            '<td>lber-encode(3), lber-decode(3), lber-memory(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=316>316</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=317>317</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=318>318</a></td>\n' +
            '<td>LBER_TYPES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=319>319</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=320>320</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=321>321</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=322>322</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=323>323</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=324>324</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=325>325</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=326>326</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=327>327</a></td>\n' +
            '<td>ber_int_t, ber_uint_t, ber_len_t, ber_slen_t, ber_tag_t, struct berval, BerValue, BerVarray, BerElement, ber_bvfree, ber_bvecfree, ber_bvecadd, ber_bvarray_free, ber_bvarray_add, ber_bvdup, ber_dupbv, ber_bvstr, ber_bvstrdup, ber_str2bv, ber_alloc_t, ber_init, ber_init2, ber_free − OpenLDAP LBER types and allocation functions</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=328>328</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=329>329</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=330>330</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=331>331</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=332>332</a></td>\n' +
            '<td>typedef impl_tag_t ber_tag_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=333>333</a></td>\n' +
            '<td>typedef impl_int_t ber_int_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=334>334</a></td>\n' +
            '<td>typedef impl_uint_t ber_uint_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=335>335</a></td>\n' +
            '<td>typedef impl_len_t ber_len_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=336>336</a></td>\n' +
            '<td>typedef impl_slen_t ber_slen_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=337>337</a></td>\n' +
            '<td>typedef struct berval {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=338>338</a></td>\n' +
            '<td>ber_len_t bv_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=339>339</a></td>\n' +
            '<td>char *bv_val;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=340>340</a></td>\n' +
            '<td>} BerValue, *BerVarray;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=341>341</a></td>\n' +
            '<td>typedef struct berelement BerElement;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=342>342</a></td>\n' +
            '<td>void ber_bvfree(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=343>343</a></td>\n' +
            '<td>void ber_bvecfree(struct berval **bvec);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=344>344</a></td>\n' +
            '<td>void ber_bvecadd(struct berval ***bvec, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=345>345</a></td>\n' +
            '<td>void ber_bvarray_free(struct berval *bvarray);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=346>346</a></td>\n' +
            '<td>void ber_bvarray_add(BerVarray *bvarray, BerValue *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=347>347</a></td>\n' +
            '<td>struct berval *ber_bvdup(const struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=348>348</a></td>\n' +
            '<td>struct berval *ber_dupbv(const struct berval *dst, struct berval *src);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=349>349</a></td>\n' +
            '<td>struct berval *ber_bvstr(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=350>350</a></td>\n' +
            '<td>struct berval *ber_bvstrdup(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=351>351</a></td>\n' +
            '<td>struct berval *ber_str2bv(const char *str, ber_len_t len, int dup, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=352>352</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=353>353</a></td>\n' +
            '<td>BerElement *ber_init(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=354>354</a></td>\n' +
            '<td>void ber_init2(BerElement *ber, struct berval *bv, int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=355>355</a></td>\n' +
            '<td>void ber_free(BerElement *ber, int freebuf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=356>356</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=357>357</a></td>\n' +
            '<td>The following are the basic types and structures defined for use with the Lightweight BER library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=358>358</a></td>\n' +
            '<td>ber_int_t is a signed integer of at least 32 bits. It is commonly equivalent to int. ber_uint_t is the unsigned variant of ber_int_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=359>359</a></td>\n' +
            '<td>ber_len_t is an unsigned integer of at least 32 bits used to represent a length. It is commonly equivalent to a size_t. ber_slen_t is the signed variant to ber_len_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=360>360</a></td>\n' +
            '<td>ber_tag_t is an unsigned integer of at least 32 bits used to represent a BER tag. It is commonly equivalent to a unsigned long.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=361>361</a></td>\n' +
            '<td>The actual definitions of the integral impl_TYPE_t types are platform specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=362>362</a></td>\n' +
            '<td>BerValue, commonly used as struct berval, is used to hold an arbitrary sequence of octets. bv_val points to bv_len octets. bv_val is not necessarily terminated by a NULL (zero) octet. ber_bvfree() frees a BerValue, pointed to by bv, returned from this API. If bv is NULL, the routine does nothing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=363>363</a></td>\n' +
            '<td>ber_bvecfree() frees an array of BerValues (and the array), pointed to by bvec, returned from this API. If bvec is NULL, the routine does nothing. ber_bvecadd() appends the bv pointer to the bvec array. Space for the array is allocated as needed. The end of the array is marked by a NULL pointer.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=364>364</a></td>\n' +
            '<td>ber_bvarray_free() frees an array of BerValues (and the array), pointed to by bvarray, returned from this API. If bvarray is NULL, the routine does nothing. ber_bvarray_add() appends the contents of the BerValue pointed to by bv to the bvarray array. Space for the new element is allocated as needed. The end of the array is marked by a BerValue with a NULL bv_val field.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=365>365</a></td>\n' +
            '<td>ber_bvdup() returns a copy of a BerValue. The routine returns NULL upon error (e.g. out of memory). The caller should use ber_bvfree() to deallocate the resulting BerValue. ber_dupbv() copies a BerValue from src to dst. If dst is NULL a new BerValue will be allocated to hold the copy. The routine returns NULL upon error, otherwise it returns a pointer to the copy. If dst is NULL the caller should use ber_bvfree() to deallocate the resulting BerValue, otherwise ber_memfree() should be used to deallocate the dst-&gt;bv_val. (The ber_bvdup() function is internally implemented as ber_dupbv(NULL, bv). ber_bvdup() is provided only for compatibility with an expired draft of the LDAP C API; ber_dupbv() is the preferred interface.)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=366>366</a></td>\n' +
            '<td>ber_bvstr() returns a BerValue containing the string pointed to by str. ber_bvstrdup() returns a BerValue containing a copy of the string pointed to by str. ber_str2bv() returns a BerValue containing the string pointed to by str, whose length may be optionally specified in len. If dup is non-zero, the BerValue will contain a copy of str. If len is zero, the number of bytes to copy will be determined by strlen(3), otherwise len bytes will be copied. If bv is non-NULL, the result will be stored in the given BerValue, otherwise a new BerValue will be allocated to store the result. NOTE: Both ber_bvstr() and ber_bvstrdup() are implemented as macros using ber_str2bv() in this version of the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=367>367</a></td>\n' +
            '<td>BerElement is an opaque structure used to maintain state information used in encoding and decoding. ber_alloc_t() is used to create an empty BerElement structure. If LBER_USE_DER is specified for the options parameter then data lengths for data written to the BerElement will be encoded in the minimal number of octets required, otherwise they will always be written as four byte values. ber_init() creates a BerElement structure that is initialized with a copy of the data in its bv parameter. ber_init2() initializes an existing BerElement ber using the data in the bv parameter. The data is referenced directly, not copied. The options parameter is the same as for ber_alloc_t(). ber_free() frees a BerElement pointed to by ber. If ber is NULL, the routine does nothing. If freebuf is zero, the internal buffer is not freed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=368>368</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=369>369</a></td>\n' +
            '<td>lber-encode(3), lber-decode(3), lber-memory(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=370>370</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=371>371</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=372>372</a></td>\n' +
            '<td>LBER_TYPES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=373>373</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=374>374</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=375>375</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=376>376</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=377>377</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=378>378</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=379>379</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=380>380</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=381>381</a></td>\n' +
            '<td>ber_int_t, ber_uint_t, ber_len_t, ber_slen_t, ber_tag_t, struct berval, BerValue, BerVarray, BerElement, ber_bvfree, ber_bvecfree, ber_bvecadd, ber_bvarray_free, ber_bvarray_add, ber_bvdup, ber_dupbv, ber_bvstr, ber_bvstrdup, ber_str2bv, ber_alloc_t, ber_init, ber_init2, ber_free − OpenLDAP LBER types and allocation functions</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=382>382</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=383>383</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=384>384</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=385>385</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=386>386</a></td>\n' +
            '<td>typedef impl_tag_t ber_tag_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=387>387</a></td>\n' +
            '<td>typedef impl_int_t ber_int_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=388>388</a></td>\n' +
            '<td>typedef impl_uint_t ber_uint_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=389>389</a></td>\n' +
            '<td>typedef impl_len_t ber_len_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=390>390</a></td>\n' +
            '<td>typedef impl_slen_t ber_slen_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=391>391</a></td>\n' +
            '<td>typedef struct berval {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=392>392</a></td>\n' +
            '<td>ber_len_t bv_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=393>393</a></td>\n' +
            '<td>char *bv_val;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=394>394</a></td>\n' +
            '<td>} BerValue, *BerVarray;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=395>395</a></td>\n' +
            '<td>typedef struct berelement BerElement;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=396>396</a></td>\n' +
            '<td>void ber_bvfree(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=397>397</a></td>\n' +
            '<td>void ber_bvecfree(struct berval **bvec);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=398>398</a></td>\n' +
            '<td>void ber_bvecadd(struct berval ***bvec, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=399>399</a></td>\n' +
            '<td>void ber_bvarray_free(struct berval *bvarray);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=400>400</a></td>\n' +
            '<td>void ber_bvarray_add(BerVarray *bvarray, BerValue *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=401>401</a></td>\n' +
            '<td>struct berval *ber_bvdup(const struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=402>402</a></td>\n' +
            '<td>struct berval *ber_dupbv(const struct berval *dst, struct berval *src);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=403>403</a></td>\n' +
            '<td>struct berval *ber_bvstr(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=404>404</a></td>\n' +
            '<td>struct berval *ber_bvstrdup(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=405>405</a></td>\n' +
            '<td>struct berval *ber_str2bv(const char *str, ber_len_t len, int dup, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=406>406</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=407>407</a></td>\n' +
            '<td>BerElement *ber_init(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=408>408</a></td>\n' +
            '<td>void ber_init2(BerElement *ber, struct berval *bv, int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=409>409</a></td>\n' +
            '<td>void ber_free(BerElement *ber, int freebuf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=410>410</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=411>411</a></td>\n' +
            '<td>The following are the basic types and structures defined for use with the Lightweight BER library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=412>412</a></td>\n' +
            '<td>ber_int_t is a signed integer of at least 32 bits. It is commonly equivalent to int. ber_uint_t is the unsigned variant of ber_int_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=413>413</a></td>\n' +
            '<td>ber_len_t is an unsigned integer of at least 32 bits used to represent a length. It is commonly equivalent to a size_t. ber_slen_t is the signed variant to ber_len_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=414>414</a></td>\n' +
            '<td>ber_tag_t is an unsigned integer of at least 32 bits used to represent a BER tag. It is commonly equivalent to a unsigned long.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=415>415</a></td>\n' +
            '<td>The actual definitions of the integral impl_TYPE_t types are platform specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=416>416</a></td>\n' +
            '<td>BerValue, commonly used as struct berval, is used to hold an arbitrary sequence of octets. bv_val points to bv_len octets. bv_val is not necessarily terminated by a NULL (zero) octet. ber_bvfree() frees a BerValue, pointed to by bv, returned from this API. If bv is NULL, the routine does nothing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=417>417</a></td>\n' +
            '<td>ber_bvecfree() frees an array of BerValues (and the array), pointed to by bvec, returned from this API. If bvec is NULL, the routine does nothing. ber_bvecadd() appends the bv pointer to the bvec array. Space for the array is allocated as needed. The end of the array is marked by a NULL pointer.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=418>418</a></td>\n' +
            '<td>ber_bvarray_free() frees an array of BerValues (and the array), pointed to by bvarray, returned from this API. If bvarray is NULL, the routine does nothing. ber_bvarray_add() appends the contents of the BerValue pointed to by bv to the bvarray array. Space for the new element is allocated as needed. The end of the array is marked by a BerValue with a NULL bv_val field.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=419>419</a></td>\n' +
            '<td>ber_bvdup() returns a copy of a BerValue. The routine returns NULL upon error (e.g. out of memory). The caller should use ber_bvfree() to deallocate the resulting BerValue. ber_dupbv() copies a BerValue from src to dst. If dst is NULL a new BerValue will be allocated to hold the copy. The routine returns NULL upon error, otherwise it returns a pointer to the copy. If dst is NULL the caller should use ber_bvfree() to deallocate the resulting BerValue, otherwise ber_memfree() should be used to deallocate the dst-&gt;bv_val. (The ber_bvdup() function is internally implemented as ber_dupbv(NULL, bv). ber_bvdup() is provided only for compatibility with an expired draft of the LDAP C API; ber_dupbv() is the preferred interface.)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=420>420</a></td>\n' +
            '<td>ber_bvstr() returns a BerValue containing the string pointed to by str. ber_bvstrdup() returns a BerValue containing a copy of the string pointed to by str. ber_str2bv() returns a BerValue containing the string pointed to by str, whose length may be optionally specified in len. If dup is non-zero, the BerValue will contain a copy of str. If len is zero, the number of bytes to copy will be determined by strlen(3), otherwise len bytes will be copied. If bv is non-NULL, the result will be stored in the given BerValue, otherwise a new BerValue will be allocated to store the result. NOTE: Both ber_bvstr() and ber_bvstrdup() are implemented as macros using ber_str2bv() in this version of the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=421>421</a></td>\n' +
            '<td>BerElement is an opaque structure used to maintain state information used in encoding and decoding. ber_alloc_t() is used to create an empty BerElement structure. If LBER_USE_DER is specified for the options parameter then data lengths for data written to the BerElement will be encoded in the minimal number of octets required, otherwise they will always be written as four byte values. ber_init() creates a BerElement structure that is initialized with a copy of the data in its bv parameter. ber_init2() initializes an existing BerElement ber using the data in the bv parameter. The data is referenced directly, not copied. The options parameter is the same as for ber_alloc_t(). ber_free() frees a BerElement pointed to by ber. If ber is NULL, the routine does nothing. If freebuf is zero, the internal buffer is not freed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=422>422</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=423>423</a></td>\n' +
            '<td>lber-encode(3), lber-decode(3), lber-memory(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=424>424</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=425>425</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=426>426</a></td>\n' +
            '<td>LBER_TYPES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=427>427</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=428>428</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=429>429</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=430>430</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=431>431</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=432>432</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=433>433</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=434>434</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=435>435</a></td>\n' +
            '<td>ber_int_t, ber_uint_t, ber_len_t, ber_slen_t, ber_tag_t, struct berval, BerValue, BerVarray, BerElement, ber_bvfree, ber_bvecfree, ber_bvecadd, ber_bvarray_free, ber_bvarray_add, ber_bvdup, ber_dupbv, ber_bvstr, ber_bvstrdup, ber_str2bv, ber_alloc_t, ber_init, ber_init2, ber_free − OpenLDAP LBER types and allocation functions</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=436>436</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=437>437</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=438>438</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=439>439</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=440>440</a></td>\n' +
            '<td>typedef impl_tag_t ber_tag_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=441>441</a></td>\n' +
            '<td>typedef impl_int_t ber_int_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=442>442</a></td>\n' +
            '<td>typedef impl_uint_t ber_uint_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=443>443</a></td>\n' +
            '<td>typedef impl_len_t ber_len_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=444>444</a></td>\n' +
            '<td>typedef impl_slen_t ber_slen_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=445>445</a></td>\n' +
            '<td>typedef struct berval {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=446>446</a></td>\n' +
            '<td>ber_len_t bv_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=447>447</a></td>\n' +
            '<td>char *bv_val;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=448>448</a></td>\n' +
            '<td>} BerValue, *BerVarray;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=449>449</a></td>\n' +
            '<td>typedef struct berelement BerElement;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=450>450</a></td>\n' +
            '<td>void ber_bvfree(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=451>451</a></td>\n' +
            '<td>void ber_bvecfree(struct berval **bvec);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=452>452</a></td>\n' +
            '<td>void ber_bvecadd(struct berval ***bvec, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=453>453</a></td>\n' +
            '<td>void ber_bvarray_free(struct berval *bvarray);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=454>454</a></td>\n' +
            '<td>void ber_bvarray_add(BerVarray *bvarray, BerValue *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=455>455</a></td>\n' +
            '<td>struct berval *ber_bvdup(const struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=456>456</a></td>\n' +
            '<td>struct berval *ber_dupbv(const struct berval *dst, struct berval *src);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=457>457</a></td>\n' +
            '<td>struct berval *ber_bvstr(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=458>458</a></td>\n' +
            '<td>struct berval *ber_bvstrdup(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=459>459</a></td>\n' +
            '<td>struct berval *ber_str2bv(const char *str, ber_len_t len, int dup, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=460>460</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=461>461</a></td>\n' +
            '<td>BerElement *ber_init(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=462>462</a></td>\n' +
            '<td>void ber_init2(BerElement *ber, struct berval *bv, int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=463>463</a></td>\n' +
            '<td>void ber_free(BerElement *ber, int freebuf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=464>464</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=465>465</a></td>\n' +
            '<td>The following are the basic types and structures defined for use with the Lightweight BER library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=466>466</a></td>\n' +
            '<td>ber_int_t is a signed integer of at least 32 bits. It is commonly equivalent to int. ber_uint_t is the unsigned variant of ber_int_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=467>467</a></td>\n' +
            '<td>ber_len_t is an unsigned integer of at least 32 bits used to represent a length. It is commonly equivalent to a size_t. ber_slen_t is the signed variant to ber_len_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=468>468</a></td>\n' +
            '<td>ber_tag_t is an unsigned integer of at least 32 bits used to represent a BER tag. It is commonly equivalent to a unsigned long.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=469>469</a></td>\n' +
            '<td>The actual definitions of the integral impl_TYPE_t types are platform specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=470>470</a></td>\n' +
            '<td>BerValue, commonly used as struct berval, is used to hold an arbitrary sequence of octets. bv_val points to bv_len octets. bv_val is not necessarily terminated by a NULL (zero) octet. ber_bvfree() frees a BerValue, pointed to by bv, returned from this API. If bv is NULL, the routine does nothing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=471>471</a></td>\n' +
            '<td>ber_bvecfree() frees an array of BerValues (and the array), pointed to by bvec, returned from this API. If bvec is NULL, the routine does nothing. ber_bvecadd() appends the bv pointer to the bvec array. Space for the array is allocated as needed. The end of the array is marked by a NULL pointer.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=472>472</a></td>\n' +
            '<td>ber_bvarray_free() frees an array of BerValues (and the array), pointed to by bvarray, returned from this API. If bvarray is NULL, the routine does nothing. ber_bvarray_add() appends the contents of the BerValue pointed to by bv to the bvarray array. Space for the new element is allocated as needed. The end of the array is marked by a BerValue with a NULL bv_val field.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=473>473</a></td>\n' +
            '<td>ber_bvdup() returns a copy of a BerValue. The routine returns NULL upon error (e.g. out of memory). The caller should use ber_bvfree() to deallocate the resulting BerValue. ber_dupbv() copies a BerValue from src to dst. If dst is NULL a new BerValue will be allocated to hold the copy. The routine returns NULL upon error, otherwise it returns a pointer to the copy. If dst is NULL the caller should use ber_bvfree() to deallocate the resulting BerValue, otherwise ber_memfree() should be used to deallocate the dst-&gt;bv_val. (The ber_bvdup() function is internally implemented as ber_dupbv(NULL, bv). ber_bvdup() is provided only for compatibility with an expired draft of the LDAP C API; ber_dupbv() is the preferred interface.)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=474>474</a></td>\n' +
            '<td>ber_bvstr() returns a BerValue containing the string pointed to by str. ber_bvstrdup() returns a BerValue containing a copy of the string pointed to by str. ber_str2bv() returns a BerValue containing the string pointed to by str, whose length may be optionally specified in len. If dup is non-zero, the BerValue will contain a copy of str. If len is zero, the number of bytes to copy will be determined by strlen(3), otherwise len bytes will be copied. If bv is non-NULL, the result will be stored in the given BerValue, otherwise a new BerValue will be allocated to store the result. NOTE: Both ber_bvstr() and ber_bvstrdup() are implemented as macros using ber_str2bv() in this version of the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=475>475</a></td>\n' +
            '<td>BerElement is an opaque structure used to maintain state information used in encoding and decoding. ber_alloc_t() is used to create an empty BerElement structure. If LBER_USE_DER is specified for the options parameter then data lengths for data written to the BerElement will be encoded in the minimal number of octets required, otherwise they will always be written as four byte values. ber_init() creates a BerElement structure that is initialized with a copy of the data in its bv parameter. ber_init2() initializes an existing BerElement ber using the data in the bv parameter. The data is referenced directly, not copied. The options parameter is the same as for ber_alloc_t(). ber_free() frees a BerElement pointed to by ber. If ber is NULL, the routine does nothing. If freebuf is zero, the internal buffer is not freed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=476>476</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=477>477</a></td>\n' +
            '<td>lber-encode(3), lber-decode(3), lber-memory(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=478>478</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=479>479</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=480>480</a></td>\n' +
            '<td>LBER_TYPES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=481>481</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=482>482</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=483>483</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=484>484</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=485>485</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=486>486</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=487>487</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=488>488</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=489>489</a></td>\n' +
            '<td>ber_int_t, ber_uint_t, ber_len_t, ber_slen_t, ber_tag_t, struct berval, BerValue, BerVarray, BerElement, ber_bvfree, ber_bvecfree, ber_bvecadd, ber_bvarray_free, ber_bvarray_add, ber_bvdup, ber_dupbv, ber_bvstr, ber_bvstrdup, ber_str2bv, ber_alloc_t, ber_init, ber_init2, ber_free − OpenLDAP LBER types and allocation functions</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=490>490</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=491>491</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=492>492</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=493>493</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=494>494</a></td>\n' +
            '<td>typedef impl_tag_t ber_tag_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=495>495</a></td>\n' +
            '<td>typedef impl_int_t ber_int_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=496>496</a></td>\n' +
            '<td>typedef impl_uint_t ber_uint_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=497>497</a></td>\n' +
            '<td>typedef impl_len_t ber_len_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=498>498</a></td>\n' +
            '<td>typedef impl_slen_t ber_slen_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=499>499</a></td>\n' +
            '<td>typedef struct berval {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=500>500</a></td>\n' +
            '<td>ber_len_t bv_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=501>501</a></td>\n' +
            '<td>char *bv_val;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=502>502</a></td>\n' +
            '<td>} BerValue, *BerVarray;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=503>503</a></td>\n' +
            '<td>typedef struct berelement BerElement;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=504>504</a></td>\n' +
            '<td>void ber_bvfree(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=505>505</a></td>\n' +
            '<td>void ber_bvecfree(struct berval **bvec);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=506>506</a></td>\n' +
            '<td>void ber_bvecadd(struct berval ***bvec, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=507>507</a></td>\n' +
            '<td>void ber_bvarray_free(struct berval *bvarray);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=508>508</a></td>\n' +
            '<td>void ber_bvarray_add(BerVarray *bvarray, BerValue *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=509>509</a></td>\n' +
            '<td>struct berval *ber_bvdup(const struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=510>510</a></td>\n' +
            '<td>struct berval *ber_dupbv(const struct berval *dst, struct berval *src);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=511>511</a></td>\n' +
            '<td>struct berval *ber_bvstr(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=512>512</a></td>\n' +
            '<td>struct berval *ber_bvstrdup(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=513>513</a></td>\n' +
            '<td>struct berval *ber_str2bv(const char *str, ber_len_t len, int dup, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=514>514</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=515>515</a></td>\n' +
            '<td>BerElement *ber_init(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=516>516</a></td>\n' +
            '<td>void ber_init2(BerElement *ber, struct berval *bv, int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=517>517</a></td>\n' +
            '<td>void ber_free(BerElement *ber, int freebuf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=518>518</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=519>519</a></td>\n' +
            '<td>The following are the basic types and structures defined for use with the Lightweight BER library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=520>520</a></td>\n' +
            '<td>ber_int_t is a signed integer of at least 32 bits. It is commonly equivalent to int. ber_uint_t is the unsigned variant of ber_int_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=521>521</a></td>\n' +
            '<td>ber_len_t is an unsigned integer of at least 32 bits used to represent a length. It is commonly equivalent to a size_t. ber_slen_t is the signed variant to ber_len_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=522>522</a></td>\n' +
            '<td>ber_tag_t is an unsigned integer of at least 32 bits used to represent a BER tag. It is commonly equivalent to a unsigned long.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=523>523</a></td>\n' +
            '<td>The actual definitions of the integral impl_TYPE_t types are platform specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=524>524</a></td>\n' +
            '<td>BerValue, commonly used as struct berval, is used to hold an arbitrary sequence of octets. bv_val points to bv_len octets. bv_val is not necessarily terminated by a NULL (zero) octet. ber_bvfree() frees a BerValue, pointed to by bv, returned from this API. If bv is NULL, the routine does nothing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=525>525</a></td>\n' +
            '<td>ber_bvecfree() frees an array of BerValues (and the array), pointed to by bvec, returned from this API. If bvec is NULL, the routine does nothing. ber_bvecadd() appends the bv pointer to the bvec array. Space for the array is allocated as needed. The end of the array is marked by a NULL pointer.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=526>526</a></td>\n' +
            '<td>ber_bvarray_free() frees an array of BerValues (and the array), pointed to by bvarray, returned from this API. If bvarray is NULL, the routine does nothing. ber_bvarray_add() appends the contents of the BerValue pointed to by bv to the bvarray array. Space for the new element is allocated as needed. The end of the array is marked by a BerValue with a NULL bv_val field.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=527>527</a></td>\n' +
            '<td>ber_bvdup() returns a copy of a BerValue. The routine returns NULL upon error (e.g. out of memory). The caller should use ber_bvfree() to deallocate the resulting BerValue. ber_dupbv() copies a BerValue from src to dst. If dst is NULL a new BerValue will be allocated to hold the copy. The routine returns NULL upon error, otherwise it returns a pointer to the copy. If dst is NULL the caller should use ber_bvfree() to deallocate the resulting BerValue, otherwise ber_memfree() should be used to deallocate the dst-&gt;bv_val. (The ber_bvdup() function is internally implemented as ber_dupbv(NULL, bv). ber_bvdup() is provided only for compatibility with an expired draft of the LDAP C API; ber_dupbv() is the preferred interface.)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=528>528</a></td>\n' +
            '<td>ber_bvstr() returns a BerValue containing the string pointed to by str. ber_bvstrdup() returns a BerValue containing a copy of the string pointed to by str. ber_str2bv() returns a BerValue containing the string pointed to by str, whose length may be optionally specified in len. If dup is non-zero, the BerValue will contain a copy of str. If len is zero, the number of bytes to copy will be determined by strlen(3), otherwise len bytes will be copied. If bv is non-NULL, the result will be stored in the given BerValue, otherwise a new BerValue will be allocated to store the result. NOTE: Both ber_bvstr() and ber_bvstrdup() are implemented as macros using ber_str2bv() in this version of the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=529>529</a></td>\n' +
            '<td>BerElement is an opaque structure used to maintain state information used in encoding and decoding. ber_alloc_t() is used to create an empty BerElement structure. If LBER_USE_DER is specified for the options parameter then data lengths for data written to the BerElement will be encoded in the minimal number of octets required, otherwise they will always be written as four byte values. ber_init() creates a BerElement structure that is initialized with a copy of the data in its bv parameter. ber_init2() initializes an existing BerElement ber using the data in the bv parameter. The data is referenced directly, not copied. The options parameter is the same as for ber_alloc_t(). ber_free() frees a BerElement pointed to by ber. If ber is NULL, the routine does nothing. If freebuf is zero, the internal buffer is not freed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=530>530</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=531>531</a></td>\n' +
            '<td>lber-encode(3), lber-decode(3), lber-memory(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=532>532</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=533>533</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=534>534</a></td>\n' +
            '<td>LBER_TYPES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=535>535</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=536>536</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=537>537</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=538>538</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=539>539</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=540>540</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=541>541</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=542>542</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=543>543</a></td>\n' +
            '<td>ber_int_t, ber_uint_t, ber_len_t, ber_slen_t, ber_tag_t, struct berval, BerValue, BerVarray, BerElement, ber_bvfree, ber_bvecfree, ber_bvecadd, ber_bvarray_free, ber_bvarray_add, ber_bvdup, ber_dupbv, ber_bvstr, ber_bvstrdup, ber_str2bv, ber_alloc_t, ber_init, ber_init2, ber_free − OpenLDAP LBER types and allocation functions</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=544>544</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=545>545</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=546>546</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=547>547</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=548>548</a></td>\n' +
            '<td>typedef impl_tag_t ber_tag_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=549>549</a></td>\n' +
            '<td>typedef impl_int_t ber_int_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=550>550</a></td>\n' +
            '<td>typedef impl_uint_t ber_uint_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=551>551</a></td>\n' +
            '<td>typedef impl_len_t ber_len_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=552>552</a></td>\n' +
            '<td>typedef impl_slen_t ber_slen_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=553>553</a></td>\n' +
            '<td>typedef struct berval {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=554>554</a></td>\n' +
            '<td>ber_len_t bv_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=555>555</a></td>\n' +
            '<td>char *bv_val;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=556>556</a></td>\n' +
            '<td>} BerValue, *BerVarray;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=557>557</a></td>\n' +
            '<td>typedef struct berelement BerElement;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=558>558</a></td>\n' +
            '<td>void ber_bvfree(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=559>559</a></td>\n' +
            '<td>void ber_bvecfree(struct berval **bvec);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=560>560</a></td>\n' +
            '<td>void ber_bvecadd(struct berval ***bvec, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=561>561</a></td>\n' +
            '<td>void ber_bvarray_free(struct berval *bvarray);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=562>562</a></td>\n' +
            '<td>void ber_bvarray_add(BerVarray *bvarray, BerValue *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=563>563</a></td>\n' +
            '<td>struct berval *ber_bvdup(const struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=564>564</a></td>\n' +
            '<td>struct berval *ber_dupbv(const struct berval *dst, struct berval *src);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=565>565</a></td>\n' +
            '<td>struct berval *ber_bvstr(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=566>566</a></td>\n' +
            '<td>struct berval *ber_bvstrdup(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=567>567</a></td>\n' +
            '<td>struct berval *ber_str2bv(const char *str, ber_len_t len, int dup, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=568>568</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=569>569</a></td>\n' +
            '<td>BerElement *ber_init(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=570>570</a></td>\n' +
            '<td>void ber_init2(BerElement *ber, struct berval *bv, int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=571>571</a></td>\n' +
            '<td>void ber_free(BerElement *ber, int freebuf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=572>572</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=573>573</a></td>\n' +
            '<td>The following are the basic types and structures defined for use with the Lightweight BER library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=574>574</a></td>\n' +
            '<td>ber_int_t is a signed integer of at least 32 bits. It is commonly equivalent to int. ber_uint_t is the unsigned variant of ber_int_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=575>575</a></td>\n' +
            '<td>ber_len_t is an unsigned integer of at least 32 bits used to represent a length. It is commonly equivalent to a size_t. ber_slen_t is the signed variant to ber_len_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=576>576</a></td>\n' +
            '<td>ber_tag_t is an unsigned integer of at least 32 bits used to represent a BER tag. It is commonly equivalent to a unsigned long.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=577>577</a></td>\n' +
            '<td>The actual definitions of the integral impl_TYPE_t types are platform specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=578>578</a></td>\n' +
            '<td>BerValue, commonly used as struct berval, is used to hold an arbitrary sequence of octets. bv_val points to bv_len octets. bv_val is not necessarily terminated by a NULL (zero) octet. ber_bvfree() frees a BerValue, pointed to by bv, returned from this API. If bv is NULL, the routine does nothing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=579>579</a></td>\n' +
            '<td>ber_bvecfree() frees an array of BerValues (and the array), pointed to by bvec, returned from this API. If bvec is NULL, the routine does nothing. ber_bvecadd() appends the bv pointer to the bvec array. Space for the array is allocated as needed. The end of the array is marked by a NULL pointer.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=580>580</a></td>\n' +
            '<td>ber_bvarray_free() frees an array of BerValues (and the array), pointed to by bvarray, returned from this API. If bvarray is NULL, the routine does nothing. ber_bvarray_add() appends the contents of the BerValue pointed to by bv to the bvarray array. Space for the new element is allocated as needed. The end of the array is marked by a BerValue with a NULL bv_val field.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=581>581</a></td>\n' +
            '<td>ber_bvdup() returns a copy of a BerValue. The routine returns NULL upon error (e.g. out of memory). The caller should use ber_bvfree() to deallocate the resulting BerValue. ber_dupbv() copies a BerValue from src to dst. If dst is NULL a new BerValue will be allocated to hold the copy. The routine returns NULL upon error, otherwise it returns a pointer to the copy. If dst is NULL the caller should use ber_bvfree() to deallocate the resulting BerValue, otherwise ber_memfree() should be used to deallocate the dst-&gt;bv_val. (The ber_bvdup() function is internally implemented as ber_dupbv(NULL, bv). ber_bvdup() is provided only for compatibility with an expired draft of the LDAP C API; ber_dupbv() is the preferred interface.)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=582>582</a></td>\n' +
            '<td>ber_bvstr() returns a BerValue containing the string pointed to by str. ber_bvstrdup() returns a BerValue containing a copy of the string pointed to by str. ber_str2bv() returns a BerValue containing the string pointed to by str, whose length may be optionally specified in len. If dup is non-zero, the BerValue will contain a copy of str. If len is zero, the number of bytes to copy will be determined by strlen(3), otherwise len bytes will be copied. If bv is non-NULL, the result will be stored in the given BerValue, otherwise a new BerValue will be allocated to store the result. NOTE: Both ber_bvstr() and ber_bvstrdup() are implemented as macros using ber_str2bv() in this version of the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=583>583</a></td>\n' +
            '<td>BerElement is an opaque structure used to maintain state information used in encoding and decoding. ber_alloc_t() is used to create an empty BerElement structure. If LBER_USE_DER is specified for the options parameter then data lengths for data written to the BerElement will be encoded in the minimal number of octets required, otherwise they will always be written as four byte values. ber_init() creates a BerElement structure that is initialized with a copy of the data in its bv parameter. ber_init2() initializes an existing BerElement ber using the data in the bv parameter. The data is referenced directly, not copied. The options parameter is the same as for ber_alloc_t(). ber_free() frees a BerElement pointed to by ber. If ber is NULL, the routine does nothing. If freebuf is zero, the internal buffer is not freed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=584>584</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=585>585</a></td>\n' +
            '<td>lber-encode(3), lber-decode(3), lber-memory(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=586>586</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=587>587</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=588>588</a></td>\n' +
            '<td>LBER_TYPES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=589>589</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=590>590</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=591>591</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=592>592</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=593>593</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=594>594</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=595>595</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=596>596</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=597>597</a></td>\n' +
            '<td>ber_int_t, ber_uint_t, ber_len_t, ber_slen_t, ber_tag_t, struct berval, BerValue, BerVarray, BerElement, ber_bvfree, ber_bvecfree, ber_bvecadd, ber_bvarray_free, ber_bvarray_add, ber_bvdup, ber_dupbv, ber_bvstr, ber_bvstrdup, ber_str2bv, ber_alloc_t, ber_init, ber_init2, ber_free − OpenLDAP LBER types and allocation functions</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=598>598</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=599>599</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=600>600</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=601>601</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=602>602</a></td>\n' +
            '<td>typedef impl_tag_t ber_tag_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=603>603</a></td>\n' +
            '<td>typedef impl_int_t ber_int_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=604>604</a></td>\n' +
            '<td>typedef impl_uint_t ber_uint_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=605>605</a></td>\n' +
            '<td>typedef impl_len_t ber_len_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=606>606</a></td>\n' +
            '<td>typedef impl_slen_t ber_slen_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=607>607</a></td>\n' +
            '<td>typedef struct berval {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=608>608</a></td>\n' +
            '<td>ber_len_t bv_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=609>609</a></td>\n' +
            '<td>char *bv_val;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=610>610</a></td>\n' +
            '<td>} BerValue, *BerVarray;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=611>611</a></td>\n' +
            '<td>typedef struct berelement BerElement;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=612>612</a></td>\n' +
            '<td>void ber_bvfree(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=613>613</a></td>\n' +
            '<td>void ber_bvecfree(struct berval **bvec);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=614>614</a></td>\n' +
            '<td>void ber_bvecadd(struct berval ***bvec, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=615>615</a></td>\n' +
            '<td>void ber_bvarray_free(struct berval *bvarray);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=616>616</a></td>\n' +
            '<td>void ber_bvarray_add(BerVarray *bvarray, BerValue *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=617>617</a></td>\n' +
            '<td>struct berval *ber_bvdup(const struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=618>618</a></td>\n' +
            '<td>struct berval *ber_dupbv(const struct berval *dst, struct berval *src);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=619>619</a></td>\n' +
            '<td>struct berval *ber_bvstr(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=620>620</a></td>\n' +
            '<td>struct berval *ber_bvstrdup(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=621>621</a></td>\n' +
            '<td>struct berval *ber_str2bv(const char *str, ber_len_t len, int dup, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=622>622</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=623>623</a></td>\n' +
            '<td>BerElement *ber_init(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=624>624</a></td>\n' +
            '<td>void ber_init2(BerElement *ber, struct berval *bv, int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=625>625</a></td>\n' +
            '<td>void ber_free(BerElement *ber, int freebuf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=626>626</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=627>627</a></td>\n' +
            '<td>The following are the basic types and structures defined for use with the Lightweight BER library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=628>628</a></td>\n' +
            '<td>ber_int_t is a signed integer of at least 32 bits. It is commonly equivalent to int. ber_uint_t is the unsigned variant of ber_int_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=629>629</a></td>\n' +
            '<td>ber_len_t is an unsigned integer of at least 32 bits used to represent a length. It is commonly equivalent to a size_t. ber_slen_t is the signed variant to ber_len_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=630>630</a></td>\n' +
            '<td>ber_tag_t is an unsigned integer of at least 32 bits used to represent a BER tag. It is commonly equivalent to a unsigned long.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=631>631</a></td>\n' +
            '<td>The actual definitions of the integral impl_TYPE_t types are platform specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=632>632</a></td>\n' +
            '<td>BerValue, commonly used as struct berval, is used to hold an arbitrary sequence of octets. bv_val points to bv_len octets. bv_val is not necessarily terminated by a NULL (zero) octet. ber_bvfree() frees a BerValue, pointed to by bv, returned from this API. If bv is NULL, the routine does nothing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=633>633</a></td>\n' +
            '<td>ber_bvecfree() frees an array of BerValues (and the array), pointed to by bvec, returned from this API. If bvec is NULL, the routine does nothing. ber_bvecadd() appends the bv pointer to the bvec array. Space for the array is allocated as needed. The end of the array is marked by a NULL pointer.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=634>634</a></td>\n' +
            '<td>ber_bvarray_free() frees an array of BerValues (and the array), pointed to by bvarray, returned from this API. If bvarray is NULL, the routine does nothing. ber_bvarray_add() appends the contents of the BerValue pointed to by bv to the bvarray array. Space for the new element is allocated as needed. The end of the array is marked by a BerValue with a NULL bv_val field.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=635>635</a></td>\n' +
            '<td>ber_bvdup() returns a copy of a BerValue. The routine returns NULL upon error (e.g. out of memory). The caller should use ber_bvfree() to deallocate the resulting BerValue. ber_dupbv() copies a BerValue from src to dst. If dst is NULL a new BerValue will be allocated to hold the copy. The routine returns NULL upon error, otherwise it returns a pointer to the copy. If dst is NULL the caller should use ber_bvfree() to deallocate the resulting BerValue, otherwise ber_memfree() should be used to deallocate the dst-&gt;bv_val. (The ber_bvdup() function is internally implemented as ber_dupbv(NULL, bv). ber_bvdup() is provided only for compatibility with an expired draft of the LDAP C API; ber_dupbv() is the preferred interface.)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=636>636</a></td>\n' +
            '<td>ber_bvstr() returns a BerValue containing the string pointed to by str. ber_bvstrdup() returns a BerValue containing a copy of the string pointed to by str. ber_str2bv() returns a BerValue containing the string pointed to by str, whose length may be optionally specified in len. If dup is non-zero, the BerValue will contain a copy of str. If len is zero, the number of bytes to copy will be determined by strlen(3), otherwise len bytes will be copied. If bv is non-NULL, the result will be stored in the given BerValue, otherwise a new BerValue will be allocated to store the result. NOTE: Both ber_bvstr() and ber_bvstrdup() are implemented as macros using ber_str2bv() in this version of the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=637>637</a></td>\n' +
            '<td>BerElement is an opaque structure used to maintain state information used in encoding and decoding. ber_alloc_t() is used to create an empty BerElement structure. If LBER_USE_DER is specified for the options parameter then data lengths for data written to the BerElement will be encoded in the minimal number of octets required, otherwise they will always be written as four byte values. ber_init() creates a BerElement structure that is initialized with a copy of the data in its bv parameter. ber_init2() initializes an existing BerElement ber using the data in the bv parameter. The data is referenced directly, not copied. The options parameter is the same as for ber_alloc_t(). ber_free() frees a BerElement pointed to by ber. If ber is NULL, the routine does nothing. If freebuf is zero, the internal buffer is not freed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=638>638</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=639>639</a></td>\n' +
            '<td>lber-encode(3), lber-decode(3), lber-memory(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=640>640</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=641>641</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=642>642</a></td>\n' +
            '<td>LBER_DECODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=643>643</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=644>644</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=645>645</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=646>646</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=647>647</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=648>648</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=649>649</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=650>650</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=651>651</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=652>652</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=653>653</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=654>654</a></td>\n' +
            '<td>ber_get_next, ber_skip_tag, ber_peek_tag, ber_scanf, ber_get_int, ber_get_enum, ber_get_stringb, ber_get_stringa, ber_get_stringal, ber_get_stringbv, ber_get_null, ber_get_boolean, ber_get_bitstring, ber_first_element, ber_next_element − OpenLDAP LBER simplified Basic Encoding Rules library routines for decoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=655>655</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=656>656</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=657>657</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=658>658</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=659>659</a></td>\n' +
            '<td>ber_tag_t ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=660>660</a></td>\n' +
            '<td>ber_tag_t ber_skip_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=661>661</a></td>\n' +
            '<td>ber_tag_t ber_peek_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=662>662</a></td>\n' +
            '<td>ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=663>663</a></td>\n' +
            '<td>ber_tag_t ber_get_int(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=664>664</a></td>\n' +
            '<td>ber_tag_t ber_get_enum(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=665>665</a></td>\n' +
            '<td>ber_tag_t ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=666>666</a></td>\n' +
            '<td>ber_tag_t ber_get_stringa(BerElement *ber, char **buf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=667>667</a></td>\n' +
            '<td>ber_tag_t ber_get_stringal(BerElement *ber, struct berval **bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=668>668</a></td>\n' +
            '<td>ber_tag_t ber_get_stringbv(BerElement *ber, struct berval *bv, int alloc);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=669>669</a></td>\n' +
            '<td>ber_tag_t ber_get_null(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=670>670</a></td>\n' +
            '<td>ber_tag_t ber_get_boolean(BerElement *ber, ber_int_t *bool);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=671>671</a></td>\n' +
            '<td>ber_tag_t ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *blen);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=672>672</a></td>\n' +
            '<td>ber_tag_t ber_first_element(BerElement *ber, ber_len_t *len, char **cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=673>673</a></td>\n' +
            '<td>ber_tag_t ber_next_element(BerElement *ber, ber_len_t *len, const char *cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=674>674</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=675>675</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the decoding routines in the lber library. See lber-encode(3) for details on the corresponding encoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=676>676</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_get_next() to get the next BER element and ber_scanf() to do the actual decoding. In some cases, ber_peek_tag() may also need to be called in normal usage. The other routines are provided for those applications that need more control than ber_scanf() provides. In general, these routines return the tag of the element decoded, or LBER_ERROR if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=677>677</a></td>\n' +
            '<td>The ber_get_next() routine is used to read the next BER element from the given Sockbuf, sb. It strips off and returns the leading tag, strips off and returns the length of the entire element in len, and sets up ber for subsequent calls to ber_scanf() et al to decode the element. See lber-sockbuf(3) for details of the Sockbuf implementation of the sb parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=678>678</a></td>\n' +
            '<td>The ber_scanf() routine is used to decode a BER element in much the same way that scanf(3) works. It reads from ber, a pointer to a BerElement such as returned by ber_get_next(), interprets the bytes according to the format string fmt, and stores the results in its additional arguments. The format string contains conversion specifications which are used to direct the interpretation of the BER element. The format string can contain the following characters.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=679>679</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=680>680</a></td>\n' +
            '<td>a</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=681>681</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=682>682</a></td>\n' +
            '<td>Octet string. A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=683>683</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=684>684</a></td>\n' +
            '<td>A</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=685>685</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=686>686</a></td>\n' +
            '<td>Octet string. A variant of "a". A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter, unless a zero-length string would result; in that case, the arg is set to NULL. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=687>687</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=688>688</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=689>689</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=690>690</a></td>\n' +
            '<td>Octet string. A char * buffer should be supplied, followed by a pointer to a ber_len_t initialized to the size of the buffer. Upon return, the null-terminated octet string is put into the buffer, and the ber_len_t is set to the actual size of the octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=691>691</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=692>692</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=693>693</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=694>694</a></td>\n' +
            '<td>Octet string. A struct ber_val ** should be supplied, which upon return points to a dynamically allocated struct berval containing the octet string and its length. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=695>695</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=696>696</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=697>697</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=698>698</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the dynamically allocated octet string and its length. The caller should free the returned octet string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=699>699</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=700>700</a></td>\n' +
            '<td>m</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=701>701</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=702>702</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the octet string and its length. The string resides in memory assigned to the BerElement, and must not be freed by the caller.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=703>703</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=704>704</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=705>705</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=706>706</a></td>\n' +
            '<td>Boolean. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=707>707</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=708>708</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=709>709</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=710>710</a></td>\n' +
            '<td>Enumeration. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=711>711</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=712>712</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=713>713</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=714>714</a></td>\n' +
            '<td>Integer. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=715>715</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=716>716</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=717>717</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=718>718</a></td>\n' +
            '<td>Bitstring. A char ** should be supplied which will point to the dynamically allocated bits, followed by a ber_len_t *, which will point to the length (in bits) of the bitstring returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=719>719</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=720>720</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=721>721</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=722>722</a></td>\n' +
            '<td>Null. No parameter is required. The element is simply skipped if it is recognized.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=723>723</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=724>724</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=725>725</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=726>726</a></td>\n' +
            '<td>Sequence of octet strings. A char *** should be supplied, which upon return points to a dynamically allocated null-terminated array of char *’s containing the octet strings. NULL is returned if the sequence is empty. The caller should free the returned array and octet strings using ber_memvfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=727>727</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=728>728</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=729>729</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=730>730</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A struct berval *** should be supplied, which upon return points to a dynamically allocated null-terminated array of struct berval *’s containing the octet strings and their lengths. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvecfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=731>731</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=732>732</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=733>733</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=734>734</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A BerVarray * should be supplied, which upon return points to a dynamically allocated array of struct berval’s containing the octet strings and their lengths. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvarray_fr ee().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=735>735</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=736>736</a></td>\n' +
            '<td>M</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=737>737</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=738>738</a></td>\n' +
            '<td>Sequence of octet strings with lengths. This is a generalized form of the previous three formats. A void ** (ptr) should be supplied, followed by a ber_len_t * (len) and a ber_len_t (off). Upon return (ptr) will point to a dynamically allocated array whose elements are all of size (*len). A struct berval will be filled starting at offset (off) in each element. The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The number of elements in the array is also stored in (*len) on return. The caller should free the returned array using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=739>739</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=740>740</a></td>\n' +
            '<td>l</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=741>741</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=742>742</a></td>\n' +
            '<td>Length of the next element. A pointer to a ber_len_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=743>743</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=744>744</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=745>745</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=746>746</a></td>\n' +
            '<td>Tag of the next element. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=747>747</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=748>748</a></td>\n' +
            '<td>T</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=749>749</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=750>750</a></td>\n' +
            '<td>Skip element and return its tag. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=751>751</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=752>752</a></td>\n' +
            '<td>x</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=753>753</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=754>754</a></td>\n' +
            '<td>Skip element. The next element is skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=755>755</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=756>756</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=757>757</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=758>758</a></td>\n' +
            '<td>Begin sequence. No parameter is required. The initial sequence tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=759>759</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=760>760</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=761>761</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=762>762</a></td>\n' +
            '<td>End sequence. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=763>763</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=764>764</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=765>765</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=766>766</a></td>\n' +
            '<td>Begin set. No parameter is required. The initial set tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=767>767</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=768>768</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=769>769</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=770>770</a></td>\n' +
            '<td>End set. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=771>771</a></td>\n' +
            '<td>The ber_get_int() routine tries to interpret the next element as an integer, returning the result in num. The tag of whatever it finds is returned on success, LBER_ERROR (−1) on failure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=772>772</a></td>\n' +
            '<td>The ber_get_stringb() routine is used to read an octet string into a preallocated buffer. The len parameter should be initialized to the size of the buffer, and will contain the length of the octet string read upon return. The buffer should be big enough to take the octet string value plus a terminating NULL byte.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=773>773</a></td>\n' +
            '<td>The ber_get_stringa() routine is used to dynamically allocate space into which an octet string is read. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=774>774</a></td>\n' +
            '<td>The ber_get_stringal() routine is used to dynamically allocate space into which an octet string and its length are read. It takes a struct berval **, and returns the result in this parameter. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=775>775</a></td>\n' +
            '<td>The ber_get_stringbv() routine is used to read an octet string and its length into the provided struct berval *. If the alloc parameter is zero, the string will reside in memory assigned to the BerElement, and must not be freed by the caller. If the alloc parameter is non-zero, the string will be copied into dynamically allocated space which should be returned using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=776>776</a></td>\n' +
            '<td>The ber_get_null() routine is used to read a NULL element. It returns the tag of the element it skips over.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=777>777</a></td>\n' +
            '<td>The ber_get_boolean() routine is used to read a boolean value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=778>778</a></td>\n' +
            '<td>The ber_get_enum() routine is used to read a enumeration value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=779>779</a></td>\n' +
            '<td>The ber_get_bitstringa() routine is used to read a bitstring value. It takes a char ** which will hold the dynamically allocated bits, followed by an ber_len_t *, which will point to the length (in bits) of the bitstring returned. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=780>780</a></td>\n' +
            '<td>The ber_first_element() routine is used to return the tag and length of the first element in a set or sequence. It also returns in cookie a magic cookie parameter that should be passed to subsequent calls to ber_next_element(), which returns similar information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=781>781</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=782>782</a></td>\n' +
            '<td>Assume the variable ber contains a lightweight BER encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=783>783</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=784>784</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=785>785</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=786>786</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=787>787</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=788>788</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=789>789</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=790>790</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=791>791</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=792>792</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=793>793</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=794>794</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=795>795</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=796>796</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=797>797</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=798>798</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=799>799</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=800>800</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=801>801</a></td>\n' +
            '<td>The element can be decoded using ber_scanf() as follows.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=802>802</a></td>\n' +
            '<td>ber_int_t scope, deref, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=803>803</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=804>804</a></td>\n' +
            '<td>ber_tag_t tag;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=805>805</a></td>\n' +
            '<td>tag = ber_scanf( ber, "{aeeiib{v}}",</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=806>806</a></td>\n' +
            '<td>&amp;dn, &amp;scope, &amp;deref,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=807>807</a></td>\n' +
            '<td>&amp;size, &amp;time, &amp;attrsonly, &amp;attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=808>808</a></td>\n' +
            '<td>if( tag == LBER_ERROR ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=809>809</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=810>810</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=811>811</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=812>812</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=813>813</a></td>\n' +
            '<td>ber_memfree( dn );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=814>814</a></td>\n' +
            '<td>ber_memvfree( attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=815>815</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=816>816</a></td>\n' +
            '<td>If an error occurs during decoding, generally these routines return LBER_ERROR ((ber_tag_t)−1).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=817>817</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=818>818</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file. Some routines may dynamically allocate memory which must be freed by the caller using supplied deallocation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=819>819</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=820>820</a></td>\n' +
            '<td>lber-encode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=821>821</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=822>822</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=823>823</a></td>\n' +
            '<td>LBER_ENCODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=824>824</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=825>825</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=826>826</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=827>827</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=828>828</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=829>829</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=830>830</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=831>831</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=832>832</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=833>833</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=834>834</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=835>835</a></td>\n' +
            '<td>ber_alloc_t, ber_flush, ber_flush2, ber_printf, ber_put_int, ber_put_enum, ber_put_ostring, ber_put_string, ber_put_null, ber_put_boolean, ber_put_bitstring, ber_start_seq, ber_start_set, ber_put_seq, ber_put_set − OpenLDAP LBER simplified Basic Encoding Rules library routines for encoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=836>836</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=837>837</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=838>838</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=839>839</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=840>840</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=841>841</a></td>\n' +
            '<td>int ber_flush(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=842>842</a></td>\n' +
            '<td>int ber_flush2(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=843>843</a></td>\n' +
            '<td>int ber_printf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=844>844</a></td>\n' +
            '<td>int ber_put_int(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=845>845</a></td>\n' +
            '<td>int ber_put_enum(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=846>846</a></td>\n' +
            '<td>int ber_put_ostring(BerElement *ber, const char *str, ber_len_t len, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=847>847</a></td>\n' +
            '<td>int ber_put_string(BerElement *ber, const char *str, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=848>848</a></td>\n' +
            '<td>int ber_put_null(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=849>849</a></td>\n' +
            '<td>int ber_put_boolean(BerElement *ber, ber_int_t bool, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=850>850</a></td>\n' +
            '<td>int ber_put_bitstring(BerElement *ber, const char *str, ber_len_t blen, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=851>851</a></td>\n' +
            '<td>int ber_start_seq(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=852>852</a></td>\n' +
            '<td>int ber_start_set(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=853>853</a></td>\n' +
            '<td>int ber_put_seq(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=854>854</a></td>\n' +
            '<td>int ber_put_set(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=855>855</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=856>856</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the encoding routines in the lber library. See lber-decode(3) for details on the corresponding decoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=857>857</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_alloc_t() to allocate a BER element for encoding, ber_printf() to do the actual encoding, and ber_flush2() to actually write the element. The other routines are provided for those applications that need more control than ber_printf() provides. In general, these routines return the length of the element encoded, or -1 if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=858>858</a></td>\n' +
            '<td>The ber_alloc_t() routine is used to allocate a new BER element. It should be called with an argument of LBER_USE_DER.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=859>859</a></td>\n' +
            '<td>The ber_flush2() routine is used to actually write the element to a socket (or file) descriptor, once it has been fully encoded (using ber_printf() and friends). See lber-sockbuf(3) for more details on the Sockbuf implementation of the sb parameter. If the freeit parameter is non-zero, the supplied ber will be freed. If LBER_FLUSH_FREE_ON_SUCCESS is used, the ber is only freed when successfully flushed, otherwise it is left intact; if LBER_FLUSH_FREE_ON_ERROR is used, the ber is only freed when an error occurs, otherwise it is left intact; if LBER_FLUSH_FREE_ALWAYS is used, the ber is freed anyway. This function differs from the original ber_flush(3) function, whose behavior corresponds to that indicated for LBER_FLUSH_FREE_ON_SUCCESS. Note that in the future, the behavior of ber_flush(3) with freeit non-zero might change into that of ber_flush2(3) with freeit set to LBER_FLUSH_FREE_ALWAYS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=860>860</a></td>\n' +
            '<td>The ber_printf() routine is used to encode a BER element in much the same way that sprintf(3) works. One important difference, though, is that some state information is kept with the ber parameter so that multiple calls can be made to ber_printf() to append things to the end of the BER element. Ber_printf() writes to ber, a pointer to a BerElement such as returned by ber_alloc_t(). It interprets and formats its arguments according to the format string fmt. The format string can contain the following characters:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=861>861</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=862>862</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=863>863</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=864>864</a></td>\n' +
            '<td>Boolean. An ber_int_t parameter should be supplied. A boolean element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=865>865</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=866>866</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=867>867</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=868>868</a></td>\n' +
            '<td>Enumeration. An ber_int_t parameter should be supplied. An enumeration element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=869>869</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=870>870</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=871>871</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=872>872</a></td>\n' +
            '<td>Integer. An ber_int_t parameter should be supplied. An integer element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=873>873</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=874>874</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=875>875</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=876>876</a></td>\n' +
            '<td>Bitstring. A char * pointer to the start of the bitstring is supplied, followed by the number of bits in the bitstring. A bitstring element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=877>877</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=878>878</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=879>879</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=880>880</a></td>\n' +
            '<td>Null. No parameter is required. A null element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=881>881</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=882>882</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=883>883</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=884>884</a></td>\n' +
            '<td>Octet string. A char * is supplied, followed by the length of the string pointed to. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=885>885</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=886>886</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=887>887</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=888>888</a></td>\n' +
            '<td>Octet string. A struct berval * is supplied. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=889>889</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=890>890</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=891>891</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=892>892</a></td>\n' +
            '<td>Octet string. A null-terminated string is supplied. An octet string element is output, not including the trailing NULL octet.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=893>893</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=894>894</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=895>895</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=896>896</a></td>\n' +
            '<td>Tag. A ber_tag_t specifying the tag to give the next element is provided. This works across calls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=897>897</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=898>898</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=899>899</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=900>900</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of char *’s is supplied. Note that a construct like ’{v}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=901>901</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=902>902</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=903>903</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=904>904</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of struct berval *’s is supplied. Note that a construct like ’{V}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=905>905</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=906>906</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=907>907</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=908>908</a></td>\n' +
            '<td>Several octet strings. An array of struct berval’s is supplied. The array is terminated by a struct berval with a NULL bv_val. Note that a construct like ’{W}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=909>909</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=910>910</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=911>911</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=912>912</a></td>\n' +
            '<td>Begin sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=913>913</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=914>914</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=915>915</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=916>916</a></td>\n' +
            '<td>End sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=917>917</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=918>918</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=919>919</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=920>920</a></td>\n' +
            '<td>Begin set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=921>921</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=922>922</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=923>923</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=924>924</a></td>\n' +
            '<td>End set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=925>925</a></td>\n' +
            '<td>The ber_put_int() routine writes the integer element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=926>926</a></td>\n' +
            '<td>The ber_put_enum() routine writes the enumeration element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=927>927</a></td>\n' +
            '<td>The ber_put_boolean() routine writes the boolean value given by bool to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=928>928</a></td>\n' +
            '<td>The ber_put_bitstring() routine writes blen bits starting at str as a bitstring value to the given BER element. Note that blen is the length in bits of the bitstring.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=929>929</a></td>\n' +
            '<td>The ber_put_ostring() routine writes len bytes starting at str to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=930>930</a></td>\n' +
            '<td>The ber_put_string() routine writes the null-terminated string (minus the terminating ’ ’) to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=931>931</a></td>\n' +
            '<td>The ber_put_null() routine writes a NULL element to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=932>932</a></td>\n' +
            '<td>The ber_start_seq() routine is used to start a sequence in the BER element. The ber_start_set() routine works similarly. The end of the sequence or set is marked by the nearest matching call to ber_put_seq() or ber_put_set(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=933>933</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=934>934</a></td>\n' +
            '<td>Assuming the following variable declarations, and that the variables have been assigned appropriately, an lber encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=935>935</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=936>936</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=937>937</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=938>938</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=939>939</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=940>940</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=941>941</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=942>942</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=943>943</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=944>944</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=945>945</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=946>946</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=947>947</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=948>948</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=949>949</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=950>950</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=951>951</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=952>952</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=953>953</a></td>\n' +
            '<td>can be achieved like so:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=954>954</a></td>\n' +
            '<td>int rc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=955>955</a></td>\n' +
            '<td>ber_int_t scope, ali, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=956>956</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=957>957</a></td>\n' +
            '<td>BerElement *ber;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=958>958</a></td>\n' +
            '<td>/* ... fill in values ... */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=959>959</a></td>\n' +
            '<td>ber = ber_alloc_t( LBER_USE_DER );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=960>960</a></td>\n' +
            '<td>if ( ber == NULL ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=961>961</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=962>962</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=963>963</a></td>\n' +
            '<td>rc = ber_printf( ber, "{siiiib{v}}", dn, scope, ali,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=964>964</a></td>\n' +
            '<td>size, time, attrsonly, attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=965>965</a></td>\n' +
            '<td>if( rc == −1 ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=966>966</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=967>967</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=968>968</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=969>969</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=970>970</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=971>971</a></td>\n' +
            '<td>If an error occurs during encoding, generally these routines return −1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=972>972</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=973>973</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=974>974</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=975>975</a></td>\n' +
            '<td>lber-decode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=976>976</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=977>977</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=978>978</a></td>\n' +
            '<td>LBER_TYPES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=979>979</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=980>980</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=981>981</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=982>982</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=983>983</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=984>984</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=985>985</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=986>986</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=987>987</a></td>\n' +
            '<td>ber_int_t, ber_uint_t, ber_len_t, ber_slen_t, ber_tag_t, struct berval, BerValue, BerVarray, BerElement, ber_bvfree, ber_bvecfree, ber_bvecadd, ber_bvarray_free, ber_bvarray_add, ber_bvdup, ber_dupbv, ber_bvstr, ber_bvstrdup, ber_str2bv, ber_alloc_t, ber_init, ber_init2, ber_free − OpenLDAP LBER types and allocation functions</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=988>988</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=989>989</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=990>990</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=991>991</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=992>992</a></td>\n' +
            '<td>typedef impl_tag_t ber_tag_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=993>993</a></td>\n' +
            '<td>typedef impl_int_t ber_int_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=994>994</a></td>\n' +
            '<td>typedef impl_uint_t ber_uint_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=995>995</a></td>\n' +
            '<td>typedef impl_len_t ber_len_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=996>996</a></td>\n' +
            '<td>typedef impl_slen_t ber_slen_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=997>997</a></td>\n' +
            '<td>typedef struct berval {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=998>998</a></td>\n' +
            '<td>ber_len_t bv_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=999>999</a></td>\n' +
            '<td>char *bv_val;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1000>1000</a></td>\n' +
            '<td>} BerValue, *BerVarray;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1001>1001</a></td>\n' +
            '<td>typedef struct berelement BerElement;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1002>1002</a></td>\n' +
            '<td>void ber_bvfree(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1003>1003</a></td>\n' +
            '<td>void ber_bvecfree(struct berval **bvec);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1004>1004</a></td>\n' +
            '<td>void ber_bvecadd(struct berval ***bvec, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1005>1005</a></td>\n' +
            '<td>void ber_bvarray_free(struct berval *bvarray);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1006>1006</a></td>\n' +
            '<td>void ber_bvarray_add(BerVarray *bvarray, BerValue *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1007>1007</a></td>\n' +
            '<td>struct berval *ber_bvdup(const struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1008>1008</a></td>\n' +
            '<td>struct berval *ber_dupbv(const struct berval *dst, struct berval *src);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1009>1009</a></td>\n' +
            '<td>struct berval *ber_bvstr(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1010>1010</a></td>\n' +
            '<td>struct berval *ber_bvstrdup(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1011>1011</a></td>\n' +
            '<td>struct berval *ber_str2bv(const char *str, ber_len_t len, int dup, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1012>1012</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1013>1013</a></td>\n' +
            '<td>BerElement *ber_init(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1014>1014</a></td>\n' +
            '<td>void ber_init2(BerElement *ber, struct berval *bv, int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1015>1015</a></td>\n' +
            '<td>void ber_free(BerElement *ber, int freebuf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1016>1016</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1017>1017</a></td>\n' +
            '<td>The following are the basic types and structures defined for use with the Lightweight BER library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1018>1018</a></td>\n' +
            '<td>ber_int_t is a signed integer of at least 32 bits. It is commonly equivalent to int. ber_uint_t is the unsigned variant of ber_int_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1019>1019</a></td>\n' +
            '<td>ber_len_t is an unsigned integer of at least 32 bits used to represent a length. It is commonly equivalent to a size_t. ber_slen_t is the signed variant to ber_len_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1020>1020</a></td>\n' +
            '<td>ber_tag_t is an unsigned integer of at least 32 bits used to represent a BER tag. It is commonly equivalent to a unsigned long.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1021>1021</a></td>\n' +
            '<td>The actual definitions of the integral impl_TYPE_t types are platform specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1022>1022</a></td>\n' +
            '<td>BerValue, commonly used as struct berval, is used to hold an arbitrary sequence of octets. bv_val points to bv_len octets. bv_val is not necessarily terminated by a NULL (zero) octet. ber_bvfree() frees a BerValue, pointed to by bv, returned from this API. If bv is NULL, the routine does nothing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1023>1023</a></td>\n' +
            '<td>ber_bvecfree() frees an array of BerValues (and the array), pointed to by bvec, returned from this API. If bvec is NULL, the routine does nothing. ber_bvecadd() appends the bv pointer to the bvec array. Space for the array is allocated as needed. The end of the array is marked by a NULL pointer.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1024>1024</a></td>\n' +
            '<td>ber_bvarray_free() frees an array of BerValues (and the array), pointed to by bvarray, returned from this API. If bvarray is NULL, the routine does nothing. ber_bvarray_add() appends the contents of the BerValue pointed to by bv to the bvarray array. Space for the new element is allocated as needed. The end of the array is marked by a BerValue with a NULL bv_val field.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1025>1025</a></td>\n' +
            '<td>ber_bvdup() returns a copy of a BerValue. The routine returns NULL upon error (e.g. out of memory). The caller should use ber_bvfree() to deallocate the resulting BerValue. ber_dupbv() copies a BerValue from src to dst. If dst is NULL a new BerValue will be allocated to hold the copy. The routine returns NULL upon error, otherwise it returns a pointer to the copy. If dst is NULL the caller should use ber_bvfree() to deallocate the resulting BerValue, otherwise ber_memfree() should be used to deallocate the dst-&gt;bv_val. (The ber_bvdup() function is internally implemented as ber_dupbv(NULL, bv). ber_bvdup() is provided only for compatibility with an expired draft of the LDAP C API; ber_dupbv() is the preferred interface.)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1026>1026</a></td>\n' +
            '<td>ber_bvstr() returns a BerValue containing the string pointed to by str. ber_bvstrdup() returns a BerValue containing a copy of the string pointed to by str. ber_str2bv() returns a BerValue containing the string pointed to by str, whose length may be optionally specified in len. If dup is non-zero, the BerValue will contain a copy of str. If len is zero, the number of bytes to copy will be determined by strlen(3), otherwise len bytes will be copied. If bv is non-NULL, the result will be stored in the given BerValue, otherwise a new BerValue will be allocated to store the result. NOTE: Both ber_bvstr() and ber_bvstrdup() are implemented as macros using ber_str2bv() in this version of the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1027>1027</a></td>\n' +
            '<td>BerElement is an opaque structure used to maintain state information used in encoding and decoding. ber_alloc_t() is used to create an empty BerElement structure. If LBER_USE_DER is specified for the options parameter then data lengths for data written to the BerElement will be encoded in the minimal number of octets required, otherwise they will always be written as four byte values. ber_init() creates a BerElement structure that is initialized with a copy of the data in its bv parameter. ber_init2() initializes an existing BerElement ber using the data in the bv parameter. The data is referenced directly, not copied. The options parameter is the same as for ber_alloc_t(). ber_free() frees a BerElement pointed to by ber. If ber is NULL, the routine does nothing. If freebuf is zero, the internal buffer is not freed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1028>1028</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1029>1029</a></td>\n' +
            '<td>lber-encode(3), lber-decode(3), lber-memory(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1030>1030</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1031>1031</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1032>1032</a></td>\n' +
            '<td>LBER_DECODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1033>1033</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1034>1034</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1035>1035</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1036>1036</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1037>1037</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1038>1038</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1039>1039</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1040>1040</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1041>1041</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1042>1042</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1043>1043</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1044>1044</a></td>\n' +
            '<td>ber_get_next, ber_skip_tag, ber_peek_tag, ber_scanf, ber_get_int, ber_get_enum, ber_get_stringb, ber_get_stringa, ber_get_stringal, ber_get_stringbv, ber_get_null, ber_get_boolean, ber_get_bitstring, ber_first_element, ber_next_element − OpenLDAP LBER simplified Basic Encoding Rules library routines for decoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1045>1045</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1046>1046</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1047>1047</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1048>1048</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1049>1049</a></td>\n' +
            '<td>ber_tag_t ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1050>1050</a></td>\n' +
            '<td>ber_tag_t ber_skip_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1051>1051</a></td>\n' +
            '<td>ber_tag_t ber_peek_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1052>1052</a></td>\n' +
            '<td>ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1053>1053</a></td>\n' +
            '<td>ber_tag_t ber_get_int(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1054>1054</a></td>\n' +
            '<td>ber_tag_t ber_get_enum(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1055>1055</a></td>\n' +
            '<td>ber_tag_t ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1056>1056</a></td>\n' +
            '<td>ber_tag_t ber_get_stringa(BerElement *ber, char **buf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1057>1057</a></td>\n' +
            '<td>ber_tag_t ber_get_stringal(BerElement *ber, struct berval **bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1058>1058</a></td>\n' +
            '<td>ber_tag_t ber_get_stringbv(BerElement *ber, struct berval *bv, int alloc);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1059>1059</a></td>\n' +
            '<td>ber_tag_t ber_get_null(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1060>1060</a></td>\n' +
            '<td>ber_tag_t ber_get_boolean(BerElement *ber, ber_int_t *bool);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1061>1061</a></td>\n' +
            '<td>ber_tag_t ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *blen);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1062>1062</a></td>\n' +
            '<td>ber_tag_t ber_first_element(BerElement *ber, ber_len_t *len, char **cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1063>1063</a></td>\n' +
            '<td>ber_tag_t ber_next_element(BerElement *ber, ber_len_t *len, const char *cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1064>1064</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1065>1065</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the decoding routines in the lber library. See lber-encode(3) for details on the corresponding encoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1066>1066</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_get_next() to get the next BER element and ber_scanf() to do the actual decoding. In some cases, ber_peek_tag() may also need to be called in normal usage. The other routines are provided for those applications that need more control than ber_scanf() provides. In general, these routines return the tag of the element decoded, or LBER_ERROR if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1067>1067</a></td>\n' +
            '<td>The ber_get_next() routine is used to read the next BER element from the given Sockbuf, sb. It strips off and returns the leading tag, strips off and returns the length of the entire element in len, and sets up ber for subsequent calls to ber_scanf() et al to decode the element. See lber-sockbuf(3) for details of the Sockbuf implementation of the sb parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1068>1068</a></td>\n' +
            '<td>The ber_scanf() routine is used to decode a BER element in much the same way that scanf(3) works. It reads from ber, a pointer to a BerElement such as returned by ber_get_next(), interprets the bytes according to the format string fmt, and stores the results in its additional arguments. The format string contains conversion specifications which are used to direct the interpretation of the BER element. The format string can contain the following characters.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1069>1069</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1070>1070</a></td>\n' +
            '<td>a</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1071>1071</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1072>1072</a></td>\n' +
            '<td>Octet string. A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1073>1073</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1074>1074</a></td>\n' +
            '<td>A</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1075>1075</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1076>1076</a></td>\n' +
            '<td>Octet string. A variant of "a". A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter, unless a zero-length string would result; in that case, the arg is set to NULL. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1077>1077</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1078>1078</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1079>1079</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1080>1080</a></td>\n' +
            '<td>Octet string. A char * buffer should be supplied, followed by a pointer to a ber_len_t initialized to the size of the buffer. Upon return, the null-terminated octet string is put into the buffer, and the ber_len_t is set to the actual size of the octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1081>1081</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1082>1082</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1083>1083</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1084>1084</a></td>\n' +
            '<td>Octet string. A struct ber_val ** should be supplied, which upon return points to a dynamically allocated struct berval containing the octet string and its length. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1085>1085</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1086>1086</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1087>1087</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1088>1088</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the dynamically allocated octet string and its length. The caller should free the returned octet string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1089>1089</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1090>1090</a></td>\n' +
            '<td>m</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1091>1091</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1092>1092</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the octet string and its length. The string resides in memory assigned to the BerElement, and must not be freed by the caller.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1093>1093</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1094>1094</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1095>1095</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1096>1096</a></td>\n' +
            '<td>Boolean. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1097>1097</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1098>1098</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1099>1099</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1100>1100</a></td>\n' +
            '<td>Enumeration. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1101>1101</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1102>1102</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1103>1103</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1104>1104</a></td>\n' +
            '<td>Integer. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1105>1105</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1106>1106</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1107>1107</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1108>1108</a></td>\n' +
            '<td>Bitstring. A char ** should be supplied which will point to the dynamically allocated bits, followed by a ber_len_t *, which will point to the length (in bits) of the bitstring returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1109>1109</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1110>1110</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1111>1111</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1112>1112</a></td>\n' +
            '<td>Null. No parameter is required. The element is simply skipped if it is recognized.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1113>1113</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1114>1114</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1115>1115</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1116>1116</a></td>\n' +
            '<td>Sequence of octet strings. A char *** should be supplied, which upon return points to a dynamically allocated null-terminated array of char *’s containing the octet strings. NULL is returned if the sequence is empty. The caller should free the returned array and octet strings using ber_memvfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1117>1117</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1118>1118</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1119>1119</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1120>1120</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A struct berval *** should be supplied, which upon return points to a dynamically allocated null-terminated array of struct berval *’s containing the octet strings and their lengths. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvecfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1121>1121</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1122>1122</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1123>1123</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1124>1124</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A BerVarray * should be supplied, which upon return points to a dynamically allocated array of struct berval’s containing the octet strings and their lengths. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvarray_fr ee().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1125>1125</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1126>1126</a></td>\n' +
            '<td>M</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1127>1127</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1128>1128</a></td>\n' +
            '<td>Sequence of octet strings with lengths. This is a generalized form of the previous three formats. A void ** (ptr) should be supplied, followed by a ber_len_t * (len) and a ber_len_t (off). Upon return (ptr) will point to a dynamically allocated array whose elements are all of size (*len). A struct berval will be filled starting at offset (off) in each element. The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The number of elements in the array is also stored in (*len) on return. The caller should free the returned array using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1129>1129</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1130>1130</a></td>\n' +
            '<td>l</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1131>1131</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1132>1132</a></td>\n' +
            '<td>Length of the next element. A pointer to a ber_len_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1133>1133</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1134>1134</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1135>1135</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1136>1136</a></td>\n' +
            '<td>Tag of the next element. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1137>1137</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1138>1138</a></td>\n' +
            '<td>T</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1139>1139</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1140>1140</a></td>\n' +
            '<td>Skip element and return its tag. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1141>1141</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1142>1142</a></td>\n' +
            '<td>x</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1143>1143</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1144>1144</a></td>\n' +
            '<td>Skip element. The next element is skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1145>1145</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1146>1146</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1147>1147</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1148>1148</a></td>\n' +
            '<td>Begin sequence. No parameter is required. The initial sequence tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1149>1149</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1150>1150</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1151>1151</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1152>1152</a></td>\n' +
            '<td>End sequence. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1153>1153</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1154>1154</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1155>1155</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1156>1156</a></td>\n' +
            '<td>Begin set. No parameter is required. The initial set tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1157>1157</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1158>1158</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1159>1159</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1160>1160</a></td>\n' +
            '<td>End set. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1161>1161</a></td>\n' +
            '<td>The ber_get_int() routine tries to interpret the next element as an integer, returning the result in num. The tag of whatever it finds is returned on success, LBER_ERROR (−1) on failure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1162>1162</a></td>\n' +
            '<td>The ber_get_stringb() routine is used to read an octet string into a preallocated buffer. The len parameter should be initialized to the size of the buffer, and will contain the length of the octet string read upon return. The buffer should be big enough to take the octet string value plus a terminating NULL byte.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1163>1163</a></td>\n' +
            '<td>The ber_get_stringa() routine is used to dynamically allocate space into which an octet string is read. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1164>1164</a></td>\n' +
            '<td>The ber_get_stringal() routine is used to dynamically allocate space into which an octet string and its length are read. It takes a struct berval **, and returns the result in this parameter. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1165>1165</a></td>\n' +
            '<td>The ber_get_stringbv() routine is used to read an octet string and its length into the provided struct berval *. If the alloc parameter is zero, the string will reside in memory assigned to the BerElement, and must not be freed by the caller. If the alloc parameter is non-zero, the string will be copied into dynamically allocated space which should be returned using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1166>1166</a></td>\n' +
            '<td>The ber_get_null() routine is used to read a NULL element. It returns the tag of the element it skips over.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1167>1167</a></td>\n' +
            '<td>The ber_get_boolean() routine is used to read a boolean value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1168>1168</a></td>\n' +
            '<td>The ber_get_enum() routine is used to read a enumeration value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1169>1169</a></td>\n' +
            '<td>The ber_get_bitstringa() routine is used to read a bitstring value. It takes a char ** which will hold the dynamically allocated bits, followed by an ber_len_t *, which will point to the length (in bits) of the bitstring returned. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1170>1170</a></td>\n' +
            '<td>The ber_first_element() routine is used to return the tag and length of the first element in a set or sequence. It also returns in cookie a magic cookie parameter that should be passed to subsequent calls to ber_next_element(), which returns similar information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1171>1171</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1172>1172</a></td>\n' +
            '<td>Assume the variable ber contains a lightweight BER encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1173>1173</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1174>1174</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1175>1175</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1176>1176</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1177>1177</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1178>1178</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1179>1179</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1180>1180</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1181>1181</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1182>1182</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1183>1183</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1184>1184</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1185>1185</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1186>1186</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1187>1187</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1188>1188</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1189>1189</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1190>1190</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1191>1191</a></td>\n' +
            '<td>The element can be decoded using ber_scanf() as follows.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1192>1192</a></td>\n' +
            '<td>ber_int_t scope, deref, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1193>1193</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1194>1194</a></td>\n' +
            '<td>ber_tag_t tag;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1195>1195</a></td>\n' +
            '<td>tag = ber_scanf( ber, "{aeeiib{v}}",</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1196>1196</a></td>\n' +
            '<td>&amp;dn, &amp;scope, &amp;deref,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1197>1197</a></td>\n' +
            '<td>&amp;size, &amp;time, &amp;attrsonly, &amp;attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1198>1198</a></td>\n' +
            '<td>if( tag == LBER_ERROR ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1199>1199</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1200>1200</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1201>1201</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1202>1202</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1203>1203</a></td>\n' +
            '<td>ber_memfree( dn );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1204>1204</a></td>\n' +
            '<td>ber_memvfree( attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1205>1205</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1206>1206</a></td>\n' +
            '<td>If an error occurs during decoding, generally these routines return LBER_ERROR ((ber_tag_t)−1).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1207>1207</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1208>1208</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file. Some routines may dynamically allocate memory which must be freed by the caller using supplied deallocation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1209>1209</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1210>1210</a></td>\n' +
            '<td>lber-encode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1211>1211</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1212>1212</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1213>1213</a></td>\n' +
            '<td>LBER_DECODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1214>1214</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1215>1215</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1216>1216</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1217>1217</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1218>1218</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1219>1219</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1220>1220</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1221>1221</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1222>1222</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1223>1223</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1224>1224</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1225>1225</a></td>\n' +
            '<td>ber_get_next, ber_skip_tag, ber_peek_tag, ber_scanf, ber_get_int, ber_get_enum, ber_get_stringb, ber_get_stringa, ber_get_stringal, ber_get_stringbv, ber_get_null, ber_get_boolean, ber_get_bitstring, ber_first_element, ber_next_element − OpenLDAP LBER simplified Basic Encoding Rules library routines for decoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1226>1226</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1227>1227</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1228>1228</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1229>1229</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1230>1230</a></td>\n' +
            '<td>ber_tag_t ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1231>1231</a></td>\n' +
            '<td>ber_tag_t ber_skip_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1232>1232</a></td>\n' +
            '<td>ber_tag_t ber_peek_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1233>1233</a></td>\n' +
            '<td>ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1234>1234</a></td>\n' +
            '<td>ber_tag_t ber_get_int(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1235>1235</a></td>\n' +
            '<td>ber_tag_t ber_get_enum(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1236>1236</a></td>\n' +
            '<td>ber_tag_t ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1237>1237</a></td>\n' +
            '<td>ber_tag_t ber_get_stringa(BerElement *ber, char **buf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1238>1238</a></td>\n' +
            '<td>ber_tag_t ber_get_stringal(BerElement *ber, struct berval **bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1239>1239</a></td>\n' +
            '<td>ber_tag_t ber_get_stringbv(BerElement *ber, struct berval *bv, int alloc);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1240>1240</a></td>\n' +
            '<td>ber_tag_t ber_get_null(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1241>1241</a></td>\n' +
            '<td>ber_tag_t ber_get_boolean(BerElement *ber, ber_int_t *bool);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1242>1242</a></td>\n' +
            '<td>ber_tag_t ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *blen);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1243>1243</a></td>\n' +
            '<td>ber_tag_t ber_first_element(BerElement *ber, ber_len_t *len, char **cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1244>1244</a></td>\n' +
            '<td>ber_tag_t ber_next_element(BerElement *ber, ber_len_t *len, const char *cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1245>1245</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1246>1246</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the decoding routines in the lber library. See lber-encode(3) for details on the corresponding encoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1247>1247</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_get_next() to get the next BER element and ber_scanf() to do the actual decoding. In some cases, ber_peek_tag() may also need to be called in normal usage. The other routines are provided for those applications that need more control than ber_scanf() provides. In general, these routines return the tag of the element decoded, or LBER_ERROR if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1248>1248</a></td>\n' +
            '<td>The ber_get_next() routine is used to read the next BER element from the given Sockbuf, sb. It strips off and returns the leading tag, strips off and returns the length of the entire element in len, and sets up ber for subsequent calls to ber_scanf() et al to decode the element. See lber-sockbuf(3) for details of the Sockbuf implementation of the sb parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1249>1249</a></td>\n' +
            '<td>The ber_scanf() routine is used to decode a BER element in much the same way that scanf(3) works. It reads from ber, a pointer to a BerElement such as returned by ber_get_next(), interprets the bytes according to the format string fmt, and stores the results in its additional arguments. The format string contains conversion specifications which are used to direct the interpretation of the BER element. The format string can contain the following characters.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1250>1250</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1251>1251</a></td>\n' +
            '<td>a</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1252>1252</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1253>1253</a></td>\n' +
            '<td>Octet string. A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1254>1254</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1255>1255</a></td>\n' +
            '<td>A</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1256>1256</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1257>1257</a></td>\n' +
            '<td>Octet string. A variant of "a". A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter, unless a zero-length string would result; in that case, the arg is set to NULL. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1258>1258</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1259>1259</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1260>1260</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1261>1261</a></td>\n' +
            '<td>Octet string. A char * buffer should be supplied, followed by a pointer to a ber_len_t initialized to the size of the buffer. Upon return, the null-terminated octet string is put into the buffer, and the ber_len_t is set to the actual size of the octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1262>1262</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1263>1263</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1264>1264</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1265>1265</a></td>\n' +
            '<td>Octet string. A struct ber_val ** should be supplied, which upon return points to a dynamically allocated struct berval containing the octet string and its length. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1266>1266</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1267>1267</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1268>1268</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1269>1269</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the dynamically allocated octet string and its length. The caller should free the returned octet string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1270>1270</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1271>1271</a></td>\n' +
            '<td>m</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1272>1272</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1273>1273</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the octet string and its length. The string resides in memory assigned to the BerElement, and must not be freed by the caller.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1274>1274</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1275>1275</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1276>1276</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1277>1277</a></td>\n' +
            '<td>Boolean. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1278>1278</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1279>1279</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1280>1280</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1281>1281</a></td>\n' +
            '<td>Enumeration. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1282>1282</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1283>1283</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1284>1284</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1285>1285</a></td>\n' +
            '<td>Integer. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1286>1286</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1287>1287</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1288>1288</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1289>1289</a></td>\n' +
            '<td>Bitstring. A char ** should be supplied which will point to the dynamically allocated bits, followed by a ber_len_t *, which will point to the length (in bits) of the bitstring returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1290>1290</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1291>1291</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1292>1292</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1293>1293</a></td>\n' +
            '<td>Null. No parameter is required. The element is simply skipped if it is recognized.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1294>1294</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1295>1295</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1296>1296</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1297>1297</a></td>\n' +
            '<td>Sequence of octet strings. A char *** should be supplied, which upon return points to a dynamically allocated null-terminated array of char *’s containing the octet strings. NULL is returned if the sequence is empty. The caller should free the returned array and octet strings using ber_memvfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1298>1298</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1299>1299</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1300>1300</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1301>1301</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A struct berval *** should be supplied, which upon return points to a dynamically allocated null-terminated array of struct berval *’s containing the octet strings and their lengths. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvecfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1302>1302</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1303>1303</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1304>1304</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1305>1305</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A BerVarray * should be supplied, which upon return points to a dynamically allocated array of struct berval’s containing the octet strings and their lengths. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvarray_fr ee().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1306>1306</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1307>1307</a></td>\n' +
            '<td>M</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1308>1308</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1309>1309</a></td>\n' +
            '<td>Sequence of octet strings with lengths. This is a generalized form of the previous three formats. A void ** (ptr) should be supplied, followed by a ber_len_t * (len) and a ber_len_t (off). Upon return (ptr) will point to a dynamically allocated array whose elements are all of size (*len). A struct berval will be filled starting at offset (off) in each element. The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The number of elements in the array is also stored in (*len) on return. The caller should free the returned array using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1310>1310</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1311>1311</a></td>\n' +
            '<td>l</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1312>1312</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1313>1313</a></td>\n' +
            '<td>Length of the next element. A pointer to a ber_len_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1314>1314</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1315>1315</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1316>1316</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1317>1317</a></td>\n' +
            '<td>Tag of the next element. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1318>1318</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1319>1319</a></td>\n' +
            '<td>T</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1320>1320</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1321>1321</a></td>\n' +
            '<td>Skip element and return its tag. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1322>1322</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1323>1323</a></td>\n' +
            '<td>x</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1324>1324</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1325>1325</a></td>\n' +
            '<td>Skip element. The next element is skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1326>1326</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1327>1327</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1328>1328</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1329>1329</a></td>\n' +
            '<td>Begin sequence. No parameter is required. The initial sequence tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1330>1330</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1331>1331</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1332>1332</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1333>1333</a></td>\n' +
            '<td>End sequence. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1334>1334</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1335>1335</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1336>1336</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1337>1337</a></td>\n' +
            '<td>Begin set. No parameter is required. The initial set tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1338>1338</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1339>1339</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1340>1340</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1341>1341</a></td>\n' +
            '<td>End set. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1342>1342</a></td>\n' +
            '<td>The ber_get_int() routine tries to interpret the next element as an integer, returning the result in num. The tag of whatever it finds is returned on success, LBER_ERROR (−1) on failure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1343>1343</a></td>\n' +
            '<td>The ber_get_stringb() routine is used to read an octet string into a preallocated buffer. The len parameter should be initialized to the size of the buffer, and will contain the length of the octet string read upon return. The buffer should be big enough to take the octet string value plus a terminating NULL byte.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1344>1344</a></td>\n' +
            '<td>The ber_get_stringa() routine is used to dynamically allocate space into which an octet string is read. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1345>1345</a></td>\n' +
            '<td>The ber_get_stringal() routine is used to dynamically allocate space into which an octet string and its length are read. It takes a struct berval **, and returns the result in this parameter. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1346>1346</a></td>\n' +
            '<td>The ber_get_stringbv() routine is used to read an octet string and its length into the provided struct berval *. If the alloc parameter is zero, the string will reside in memory assigned to the BerElement, and must not be freed by the caller. If the alloc parameter is non-zero, the string will be copied into dynamically allocated space which should be returned using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1347>1347</a></td>\n' +
            '<td>The ber_get_null() routine is used to read a NULL element. It returns the tag of the element it skips over.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1348>1348</a></td>\n' +
            '<td>The ber_get_boolean() routine is used to read a boolean value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1349>1349</a></td>\n' +
            '<td>The ber_get_enum() routine is used to read a enumeration value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1350>1350</a></td>\n' +
            '<td>The ber_get_bitstringa() routine is used to read a bitstring value. It takes a char ** which will hold the dynamically allocated bits, followed by an ber_len_t *, which will point to the length (in bits) of the bitstring returned. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1351>1351</a></td>\n' +
            '<td>The ber_first_element() routine is used to return the tag and length of the first element in a set or sequence. It also returns in cookie a magic cookie parameter that should be passed to subsequent calls to ber_next_element(), which returns similar information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1352>1352</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1353>1353</a></td>\n' +
            '<td>Assume the variable ber contains a lightweight BER encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1354>1354</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1355>1355</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1356>1356</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1357>1357</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1358>1358</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1359>1359</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1360>1360</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1361>1361</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1362>1362</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1363>1363</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1364>1364</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1365>1365</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1366>1366</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1367>1367</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1368>1368</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1369>1369</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1370>1370</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1371>1371</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1372>1372</a></td>\n' +
            '<td>The element can be decoded using ber_scanf() as follows.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1373>1373</a></td>\n' +
            '<td>ber_int_t scope, deref, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1374>1374</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1375>1375</a></td>\n' +
            '<td>ber_tag_t tag;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1376>1376</a></td>\n' +
            '<td>tag = ber_scanf( ber, "{aeeiib{v}}",</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1377>1377</a></td>\n' +
            '<td>&amp;dn, &amp;scope, &amp;deref,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1378>1378</a></td>\n' +
            '<td>&amp;size, &amp;time, &amp;attrsonly, &amp;attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1379>1379</a></td>\n' +
            '<td>if( tag == LBER_ERROR ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1380>1380</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1381>1381</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1382>1382</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1383>1383</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1384>1384</a></td>\n' +
            '<td>ber_memfree( dn );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1385>1385</a></td>\n' +
            '<td>ber_memvfree( attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1386>1386</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1387>1387</a></td>\n' +
            '<td>If an error occurs during decoding, generally these routines return LBER_ERROR ((ber_tag_t)−1).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1388>1388</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1389>1389</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file. Some routines may dynamically allocate memory which must be freed by the caller using supplied deallocation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1390>1390</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1391>1391</a></td>\n' +
            '<td>lber-encode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1392>1392</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1393>1393</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1394>1394</a></td>\n' +
            '<td>LBER_DECODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1395>1395</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1396>1396</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1397>1397</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1398>1398</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1399>1399</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1400>1400</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1401>1401</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1402>1402</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1403>1403</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1404>1404</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1405>1405</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1406>1406</a></td>\n' +
            '<td>ber_get_next, ber_skip_tag, ber_peek_tag, ber_scanf, ber_get_int, ber_get_enum, ber_get_stringb, ber_get_stringa, ber_get_stringal, ber_get_stringbv, ber_get_null, ber_get_boolean, ber_get_bitstring, ber_first_element, ber_next_element − OpenLDAP LBER simplified Basic Encoding Rules library routines for decoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1407>1407</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1408>1408</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1409>1409</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1410>1410</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1411>1411</a></td>\n' +
            '<td>ber_tag_t ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1412>1412</a></td>\n' +
            '<td>ber_tag_t ber_skip_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1413>1413</a></td>\n' +
            '<td>ber_tag_t ber_peek_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1414>1414</a></td>\n' +
            '<td>ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1415>1415</a></td>\n' +
            '<td>ber_tag_t ber_get_int(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1416>1416</a></td>\n' +
            '<td>ber_tag_t ber_get_enum(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1417>1417</a></td>\n' +
            '<td>ber_tag_t ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1418>1418</a></td>\n' +
            '<td>ber_tag_t ber_get_stringa(BerElement *ber, char **buf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1419>1419</a></td>\n' +
            '<td>ber_tag_t ber_get_stringal(BerElement *ber, struct berval **bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1420>1420</a></td>\n' +
            '<td>ber_tag_t ber_get_stringbv(BerElement *ber, struct berval *bv, int alloc);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1421>1421</a></td>\n' +
            '<td>ber_tag_t ber_get_null(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1422>1422</a></td>\n' +
            '<td>ber_tag_t ber_get_boolean(BerElement *ber, ber_int_t *bool);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1423>1423</a></td>\n' +
            '<td>ber_tag_t ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *blen);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1424>1424</a></td>\n' +
            '<td>ber_tag_t ber_first_element(BerElement *ber, ber_len_t *len, char **cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1425>1425</a></td>\n' +
            '<td>ber_tag_t ber_next_element(BerElement *ber, ber_len_t *len, const char *cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1426>1426</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1427>1427</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the decoding routines in the lber library. See lber-encode(3) for details on the corresponding encoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1428>1428</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_get_next() to get the next BER element and ber_scanf() to do the actual decoding. In some cases, ber_peek_tag() may also need to be called in normal usage. The other routines are provided for those applications that need more control than ber_scanf() provides. In general, these routines return the tag of the element decoded, or LBER_ERROR if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1429>1429</a></td>\n' +
            '<td>The ber_get_next() routine is used to read the next BER element from the given Sockbuf, sb. It strips off and returns the leading tag, strips off and returns the length of the entire element in len, and sets up ber for subsequent calls to ber_scanf() et al to decode the element. See lber-sockbuf(3) for details of the Sockbuf implementation of the sb parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1430>1430</a></td>\n' +
            '<td>The ber_scanf() routine is used to decode a BER element in much the same way that scanf(3) works. It reads from ber, a pointer to a BerElement such as returned by ber_get_next(), interprets the bytes according to the format string fmt, and stores the results in its additional arguments. The format string contains conversion specifications which are used to direct the interpretation of the BER element. The format string can contain the following characters.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1431>1431</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1432>1432</a></td>\n' +
            '<td>a</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1433>1433</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1434>1434</a></td>\n' +
            '<td>Octet string. A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1435>1435</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1436>1436</a></td>\n' +
            '<td>A</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1437>1437</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1438>1438</a></td>\n' +
            '<td>Octet string. A variant of "a". A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter, unless a zero-length string would result; in that case, the arg is set to NULL. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1439>1439</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1440>1440</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1441>1441</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1442>1442</a></td>\n' +
            '<td>Octet string. A char * buffer should be supplied, followed by a pointer to a ber_len_t initialized to the size of the buffer. Upon return, the null-terminated octet string is put into the buffer, and the ber_len_t is set to the actual size of the octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1443>1443</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1444>1444</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1445>1445</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1446>1446</a></td>\n' +
            '<td>Octet string. A struct ber_val ** should be supplied, which upon return points to a dynamically allocated struct berval containing the octet string and its length. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1447>1447</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1448>1448</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1449>1449</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1450>1450</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the dynamically allocated octet string and its length. The caller should free the returned octet string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1451>1451</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1452>1452</a></td>\n' +
            '<td>m</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1453>1453</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1454>1454</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the octet string and its length. The string resides in memory assigned to the BerElement, and must not be freed by the caller.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1455>1455</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1456>1456</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1457>1457</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1458>1458</a></td>\n' +
            '<td>Boolean. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1459>1459</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1460>1460</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1461>1461</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1462>1462</a></td>\n' +
            '<td>Enumeration. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1463>1463</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1464>1464</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1465>1465</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1466>1466</a></td>\n' +
            '<td>Integer. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1467>1467</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1468>1468</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1469>1469</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1470>1470</a></td>\n' +
            '<td>Bitstring. A char ** should be supplied which will point to the dynamically allocated bits, followed by a ber_len_t *, which will point to the length (in bits) of the bitstring returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1471>1471</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1472>1472</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1473>1473</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1474>1474</a></td>\n' +
            '<td>Null. No parameter is required. The element is simply skipped if it is recognized.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1475>1475</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1476>1476</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1477>1477</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1478>1478</a></td>\n' +
            '<td>Sequence of octet strings. A char *** should be supplied, which upon return points to a dynamically allocated null-terminated array of char *’s containing the octet strings. NULL is returned if the sequence is empty. The caller should free the returned array and octet strings using ber_memvfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1479>1479</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1480>1480</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1481>1481</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1482>1482</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A struct berval *** should be supplied, which upon return points to a dynamically allocated null-terminated array of struct berval *’s containing the octet strings and their lengths. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvecfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1483>1483</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1484>1484</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1485>1485</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1486>1486</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A BerVarray * should be supplied, which upon return points to a dynamically allocated array of struct berval’s containing the octet strings and their lengths. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvarray_fr ee().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1487>1487</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1488>1488</a></td>\n' +
            '<td>M</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1489>1489</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1490>1490</a></td>\n' +
            '<td>Sequence of octet strings with lengths. This is a generalized form of the previous three formats. A void ** (ptr) should be supplied, followed by a ber_len_t * (len) and a ber_len_t (off). Upon return (ptr) will point to a dynamically allocated array whose elements are all of size (*len). A struct berval will be filled starting at offset (off) in each element. The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The number of elements in the array is also stored in (*len) on return. The caller should free the returned array using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1491>1491</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1492>1492</a></td>\n' +
            '<td>l</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1493>1493</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1494>1494</a></td>\n' +
            '<td>Length of the next element. A pointer to a ber_len_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1495>1495</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1496>1496</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1497>1497</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1498>1498</a></td>\n' +
            '<td>Tag of the next element. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1499>1499</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1500>1500</a></td>\n' +
            '<td>T</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1501>1501</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1502>1502</a></td>\n' +
            '<td>Skip element and return its tag. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1503>1503</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1504>1504</a></td>\n' +
            '<td>x</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1505>1505</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1506>1506</a></td>\n' +
            '<td>Skip element. The next element is skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1507>1507</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1508>1508</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1509>1509</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1510>1510</a></td>\n' +
            '<td>Begin sequence. No parameter is required. The initial sequence tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1511>1511</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1512>1512</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1513>1513</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1514>1514</a></td>\n' +
            '<td>End sequence. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1515>1515</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1516>1516</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1517>1517</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1518>1518</a></td>\n' +
            '<td>Begin set. No parameter is required. The initial set tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1519>1519</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1520>1520</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1521>1521</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1522>1522</a></td>\n' +
            '<td>End set. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1523>1523</a></td>\n' +
            '<td>The ber_get_int() routine tries to interpret the next element as an integer, returning the result in num. The tag of whatever it finds is returned on success, LBER_ERROR (−1) on failure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1524>1524</a></td>\n' +
            '<td>The ber_get_stringb() routine is used to read an octet string into a preallocated buffer. The len parameter should be initialized to the size of the buffer, and will contain the length of the octet string read upon return. The buffer should be big enough to take the octet string value plus a terminating NULL byte.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1525>1525</a></td>\n' +
            '<td>The ber_get_stringa() routine is used to dynamically allocate space into which an octet string is read. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1526>1526</a></td>\n' +
            '<td>The ber_get_stringal() routine is used to dynamically allocate space into which an octet string and its length are read. It takes a struct berval **, and returns the result in this parameter. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1527>1527</a></td>\n' +
            '<td>The ber_get_stringbv() routine is used to read an octet string and its length into the provided struct berval *. If the alloc parameter is zero, the string will reside in memory assigned to the BerElement, and must not be freed by the caller. If the alloc parameter is non-zero, the string will be copied into dynamically allocated space which should be returned using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1528>1528</a></td>\n' +
            '<td>The ber_get_null() routine is used to read a NULL element. It returns the tag of the element it skips over.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1529>1529</a></td>\n' +
            '<td>The ber_get_boolean() routine is used to read a boolean value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1530>1530</a></td>\n' +
            '<td>The ber_get_enum() routine is used to read a enumeration value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1531>1531</a></td>\n' +
            '<td>The ber_get_bitstringa() routine is used to read a bitstring value. It takes a char ** which will hold the dynamically allocated bits, followed by an ber_len_t *, which will point to the length (in bits) of the bitstring returned. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1532>1532</a></td>\n' +
            '<td>The ber_first_element() routine is used to return the tag and length of the first element in a set or sequence. It also returns in cookie a magic cookie parameter that should be passed to subsequent calls to ber_next_element(), which returns similar information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1533>1533</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1534>1534</a></td>\n' +
            '<td>Assume the variable ber contains a lightweight BER encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1535>1535</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1536>1536</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1537>1537</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1538>1538</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1539>1539</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1540>1540</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1541>1541</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1542>1542</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1543>1543</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1544>1544</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1545>1545</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1546>1546</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1547>1547</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1548>1548</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1549>1549</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1550>1550</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1551>1551</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1552>1552</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1553>1553</a></td>\n' +
            '<td>The element can be decoded using ber_scanf() as follows.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1554>1554</a></td>\n' +
            '<td>ber_int_t scope, deref, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1555>1555</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1556>1556</a></td>\n' +
            '<td>ber_tag_t tag;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1557>1557</a></td>\n' +
            '<td>tag = ber_scanf( ber, "{aeeiib{v}}",</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1558>1558</a></td>\n' +
            '<td>&amp;dn, &amp;scope, &amp;deref,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1559>1559</a></td>\n' +
            '<td>&amp;size, &amp;time, &amp;attrsonly, &amp;attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1560>1560</a></td>\n' +
            '<td>if( tag == LBER_ERROR ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1561>1561</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1562>1562</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1563>1563</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1564>1564</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1565>1565</a></td>\n' +
            '<td>ber_memfree( dn );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1566>1566</a></td>\n' +
            '<td>ber_memvfree( attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1567>1567</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1568>1568</a></td>\n' +
            '<td>If an error occurs during decoding, generally these routines return LBER_ERROR ((ber_tag_t)−1).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1569>1569</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1570>1570</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file. Some routines may dynamically allocate memory which must be freed by the caller using supplied deallocation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1571>1571</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1572>1572</a></td>\n' +
            '<td>lber-encode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1573>1573</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1574>1574</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1575>1575</a></td>\n' +
            '<td>LBER_DECODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1576>1576</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1577>1577</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1578>1578</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1579>1579</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1580>1580</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1581>1581</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1582>1582</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1583>1583</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1584>1584</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1585>1585</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1586>1586</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1587>1587</a></td>\n' +
            '<td>ber_get_next, ber_skip_tag, ber_peek_tag, ber_scanf, ber_get_int, ber_get_enum, ber_get_stringb, ber_get_stringa, ber_get_stringal, ber_get_stringbv, ber_get_null, ber_get_boolean, ber_get_bitstring, ber_first_element, ber_next_element − OpenLDAP LBER simplified Basic Encoding Rules library routines for decoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1588>1588</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1589>1589</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1590>1590</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1591>1591</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1592>1592</a></td>\n' +
            '<td>ber_tag_t ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1593>1593</a></td>\n' +
            '<td>ber_tag_t ber_skip_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1594>1594</a></td>\n' +
            '<td>ber_tag_t ber_peek_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1595>1595</a></td>\n' +
            '<td>ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1596>1596</a></td>\n' +
            '<td>ber_tag_t ber_get_int(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1597>1597</a></td>\n' +
            '<td>ber_tag_t ber_get_enum(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1598>1598</a></td>\n' +
            '<td>ber_tag_t ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1599>1599</a></td>\n' +
            '<td>ber_tag_t ber_get_stringa(BerElement *ber, char **buf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1600>1600</a></td>\n' +
            '<td>ber_tag_t ber_get_stringal(BerElement *ber, struct berval **bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1601>1601</a></td>\n' +
            '<td>ber_tag_t ber_get_stringbv(BerElement *ber, struct berval *bv, int alloc);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1602>1602</a></td>\n' +
            '<td>ber_tag_t ber_get_null(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1603>1603</a></td>\n' +
            '<td>ber_tag_t ber_get_boolean(BerElement *ber, ber_int_t *bool);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1604>1604</a></td>\n' +
            '<td>ber_tag_t ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *blen);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1605>1605</a></td>\n' +
            '<td>ber_tag_t ber_first_element(BerElement *ber, ber_len_t *len, char **cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1606>1606</a></td>\n' +
            '<td>ber_tag_t ber_next_element(BerElement *ber, ber_len_t *len, const char *cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1607>1607</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1608>1608</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the decoding routines in the lber library. See lber-encode(3) for details on the corresponding encoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1609>1609</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_get_next() to get the next BER element and ber_scanf() to do the actual decoding. In some cases, ber_peek_tag() may also need to be called in normal usage. The other routines are provided for those applications that need more control than ber_scanf() provides. In general, these routines return the tag of the element decoded, or LBER_ERROR if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1610>1610</a></td>\n' +
            '<td>The ber_get_next() routine is used to read the next BER element from the given Sockbuf, sb. It strips off and returns the leading tag, strips off and returns the length of the entire element in len, and sets up ber for subsequent calls to ber_scanf() et al to decode the element. See lber-sockbuf(3) for details of the Sockbuf implementation of the sb parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1611>1611</a></td>\n' +
            '<td>The ber_scanf() routine is used to decode a BER element in much the same way that scanf(3) works. It reads from ber, a pointer to a BerElement such as returned by ber_get_next(), interprets the bytes according to the format string fmt, and stores the results in its additional arguments. The format string contains conversion specifications which are used to direct the interpretation of the BER element. The format string can contain the following characters.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1612>1612</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1613>1613</a></td>\n' +
            '<td>a</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1614>1614</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1615>1615</a></td>\n' +
            '<td>Octet string. A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1616>1616</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1617>1617</a></td>\n' +
            '<td>A</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1618>1618</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1619>1619</a></td>\n' +
            '<td>Octet string. A variant of "a". A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter, unless a zero-length string would result; in that case, the arg is set to NULL. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1620>1620</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1621>1621</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1622>1622</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1623>1623</a></td>\n' +
            '<td>Octet string. A char * buffer should be supplied, followed by a pointer to a ber_len_t initialized to the size of the buffer. Upon return, the null-terminated octet string is put into the buffer, and the ber_len_t is set to the actual size of the octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1624>1624</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1625>1625</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1626>1626</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1627>1627</a></td>\n' +
            '<td>Octet string. A struct ber_val ** should be supplied, which upon return points to a dynamically allocated struct berval containing the octet string and its length. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1628>1628</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1629>1629</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1630>1630</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1631>1631</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the dynamically allocated octet string and its length. The caller should free the returned octet string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1632>1632</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1633>1633</a></td>\n' +
            '<td>m</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1634>1634</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1635>1635</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the octet string and its length. The string resides in memory assigned to the BerElement, and must not be freed by the caller.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1636>1636</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1637>1637</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1638>1638</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1639>1639</a></td>\n' +
            '<td>Boolean. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1640>1640</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1641>1641</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1642>1642</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1643>1643</a></td>\n' +
            '<td>Enumeration. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1644>1644</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1645>1645</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1646>1646</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1647>1647</a></td>\n' +
            '<td>Integer. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1648>1648</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1649>1649</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1650>1650</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1651>1651</a></td>\n' +
            '<td>Bitstring. A char ** should be supplied which will point to the dynamically allocated bits, followed by a ber_len_t *, which will point to the length (in bits) of the bitstring returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1652>1652</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1653>1653</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1654>1654</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1655>1655</a></td>\n' +
            '<td>Null. No parameter is required. The element is simply skipped if it is recognized.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1656>1656</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1657>1657</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1658>1658</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1659>1659</a></td>\n' +
            '<td>Sequence of octet strings. A char *** should be supplied, which upon return points to a dynamically allocated null-terminated array of char *’s containing the octet strings. NULL is returned if the sequence is empty. The caller should free the returned array and octet strings using ber_memvfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1660>1660</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1661>1661</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1662>1662</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1663>1663</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A struct berval *** should be supplied, which upon return points to a dynamically allocated null-terminated array of struct berval *’s containing the octet strings and their lengths. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvecfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1664>1664</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1665>1665</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1666>1666</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1667>1667</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A BerVarray * should be supplied, which upon return points to a dynamically allocated array of struct berval’s containing the octet strings and their lengths. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvarray_fr ee().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1668>1668</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1669>1669</a></td>\n' +
            '<td>M</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1670>1670</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1671>1671</a></td>\n' +
            '<td>Sequence of octet strings with lengths. This is a generalized form of the previous three formats. A void ** (ptr) should be supplied, followed by a ber_len_t * (len) and a ber_len_t (off). Upon return (ptr) will point to a dynamically allocated array whose elements are all of size (*len). A struct berval will be filled starting at offset (off) in each element. The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The number of elements in the array is also stored in (*len) on return. The caller should free the returned array using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1672>1672</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1673>1673</a></td>\n' +
            '<td>l</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1674>1674</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1675>1675</a></td>\n' +
            '<td>Length of the next element. A pointer to a ber_len_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1676>1676</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1677>1677</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1678>1678</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1679>1679</a></td>\n' +
            '<td>Tag of the next element. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1680>1680</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1681>1681</a></td>\n' +
            '<td>T</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1682>1682</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1683>1683</a></td>\n' +
            '<td>Skip element and return its tag. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1684>1684</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1685>1685</a></td>\n' +
            '<td>x</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1686>1686</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1687>1687</a></td>\n' +
            '<td>Skip element. The next element is skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1688>1688</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1689>1689</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1690>1690</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1691>1691</a></td>\n' +
            '<td>Begin sequence. No parameter is required. The initial sequence tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1692>1692</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1693>1693</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1694>1694</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1695>1695</a></td>\n' +
            '<td>End sequence. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1696>1696</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1697>1697</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1698>1698</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1699>1699</a></td>\n' +
            '<td>Begin set. No parameter is required. The initial set tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1700>1700</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1701>1701</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1702>1702</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1703>1703</a></td>\n' +
            '<td>End set. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1704>1704</a></td>\n' +
            '<td>The ber_get_int() routine tries to interpret the next element as an integer, returning the result in num. The tag of whatever it finds is returned on success, LBER_ERROR (−1) on failure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1705>1705</a></td>\n' +
            '<td>The ber_get_stringb() routine is used to read an octet string into a preallocated buffer. The len parameter should be initialized to the size of the buffer, and will contain the length of the octet string read upon return. The buffer should be big enough to take the octet string value plus a terminating NULL byte.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1706>1706</a></td>\n' +
            '<td>The ber_get_stringa() routine is used to dynamically allocate space into which an octet string is read. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1707>1707</a></td>\n' +
            '<td>The ber_get_stringal() routine is used to dynamically allocate space into which an octet string and its length are read. It takes a struct berval **, and returns the result in this parameter. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1708>1708</a></td>\n' +
            '<td>The ber_get_stringbv() routine is used to read an octet string and its length into the provided struct berval *. If the alloc parameter is zero, the string will reside in memory assigned to the BerElement, and must not be freed by the caller. If the alloc parameter is non-zero, the string will be copied into dynamically allocated space which should be returned using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1709>1709</a></td>\n' +
            '<td>The ber_get_null() routine is used to read a NULL element. It returns the tag of the element it skips over.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1710>1710</a></td>\n' +
            '<td>The ber_get_boolean() routine is used to read a boolean value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1711>1711</a></td>\n' +
            '<td>The ber_get_enum() routine is used to read a enumeration value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1712>1712</a></td>\n' +
            '<td>The ber_get_bitstringa() routine is used to read a bitstring value. It takes a char ** which will hold the dynamically allocated bits, followed by an ber_len_t *, which will point to the length (in bits) of the bitstring returned. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1713>1713</a></td>\n' +
            '<td>The ber_first_element() routine is used to return the tag and length of the first element in a set or sequence. It also returns in cookie a magic cookie parameter that should be passed to subsequent calls to ber_next_element(), which returns similar information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1714>1714</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1715>1715</a></td>\n' +
            '<td>Assume the variable ber contains a lightweight BER encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1716>1716</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1717>1717</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1718>1718</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1719>1719</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1720>1720</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1721>1721</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1722>1722</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1723>1723</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1724>1724</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1725>1725</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1726>1726</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1727>1727</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1728>1728</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1729>1729</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1730>1730</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1731>1731</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1732>1732</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1733>1733</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1734>1734</a></td>\n' +
            '<td>The element can be decoded using ber_scanf() as follows.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1735>1735</a></td>\n' +
            '<td>ber_int_t scope, deref, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1736>1736</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1737>1737</a></td>\n' +
            '<td>ber_tag_t tag;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1738>1738</a></td>\n' +
            '<td>tag = ber_scanf( ber, "{aeeiib{v}}",</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1739>1739</a></td>\n' +
            '<td>&amp;dn, &amp;scope, &amp;deref,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1740>1740</a></td>\n' +
            '<td>&amp;size, &amp;time, &amp;attrsonly, &amp;attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1741>1741</a></td>\n' +
            '<td>if( tag == LBER_ERROR ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1742>1742</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1743>1743</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1744>1744</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1745>1745</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1746>1746</a></td>\n' +
            '<td>ber_memfree( dn );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1747>1747</a></td>\n' +
            '<td>ber_memvfree( attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1748>1748</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1749>1749</a></td>\n' +
            '<td>If an error occurs during decoding, generally these routines return LBER_ERROR ((ber_tag_t)−1).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1750>1750</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1751>1751</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file. Some routines may dynamically allocate memory which must be freed by the caller using supplied deallocation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1752>1752</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1753>1753</a></td>\n' +
            '<td>lber-encode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1754>1754</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1755>1755</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1756>1756</a></td>\n' +
            '<td>LBER_DECODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1757>1757</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1758>1758</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1759>1759</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1760>1760</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1761>1761</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1762>1762</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1763>1763</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1764>1764</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1765>1765</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1766>1766</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1767>1767</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1768>1768</a></td>\n' +
            '<td>ber_get_next, ber_skip_tag, ber_peek_tag, ber_scanf, ber_get_int, ber_get_enum, ber_get_stringb, ber_get_stringa, ber_get_stringal, ber_get_stringbv, ber_get_null, ber_get_boolean, ber_get_bitstring, ber_first_element, ber_next_element − OpenLDAP LBER simplified Basic Encoding Rules library routines for decoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1769>1769</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1770>1770</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1771>1771</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1772>1772</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1773>1773</a></td>\n' +
            '<td>ber_tag_t ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1774>1774</a></td>\n' +
            '<td>ber_tag_t ber_skip_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1775>1775</a></td>\n' +
            '<td>ber_tag_t ber_peek_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1776>1776</a></td>\n' +
            '<td>ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1777>1777</a></td>\n' +
            '<td>ber_tag_t ber_get_int(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1778>1778</a></td>\n' +
            '<td>ber_tag_t ber_get_enum(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1779>1779</a></td>\n' +
            '<td>ber_tag_t ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1780>1780</a></td>\n' +
            '<td>ber_tag_t ber_get_stringa(BerElement *ber, char **buf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1781>1781</a></td>\n' +
            '<td>ber_tag_t ber_get_stringal(BerElement *ber, struct berval **bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1782>1782</a></td>\n' +
            '<td>ber_tag_t ber_get_stringbv(BerElement *ber, struct berval *bv, int alloc);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1783>1783</a></td>\n' +
            '<td>ber_tag_t ber_get_null(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1784>1784</a></td>\n' +
            '<td>ber_tag_t ber_get_boolean(BerElement *ber, ber_int_t *bool);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1785>1785</a></td>\n' +
            '<td>ber_tag_t ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *blen);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1786>1786</a></td>\n' +
            '<td>ber_tag_t ber_first_element(BerElement *ber, ber_len_t *len, char **cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1787>1787</a></td>\n' +
            '<td>ber_tag_t ber_next_element(BerElement *ber, ber_len_t *len, const char *cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1788>1788</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1789>1789</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the decoding routines in the lber library. See lber-encode(3) for details on the corresponding encoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1790>1790</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_get_next() to get the next BER element and ber_scanf() to do the actual decoding. In some cases, ber_peek_tag() may also need to be called in normal usage. The other routines are provided for those applications that need more control than ber_scanf() provides. In general, these routines return the tag of the element decoded, or LBER_ERROR if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1791>1791</a></td>\n' +
            '<td>The ber_get_next() routine is used to read the next BER element from the given Sockbuf, sb. It strips off and returns the leading tag, strips off and returns the length of the entire element in len, and sets up ber for subsequent calls to ber_scanf() et al to decode the element. See lber-sockbuf(3) for details of the Sockbuf implementation of the sb parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1792>1792</a></td>\n' +
            '<td>The ber_scanf() routine is used to decode a BER element in much the same way that scanf(3) works. It reads from ber, a pointer to a BerElement such as returned by ber_get_next(), interprets the bytes according to the format string fmt, and stores the results in its additional arguments. The format string contains conversion specifications which are used to direct the interpretation of the BER element. The format string can contain the following characters.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1793>1793</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1794>1794</a></td>\n' +
            '<td>a</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1795>1795</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1796>1796</a></td>\n' +
            '<td>Octet string. A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1797>1797</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1798>1798</a></td>\n' +
            '<td>A</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1799>1799</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1800>1800</a></td>\n' +
            '<td>Octet string. A variant of "a". A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter, unless a zero-length string would result; in that case, the arg is set to NULL. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1801>1801</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1802>1802</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1803>1803</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1804>1804</a></td>\n' +
            '<td>Octet string. A char * buffer should be supplied, followed by a pointer to a ber_len_t initialized to the size of the buffer. Upon return, the null-terminated octet string is put into the buffer, and the ber_len_t is set to the actual size of the octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1805>1805</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1806>1806</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1807>1807</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1808>1808</a></td>\n' +
            '<td>Octet string. A struct ber_val ** should be supplied, which upon return points to a dynamically allocated struct berval containing the octet string and its length. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1809>1809</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1810>1810</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1811>1811</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1812>1812</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the dynamically allocated octet string and its length. The caller should free the returned octet string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1813>1813</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1814>1814</a></td>\n' +
            '<td>m</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1815>1815</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1816>1816</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the octet string and its length. The string resides in memory assigned to the BerElement, and must not be freed by the caller.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1817>1817</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1818>1818</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1819>1819</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1820>1820</a></td>\n' +
            '<td>Boolean. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1821>1821</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1822>1822</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1823>1823</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1824>1824</a></td>\n' +
            '<td>Enumeration. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1825>1825</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1826>1826</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1827>1827</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1828>1828</a></td>\n' +
            '<td>Integer. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1829>1829</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1830>1830</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1831>1831</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1832>1832</a></td>\n' +
            '<td>Bitstring. A char ** should be supplied which will point to the dynamically allocated bits, followed by a ber_len_t *, which will point to the length (in bits) of the bitstring returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1833>1833</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1834>1834</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1835>1835</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1836>1836</a></td>\n' +
            '<td>Null. No parameter is required. The element is simply skipped if it is recognized.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1837>1837</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1838>1838</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1839>1839</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1840>1840</a></td>\n' +
            '<td>Sequence of octet strings. A char *** should be supplied, which upon return points to a dynamically allocated null-terminated array of char *’s containing the octet strings. NULL is returned if the sequence is empty. The caller should free the returned array and octet strings using ber_memvfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1841>1841</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1842>1842</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1843>1843</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1844>1844</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A struct berval *** should be supplied, which upon return points to a dynamically allocated null-terminated array of struct berval *’s containing the octet strings and their lengths. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvecfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1845>1845</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1846>1846</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1847>1847</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1848>1848</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A BerVarray * should be supplied, which upon return points to a dynamically allocated array of struct berval’s containing the octet strings and their lengths. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvarray_fr ee().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1849>1849</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1850>1850</a></td>\n' +
            '<td>M</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1851>1851</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1852>1852</a></td>\n' +
            '<td>Sequence of octet strings with lengths. This is a generalized form of the previous three formats. A void ** (ptr) should be supplied, followed by a ber_len_t * (len) and a ber_len_t (off). Upon return (ptr) will point to a dynamically allocated array whose elements are all of size (*len). A struct berval will be filled starting at offset (off) in each element. The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The number of elements in the array is also stored in (*len) on return. The caller should free the returned array using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1853>1853</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1854>1854</a></td>\n' +
            '<td>l</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1855>1855</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1856>1856</a></td>\n' +
            '<td>Length of the next element. A pointer to a ber_len_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1857>1857</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1858>1858</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1859>1859</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1860>1860</a></td>\n' +
            '<td>Tag of the next element. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1861>1861</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1862>1862</a></td>\n' +
            '<td>T</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1863>1863</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1864>1864</a></td>\n' +
            '<td>Skip element and return its tag. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1865>1865</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1866>1866</a></td>\n' +
            '<td>x</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1867>1867</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1868>1868</a></td>\n' +
            '<td>Skip element. The next element is skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1869>1869</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1870>1870</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1871>1871</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1872>1872</a></td>\n' +
            '<td>Begin sequence. No parameter is required. The initial sequence tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1873>1873</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1874>1874</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1875>1875</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1876>1876</a></td>\n' +
            '<td>End sequence. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1877>1877</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1878>1878</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1879>1879</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1880>1880</a></td>\n' +
            '<td>Begin set. No parameter is required. The initial set tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1881>1881</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1882>1882</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1883>1883</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1884>1884</a></td>\n' +
            '<td>End set. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1885>1885</a></td>\n' +
            '<td>The ber_get_int() routine tries to interpret the next element as an integer, returning the result in num. The tag of whatever it finds is returned on success, LBER_ERROR (−1) on failure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1886>1886</a></td>\n' +
            '<td>The ber_get_stringb() routine is used to read an octet string into a preallocated buffer. The len parameter should be initialized to the size of the buffer, and will contain the length of the octet string read upon return. The buffer should be big enough to take the octet string value plus a terminating NULL byte.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1887>1887</a></td>\n' +
            '<td>The ber_get_stringa() routine is used to dynamically allocate space into which an octet string is read. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1888>1888</a></td>\n' +
            '<td>The ber_get_stringal() routine is used to dynamically allocate space into which an octet string and its length are read. It takes a struct berval **, and returns the result in this parameter. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1889>1889</a></td>\n' +
            '<td>The ber_get_stringbv() routine is used to read an octet string and its length into the provided struct berval *. If the alloc parameter is zero, the string will reside in memory assigned to the BerElement, and must not be freed by the caller. If the alloc parameter is non-zero, the string will be copied into dynamically allocated space which should be returned using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1890>1890</a></td>\n' +
            '<td>The ber_get_null() routine is used to read a NULL element. It returns the tag of the element it skips over.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1891>1891</a></td>\n' +
            '<td>The ber_get_boolean() routine is used to read a boolean value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1892>1892</a></td>\n' +
            '<td>The ber_get_enum() routine is used to read a enumeration value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1893>1893</a></td>\n' +
            '<td>The ber_get_bitstringa() routine is used to read a bitstring value. It takes a char ** which will hold the dynamically allocated bits, followed by an ber_len_t *, which will point to the length (in bits) of the bitstring returned. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1894>1894</a></td>\n' +
            '<td>The ber_first_element() routine is used to return the tag and length of the first element in a set or sequence. It also returns in cookie a magic cookie parameter that should be passed to subsequent calls to ber_next_element(), which returns similar information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1895>1895</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1896>1896</a></td>\n' +
            '<td>Assume the variable ber contains a lightweight BER encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1897>1897</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1898>1898</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1899>1899</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1900>1900</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1901>1901</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1902>1902</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1903>1903</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1904>1904</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1905>1905</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1906>1906</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1907>1907</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1908>1908</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1909>1909</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1910>1910</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1911>1911</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1912>1912</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1913>1913</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1914>1914</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1915>1915</a></td>\n' +
            '<td>The element can be decoded using ber_scanf() as follows.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1916>1916</a></td>\n' +
            '<td>ber_int_t scope, deref, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1917>1917</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1918>1918</a></td>\n' +
            '<td>ber_tag_t tag;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1919>1919</a></td>\n' +
            '<td>tag = ber_scanf( ber, "{aeeiib{v}}",</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1920>1920</a></td>\n' +
            '<td>&amp;dn, &amp;scope, &amp;deref,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1921>1921</a></td>\n' +
            '<td>&amp;size, &amp;time, &amp;attrsonly, &amp;attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1922>1922</a></td>\n' +
            '<td>if( tag == LBER_ERROR ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1923>1923</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1924>1924</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1925>1925</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1926>1926</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1927>1927</a></td>\n' +
            '<td>ber_memfree( dn );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1928>1928</a></td>\n' +
            '<td>ber_memvfree( attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1929>1929</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1930>1930</a></td>\n' +
            '<td>If an error occurs during decoding, generally these routines return LBER_ERROR ((ber_tag_t)−1).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1931>1931</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1932>1932</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file. Some routines may dynamically allocate memory which must be freed by the caller using supplied deallocation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1933>1933</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1934>1934</a></td>\n' +
            '<td>lber-encode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1935>1935</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1936>1936</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1937>1937</a></td>\n' +
            '<td>LBER_DECODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1938>1938</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1939>1939</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1940>1940</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1941>1941</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1942>1942</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1943>1943</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1944>1944</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1945>1945</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1946>1946</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1947>1947</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1948>1948</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1949>1949</a></td>\n' +
            '<td>ber_get_next, ber_skip_tag, ber_peek_tag, ber_scanf, ber_get_int, ber_get_enum, ber_get_stringb, ber_get_stringa, ber_get_stringal, ber_get_stringbv, ber_get_null, ber_get_boolean, ber_get_bitstring, ber_first_element, ber_next_element − OpenLDAP LBER simplified Basic Encoding Rules library routines for decoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1950>1950</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1951>1951</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1952>1952</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1953>1953</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1954>1954</a></td>\n' +
            '<td>ber_tag_t ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1955>1955</a></td>\n' +
            '<td>ber_tag_t ber_skip_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1956>1956</a></td>\n' +
            '<td>ber_tag_t ber_peek_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1957>1957</a></td>\n' +
            '<td>ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1958>1958</a></td>\n' +
            '<td>ber_tag_t ber_get_int(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1959>1959</a></td>\n' +
            '<td>ber_tag_t ber_get_enum(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1960>1960</a></td>\n' +
            '<td>ber_tag_t ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1961>1961</a></td>\n' +
            '<td>ber_tag_t ber_get_stringa(BerElement *ber, char **buf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1962>1962</a></td>\n' +
            '<td>ber_tag_t ber_get_stringal(BerElement *ber, struct berval **bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1963>1963</a></td>\n' +
            '<td>ber_tag_t ber_get_stringbv(BerElement *ber, struct berval *bv, int alloc);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1964>1964</a></td>\n' +
            '<td>ber_tag_t ber_get_null(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1965>1965</a></td>\n' +
            '<td>ber_tag_t ber_get_boolean(BerElement *ber, ber_int_t *bool);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1966>1966</a></td>\n' +
            '<td>ber_tag_t ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *blen);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1967>1967</a></td>\n' +
            '<td>ber_tag_t ber_first_element(BerElement *ber, ber_len_t *len, char **cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1968>1968</a></td>\n' +
            '<td>ber_tag_t ber_next_element(BerElement *ber, ber_len_t *len, const char *cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1969>1969</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1970>1970</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the decoding routines in the lber library. See lber-encode(3) for details on the corresponding encoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1971>1971</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_get_next() to get the next BER element and ber_scanf() to do the actual decoding. In some cases, ber_peek_tag() may also need to be called in normal usage. The other routines are provided for those applications that need more control than ber_scanf() provides. In general, these routines return the tag of the element decoded, or LBER_ERROR if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1972>1972</a></td>\n' +
            '<td>The ber_get_next() routine is used to read the next BER element from the given Sockbuf, sb. It strips off and returns the leading tag, strips off and returns the length of the entire element in len, and sets up ber for subsequent calls to ber_scanf() et al to decode the element. See lber-sockbuf(3) for details of the Sockbuf implementation of the sb parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1973>1973</a></td>\n' +
            '<td>The ber_scanf() routine is used to decode a BER element in much the same way that scanf(3) works. It reads from ber, a pointer to a BerElement such as returned by ber_get_next(), interprets the bytes according to the format string fmt, and stores the results in its additional arguments. The format string contains conversion specifications which are used to direct the interpretation of the BER element. The format string can contain the following characters.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1974>1974</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1975>1975</a></td>\n' +
            '<td>a</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1976>1976</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1977>1977</a></td>\n' +
            '<td>Octet string. A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1978>1978</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1979>1979</a></td>\n' +
            '<td>A</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1980>1980</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1981>1981</a></td>\n' +
            '<td>Octet string. A variant of "a". A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter, unless a zero-length string would result; in that case, the arg is set to NULL. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1982>1982</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1983>1983</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1984>1984</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1985>1985</a></td>\n' +
            '<td>Octet string. A char * buffer should be supplied, followed by a pointer to a ber_len_t initialized to the size of the buffer. Upon return, the null-terminated octet string is put into the buffer, and the ber_len_t is set to the actual size of the octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1986>1986</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1987>1987</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1988>1988</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1989>1989</a></td>\n' +
            '<td>Octet string. A struct ber_val ** should be supplied, which upon return points to a dynamically allocated struct berval containing the octet string and its length. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1990>1990</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1991>1991</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1992>1992</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1993>1993</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the dynamically allocated octet string and its length. The caller should free the returned octet string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1994>1994</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1995>1995</a></td>\n' +
            '<td>m</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1996>1996</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1997>1997</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the octet string and its length. The string resides in memory assigned to the BerElement, and must not be freed by the caller.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1998>1998</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=1999>1999</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2000>2000</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2001>2001</a></td>\n' +
            '<td>Boolean. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2002>2002</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2003>2003</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2004>2004</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2005>2005</a></td>\n' +
            '<td>Enumeration. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2006>2006</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2007>2007</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2008>2008</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2009>2009</a></td>\n' +
            '<td>Integer. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2010>2010</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2011>2011</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2012>2012</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2013>2013</a></td>\n' +
            '<td>Bitstring. A char ** should be supplied which will point to the dynamically allocated bits, followed by a ber_len_t *, which will point to the length (in bits) of the bitstring returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2014>2014</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2015>2015</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2016>2016</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2017>2017</a></td>\n' +
            '<td>Null. No parameter is required. The element is simply skipped if it is recognized.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2018>2018</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2019>2019</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2020>2020</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2021>2021</a></td>\n' +
            '<td>Sequence of octet strings. A char *** should be supplied, which upon return points to a dynamically allocated null-terminated array of char *’s containing the octet strings. NULL is returned if the sequence is empty. The caller should free the returned array and octet strings using ber_memvfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2022>2022</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2023>2023</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2024>2024</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2025>2025</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A struct berval *** should be supplied, which upon return points to a dynamically allocated null-terminated array of struct berval *’s containing the octet strings and their lengths. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvecfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2026>2026</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2027>2027</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2028>2028</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2029>2029</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A BerVarray * should be supplied, which upon return points to a dynamically allocated array of struct berval’s containing the octet strings and their lengths. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvarray_fr ee().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2030>2030</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2031>2031</a></td>\n' +
            '<td>M</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2032>2032</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2033>2033</a></td>\n' +
            '<td>Sequence of octet strings with lengths. This is a generalized form of the previous three formats. A void ** (ptr) should be supplied, followed by a ber_len_t * (len) and a ber_len_t (off). Upon return (ptr) will point to a dynamically allocated array whose elements are all of size (*len). A struct berval will be filled starting at offset (off) in each element. The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The number of elements in the array is also stored in (*len) on return. The caller should free the returned array using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2034>2034</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2035>2035</a></td>\n' +
            '<td>l</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2036>2036</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2037>2037</a></td>\n' +
            '<td>Length of the next element. A pointer to a ber_len_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2038>2038</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2039>2039</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2040>2040</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2041>2041</a></td>\n' +
            '<td>Tag of the next element. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2042>2042</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2043>2043</a></td>\n' +
            '<td>T</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2044>2044</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2045>2045</a></td>\n' +
            '<td>Skip element and return its tag. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2046>2046</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2047>2047</a></td>\n' +
            '<td>x</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2048>2048</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2049>2049</a></td>\n' +
            '<td>Skip element. The next element is skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2050>2050</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2051>2051</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2052>2052</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2053>2053</a></td>\n' +
            '<td>Begin sequence. No parameter is required. The initial sequence tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2054>2054</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2055>2055</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2056>2056</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2057>2057</a></td>\n' +
            '<td>End sequence. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2058>2058</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2059>2059</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2060>2060</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2061>2061</a></td>\n' +
            '<td>Begin set. No parameter is required. The initial set tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2062>2062</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2063>2063</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2064>2064</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2065>2065</a></td>\n' +
            '<td>End set. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2066>2066</a></td>\n' +
            '<td>The ber_get_int() routine tries to interpret the next element as an integer, returning the result in num. The tag of whatever it finds is returned on success, LBER_ERROR (−1) on failure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2067>2067</a></td>\n' +
            '<td>The ber_get_stringb() routine is used to read an octet string into a preallocated buffer. The len parameter should be initialized to the size of the buffer, and will contain the length of the octet string read upon return. The buffer should be big enough to take the octet string value plus a terminating NULL byte.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2068>2068</a></td>\n' +
            '<td>The ber_get_stringa() routine is used to dynamically allocate space into which an octet string is read. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2069>2069</a></td>\n' +
            '<td>The ber_get_stringal() routine is used to dynamically allocate space into which an octet string and its length are read. It takes a struct berval **, and returns the result in this parameter. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2070>2070</a></td>\n' +
            '<td>The ber_get_stringbv() routine is used to read an octet string and its length into the provided struct berval *. If the alloc parameter is zero, the string will reside in memory assigned to the BerElement, and must not be freed by the caller. If the alloc parameter is non-zero, the string will be copied into dynamically allocated space which should be returned using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2071>2071</a></td>\n' +
            '<td>The ber_get_null() routine is used to read a NULL element. It returns the tag of the element it skips over.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2072>2072</a></td>\n' +
            '<td>The ber_get_boolean() routine is used to read a boolean value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2073>2073</a></td>\n' +
            '<td>The ber_get_enum() routine is used to read a enumeration value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2074>2074</a></td>\n' +
            '<td>The ber_get_bitstringa() routine is used to read a bitstring value. It takes a char ** which will hold the dynamically allocated bits, followed by an ber_len_t *, which will point to the length (in bits) of the bitstring returned. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2075>2075</a></td>\n' +
            '<td>The ber_first_element() routine is used to return the tag and length of the first element in a set or sequence. It also returns in cookie a magic cookie parameter that should be passed to subsequent calls to ber_next_element(), which returns similar information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2076>2076</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2077>2077</a></td>\n' +
            '<td>Assume the variable ber contains a lightweight BER encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2078>2078</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2079>2079</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2080>2080</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2081>2081</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2082>2082</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2083>2083</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2084>2084</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2085>2085</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2086>2086</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2087>2087</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2088>2088</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2089>2089</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2090>2090</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2091>2091</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2092>2092</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2093>2093</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2094>2094</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2095>2095</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2096>2096</a></td>\n' +
            '<td>The element can be decoded using ber_scanf() as follows.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2097>2097</a></td>\n' +
            '<td>ber_int_t scope, deref, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2098>2098</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2099>2099</a></td>\n' +
            '<td>ber_tag_t tag;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2100>2100</a></td>\n' +
            '<td>tag = ber_scanf( ber, "{aeeiib{v}}",</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2101>2101</a></td>\n' +
            '<td>&amp;dn, &amp;scope, &amp;deref,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2102>2102</a></td>\n' +
            '<td>&amp;size, &amp;time, &amp;attrsonly, &amp;attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2103>2103</a></td>\n' +
            '<td>if( tag == LBER_ERROR ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2104>2104</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2105>2105</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2106>2106</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2107>2107</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2108>2108</a></td>\n' +
            '<td>ber_memfree( dn );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2109>2109</a></td>\n' +
            '<td>ber_memvfree( attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2110>2110</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2111>2111</a></td>\n' +
            '<td>If an error occurs during decoding, generally these routines return LBER_ERROR ((ber_tag_t)−1).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2112>2112</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2113>2113</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file. Some routines may dynamically allocate memory which must be freed by the caller using supplied deallocation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2114>2114</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2115>2115</a></td>\n' +
            '<td>lber-encode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2116>2116</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2117>2117</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2118>2118</a></td>\n' +
            '<td>LBER_DECODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2119>2119</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2120>2120</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2121>2121</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2122>2122</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2123>2123</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2124>2124</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2125>2125</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2126>2126</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2127>2127</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2128>2128</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2129>2129</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2130>2130</a></td>\n' +
            '<td>ber_get_next, ber_skip_tag, ber_peek_tag, ber_scanf, ber_get_int, ber_get_enum, ber_get_stringb, ber_get_stringa, ber_get_stringal, ber_get_stringbv, ber_get_null, ber_get_boolean, ber_get_bitstring, ber_first_element, ber_next_element − OpenLDAP LBER simplified Basic Encoding Rules library routines for decoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2131>2131</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2132>2132</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2133>2133</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2134>2134</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2135>2135</a></td>\n' +
            '<td>ber_tag_t ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2136>2136</a></td>\n' +
            '<td>ber_tag_t ber_skip_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2137>2137</a></td>\n' +
            '<td>ber_tag_t ber_peek_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2138>2138</a></td>\n' +
            '<td>ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2139>2139</a></td>\n' +
            '<td>ber_tag_t ber_get_int(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2140>2140</a></td>\n' +
            '<td>ber_tag_t ber_get_enum(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2141>2141</a></td>\n' +
            '<td>ber_tag_t ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2142>2142</a></td>\n' +
            '<td>ber_tag_t ber_get_stringa(BerElement *ber, char **buf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2143>2143</a></td>\n' +
            '<td>ber_tag_t ber_get_stringal(BerElement *ber, struct berval **bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2144>2144</a></td>\n' +
            '<td>ber_tag_t ber_get_stringbv(BerElement *ber, struct berval *bv, int alloc);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2145>2145</a></td>\n' +
            '<td>ber_tag_t ber_get_null(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2146>2146</a></td>\n' +
            '<td>ber_tag_t ber_get_boolean(BerElement *ber, ber_int_t *bool);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2147>2147</a></td>\n' +
            '<td>ber_tag_t ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *blen);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2148>2148</a></td>\n' +
            '<td>ber_tag_t ber_first_element(BerElement *ber, ber_len_t *len, char **cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2149>2149</a></td>\n' +
            '<td>ber_tag_t ber_next_element(BerElement *ber, ber_len_t *len, const char *cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2150>2150</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2151>2151</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the decoding routines in the lber library. See lber-encode(3) for details on the corresponding encoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2152>2152</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_get_next() to get the next BER element and ber_scanf() to do the actual decoding. In some cases, ber_peek_tag() may also need to be called in normal usage. The other routines are provided for those applications that need more control than ber_scanf() provides. In general, these routines return the tag of the element decoded, or LBER_ERROR if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2153>2153</a></td>\n' +
            '<td>The ber_get_next() routine is used to read the next BER element from the given Sockbuf, sb. It strips off and returns the leading tag, strips off and returns the length of the entire element in len, and sets up ber for subsequent calls to ber_scanf() et al to decode the element. See lber-sockbuf(3) for details of the Sockbuf implementation of the sb parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2154>2154</a></td>\n' +
            '<td>The ber_scanf() routine is used to decode a BER element in much the same way that scanf(3) works. It reads from ber, a pointer to a BerElement such as returned by ber_get_next(), interprets the bytes according to the format string fmt, and stores the results in its additional arguments. The format string contains conversion specifications which are used to direct the interpretation of the BER element. The format string can contain the following characters.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2155>2155</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2156>2156</a></td>\n' +
            '<td>a</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2157>2157</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2158>2158</a></td>\n' +
            '<td>Octet string. A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2159>2159</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2160>2160</a></td>\n' +
            '<td>A</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2161>2161</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2162>2162</a></td>\n' +
            '<td>Octet string. A variant of "a". A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter, unless a zero-length string would result; in that case, the arg is set to NULL. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2163>2163</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2164>2164</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2165>2165</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2166>2166</a></td>\n' +
            '<td>Octet string. A char * buffer should be supplied, followed by a pointer to a ber_len_t initialized to the size of the buffer. Upon return, the null-terminated octet string is put into the buffer, and the ber_len_t is set to the actual size of the octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2167>2167</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2168>2168</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2169>2169</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2170>2170</a></td>\n' +
            '<td>Octet string. A struct ber_val ** should be supplied, which upon return points to a dynamically allocated struct berval containing the octet string and its length. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2171>2171</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2172>2172</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2173>2173</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2174>2174</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the dynamically allocated octet string and its length. The caller should free the returned octet string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2175>2175</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2176>2176</a></td>\n' +
            '<td>m</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2177>2177</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2178>2178</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the octet string and its length. The string resides in memory assigned to the BerElement, and must not be freed by the caller.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2179>2179</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2180>2180</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2181>2181</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2182>2182</a></td>\n' +
            '<td>Boolean. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2183>2183</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2184>2184</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2185>2185</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2186>2186</a></td>\n' +
            '<td>Enumeration. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2187>2187</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2188>2188</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2189>2189</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2190>2190</a></td>\n' +
            '<td>Integer. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2191>2191</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2192>2192</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2193>2193</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2194>2194</a></td>\n' +
            '<td>Bitstring. A char ** should be supplied which will point to the dynamically allocated bits, followed by a ber_len_t *, which will point to the length (in bits) of the bitstring returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2195>2195</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2196>2196</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2197>2197</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2198>2198</a></td>\n' +
            '<td>Null. No parameter is required. The element is simply skipped if it is recognized.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2199>2199</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2200>2200</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2201>2201</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2202>2202</a></td>\n' +
            '<td>Sequence of octet strings. A char *** should be supplied, which upon return points to a dynamically allocated null-terminated array of char *’s containing the octet strings. NULL is returned if the sequence is empty. The caller should free the returned array and octet strings using ber_memvfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2203>2203</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2204>2204</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2205>2205</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2206>2206</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A struct berval *** should be supplied, which upon return points to a dynamically allocated null-terminated array of struct berval *’s containing the octet strings and their lengths. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvecfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2207>2207</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2208>2208</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2209>2209</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2210>2210</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A BerVarray * should be supplied, which upon return points to a dynamically allocated array of struct berval’s containing the octet strings and their lengths. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvarray_fr ee().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2211>2211</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2212>2212</a></td>\n' +
            '<td>M</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2213>2213</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2214>2214</a></td>\n' +
            '<td>Sequence of octet strings with lengths. This is a generalized form of the previous three formats. A void ** (ptr) should be supplied, followed by a ber_len_t * (len) and a ber_len_t (off). Upon return (ptr) will point to a dynamically allocated array whose elements are all of size (*len). A struct berval will be filled starting at offset (off) in each element. The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The number of elements in the array is also stored in (*len) on return. The caller should free the returned array using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2215>2215</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2216>2216</a></td>\n' +
            '<td>l</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2217>2217</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2218>2218</a></td>\n' +
            '<td>Length of the next element. A pointer to a ber_len_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2219>2219</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2220>2220</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2221>2221</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2222>2222</a></td>\n' +
            '<td>Tag of the next element. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2223>2223</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2224>2224</a></td>\n' +
            '<td>T</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2225>2225</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2226>2226</a></td>\n' +
            '<td>Skip element and return its tag. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2227>2227</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2228>2228</a></td>\n' +
            '<td>x</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2229>2229</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2230>2230</a></td>\n' +
            '<td>Skip element. The next element is skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2231>2231</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2232>2232</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2233>2233</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2234>2234</a></td>\n' +
            '<td>Begin sequence. No parameter is required. The initial sequence tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2235>2235</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2236>2236</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2237>2237</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2238>2238</a></td>\n' +
            '<td>End sequence. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2239>2239</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2240>2240</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2241>2241</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2242>2242</a></td>\n' +
            '<td>Begin set. No parameter is required. The initial set tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2243>2243</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2244>2244</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2245>2245</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2246>2246</a></td>\n' +
            '<td>End set. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2247>2247</a></td>\n' +
            '<td>The ber_get_int() routine tries to interpret the next element as an integer, returning the result in num. The tag of whatever it finds is returned on success, LBER_ERROR (−1) on failure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2248>2248</a></td>\n' +
            '<td>The ber_get_stringb() routine is used to read an octet string into a preallocated buffer. The len parameter should be initialized to the size of the buffer, and will contain the length of the octet string read upon return. The buffer should be big enough to take the octet string value plus a terminating NULL byte.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2249>2249</a></td>\n' +
            '<td>The ber_get_stringa() routine is used to dynamically allocate space into which an octet string is read. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2250>2250</a></td>\n' +
            '<td>The ber_get_stringal() routine is used to dynamically allocate space into which an octet string and its length are read. It takes a struct berval **, and returns the result in this parameter. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2251>2251</a></td>\n' +
            '<td>The ber_get_stringbv() routine is used to read an octet string and its length into the provided struct berval *. If the alloc parameter is zero, the string will reside in memory assigned to the BerElement, and must not be freed by the caller. If the alloc parameter is non-zero, the string will be copied into dynamically allocated space which should be returned using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2252>2252</a></td>\n' +
            '<td>The ber_get_null() routine is used to read a NULL element. It returns the tag of the element it skips over.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2253>2253</a></td>\n' +
            '<td>The ber_get_boolean() routine is used to read a boolean value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2254>2254</a></td>\n' +
            '<td>The ber_get_enum() routine is used to read a enumeration value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2255>2255</a></td>\n' +
            '<td>The ber_get_bitstringa() routine is used to read a bitstring value. It takes a char ** which will hold the dynamically allocated bits, followed by an ber_len_t *, which will point to the length (in bits) of the bitstring returned. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2256>2256</a></td>\n' +
            '<td>The ber_first_element() routine is used to return the tag and length of the first element in a set or sequence. It also returns in cookie a magic cookie parameter that should be passed to subsequent calls to ber_next_element(), which returns similar information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2257>2257</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2258>2258</a></td>\n' +
            '<td>Assume the variable ber contains a lightweight BER encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2259>2259</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2260>2260</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2261>2261</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2262>2262</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2263>2263</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2264>2264</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2265>2265</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2266>2266</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2267>2267</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2268>2268</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2269>2269</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2270>2270</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2271>2271</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2272>2272</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2273>2273</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2274>2274</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2275>2275</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2276>2276</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2277>2277</a></td>\n' +
            '<td>The element can be decoded using ber_scanf() as follows.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2278>2278</a></td>\n' +
            '<td>ber_int_t scope, deref, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2279>2279</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2280>2280</a></td>\n' +
            '<td>ber_tag_t tag;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2281>2281</a></td>\n' +
            '<td>tag = ber_scanf( ber, "{aeeiib{v}}",</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2282>2282</a></td>\n' +
            '<td>&amp;dn, &amp;scope, &amp;deref,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2283>2283</a></td>\n' +
            '<td>&amp;size, &amp;time, &amp;attrsonly, &amp;attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2284>2284</a></td>\n' +
            '<td>if( tag == LBER_ERROR ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2285>2285</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2286>2286</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2287>2287</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2288>2288</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2289>2289</a></td>\n' +
            '<td>ber_memfree( dn );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2290>2290</a></td>\n' +
            '<td>ber_memvfree( attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2291>2291</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2292>2292</a></td>\n' +
            '<td>If an error occurs during decoding, generally these routines return LBER_ERROR ((ber_tag_t)−1).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2293>2293</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2294>2294</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file. Some routines may dynamically allocate memory which must be freed by the caller using supplied deallocation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2295>2295</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2296>2296</a></td>\n' +
            '<td>lber-encode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2297>2297</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2298>2298</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2299>2299</a></td>\n' +
            '<td>LBER_DECODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2300>2300</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2301>2301</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2302>2302</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2303>2303</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2304>2304</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2305>2305</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2306>2306</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2307>2307</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2308>2308</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2309>2309</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2310>2310</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2311>2311</a></td>\n' +
            '<td>ber_get_next, ber_skip_tag, ber_peek_tag, ber_scanf, ber_get_int, ber_get_enum, ber_get_stringb, ber_get_stringa, ber_get_stringal, ber_get_stringbv, ber_get_null, ber_get_boolean, ber_get_bitstring, ber_first_element, ber_next_element − OpenLDAP LBER simplified Basic Encoding Rules library routines for decoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2312>2312</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2313>2313</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2314>2314</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2315>2315</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2316>2316</a></td>\n' +
            '<td>ber_tag_t ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2317>2317</a></td>\n' +
            '<td>ber_tag_t ber_skip_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2318>2318</a></td>\n' +
            '<td>ber_tag_t ber_peek_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2319>2319</a></td>\n' +
            '<td>ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2320>2320</a></td>\n' +
            '<td>ber_tag_t ber_get_int(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2321>2321</a></td>\n' +
            '<td>ber_tag_t ber_get_enum(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2322>2322</a></td>\n' +
            '<td>ber_tag_t ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2323>2323</a></td>\n' +
            '<td>ber_tag_t ber_get_stringa(BerElement *ber, char **buf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2324>2324</a></td>\n' +
            '<td>ber_tag_t ber_get_stringal(BerElement *ber, struct berval **bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2325>2325</a></td>\n' +
            '<td>ber_tag_t ber_get_stringbv(BerElement *ber, struct berval *bv, int alloc);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2326>2326</a></td>\n' +
            '<td>ber_tag_t ber_get_null(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2327>2327</a></td>\n' +
            '<td>ber_tag_t ber_get_boolean(BerElement *ber, ber_int_t *bool);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2328>2328</a></td>\n' +
            '<td>ber_tag_t ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *blen);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2329>2329</a></td>\n' +
            '<td>ber_tag_t ber_first_element(BerElement *ber, ber_len_t *len, char **cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2330>2330</a></td>\n' +
            '<td>ber_tag_t ber_next_element(BerElement *ber, ber_len_t *len, const char *cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2331>2331</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2332>2332</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the decoding routines in the lber library. See lber-encode(3) for details on the corresponding encoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2333>2333</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_get_next() to get the next BER element and ber_scanf() to do the actual decoding. In some cases, ber_peek_tag() may also need to be called in normal usage. The other routines are provided for those applications that need more control than ber_scanf() provides. In general, these routines return the tag of the element decoded, or LBER_ERROR if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2334>2334</a></td>\n' +
            '<td>The ber_get_next() routine is used to read the next BER element from the given Sockbuf, sb. It strips off and returns the leading tag, strips off and returns the length of the entire element in len, and sets up ber for subsequent calls to ber_scanf() et al to decode the element. See lber-sockbuf(3) for details of the Sockbuf implementation of the sb parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2335>2335</a></td>\n' +
            '<td>The ber_scanf() routine is used to decode a BER element in much the same way that scanf(3) works. It reads from ber, a pointer to a BerElement such as returned by ber_get_next(), interprets the bytes according to the format string fmt, and stores the results in its additional arguments. The format string contains conversion specifications which are used to direct the interpretation of the BER element. The format string can contain the following characters.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2336>2336</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2337>2337</a></td>\n' +
            '<td>a</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2338>2338</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2339>2339</a></td>\n' +
            '<td>Octet string. A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2340>2340</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2341>2341</a></td>\n' +
            '<td>A</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2342>2342</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2343>2343</a></td>\n' +
            '<td>Octet string. A variant of "a". A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter, unless a zero-length string would result; in that case, the arg is set to NULL. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2344>2344</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2345>2345</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2346>2346</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2347>2347</a></td>\n' +
            '<td>Octet string. A char * buffer should be supplied, followed by a pointer to a ber_len_t initialized to the size of the buffer. Upon return, the null-terminated octet string is put into the buffer, and the ber_len_t is set to the actual size of the octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2348>2348</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2349>2349</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2350>2350</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2351>2351</a></td>\n' +
            '<td>Octet string. A struct ber_val ** should be supplied, which upon return points to a dynamically allocated struct berval containing the octet string and its length. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2352>2352</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2353>2353</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2354>2354</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2355>2355</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the dynamically allocated octet string and its length. The caller should free the returned octet string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2356>2356</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2357>2357</a></td>\n' +
            '<td>m</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2358>2358</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2359>2359</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the octet string and its length. The string resides in memory assigned to the BerElement, and must not be freed by the caller.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2360>2360</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2361>2361</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2362>2362</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2363>2363</a></td>\n' +
            '<td>Boolean. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2364>2364</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2365>2365</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2366>2366</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2367>2367</a></td>\n' +
            '<td>Enumeration. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2368>2368</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2369>2369</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2370>2370</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2371>2371</a></td>\n' +
            '<td>Integer. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2372>2372</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2373>2373</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2374>2374</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2375>2375</a></td>\n' +
            '<td>Bitstring. A char ** should be supplied which will point to the dynamically allocated bits, followed by a ber_len_t *, which will point to the length (in bits) of the bitstring returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2376>2376</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2377>2377</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2378>2378</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2379>2379</a></td>\n' +
            '<td>Null. No parameter is required. The element is simply skipped if it is recognized.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2380>2380</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2381>2381</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2382>2382</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2383>2383</a></td>\n' +
            '<td>Sequence of octet strings. A char *** should be supplied, which upon return points to a dynamically allocated null-terminated array of char *’s containing the octet strings. NULL is returned if the sequence is empty. The caller should free the returned array and octet strings using ber_memvfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2384>2384</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2385>2385</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2386>2386</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2387>2387</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A struct berval *** should be supplied, which upon return points to a dynamically allocated null-terminated array of struct berval *’s containing the octet strings and their lengths. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvecfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2388>2388</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2389>2389</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2390>2390</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2391>2391</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A BerVarray * should be supplied, which upon return points to a dynamically allocated array of struct berval’s containing the octet strings and their lengths. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvarray_fr ee().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2392>2392</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2393>2393</a></td>\n' +
            '<td>M</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2394>2394</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2395>2395</a></td>\n' +
            '<td>Sequence of octet strings with lengths. This is a generalized form of the previous three formats. A void ** (ptr) should be supplied, followed by a ber_len_t * (len) and a ber_len_t (off). Upon return (ptr) will point to a dynamically allocated array whose elements are all of size (*len). A struct berval will be filled starting at offset (off) in each element. The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The number of elements in the array is also stored in (*len) on return. The caller should free the returned array using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2396>2396</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2397>2397</a></td>\n' +
            '<td>l</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2398>2398</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2399>2399</a></td>\n' +
            '<td>Length of the next element. A pointer to a ber_len_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2400>2400</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2401>2401</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2402>2402</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2403>2403</a></td>\n' +
            '<td>Tag of the next element. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2404>2404</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2405>2405</a></td>\n' +
            '<td>T</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2406>2406</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2407>2407</a></td>\n' +
            '<td>Skip element and return its tag. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2408>2408</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2409>2409</a></td>\n' +
            '<td>x</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2410>2410</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2411>2411</a></td>\n' +
            '<td>Skip element. The next element is skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2412>2412</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2413>2413</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2414>2414</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2415>2415</a></td>\n' +
            '<td>Begin sequence. No parameter is required. The initial sequence tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2416>2416</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2417>2417</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2418>2418</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2419>2419</a></td>\n' +
            '<td>End sequence. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2420>2420</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2421>2421</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2422>2422</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2423>2423</a></td>\n' +
            '<td>Begin set. No parameter is required. The initial set tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2424>2424</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2425>2425</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2426>2426</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2427>2427</a></td>\n' +
            '<td>End set. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2428>2428</a></td>\n' +
            '<td>The ber_get_int() routine tries to interpret the next element as an integer, returning the result in num. The tag of whatever it finds is returned on success, LBER_ERROR (−1) on failure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2429>2429</a></td>\n' +
            '<td>The ber_get_stringb() routine is used to read an octet string into a preallocated buffer. The len parameter should be initialized to the size of the buffer, and will contain the length of the octet string read upon return. The buffer should be big enough to take the octet string value plus a terminating NULL byte.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2430>2430</a></td>\n' +
            '<td>The ber_get_stringa() routine is used to dynamically allocate space into which an octet string is read. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2431>2431</a></td>\n' +
            '<td>The ber_get_stringal() routine is used to dynamically allocate space into which an octet string and its length are read. It takes a struct berval **, and returns the result in this parameter. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2432>2432</a></td>\n' +
            '<td>The ber_get_stringbv() routine is used to read an octet string and its length into the provided struct berval *. If the alloc parameter is zero, the string will reside in memory assigned to the BerElement, and must not be freed by the caller. If the alloc parameter is non-zero, the string will be copied into dynamically allocated space which should be returned using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2433>2433</a></td>\n' +
            '<td>The ber_get_null() routine is used to read a NULL element. It returns the tag of the element it skips over.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2434>2434</a></td>\n' +
            '<td>The ber_get_boolean() routine is used to read a boolean value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2435>2435</a></td>\n' +
            '<td>The ber_get_enum() routine is used to read a enumeration value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2436>2436</a></td>\n' +
            '<td>The ber_get_bitstringa() routine is used to read a bitstring value. It takes a char ** which will hold the dynamically allocated bits, followed by an ber_len_t *, which will point to the length (in bits) of the bitstring returned. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2437>2437</a></td>\n' +
            '<td>The ber_first_element() routine is used to return the tag and length of the first element in a set or sequence. It also returns in cookie a magic cookie parameter that should be passed to subsequent calls to ber_next_element(), which returns similar information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2438>2438</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2439>2439</a></td>\n' +
            '<td>Assume the variable ber contains a lightweight BER encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2440>2440</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2441>2441</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2442>2442</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2443>2443</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2444>2444</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2445>2445</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2446>2446</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2447>2447</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2448>2448</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2449>2449</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2450>2450</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2451>2451</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2452>2452</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2453>2453</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2454>2454</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2455>2455</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2456>2456</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2457>2457</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2458>2458</a></td>\n' +
            '<td>The element can be decoded using ber_scanf() as follows.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2459>2459</a></td>\n' +
            '<td>ber_int_t scope, deref, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2460>2460</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2461>2461</a></td>\n' +
            '<td>ber_tag_t tag;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2462>2462</a></td>\n' +
            '<td>tag = ber_scanf( ber, "{aeeiib{v}}",</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2463>2463</a></td>\n' +
            '<td>&amp;dn, &amp;scope, &amp;deref,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2464>2464</a></td>\n' +
            '<td>&amp;size, &amp;time, &amp;attrsonly, &amp;attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2465>2465</a></td>\n' +
            '<td>if( tag == LBER_ERROR ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2466>2466</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2467>2467</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2468>2468</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2469>2469</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2470>2470</a></td>\n' +
            '<td>ber_memfree( dn );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2471>2471</a></td>\n' +
            '<td>ber_memvfree( attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2472>2472</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2473>2473</a></td>\n' +
            '<td>If an error occurs during decoding, generally these routines return LBER_ERROR ((ber_tag_t)−1).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2474>2474</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2475>2475</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file. Some routines may dynamically allocate memory which must be freed by the caller using supplied deallocation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2476>2476</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2477>2477</a></td>\n' +
            '<td>lber-encode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2478>2478</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2479>2479</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2480>2480</a></td>\n' +
            '<td>LBER_DECODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2481>2481</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2482>2482</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2483>2483</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2484>2484</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2485>2485</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2486>2486</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2487>2487</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2488>2488</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2489>2489</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2490>2490</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2491>2491</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2492>2492</a></td>\n' +
            '<td>ber_get_next, ber_skip_tag, ber_peek_tag, ber_scanf, ber_get_int, ber_get_enum, ber_get_stringb, ber_get_stringa, ber_get_stringal, ber_get_stringbv, ber_get_null, ber_get_boolean, ber_get_bitstring, ber_first_element, ber_next_element − OpenLDAP LBER simplified Basic Encoding Rules library routines for decoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2493>2493</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2494>2494</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2495>2495</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2496>2496</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2497>2497</a></td>\n' +
            '<td>ber_tag_t ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2498>2498</a></td>\n' +
            '<td>ber_tag_t ber_skip_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2499>2499</a></td>\n' +
            '<td>ber_tag_t ber_peek_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2500>2500</a></td>\n' +
            '<td>ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2501>2501</a></td>\n' +
            '<td>ber_tag_t ber_get_int(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2502>2502</a></td>\n' +
            '<td>ber_tag_t ber_get_enum(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2503>2503</a></td>\n' +
            '<td>ber_tag_t ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2504>2504</a></td>\n' +
            '<td>ber_tag_t ber_get_stringa(BerElement *ber, char **buf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2505>2505</a></td>\n' +
            '<td>ber_tag_t ber_get_stringal(BerElement *ber, struct berval **bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2506>2506</a></td>\n' +
            '<td>ber_tag_t ber_get_stringbv(BerElement *ber, struct berval *bv, int alloc);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2507>2507</a></td>\n' +
            '<td>ber_tag_t ber_get_null(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2508>2508</a></td>\n' +
            '<td>ber_tag_t ber_get_boolean(BerElement *ber, ber_int_t *bool);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2509>2509</a></td>\n' +
            '<td>ber_tag_t ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *blen);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2510>2510</a></td>\n' +
            '<td>ber_tag_t ber_first_element(BerElement *ber, ber_len_t *len, char **cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2511>2511</a></td>\n' +
            '<td>ber_tag_t ber_next_element(BerElement *ber, ber_len_t *len, const char *cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2512>2512</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2513>2513</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the decoding routines in the lber library. See lber-encode(3) for details on the corresponding encoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2514>2514</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_get_next() to get the next BER element and ber_scanf() to do the actual decoding. In some cases, ber_peek_tag() may also need to be called in normal usage. The other routines are provided for those applications that need more control than ber_scanf() provides. In general, these routines return the tag of the element decoded, or LBER_ERROR if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2515>2515</a></td>\n' +
            '<td>The ber_get_next() routine is used to read the next BER element from the given Sockbuf, sb. It strips off and returns the leading tag, strips off and returns the length of the entire element in len, and sets up ber for subsequent calls to ber_scanf() et al to decode the element. See lber-sockbuf(3) for details of the Sockbuf implementation of the sb parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2516>2516</a></td>\n' +
            '<td>The ber_scanf() routine is used to decode a BER element in much the same way that scanf(3) works. It reads from ber, a pointer to a BerElement such as returned by ber_get_next(), interprets the bytes according to the format string fmt, and stores the results in its additional arguments. The format string contains conversion specifications which are used to direct the interpretation of the BER element. The format string can contain the following characters.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2517>2517</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2518>2518</a></td>\n' +
            '<td>a</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2519>2519</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2520>2520</a></td>\n' +
            '<td>Octet string. A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2521>2521</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2522>2522</a></td>\n' +
            '<td>A</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2523>2523</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2524>2524</a></td>\n' +
            '<td>Octet string. A variant of "a". A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter, unless a zero-length string would result; in that case, the arg is set to NULL. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2525>2525</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2526>2526</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2527>2527</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2528>2528</a></td>\n' +
            '<td>Octet string. A char * buffer should be supplied, followed by a pointer to a ber_len_t initialized to the size of the buffer. Upon return, the null-terminated octet string is put into the buffer, and the ber_len_t is set to the actual size of the octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2529>2529</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2530>2530</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2531>2531</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2532>2532</a></td>\n' +
            '<td>Octet string. A struct ber_val ** should be supplied, which upon return points to a dynamically allocated struct berval containing the octet string and its length. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2533>2533</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2534>2534</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2535>2535</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2536>2536</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the dynamically allocated octet string and its length. The caller should free the returned octet string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2537>2537</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2538>2538</a></td>\n' +
            '<td>m</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2539>2539</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2540>2540</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the octet string and its length. The string resides in memory assigned to the BerElement, and must not be freed by the caller.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2541>2541</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2542>2542</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2543>2543</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2544>2544</a></td>\n' +
            '<td>Boolean. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2545>2545</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2546>2546</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2547>2547</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2548>2548</a></td>\n' +
            '<td>Enumeration. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2549>2549</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2550>2550</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2551>2551</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2552>2552</a></td>\n' +
            '<td>Integer. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2553>2553</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2554>2554</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2555>2555</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2556>2556</a></td>\n' +
            '<td>Bitstring. A char ** should be supplied which will point to the dynamically allocated bits, followed by a ber_len_t *, which will point to the length (in bits) of the bitstring returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2557>2557</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2558>2558</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2559>2559</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2560>2560</a></td>\n' +
            '<td>Null. No parameter is required. The element is simply skipped if it is recognized.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2561>2561</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2562>2562</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2563>2563</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2564>2564</a></td>\n' +
            '<td>Sequence of octet strings. A char *** should be supplied, which upon return points to a dynamically allocated null-terminated array of char *’s containing the octet strings. NULL is returned if the sequence is empty. The caller should free the returned array and octet strings using ber_memvfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2565>2565</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2566>2566</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2567>2567</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2568>2568</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A struct berval *** should be supplied, which upon return points to a dynamically allocated null-terminated array of struct berval *’s containing the octet strings and their lengths. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvecfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2569>2569</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2570>2570</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2571>2571</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2572>2572</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A BerVarray * should be supplied, which upon return points to a dynamically allocated array of struct berval’s containing the octet strings and their lengths. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvarray_fr ee().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2573>2573</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2574>2574</a></td>\n' +
            '<td>M</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2575>2575</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2576>2576</a></td>\n' +
            '<td>Sequence of octet strings with lengths. This is a generalized form of the previous three formats. A void ** (ptr) should be supplied, followed by a ber_len_t * (len) and a ber_len_t (off). Upon return (ptr) will point to a dynamically allocated array whose elements are all of size (*len). A struct berval will be filled starting at offset (off) in each element. The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The number of elements in the array is also stored in (*len) on return. The caller should free the returned array using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2577>2577</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2578>2578</a></td>\n' +
            '<td>l</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2579>2579</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2580>2580</a></td>\n' +
            '<td>Length of the next element. A pointer to a ber_len_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2581>2581</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2582>2582</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2583>2583</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2584>2584</a></td>\n' +
            '<td>Tag of the next element. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2585>2585</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2586>2586</a></td>\n' +
            '<td>T</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2587>2587</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2588>2588</a></td>\n' +
            '<td>Skip element and return its tag. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2589>2589</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2590>2590</a></td>\n' +
            '<td>x</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2591>2591</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2592>2592</a></td>\n' +
            '<td>Skip element. The next element is skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2593>2593</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2594>2594</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2595>2595</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2596>2596</a></td>\n' +
            '<td>Begin sequence. No parameter is required. The initial sequence tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2597>2597</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2598>2598</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2599>2599</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2600>2600</a></td>\n' +
            '<td>End sequence. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2601>2601</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2602>2602</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2603>2603</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2604>2604</a></td>\n' +
            '<td>Begin set. No parameter is required. The initial set tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2605>2605</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2606>2606</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2607>2607</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2608>2608</a></td>\n' +
            '<td>End set. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2609>2609</a></td>\n' +
            '<td>The ber_get_int() routine tries to interpret the next element as an integer, returning the result in num. The tag of whatever it finds is returned on success, LBER_ERROR (−1) on failure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2610>2610</a></td>\n' +
            '<td>The ber_get_stringb() routine is used to read an octet string into a preallocated buffer. The len parameter should be initialized to the size of the buffer, and will contain the length of the octet string read upon return. The buffer should be big enough to take the octet string value plus a terminating NULL byte.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2611>2611</a></td>\n' +
            '<td>The ber_get_stringa() routine is used to dynamically allocate space into which an octet string is read. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2612>2612</a></td>\n' +
            '<td>The ber_get_stringal() routine is used to dynamically allocate space into which an octet string and its length are read. It takes a struct berval **, and returns the result in this parameter. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2613>2613</a></td>\n' +
            '<td>The ber_get_stringbv() routine is used to read an octet string and its length into the provided struct berval *. If the alloc parameter is zero, the string will reside in memory assigned to the BerElement, and must not be freed by the caller. If the alloc parameter is non-zero, the string will be copied into dynamically allocated space which should be returned using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2614>2614</a></td>\n' +
            '<td>The ber_get_null() routine is used to read a NULL element. It returns the tag of the element it skips over.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2615>2615</a></td>\n' +
            '<td>The ber_get_boolean() routine is used to read a boolean value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2616>2616</a></td>\n' +
            '<td>The ber_get_enum() routine is used to read a enumeration value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2617>2617</a></td>\n' +
            '<td>The ber_get_bitstringa() routine is used to read a bitstring value. It takes a char ** which will hold the dynamically allocated bits, followed by an ber_len_t *, which will point to the length (in bits) of the bitstring returned. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2618>2618</a></td>\n' +
            '<td>The ber_first_element() routine is used to return the tag and length of the first element in a set or sequence. It also returns in cookie a magic cookie parameter that should be passed to subsequent calls to ber_next_element(), which returns similar information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2619>2619</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2620>2620</a></td>\n' +
            '<td>Assume the variable ber contains a lightweight BER encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2621>2621</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2622>2622</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2623>2623</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2624>2624</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2625>2625</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2626>2626</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2627>2627</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2628>2628</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2629>2629</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2630>2630</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2631>2631</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2632>2632</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2633>2633</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2634>2634</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2635>2635</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2636>2636</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2637>2637</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2638>2638</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2639>2639</a></td>\n' +
            '<td>The element can be decoded using ber_scanf() as follows.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2640>2640</a></td>\n' +
            '<td>ber_int_t scope, deref, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2641>2641</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2642>2642</a></td>\n' +
            '<td>ber_tag_t tag;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2643>2643</a></td>\n' +
            '<td>tag = ber_scanf( ber, "{aeeiib{v}}",</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2644>2644</a></td>\n' +
            '<td>&amp;dn, &amp;scope, &amp;deref,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2645>2645</a></td>\n' +
            '<td>&amp;size, &amp;time, &amp;attrsonly, &amp;attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2646>2646</a></td>\n' +
            '<td>if( tag == LBER_ERROR ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2647>2647</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2648>2648</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2649>2649</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2650>2650</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2651>2651</a></td>\n' +
            '<td>ber_memfree( dn );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2652>2652</a></td>\n' +
            '<td>ber_memvfree( attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2653>2653</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2654>2654</a></td>\n' +
            '<td>If an error occurs during decoding, generally these routines return LBER_ERROR ((ber_tag_t)−1).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2655>2655</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2656>2656</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file. Some routines may dynamically allocate memory which must be freed by the caller using supplied deallocation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2657>2657</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2658>2658</a></td>\n' +
            '<td>lber-encode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2659>2659</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2660>2660</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2661>2661</a></td>\n' +
            '<td>LBER_DECODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2662>2662</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2663>2663</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2664>2664</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2665>2665</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2666>2666</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2667>2667</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2668>2668</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2669>2669</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2670>2670</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2671>2671</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2672>2672</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2673>2673</a></td>\n' +
            '<td>ber_get_next, ber_skip_tag, ber_peek_tag, ber_scanf, ber_get_int, ber_get_enum, ber_get_stringb, ber_get_stringa, ber_get_stringal, ber_get_stringbv, ber_get_null, ber_get_boolean, ber_get_bitstring, ber_first_element, ber_next_element − OpenLDAP LBER simplified Basic Encoding Rules library routines for decoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2674>2674</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2675>2675</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2676>2676</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2677>2677</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2678>2678</a></td>\n' +
            '<td>ber_tag_t ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2679>2679</a></td>\n' +
            '<td>ber_tag_t ber_skip_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2680>2680</a></td>\n' +
            '<td>ber_tag_t ber_peek_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2681>2681</a></td>\n' +
            '<td>ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2682>2682</a></td>\n' +
            '<td>ber_tag_t ber_get_int(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2683>2683</a></td>\n' +
            '<td>ber_tag_t ber_get_enum(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2684>2684</a></td>\n' +
            '<td>ber_tag_t ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2685>2685</a></td>\n' +
            '<td>ber_tag_t ber_get_stringa(BerElement *ber, char **buf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2686>2686</a></td>\n' +
            '<td>ber_tag_t ber_get_stringal(BerElement *ber, struct berval **bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2687>2687</a></td>\n' +
            '<td>ber_tag_t ber_get_stringbv(BerElement *ber, struct berval *bv, int alloc);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2688>2688</a></td>\n' +
            '<td>ber_tag_t ber_get_null(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2689>2689</a></td>\n' +
            '<td>ber_tag_t ber_get_boolean(BerElement *ber, ber_int_t *bool);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2690>2690</a></td>\n' +
            '<td>ber_tag_t ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *blen);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2691>2691</a></td>\n' +
            '<td>ber_tag_t ber_first_element(BerElement *ber, ber_len_t *len, char **cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2692>2692</a></td>\n' +
            '<td>ber_tag_t ber_next_element(BerElement *ber, ber_len_t *len, const char *cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2693>2693</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2694>2694</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the decoding routines in the lber library. See lber-encode(3) for details on the corresponding encoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2695>2695</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_get_next() to get the next BER element and ber_scanf() to do the actual decoding. In some cases, ber_peek_tag() may also need to be called in normal usage. The other routines are provided for those applications that need more control than ber_scanf() provides. In general, these routines return the tag of the element decoded, or LBER_ERROR if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2696>2696</a></td>\n' +
            '<td>The ber_get_next() routine is used to read the next BER element from the given Sockbuf, sb. It strips off and returns the leading tag, strips off and returns the length of the entire element in len, and sets up ber for subsequent calls to ber_scanf() et al to decode the element. See lber-sockbuf(3) for details of the Sockbuf implementation of the sb parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2697>2697</a></td>\n' +
            '<td>The ber_scanf() routine is used to decode a BER element in much the same way that scanf(3) works. It reads from ber, a pointer to a BerElement such as returned by ber_get_next(), interprets the bytes according to the format string fmt, and stores the results in its additional arguments. The format string contains conversion specifications which are used to direct the interpretation of the BER element. The format string can contain the following characters.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2698>2698</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2699>2699</a></td>\n' +
            '<td>a</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2700>2700</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2701>2701</a></td>\n' +
            '<td>Octet string. A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2702>2702</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2703>2703</a></td>\n' +
            '<td>A</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2704>2704</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2705>2705</a></td>\n' +
            '<td>Octet string. A variant of "a". A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter, unless a zero-length string would result; in that case, the arg is set to NULL. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2706>2706</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2707>2707</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2708>2708</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2709>2709</a></td>\n' +
            '<td>Octet string. A char * buffer should be supplied, followed by a pointer to a ber_len_t initialized to the size of the buffer. Upon return, the null-terminated octet string is put into the buffer, and the ber_len_t is set to the actual size of the octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2710>2710</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2711>2711</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2712>2712</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2713>2713</a></td>\n' +
            '<td>Octet string. A struct ber_val ** should be supplied, which upon return points to a dynamically allocated struct berval containing the octet string and its length. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2714>2714</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2715>2715</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2716>2716</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2717>2717</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the dynamically allocated octet string and its length. The caller should free the returned octet string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2718>2718</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2719>2719</a></td>\n' +
            '<td>m</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2720>2720</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2721>2721</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the octet string and its length. The string resides in memory assigned to the BerElement, and must not be freed by the caller.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2722>2722</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2723>2723</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2724>2724</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2725>2725</a></td>\n' +
            '<td>Boolean. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2726>2726</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2727>2727</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2728>2728</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2729>2729</a></td>\n' +
            '<td>Enumeration. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2730>2730</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2731>2731</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2732>2732</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2733>2733</a></td>\n' +
            '<td>Integer. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2734>2734</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2735>2735</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2736>2736</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2737>2737</a></td>\n' +
            '<td>Bitstring. A char ** should be supplied which will point to the dynamically allocated bits, followed by a ber_len_t *, which will point to the length (in bits) of the bitstring returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2738>2738</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2739>2739</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2740>2740</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2741>2741</a></td>\n' +
            '<td>Null. No parameter is required. The element is simply skipped if it is recognized.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2742>2742</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2743>2743</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2744>2744</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2745>2745</a></td>\n' +
            '<td>Sequence of octet strings. A char *** should be supplied, which upon return points to a dynamically allocated null-terminated array of char *’s containing the octet strings. NULL is returned if the sequence is empty. The caller should free the returned array and octet strings using ber_memvfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2746>2746</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2747>2747</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2748>2748</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2749>2749</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A struct berval *** should be supplied, which upon return points to a dynamically allocated null-terminated array of struct berval *’s containing the octet strings and their lengths. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvecfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2750>2750</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2751>2751</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2752>2752</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2753>2753</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A BerVarray * should be supplied, which upon return points to a dynamically allocated array of struct berval’s containing the octet strings and their lengths. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvarray_fr ee().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2754>2754</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2755>2755</a></td>\n' +
            '<td>M</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2756>2756</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2757>2757</a></td>\n' +
            '<td>Sequence of octet strings with lengths. This is a generalized form of the previous three formats. A void ** (ptr) should be supplied, followed by a ber_len_t * (len) and a ber_len_t (off). Upon return (ptr) will point to a dynamically allocated array whose elements are all of size (*len). A struct berval will be filled starting at offset (off) in each element. The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The number of elements in the array is also stored in (*len) on return. The caller should free the returned array using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2758>2758</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2759>2759</a></td>\n' +
            '<td>l</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2760>2760</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2761>2761</a></td>\n' +
            '<td>Length of the next element. A pointer to a ber_len_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2762>2762</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2763>2763</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2764>2764</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2765>2765</a></td>\n' +
            '<td>Tag of the next element. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2766>2766</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2767>2767</a></td>\n' +
            '<td>T</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2768>2768</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2769>2769</a></td>\n' +
            '<td>Skip element and return its tag. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2770>2770</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2771>2771</a></td>\n' +
            '<td>x</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2772>2772</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2773>2773</a></td>\n' +
            '<td>Skip element. The next element is skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2774>2774</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2775>2775</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2776>2776</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2777>2777</a></td>\n' +
            '<td>Begin sequence. No parameter is required. The initial sequence tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2778>2778</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2779>2779</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2780>2780</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2781>2781</a></td>\n' +
            '<td>End sequence. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2782>2782</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2783>2783</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2784>2784</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2785>2785</a></td>\n' +
            '<td>Begin set. No parameter is required. The initial set tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2786>2786</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2787>2787</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2788>2788</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2789>2789</a></td>\n' +
            '<td>End set. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2790>2790</a></td>\n' +
            '<td>The ber_get_int() routine tries to interpret the next element as an integer, returning the result in num. The tag of whatever it finds is returned on success, LBER_ERROR (−1) on failure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2791>2791</a></td>\n' +
            '<td>The ber_get_stringb() routine is used to read an octet string into a preallocated buffer. The len parameter should be initialized to the size of the buffer, and will contain the length of the octet string read upon return. The buffer should be big enough to take the octet string value plus a terminating NULL byte.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2792>2792</a></td>\n' +
            '<td>The ber_get_stringa() routine is used to dynamically allocate space into which an octet string is read. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2793>2793</a></td>\n' +
            '<td>The ber_get_stringal() routine is used to dynamically allocate space into which an octet string and its length are read. It takes a struct berval **, and returns the result in this parameter. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2794>2794</a></td>\n' +
            '<td>The ber_get_stringbv() routine is used to read an octet string and its length into the provided struct berval *. If the alloc parameter is zero, the string will reside in memory assigned to the BerElement, and must not be freed by the caller. If the alloc parameter is non-zero, the string will be copied into dynamically allocated space which should be returned using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2795>2795</a></td>\n' +
            '<td>The ber_get_null() routine is used to read a NULL element. It returns the tag of the element it skips over.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2796>2796</a></td>\n' +
            '<td>The ber_get_boolean() routine is used to read a boolean value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2797>2797</a></td>\n' +
            '<td>The ber_get_enum() routine is used to read a enumeration value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2798>2798</a></td>\n' +
            '<td>The ber_get_bitstringa() routine is used to read a bitstring value. It takes a char ** which will hold the dynamically allocated bits, followed by an ber_len_t *, which will point to the length (in bits) of the bitstring returned. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2799>2799</a></td>\n' +
            '<td>The ber_first_element() routine is used to return the tag and length of the first element in a set or sequence. It also returns in cookie a magic cookie parameter that should be passed to subsequent calls to ber_next_element(), which returns similar information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2800>2800</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2801>2801</a></td>\n' +
            '<td>Assume the variable ber contains a lightweight BER encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2802>2802</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2803>2803</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2804>2804</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2805>2805</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2806>2806</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2807>2807</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2808>2808</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2809>2809</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2810>2810</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2811>2811</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2812>2812</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2813>2813</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2814>2814</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2815>2815</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2816>2816</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2817>2817</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2818>2818</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2819>2819</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2820>2820</a></td>\n' +
            '<td>The element can be decoded using ber_scanf() as follows.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2821>2821</a></td>\n' +
            '<td>ber_int_t scope, deref, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2822>2822</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2823>2823</a></td>\n' +
            '<td>ber_tag_t tag;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2824>2824</a></td>\n' +
            '<td>tag = ber_scanf( ber, "{aeeiib{v}}",</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2825>2825</a></td>\n' +
            '<td>&amp;dn, &amp;scope, &amp;deref,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2826>2826</a></td>\n' +
            '<td>&amp;size, &amp;time, &amp;attrsonly, &amp;attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2827>2827</a></td>\n' +
            '<td>if( tag == LBER_ERROR ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2828>2828</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2829>2829</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2830>2830</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2831>2831</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2832>2832</a></td>\n' +
            '<td>ber_memfree( dn );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2833>2833</a></td>\n' +
            '<td>ber_memvfree( attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2834>2834</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2835>2835</a></td>\n' +
            '<td>If an error occurs during decoding, generally these routines return LBER_ERROR ((ber_tag_t)−1).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2836>2836</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2837>2837</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file. Some routines may dynamically allocate memory which must be freed by the caller using supplied deallocation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2838>2838</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2839>2839</a></td>\n' +
            '<td>lber-encode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2840>2840</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2841>2841</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2842>2842</a></td>\n' +
            '<td>LBER_ENCODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2843>2843</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2844>2844</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2845>2845</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2846>2846</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2847>2847</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2848>2848</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2849>2849</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2850>2850</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2851>2851</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2852>2852</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2853>2853</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2854>2854</a></td>\n' +
            '<td>ber_alloc_t, ber_flush, ber_flush2, ber_printf, ber_put_int, ber_put_enum, ber_put_ostring, ber_put_string, ber_put_null, ber_put_boolean, ber_put_bitstring, ber_start_seq, ber_start_set, ber_put_seq, ber_put_set − OpenLDAP LBER simplified Basic Encoding Rules library routines for encoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2855>2855</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2856>2856</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2857>2857</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2858>2858</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2859>2859</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2860>2860</a></td>\n' +
            '<td>int ber_flush(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2861>2861</a></td>\n' +
            '<td>int ber_flush2(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2862>2862</a></td>\n' +
            '<td>int ber_printf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2863>2863</a></td>\n' +
            '<td>int ber_put_int(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2864>2864</a></td>\n' +
            '<td>int ber_put_enum(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2865>2865</a></td>\n' +
            '<td>int ber_put_ostring(BerElement *ber, const char *str, ber_len_t len, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2866>2866</a></td>\n' +
            '<td>int ber_put_string(BerElement *ber, const char *str, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2867>2867</a></td>\n' +
            '<td>int ber_put_null(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2868>2868</a></td>\n' +
            '<td>int ber_put_boolean(BerElement *ber, ber_int_t bool, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2869>2869</a></td>\n' +
            '<td>int ber_put_bitstring(BerElement *ber, const char *str, ber_len_t blen, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2870>2870</a></td>\n' +
            '<td>int ber_start_seq(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2871>2871</a></td>\n' +
            '<td>int ber_start_set(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2872>2872</a></td>\n' +
            '<td>int ber_put_seq(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2873>2873</a></td>\n' +
            '<td>int ber_put_set(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2874>2874</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2875>2875</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the encoding routines in the lber library. See lber-decode(3) for details on the corresponding decoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2876>2876</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_alloc_t() to allocate a BER element for encoding, ber_printf() to do the actual encoding, and ber_flush2() to actually write the element. The other routines are provided for those applications that need more control than ber_printf() provides. In general, these routines return the length of the element encoded, or -1 if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2877>2877</a></td>\n' +
            '<td>The ber_alloc_t() routine is used to allocate a new BER element. It should be called with an argument of LBER_USE_DER.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2878>2878</a></td>\n' +
            '<td>The ber_flush2() routine is used to actually write the element to a socket (or file) descriptor, once it has been fully encoded (using ber_printf() and friends). See lber-sockbuf(3) for more details on the Sockbuf implementation of the sb parameter. If the freeit parameter is non-zero, the supplied ber will be freed. If LBER_FLUSH_FREE_ON_SUCCESS is used, the ber is only freed when successfully flushed, otherwise it is left intact; if LBER_FLUSH_FREE_ON_ERROR is used, the ber is only freed when an error occurs, otherwise it is left intact; if LBER_FLUSH_FREE_ALWAYS is used, the ber is freed anyway. This function differs from the original ber_flush(3) function, whose behavior corresponds to that indicated for LBER_FLUSH_FREE_ON_SUCCESS. Note that in the future, the behavior of ber_flush(3) with freeit non-zero might change into that of ber_flush2(3) with freeit set to LBER_FLUSH_FREE_ALWAYS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2879>2879</a></td>\n' +
            '<td>The ber_printf() routine is used to encode a BER element in much the same way that sprintf(3) works. One important difference, though, is that some state information is kept with the ber parameter so that multiple calls can be made to ber_printf() to append things to the end of the BER element. Ber_printf() writes to ber, a pointer to a BerElement such as returned by ber_alloc_t(). It interprets and formats its arguments according to the format string fmt. The format string can contain the following characters:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2880>2880</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2881>2881</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2882>2882</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2883>2883</a></td>\n' +
            '<td>Boolean. An ber_int_t parameter should be supplied. A boolean element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2884>2884</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2885>2885</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2886>2886</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2887>2887</a></td>\n' +
            '<td>Enumeration. An ber_int_t parameter should be supplied. An enumeration element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2888>2888</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2889>2889</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2890>2890</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2891>2891</a></td>\n' +
            '<td>Integer. An ber_int_t parameter should be supplied. An integer element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2892>2892</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2893>2893</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2894>2894</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2895>2895</a></td>\n' +
            '<td>Bitstring. A char * pointer to the start of the bitstring is supplied, followed by the number of bits in the bitstring. A bitstring element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2896>2896</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2897>2897</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2898>2898</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2899>2899</a></td>\n' +
            '<td>Null. No parameter is required. A null element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2900>2900</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2901>2901</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2902>2902</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2903>2903</a></td>\n' +
            '<td>Octet string. A char * is supplied, followed by the length of the string pointed to. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2904>2904</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2905>2905</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2906>2906</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2907>2907</a></td>\n' +
            '<td>Octet string. A struct berval * is supplied. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2908>2908</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2909>2909</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2910>2910</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2911>2911</a></td>\n' +
            '<td>Octet string. A null-terminated string is supplied. An octet string element is output, not including the trailing NULL octet.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2912>2912</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2913>2913</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2914>2914</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2915>2915</a></td>\n' +
            '<td>Tag. A ber_tag_t specifying the tag to give the next element is provided. This works across calls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2916>2916</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2917>2917</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2918>2918</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2919>2919</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of char *’s is supplied. Note that a construct like ’{v}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2920>2920</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2921>2921</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2922>2922</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2923>2923</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of struct berval *’s is supplied. Note that a construct like ’{V}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2924>2924</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2925>2925</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2926>2926</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2927>2927</a></td>\n' +
            '<td>Several octet strings. An array of struct berval’s is supplied. The array is terminated by a struct berval with a NULL bv_val. Note that a construct like ’{W}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2928>2928</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2929>2929</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2930>2930</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2931>2931</a></td>\n' +
            '<td>Begin sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2932>2932</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2933>2933</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2934>2934</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2935>2935</a></td>\n' +
            '<td>End sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2936>2936</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2937>2937</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2938>2938</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2939>2939</a></td>\n' +
            '<td>Begin set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2940>2940</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2941>2941</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2942>2942</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2943>2943</a></td>\n' +
            '<td>End set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2944>2944</a></td>\n' +
            '<td>The ber_put_int() routine writes the integer element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2945>2945</a></td>\n' +
            '<td>The ber_put_enum() routine writes the enumeration element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2946>2946</a></td>\n' +
            '<td>The ber_put_boolean() routine writes the boolean value given by bool to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2947>2947</a></td>\n' +
            '<td>The ber_put_bitstring() routine writes blen bits starting at str as a bitstring value to the given BER element. Note that blen is the length in bits of the bitstring.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2948>2948</a></td>\n' +
            '<td>The ber_put_ostring() routine writes len bytes starting at str to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2949>2949</a></td>\n' +
            '<td>The ber_put_string() routine writes the null-terminated string (minus the terminating ’ ’) to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2950>2950</a></td>\n' +
            '<td>The ber_put_null() routine writes a NULL element to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2951>2951</a></td>\n' +
            '<td>The ber_start_seq() routine is used to start a sequence in the BER element. The ber_start_set() routine works similarly. The end of the sequence or set is marked by the nearest matching call to ber_put_seq() or ber_put_set(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2952>2952</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2953>2953</a></td>\n' +
            '<td>Assuming the following variable declarations, and that the variables have been assigned appropriately, an lber encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2954>2954</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2955>2955</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2956>2956</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2957>2957</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2958>2958</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2959>2959</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2960>2960</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2961>2961</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2962>2962</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2963>2963</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2964>2964</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2965>2965</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2966>2966</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2967>2967</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2968>2968</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2969>2969</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2970>2970</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2971>2971</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2972>2972</a></td>\n' +
            '<td>can be achieved like so:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2973>2973</a></td>\n' +
            '<td>int rc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2974>2974</a></td>\n' +
            '<td>ber_int_t scope, ali, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2975>2975</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2976>2976</a></td>\n' +
            '<td>BerElement *ber;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2977>2977</a></td>\n' +
            '<td>/* ... fill in values ... */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2978>2978</a></td>\n' +
            '<td>ber = ber_alloc_t( LBER_USE_DER );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2979>2979</a></td>\n' +
            '<td>if ( ber == NULL ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2980>2980</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2981>2981</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2982>2982</a></td>\n' +
            '<td>rc = ber_printf( ber, "{siiiib{v}}", dn, scope, ali,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2983>2983</a></td>\n' +
            '<td>size, time, attrsonly, attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2984>2984</a></td>\n' +
            '<td>if( rc == −1 ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2985>2985</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2986>2986</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2987>2987</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2988>2988</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2989>2989</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2990>2990</a></td>\n' +
            '<td>If an error occurs during encoding, generally these routines return −1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2991>2991</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2992>2992</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2993>2993</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2994>2994</a></td>\n' +
            '<td>lber-decode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2995>2995</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2996>2996</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2997>2997</a></td>\n' +
            '<td>LBER_ENCODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2998>2998</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=2999>2999</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3000>3000</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3001>3001</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3002>3002</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3003>3003</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3004>3004</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3005>3005</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3006>3006</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3007>3007</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3008>3008</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3009>3009</a></td>\n' +
            '<td>ber_alloc_t, ber_flush, ber_flush2, ber_printf, ber_put_int, ber_put_enum, ber_put_ostring, ber_put_string, ber_put_null, ber_put_boolean, ber_put_bitstring, ber_start_seq, ber_start_set, ber_put_seq, ber_put_set − OpenLDAP LBER simplified Basic Encoding Rules library routines for encoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3010>3010</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3011>3011</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3012>3012</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3013>3013</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3014>3014</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3015>3015</a></td>\n' +
            '<td>int ber_flush(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3016>3016</a></td>\n' +
            '<td>int ber_flush2(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3017>3017</a></td>\n' +
            '<td>int ber_printf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3018>3018</a></td>\n' +
            '<td>int ber_put_int(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3019>3019</a></td>\n' +
            '<td>int ber_put_enum(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3020>3020</a></td>\n' +
            '<td>int ber_put_ostring(BerElement *ber, const char *str, ber_len_t len, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3021>3021</a></td>\n' +
            '<td>int ber_put_string(BerElement *ber, const char *str, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3022>3022</a></td>\n' +
            '<td>int ber_put_null(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3023>3023</a></td>\n' +
            '<td>int ber_put_boolean(BerElement *ber, ber_int_t bool, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3024>3024</a></td>\n' +
            '<td>int ber_put_bitstring(BerElement *ber, const char *str, ber_len_t blen, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3025>3025</a></td>\n' +
            '<td>int ber_start_seq(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3026>3026</a></td>\n' +
            '<td>int ber_start_set(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3027>3027</a></td>\n' +
            '<td>int ber_put_seq(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3028>3028</a></td>\n' +
            '<td>int ber_put_set(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3029>3029</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3030>3030</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the encoding routines in the lber library. See lber-decode(3) for details on the corresponding decoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3031>3031</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_alloc_t() to allocate a BER element for encoding, ber_printf() to do the actual encoding, and ber_flush2() to actually write the element. The other routines are provided for those applications that need more control than ber_printf() provides. In general, these routines return the length of the element encoded, or -1 if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3032>3032</a></td>\n' +
            '<td>The ber_alloc_t() routine is used to allocate a new BER element. It should be called with an argument of LBER_USE_DER.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3033>3033</a></td>\n' +
            '<td>The ber_flush2() routine is used to actually write the element to a socket (or file) descriptor, once it has been fully encoded (using ber_printf() and friends). See lber-sockbuf(3) for more details on the Sockbuf implementation of the sb parameter. If the freeit parameter is non-zero, the supplied ber will be freed. If LBER_FLUSH_FREE_ON_SUCCESS is used, the ber is only freed when successfully flushed, otherwise it is left intact; if LBER_FLUSH_FREE_ON_ERROR is used, the ber is only freed when an error occurs, otherwise it is left intact; if LBER_FLUSH_FREE_ALWAYS is used, the ber is freed anyway. This function differs from the original ber_flush(3) function, whose behavior corresponds to that indicated for LBER_FLUSH_FREE_ON_SUCCESS. Note that in the future, the behavior of ber_flush(3) with freeit non-zero might change into that of ber_flush2(3) with freeit set to LBER_FLUSH_FREE_ALWAYS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3034>3034</a></td>\n' +
            '<td>The ber_printf() routine is used to encode a BER element in much the same way that sprintf(3) works. One important difference, though, is that some state information is kept with the ber parameter so that multiple calls can be made to ber_printf() to append things to the end of the BER element. Ber_printf() writes to ber, a pointer to a BerElement such as returned by ber_alloc_t(). It interprets and formats its arguments according to the format string fmt. The format string can contain the following characters:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3035>3035</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3036>3036</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3037>3037</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3038>3038</a></td>\n' +
            '<td>Boolean. An ber_int_t parameter should be supplied. A boolean element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3039>3039</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3040>3040</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3041>3041</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3042>3042</a></td>\n' +
            '<td>Enumeration. An ber_int_t parameter should be supplied. An enumeration element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3043>3043</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3044>3044</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3045>3045</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3046>3046</a></td>\n' +
            '<td>Integer. An ber_int_t parameter should be supplied. An integer element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3047>3047</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3048>3048</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3049>3049</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3050>3050</a></td>\n' +
            '<td>Bitstring. A char * pointer to the start of the bitstring is supplied, followed by the number of bits in the bitstring. A bitstring element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3051>3051</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3052>3052</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3053>3053</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3054>3054</a></td>\n' +
            '<td>Null. No parameter is required. A null element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3055>3055</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3056>3056</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3057>3057</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3058>3058</a></td>\n' +
            '<td>Octet string. A char * is supplied, followed by the length of the string pointed to. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3059>3059</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3060>3060</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3061>3061</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3062>3062</a></td>\n' +
            '<td>Octet string. A struct berval * is supplied. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3063>3063</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3064>3064</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3065>3065</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3066>3066</a></td>\n' +
            '<td>Octet string. A null-terminated string is supplied. An octet string element is output, not including the trailing NULL octet.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3067>3067</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3068>3068</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3069>3069</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3070>3070</a></td>\n' +
            '<td>Tag. A ber_tag_t specifying the tag to give the next element is provided. This works across calls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3071>3071</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3072>3072</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3073>3073</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3074>3074</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of char *’s is supplied. Note that a construct like ’{v}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3075>3075</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3076>3076</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3077>3077</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3078>3078</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of struct berval *’s is supplied. Note that a construct like ’{V}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3079>3079</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3080>3080</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3081>3081</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3082>3082</a></td>\n' +
            '<td>Several octet strings. An array of struct berval’s is supplied. The array is terminated by a struct berval with a NULL bv_val. Note that a construct like ’{W}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3083>3083</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3084>3084</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3085>3085</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3086>3086</a></td>\n' +
            '<td>Begin sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3087>3087</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3088>3088</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3089>3089</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3090>3090</a></td>\n' +
            '<td>End sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3091>3091</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3092>3092</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3093>3093</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3094>3094</a></td>\n' +
            '<td>Begin set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3095>3095</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3096>3096</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3097>3097</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3098>3098</a></td>\n' +
            '<td>End set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3099>3099</a></td>\n' +
            '<td>The ber_put_int() routine writes the integer element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3100>3100</a></td>\n' +
            '<td>The ber_put_enum() routine writes the enumeration element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3101>3101</a></td>\n' +
            '<td>The ber_put_boolean() routine writes the boolean value given by bool to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3102>3102</a></td>\n' +
            '<td>The ber_put_bitstring() routine writes blen bits starting at str as a bitstring value to the given BER element. Note that blen is the length in bits of the bitstring.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3103>3103</a></td>\n' +
            '<td>The ber_put_ostring() routine writes len bytes starting at str to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3104>3104</a></td>\n' +
            '<td>The ber_put_string() routine writes the null-terminated string (minus the terminating ’ ’) to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3105>3105</a></td>\n' +
            '<td>The ber_put_null() routine writes a NULL element to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3106>3106</a></td>\n' +
            '<td>The ber_start_seq() routine is used to start a sequence in the BER element. The ber_start_set() routine works similarly. The end of the sequence or set is marked by the nearest matching call to ber_put_seq() or ber_put_set(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3107>3107</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3108>3108</a></td>\n' +
            '<td>Assuming the following variable declarations, and that the variables have been assigned appropriately, an lber encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3109>3109</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3110>3110</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3111>3111</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3112>3112</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3113>3113</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3114>3114</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3115>3115</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3116>3116</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3117>3117</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3118>3118</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3119>3119</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3120>3120</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3121>3121</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3122>3122</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3123>3123</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3124>3124</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3125>3125</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3126>3126</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3127>3127</a></td>\n' +
            '<td>can be achieved like so:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3128>3128</a></td>\n' +
            '<td>int rc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3129>3129</a></td>\n' +
            '<td>ber_int_t scope, ali, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3130>3130</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3131>3131</a></td>\n' +
            '<td>BerElement *ber;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3132>3132</a></td>\n' +
            '<td>/* ... fill in values ... */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3133>3133</a></td>\n' +
            '<td>ber = ber_alloc_t( LBER_USE_DER );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3134>3134</a></td>\n' +
            '<td>if ( ber == NULL ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3135>3135</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3136>3136</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3137>3137</a></td>\n' +
            '<td>rc = ber_printf( ber, "{siiiib{v}}", dn, scope, ali,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3138>3138</a></td>\n' +
            '<td>size, time, attrsonly, attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3139>3139</a></td>\n' +
            '<td>if( rc == −1 ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3140>3140</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3141>3141</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3142>3142</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3143>3143</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3144>3144</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3145>3145</a></td>\n' +
            '<td>If an error occurs during encoding, generally these routines return −1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3146>3146</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3147>3147</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3148>3148</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3149>3149</a></td>\n' +
            '<td>lber-decode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3150>3150</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3151>3151</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3152>3152</a></td>\n' +
            '<td>LBER_ENCODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3153>3153</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3154>3154</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3155>3155</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3156>3156</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3157>3157</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3158>3158</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3159>3159</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3160>3160</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3161>3161</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3162>3162</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3163>3163</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3164>3164</a></td>\n' +
            '<td>ber_alloc_t, ber_flush, ber_flush2, ber_printf, ber_put_int, ber_put_enum, ber_put_ostring, ber_put_string, ber_put_null, ber_put_boolean, ber_put_bitstring, ber_start_seq, ber_start_set, ber_put_seq, ber_put_set − OpenLDAP LBER simplified Basic Encoding Rules library routines for encoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3165>3165</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3166>3166</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3167>3167</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3168>3168</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3169>3169</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3170>3170</a></td>\n' +
            '<td>int ber_flush(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3171>3171</a></td>\n' +
            '<td>int ber_flush2(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3172>3172</a></td>\n' +
            '<td>int ber_printf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3173>3173</a></td>\n' +
            '<td>int ber_put_int(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3174>3174</a></td>\n' +
            '<td>int ber_put_enum(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3175>3175</a></td>\n' +
            '<td>int ber_put_ostring(BerElement *ber, const char *str, ber_len_t len, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3176>3176</a></td>\n' +
            '<td>int ber_put_string(BerElement *ber, const char *str, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3177>3177</a></td>\n' +
            '<td>int ber_put_null(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3178>3178</a></td>\n' +
            '<td>int ber_put_boolean(BerElement *ber, ber_int_t bool, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3179>3179</a></td>\n' +
            '<td>int ber_put_bitstring(BerElement *ber, const char *str, ber_len_t blen, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3180>3180</a></td>\n' +
            '<td>int ber_start_seq(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3181>3181</a></td>\n' +
            '<td>int ber_start_set(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3182>3182</a></td>\n' +
            '<td>int ber_put_seq(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3183>3183</a></td>\n' +
            '<td>int ber_put_set(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3184>3184</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3185>3185</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the encoding routines in the lber library. See lber-decode(3) for details on the corresponding decoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3186>3186</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_alloc_t() to allocate a BER element for encoding, ber_printf() to do the actual encoding, and ber_flush2() to actually write the element. The other routines are provided for those applications that need more control than ber_printf() provides. In general, these routines return the length of the element encoded, or -1 if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3187>3187</a></td>\n' +
            '<td>The ber_alloc_t() routine is used to allocate a new BER element. It should be called with an argument of LBER_USE_DER.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3188>3188</a></td>\n' +
            '<td>The ber_flush2() routine is used to actually write the element to a socket (or file) descriptor, once it has been fully encoded (using ber_printf() and friends). See lber-sockbuf(3) for more details on the Sockbuf implementation of the sb parameter. If the freeit parameter is non-zero, the supplied ber will be freed. If LBER_FLUSH_FREE_ON_SUCCESS is used, the ber is only freed when successfully flushed, otherwise it is left intact; if LBER_FLUSH_FREE_ON_ERROR is used, the ber is only freed when an error occurs, otherwise it is left intact; if LBER_FLUSH_FREE_ALWAYS is used, the ber is freed anyway. This function differs from the original ber_flush(3) function, whose behavior corresponds to that indicated for LBER_FLUSH_FREE_ON_SUCCESS. Note that in the future, the behavior of ber_flush(3) with freeit non-zero might change into that of ber_flush2(3) with freeit set to LBER_FLUSH_FREE_ALWAYS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3189>3189</a></td>\n' +
            '<td>The ber_printf() routine is used to encode a BER element in much the same way that sprintf(3) works. One important difference, though, is that some state information is kept with the ber parameter so that multiple calls can be made to ber_printf() to append things to the end of the BER element. Ber_printf() writes to ber, a pointer to a BerElement such as returned by ber_alloc_t(). It interprets and formats its arguments according to the format string fmt. The format string can contain the following characters:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3190>3190</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3191>3191</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3192>3192</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3193>3193</a></td>\n' +
            '<td>Boolean. An ber_int_t parameter should be supplied. A boolean element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3194>3194</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3195>3195</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3196>3196</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3197>3197</a></td>\n' +
            '<td>Enumeration. An ber_int_t parameter should be supplied. An enumeration element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3198>3198</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3199>3199</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3200>3200</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3201>3201</a></td>\n' +
            '<td>Integer. An ber_int_t parameter should be supplied. An integer element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3202>3202</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3203>3203</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3204>3204</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3205>3205</a></td>\n' +
            '<td>Bitstring. A char * pointer to the start of the bitstring is supplied, followed by the number of bits in the bitstring. A bitstring element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3206>3206</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3207>3207</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3208>3208</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3209>3209</a></td>\n' +
            '<td>Null. No parameter is required. A null element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3210>3210</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3211>3211</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3212>3212</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3213>3213</a></td>\n' +
            '<td>Octet string. A char * is supplied, followed by the length of the string pointed to. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3214>3214</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3215>3215</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3216>3216</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3217>3217</a></td>\n' +
            '<td>Octet string. A struct berval * is supplied. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3218>3218</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3219>3219</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3220>3220</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3221>3221</a></td>\n' +
            '<td>Octet string. A null-terminated string is supplied. An octet string element is output, not including the trailing NULL octet.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3222>3222</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3223>3223</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3224>3224</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3225>3225</a></td>\n' +
            '<td>Tag. A ber_tag_t specifying the tag to give the next element is provided. This works across calls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3226>3226</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3227>3227</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3228>3228</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3229>3229</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of char *’s is supplied. Note that a construct like ’{v}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3230>3230</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3231>3231</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3232>3232</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3233>3233</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of struct berval *’s is supplied. Note that a construct like ’{V}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3234>3234</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3235>3235</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3236>3236</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3237>3237</a></td>\n' +
            '<td>Several octet strings. An array of struct berval’s is supplied. The array is terminated by a struct berval with a NULL bv_val. Note that a construct like ’{W}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3238>3238</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3239>3239</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3240>3240</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3241>3241</a></td>\n' +
            '<td>Begin sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3242>3242</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3243>3243</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3244>3244</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3245>3245</a></td>\n' +
            '<td>End sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3246>3246</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3247>3247</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3248>3248</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3249>3249</a></td>\n' +
            '<td>Begin set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3250>3250</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3251>3251</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3252>3252</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3253>3253</a></td>\n' +
            '<td>End set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3254>3254</a></td>\n' +
            '<td>The ber_put_int() routine writes the integer element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3255>3255</a></td>\n' +
            '<td>The ber_put_enum() routine writes the enumeration element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3256>3256</a></td>\n' +
            '<td>The ber_put_boolean() routine writes the boolean value given by bool to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3257>3257</a></td>\n' +
            '<td>The ber_put_bitstring() routine writes blen bits starting at str as a bitstring value to the given BER element. Note that blen is the length in bits of the bitstring.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3258>3258</a></td>\n' +
            '<td>The ber_put_ostring() routine writes len bytes starting at str to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3259>3259</a></td>\n' +
            '<td>The ber_put_string() routine writes the null-terminated string (minus the terminating ’ ’) to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3260>3260</a></td>\n' +
            '<td>The ber_put_null() routine writes a NULL element to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3261>3261</a></td>\n' +
            '<td>The ber_start_seq() routine is used to start a sequence in the BER element. The ber_start_set() routine works similarly. The end of the sequence or set is marked by the nearest matching call to ber_put_seq() or ber_put_set(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3262>3262</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3263>3263</a></td>\n' +
            '<td>Assuming the following variable declarations, and that the variables have been assigned appropriately, an lber encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3264>3264</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3265>3265</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3266>3266</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3267>3267</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3268>3268</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3269>3269</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3270>3270</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3271>3271</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3272>3272</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3273>3273</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3274>3274</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3275>3275</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3276>3276</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3277>3277</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3278>3278</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3279>3279</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3280>3280</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3281>3281</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3282>3282</a></td>\n' +
            '<td>can be achieved like so:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3283>3283</a></td>\n' +
            '<td>int rc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3284>3284</a></td>\n' +
            '<td>ber_int_t scope, ali, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3285>3285</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3286>3286</a></td>\n' +
            '<td>BerElement *ber;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3287>3287</a></td>\n' +
            '<td>/* ... fill in values ... */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3288>3288</a></td>\n' +
            '<td>ber = ber_alloc_t( LBER_USE_DER );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3289>3289</a></td>\n' +
            '<td>if ( ber == NULL ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3290>3290</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3291>3291</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3292>3292</a></td>\n' +
            '<td>rc = ber_printf( ber, "{siiiib{v}}", dn, scope, ali,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3293>3293</a></td>\n' +
            '<td>size, time, attrsonly, attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3294>3294</a></td>\n' +
            '<td>if( rc == −1 ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3295>3295</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3296>3296</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3297>3297</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3298>3298</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3299>3299</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3300>3300</a></td>\n' +
            '<td>If an error occurs during encoding, generally these routines return −1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3301>3301</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3302>3302</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3303>3303</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3304>3304</a></td>\n' +
            '<td>lber-decode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3305>3305</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3306>3306</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3307>3307</a></td>\n' +
            '<td>LBER_ENCODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3308>3308</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3309>3309</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3310>3310</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3311>3311</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3312>3312</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3313>3313</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3314>3314</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3315>3315</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3316>3316</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3317>3317</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3318>3318</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3319>3319</a></td>\n' +
            '<td>ber_alloc_t, ber_flush, ber_flush2, ber_printf, ber_put_int, ber_put_enum, ber_put_ostring, ber_put_string, ber_put_null, ber_put_boolean, ber_put_bitstring, ber_start_seq, ber_start_set, ber_put_seq, ber_put_set − OpenLDAP LBER simplified Basic Encoding Rules library routines for encoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3320>3320</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3321>3321</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3322>3322</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3323>3323</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3324>3324</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3325>3325</a></td>\n' +
            '<td>int ber_flush(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3326>3326</a></td>\n' +
            '<td>int ber_flush2(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3327>3327</a></td>\n' +
            '<td>int ber_printf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3328>3328</a></td>\n' +
            '<td>int ber_put_int(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3329>3329</a></td>\n' +
            '<td>int ber_put_enum(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3330>3330</a></td>\n' +
            '<td>int ber_put_ostring(BerElement *ber, const char *str, ber_len_t len, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3331>3331</a></td>\n' +
            '<td>int ber_put_string(BerElement *ber, const char *str, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3332>3332</a></td>\n' +
            '<td>int ber_put_null(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3333>3333</a></td>\n' +
            '<td>int ber_put_boolean(BerElement *ber, ber_int_t bool, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3334>3334</a></td>\n' +
            '<td>int ber_put_bitstring(BerElement *ber, const char *str, ber_len_t blen, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3335>3335</a></td>\n' +
            '<td>int ber_start_seq(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3336>3336</a></td>\n' +
            '<td>int ber_start_set(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3337>3337</a></td>\n' +
            '<td>int ber_put_seq(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3338>3338</a></td>\n' +
            '<td>int ber_put_set(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3339>3339</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3340>3340</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the encoding routines in the lber library. See lber-decode(3) for details on the corresponding decoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3341>3341</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_alloc_t() to allocate a BER element for encoding, ber_printf() to do the actual encoding, and ber_flush2() to actually write the element. The other routines are provided for those applications that need more control than ber_printf() provides. In general, these routines return the length of the element encoded, or -1 if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3342>3342</a></td>\n' +
            '<td>The ber_alloc_t() routine is used to allocate a new BER element. It should be called with an argument of LBER_USE_DER.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3343>3343</a></td>\n' +
            '<td>The ber_flush2() routine is used to actually write the element to a socket (or file) descriptor, once it has been fully encoded (using ber_printf() and friends). See lber-sockbuf(3) for more details on the Sockbuf implementation of the sb parameter. If the freeit parameter is non-zero, the supplied ber will be freed. If LBER_FLUSH_FREE_ON_SUCCESS is used, the ber is only freed when successfully flushed, otherwise it is left intact; if LBER_FLUSH_FREE_ON_ERROR is used, the ber is only freed when an error occurs, otherwise it is left intact; if LBER_FLUSH_FREE_ALWAYS is used, the ber is freed anyway. This function differs from the original ber_flush(3) function, whose behavior corresponds to that indicated for LBER_FLUSH_FREE_ON_SUCCESS. Note that in the future, the behavior of ber_flush(3) with freeit non-zero might change into that of ber_flush2(3) with freeit set to LBER_FLUSH_FREE_ALWAYS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3344>3344</a></td>\n' +
            '<td>The ber_printf() routine is used to encode a BER element in much the same way that sprintf(3) works. One important difference, though, is that some state information is kept with the ber parameter so that multiple calls can be made to ber_printf() to append things to the end of the BER element. Ber_printf() writes to ber, a pointer to a BerElement such as returned by ber_alloc_t(). It interprets and formats its arguments according to the format string fmt. The format string can contain the following characters:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3345>3345</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3346>3346</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3347>3347</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3348>3348</a></td>\n' +
            '<td>Boolean. An ber_int_t parameter should be supplied. A boolean element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3349>3349</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3350>3350</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3351>3351</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3352>3352</a></td>\n' +
            '<td>Enumeration. An ber_int_t parameter should be supplied. An enumeration element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3353>3353</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3354>3354</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3355>3355</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3356>3356</a></td>\n' +
            '<td>Integer. An ber_int_t parameter should be supplied. An integer element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3357>3357</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3358>3358</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3359>3359</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3360>3360</a></td>\n' +
            '<td>Bitstring. A char * pointer to the start of the bitstring is supplied, followed by the number of bits in the bitstring. A bitstring element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3361>3361</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3362>3362</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3363>3363</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3364>3364</a></td>\n' +
            '<td>Null. No parameter is required. A null element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3365>3365</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3366>3366</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3367>3367</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3368>3368</a></td>\n' +
            '<td>Octet string. A char * is supplied, followed by the length of the string pointed to. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3369>3369</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3370>3370</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3371>3371</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3372>3372</a></td>\n' +
            '<td>Octet string. A struct berval * is supplied. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3373>3373</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3374>3374</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3375>3375</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3376>3376</a></td>\n' +
            '<td>Octet string. A null-terminated string is supplied. An octet string element is output, not including the trailing NULL octet.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3377>3377</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3378>3378</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3379>3379</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3380>3380</a></td>\n' +
            '<td>Tag. A ber_tag_t specifying the tag to give the next element is provided. This works across calls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3381>3381</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3382>3382</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3383>3383</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3384>3384</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of char *’s is supplied. Note that a construct like ’{v}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3385>3385</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3386>3386</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3387>3387</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3388>3388</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of struct berval *’s is supplied. Note that a construct like ’{V}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3389>3389</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3390>3390</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3391>3391</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3392>3392</a></td>\n' +
            '<td>Several octet strings. An array of struct berval’s is supplied. The array is terminated by a struct berval with a NULL bv_val. Note that a construct like ’{W}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3393>3393</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3394>3394</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3395>3395</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3396>3396</a></td>\n' +
            '<td>Begin sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3397>3397</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3398>3398</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3399>3399</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3400>3400</a></td>\n' +
            '<td>End sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3401>3401</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3402>3402</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3403>3403</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3404>3404</a></td>\n' +
            '<td>Begin set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3405>3405</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3406>3406</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3407>3407</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3408>3408</a></td>\n' +
            '<td>End set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3409>3409</a></td>\n' +
            '<td>The ber_put_int() routine writes the integer element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3410>3410</a></td>\n' +
            '<td>The ber_put_enum() routine writes the enumeration element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3411>3411</a></td>\n' +
            '<td>The ber_put_boolean() routine writes the boolean value given by bool to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3412>3412</a></td>\n' +
            '<td>The ber_put_bitstring() routine writes blen bits starting at str as a bitstring value to the given BER element. Note that blen is the length in bits of the bitstring.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3413>3413</a></td>\n' +
            '<td>The ber_put_ostring() routine writes len bytes starting at str to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3414>3414</a></td>\n' +
            '<td>The ber_put_string() routine writes the null-terminated string (minus the terminating ’ ’) to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3415>3415</a></td>\n' +
            '<td>The ber_put_null() routine writes a NULL element to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3416>3416</a></td>\n' +
            '<td>The ber_start_seq() routine is used to start a sequence in the BER element. The ber_start_set() routine works similarly. The end of the sequence or set is marked by the nearest matching call to ber_put_seq() or ber_put_set(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3417>3417</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3418>3418</a></td>\n' +
            '<td>Assuming the following variable declarations, and that the variables have been assigned appropriately, an lber encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3419>3419</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3420>3420</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3421>3421</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3422>3422</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3423>3423</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3424>3424</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3425>3425</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3426>3426</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3427>3427</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3428>3428</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3429>3429</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3430>3430</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3431>3431</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3432>3432</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3433>3433</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3434>3434</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3435>3435</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3436>3436</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3437>3437</a></td>\n' +
            '<td>can be achieved like so:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3438>3438</a></td>\n' +
            '<td>int rc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3439>3439</a></td>\n' +
            '<td>ber_int_t scope, ali, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3440>3440</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3441>3441</a></td>\n' +
            '<td>BerElement *ber;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3442>3442</a></td>\n' +
            '<td>/* ... fill in values ... */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3443>3443</a></td>\n' +
            '<td>ber = ber_alloc_t( LBER_USE_DER );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3444>3444</a></td>\n' +
            '<td>if ( ber == NULL ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3445>3445</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3446>3446</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3447>3447</a></td>\n' +
            '<td>rc = ber_printf( ber, "{siiiib{v}}", dn, scope, ali,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3448>3448</a></td>\n' +
            '<td>size, time, attrsonly, attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3449>3449</a></td>\n' +
            '<td>if( rc == −1 ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3450>3450</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3451>3451</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3452>3452</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3453>3453</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3454>3454</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3455>3455</a></td>\n' +
            '<td>If an error occurs during encoding, generally these routines return −1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3456>3456</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3457>3457</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3458>3458</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3459>3459</a></td>\n' +
            '<td>lber-decode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3460>3460</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3461>3461</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3462>3462</a></td>\n' +
            '<td>LBER_ENCODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3463>3463</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3464>3464</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3465>3465</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3466>3466</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3467>3467</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3468>3468</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3469>3469</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3470>3470</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3471>3471</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3472>3472</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3473>3473</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3474>3474</a></td>\n' +
            '<td>ber_alloc_t, ber_flush, ber_flush2, ber_printf, ber_put_int, ber_put_enum, ber_put_ostring, ber_put_string, ber_put_null, ber_put_boolean, ber_put_bitstring, ber_start_seq, ber_start_set, ber_put_seq, ber_put_set − OpenLDAP LBER simplified Basic Encoding Rules library routines for encoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3475>3475</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3476>3476</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3477>3477</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3478>3478</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3479>3479</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3480>3480</a></td>\n' +
            '<td>int ber_flush(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3481>3481</a></td>\n' +
            '<td>int ber_flush2(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3482>3482</a></td>\n' +
            '<td>int ber_printf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3483>3483</a></td>\n' +
            '<td>int ber_put_int(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3484>3484</a></td>\n' +
            '<td>int ber_put_enum(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3485>3485</a></td>\n' +
            '<td>int ber_put_ostring(BerElement *ber, const char *str, ber_len_t len, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3486>3486</a></td>\n' +
            '<td>int ber_put_string(BerElement *ber, const char *str, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3487>3487</a></td>\n' +
            '<td>int ber_put_null(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3488>3488</a></td>\n' +
            '<td>int ber_put_boolean(BerElement *ber, ber_int_t bool, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3489>3489</a></td>\n' +
            '<td>int ber_put_bitstring(BerElement *ber, const char *str, ber_len_t blen, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3490>3490</a></td>\n' +
            '<td>int ber_start_seq(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3491>3491</a></td>\n' +
            '<td>int ber_start_set(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3492>3492</a></td>\n' +
            '<td>int ber_put_seq(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3493>3493</a></td>\n' +
            '<td>int ber_put_set(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3494>3494</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3495>3495</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the encoding routines in the lber library. See lber-decode(3) for details on the corresponding decoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3496>3496</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_alloc_t() to allocate a BER element for encoding, ber_printf() to do the actual encoding, and ber_flush2() to actually write the element. The other routines are provided for those applications that need more control than ber_printf() provides. In general, these routines return the length of the element encoded, or -1 if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3497>3497</a></td>\n' +
            '<td>The ber_alloc_t() routine is used to allocate a new BER element. It should be called with an argument of LBER_USE_DER.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3498>3498</a></td>\n' +
            '<td>The ber_flush2() routine is used to actually write the element to a socket (or file) descriptor, once it has been fully encoded (using ber_printf() and friends). See lber-sockbuf(3) for more details on the Sockbuf implementation of the sb parameter. If the freeit parameter is non-zero, the supplied ber will be freed. If LBER_FLUSH_FREE_ON_SUCCESS is used, the ber is only freed when successfully flushed, otherwise it is left intact; if LBER_FLUSH_FREE_ON_ERROR is used, the ber is only freed when an error occurs, otherwise it is left intact; if LBER_FLUSH_FREE_ALWAYS is used, the ber is freed anyway. This function differs from the original ber_flush(3) function, whose behavior corresponds to that indicated for LBER_FLUSH_FREE_ON_SUCCESS. Note that in the future, the behavior of ber_flush(3) with freeit non-zero might change into that of ber_flush2(3) with freeit set to LBER_FLUSH_FREE_ALWAYS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3499>3499</a></td>\n' +
            '<td>The ber_printf() routine is used to encode a BER element in much the same way that sprintf(3) works. One important difference, though, is that some state information is kept with the ber parameter so that multiple calls can be made to ber_printf() to append things to the end of the BER element. Ber_printf() writes to ber, a pointer to a BerElement such as returned by ber_alloc_t(). It interprets and formats its arguments according to the format string fmt. The format string can contain the following characters:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3500>3500</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3501>3501</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3502>3502</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3503>3503</a></td>\n' +
            '<td>Boolean. An ber_int_t parameter should be supplied. A boolean element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3504>3504</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3505>3505</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3506>3506</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3507>3507</a></td>\n' +
            '<td>Enumeration. An ber_int_t parameter should be supplied. An enumeration element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3508>3508</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3509>3509</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3510>3510</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3511>3511</a></td>\n' +
            '<td>Integer. An ber_int_t parameter should be supplied. An integer element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3512>3512</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3513>3513</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3514>3514</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3515>3515</a></td>\n' +
            '<td>Bitstring. A char * pointer to the start of the bitstring is supplied, followed by the number of bits in the bitstring. A bitstring element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3516>3516</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3517>3517</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3518>3518</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3519>3519</a></td>\n' +
            '<td>Null. No parameter is required. A null element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3520>3520</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3521>3521</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3522>3522</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3523>3523</a></td>\n' +
            '<td>Octet string. A char * is supplied, followed by the length of the string pointed to. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3524>3524</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3525>3525</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3526>3526</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3527>3527</a></td>\n' +
            '<td>Octet string. A struct berval * is supplied. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3528>3528</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3529>3529</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3530>3530</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3531>3531</a></td>\n' +
            '<td>Octet string. A null-terminated string is supplied. An octet string element is output, not including the trailing NULL octet.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3532>3532</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3533>3533</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3534>3534</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3535>3535</a></td>\n' +
            '<td>Tag. A ber_tag_t specifying the tag to give the next element is provided. This works across calls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3536>3536</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3537>3537</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3538>3538</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3539>3539</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of char *’s is supplied. Note that a construct like ’{v}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3540>3540</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3541>3541</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3542>3542</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3543>3543</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of struct berval *’s is supplied. Note that a construct like ’{V}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3544>3544</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3545>3545</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3546>3546</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3547>3547</a></td>\n' +
            '<td>Several octet strings. An array of struct berval’s is supplied. The array is terminated by a struct berval with a NULL bv_val. Note that a construct like ’{W}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3548>3548</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3549>3549</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3550>3550</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3551>3551</a></td>\n' +
            '<td>Begin sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3552>3552</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3553>3553</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3554>3554</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3555>3555</a></td>\n' +
            '<td>End sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3556>3556</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3557>3557</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3558>3558</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3559>3559</a></td>\n' +
            '<td>Begin set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3560>3560</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3561>3561</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3562>3562</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3563>3563</a></td>\n' +
            '<td>End set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3564>3564</a></td>\n' +
            '<td>The ber_put_int() routine writes the integer element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3565>3565</a></td>\n' +
            '<td>The ber_put_enum() routine writes the enumeration element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3566>3566</a></td>\n' +
            '<td>The ber_put_boolean() routine writes the boolean value given by bool to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3567>3567</a></td>\n' +
            '<td>The ber_put_bitstring() routine writes blen bits starting at str as a bitstring value to the given BER element. Note that blen is the length in bits of the bitstring.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3568>3568</a></td>\n' +
            '<td>The ber_put_ostring() routine writes len bytes starting at str to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3569>3569</a></td>\n' +
            '<td>The ber_put_string() routine writes the null-terminated string (minus the terminating ’ ’) to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3570>3570</a></td>\n' +
            '<td>The ber_put_null() routine writes a NULL element to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3571>3571</a></td>\n' +
            '<td>The ber_start_seq() routine is used to start a sequence in the BER element. The ber_start_set() routine works similarly. The end of the sequence or set is marked by the nearest matching call to ber_put_seq() or ber_put_set(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3572>3572</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3573>3573</a></td>\n' +
            '<td>Assuming the following variable declarations, and that the variables have been assigned appropriately, an lber encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3574>3574</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3575>3575</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3576>3576</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3577>3577</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3578>3578</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3579>3579</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3580>3580</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3581>3581</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3582>3582</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3583>3583</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3584>3584</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3585>3585</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3586>3586</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3587>3587</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3588>3588</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3589>3589</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3590>3590</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3591>3591</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3592>3592</a></td>\n' +
            '<td>can be achieved like so:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3593>3593</a></td>\n' +
            '<td>int rc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3594>3594</a></td>\n' +
            '<td>ber_int_t scope, ali, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3595>3595</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3596>3596</a></td>\n' +
            '<td>BerElement *ber;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3597>3597</a></td>\n' +
            '<td>/* ... fill in values ... */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3598>3598</a></td>\n' +
            '<td>ber = ber_alloc_t( LBER_USE_DER );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3599>3599</a></td>\n' +
            '<td>if ( ber == NULL ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3600>3600</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3601>3601</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3602>3602</a></td>\n' +
            '<td>rc = ber_printf( ber, "{siiiib{v}}", dn, scope, ali,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3603>3603</a></td>\n' +
            '<td>size, time, attrsonly, attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3604>3604</a></td>\n' +
            '<td>if( rc == −1 ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3605>3605</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3606>3606</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3607>3607</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3608>3608</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3609>3609</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3610>3610</a></td>\n' +
            '<td>If an error occurs during encoding, generally these routines return −1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3611>3611</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3612>3612</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3613>3613</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3614>3614</a></td>\n' +
            '<td>lber-decode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3615>3615</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3616>3616</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3617>3617</a></td>\n' +
            '<td>LBER_ENCODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3618>3618</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3619>3619</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3620>3620</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3621>3621</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3622>3622</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3623>3623</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3624>3624</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3625>3625</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3626>3626</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3627>3627</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3628>3628</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3629>3629</a></td>\n' +
            '<td>ber_alloc_t, ber_flush, ber_flush2, ber_printf, ber_put_int, ber_put_enum, ber_put_ostring, ber_put_string, ber_put_null, ber_put_boolean, ber_put_bitstring, ber_start_seq, ber_start_set, ber_put_seq, ber_put_set − OpenLDAP LBER simplified Basic Encoding Rules library routines for encoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3630>3630</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3631>3631</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3632>3632</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3633>3633</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3634>3634</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3635>3635</a></td>\n' +
            '<td>int ber_flush(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3636>3636</a></td>\n' +
            '<td>int ber_flush2(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3637>3637</a></td>\n' +
            '<td>int ber_printf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3638>3638</a></td>\n' +
            '<td>int ber_put_int(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3639>3639</a></td>\n' +
            '<td>int ber_put_enum(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3640>3640</a></td>\n' +
            '<td>int ber_put_ostring(BerElement *ber, const char *str, ber_len_t len, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3641>3641</a></td>\n' +
            '<td>int ber_put_string(BerElement *ber, const char *str, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3642>3642</a></td>\n' +
            '<td>int ber_put_null(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3643>3643</a></td>\n' +
            '<td>int ber_put_boolean(BerElement *ber, ber_int_t bool, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3644>3644</a></td>\n' +
            '<td>int ber_put_bitstring(BerElement *ber, const char *str, ber_len_t blen, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3645>3645</a></td>\n' +
            '<td>int ber_start_seq(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3646>3646</a></td>\n' +
            '<td>int ber_start_set(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3647>3647</a></td>\n' +
            '<td>int ber_put_seq(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3648>3648</a></td>\n' +
            '<td>int ber_put_set(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3649>3649</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3650>3650</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the encoding routines in the lber library. See lber-decode(3) for details on the corresponding decoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3651>3651</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_alloc_t() to allocate a BER element for encoding, ber_printf() to do the actual encoding, and ber_flush2() to actually write the element. The other routines are provided for those applications that need more control than ber_printf() provides. In general, these routines return the length of the element encoded, or -1 if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3652>3652</a></td>\n' +
            '<td>The ber_alloc_t() routine is used to allocate a new BER element. It should be called with an argument of LBER_USE_DER.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3653>3653</a></td>\n' +
            '<td>The ber_flush2() routine is used to actually write the element to a socket (or file) descriptor, once it has been fully encoded (using ber_printf() and friends). See lber-sockbuf(3) for more details on the Sockbuf implementation of the sb parameter. If the freeit parameter is non-zero, the supplied ber will be freed. If LBER_FLUSH_FREE_ON_SUCCESS is used, the ber is only freed when successfully flushed, otherwise it is left intact; if LBER_FLUSH_FREE_ON_ERROR is used, the ber is only freed when an error occurs, otherwise it is left intact; if LBER_FLUSH_FREE_ALWAYS is used, the ber is freed anyway. This function differs from the original ber_flush(3) function, whose behavior corresponds to that indicated for LBER_FLUSH_FREE_ON_SUCCESS. Note that in the future, the behavior of ber_flush(3) with freeit non-zero might change into that of ber_flush2(3) with freeit set to LBER_FLUSH_FREE_ALWAYS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3654>3654</a></td>\n' +
            '<td>The ber_printf() routine is used to encode a BER element in much the same way that sprintf(3) works. One important difference, though, is that some state information is kept with the ber parameter so that multiple calls can be made to ber_printf() to append things to the end of the BER element. Ber_printf() writes to ber, a pointer to a BerElement such as returned by ber_alloc_t(). It interprets and formats its arguments according to the format string fmt. The format string can contain the following characters:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3655>3655</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3656>3656</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3657>3657</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3658>3658</a></td>\n' +
            '<td>Boolean. An ber_int_t parameter should be supplied. A boolean element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3659>3659</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3660>3660</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3661>3661</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3662>3662</a></td>\n' +
            '<td>Enumeration. An ber_int_t parameter should be supplied. An enumeration element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3663>3663</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3664>3664</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3665>3665</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3666>3666</a></td>\n' +
            '<td>Integer. An ber_int_t parameter should be supplied. An integer element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3667>3667</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3668>3668</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3669>3669</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3670>3670</a></td>\n' +
            '<td>Bitstring. A char * pointer to the start of the bitstring is supplied, followed by the number of bits in the bitstring. A bitstring element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3671>3671</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3672>3672</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3673>3673</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3674>3674</a></td>\n' +
            '<td>Null. No parameter is required. A null element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3675>3675</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3676>3676</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3677>3677</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3678>3678</a></td>\n' +
            '<td>Octet string. A char * is supplied, followed by the length of the string pointed to. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3679>3679</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3680>3680</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3681>3681</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3682>3682</a></td>\n' +
            '<td>Octet string. A struct berval * is supplied. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3683>3683</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3684>3684</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3685>3685</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3686>3686</a></td>\n' +
            '<td>Octet string. A null-terminated string is supplied. An octet string element is output, not including the trailing NULL octet.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3687>3687</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3688>3688</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3689>3689</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3690>3690</a></td>\n' +
            '<td>Tag. A ber_tag_t specifying the tag to give the next element is provided. This works across calls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3691>3691</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3692>3692</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3693>3693</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3694>3694</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of char *’s is supplied. Note that a construct like ’{v}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3695>3695</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3696>3696</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3697>3697</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3698>3698</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of struct berval *’s is supplied. Note that a construct like ’{V}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3699>3699</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3700>3700</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3701>3701</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3702>3702</a></td>\n' +
            '<td>Several octet strings. An array of struct berval’s is supplied. The array is terminated by a struct berval with a NULL bv_val. Note that a construct like ’{W}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3703>3703</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3704>3704</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3705>3705</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3706>3706</a></td>\n' +
            '<td>Begin sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3707>3707</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3708>3708</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3709>3709</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3710>3710</a></td>\n' +
            '<td>End sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3711>3711</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3712>3712</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3713>3713</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3714>3714</a></td>\n' +
            '<td>Begin set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3715>3715</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3716>3716</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3717>3717</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3718>3718</a></td>\n' +
            '<td>End set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3719>3719</a></td>\n' +
            '<td>The ber_put_int() routine writes the integer element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3720>3720</a></td>\n' +
            '<td>The ber_put_enum() routine writes the enumeration element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3721>3721</a></td>\n' +
            '<td>The ber_put_boolean() routine writes the boolean value given by bool to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3722>3722</a></td>\n' +
            '<td>The ber_put_bitstring() routine writes blen bits starting at str as a bitstring value to the given BER element. Note that blen is the length in bits of the bitstring.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3723>3723</a></td>\n' +
            '<td>The ber_put_ostring() routine writes len bytes starting at str to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3724>3724</a></td>\n' +
            '<td>The ber_put_string() routine writes the null-terminated string (minus the terminating ’ ’) to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3725>3725</a></td>\n' +
            '<td>The ber_put_null() routine writes a NULL element to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3726>3726</a></td>\n' +
            '<td>The ber_start_seq() routine is used to start a sequence in the BER element. The ber_start_set() routine works similarly. The end of the sequence or set is marked by the nearest matching call to ber_put_seq() or ber_put_set(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3727>3727</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3728>3728</a></td>\n' +
            '<td>Assuming the following variable declarations, and that the variables have been assigned appropriately, an lber encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3729>3729</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3730>3730</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3731>3731</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3732>3732</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3733>3733</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3734>3734</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3735>3735</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3736>3736</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3737>3737</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3738>3738</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3739>3739</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3740>3740</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3741>3741</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3742>3742</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3743>3743</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3744>3744</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3745>3745</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3746>3746</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3747>3747</a></td>\n' +
            '<td>can be achieved like so:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3748>3748</a></td>\n' +
            '<td>int rc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3749>3749</a></td>\n' +
            '<td>ber_int_t scope, ali, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3750>3750</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3751>3751</a></td>\n' +
            '<td>BerElement *ber;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3752>3752</a></td>\n' +
            '<td>/* ... fill in values ... */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3753>3753</a></td>\n' +
            '<td>ber = ber_alloc_t( LBER_USE_DER );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3754>3754</a></td>\n' +
            '<td>if ( ber == NULL ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3755>3755</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3756>3756</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3757>3757</a></td>\n' +
            '<td>rc = ber_printf( ber, "{siiiib{v}}", dn, scope, ali,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3758>3758</a></td>\n' +
            '<td>size, time, attrsonly, attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3759>3759</a></td>\n' +
            '<td>if( rc == −1 ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3760>3760</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3761>3761</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3762>3762</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3763>3763</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3764>3764</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3765>3765</a></td>\n' +
            '<td>If an error occurs during encoding, generally these routines return −1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3766>3766</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3767>3767</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3768>3768</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3769>3769</a></td>\n' +
            '<td>lber-decode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3770>3770</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3771>3771</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3772>3772</a></td>\n' +
            '<td>LBER_ENCODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3773>3773</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3774>3774</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3775>3775</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3776>3776</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3777>3777</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3778>3778</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3779>3779</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3780>3780</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3781>3781</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3782>3782</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3783>3783</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3784>3784</a></td>\n' +
            '<td>ber_alloc_t, ber_flush, ber_flush2, ber_printf, ber_put_int, ber_put_enum, ber_put_ostring, ber_put_string, ber_put_null, ber_put_boolean, ber_put_bitstring, ber_start_seq, ber_start_set, ber_put_seq, ber_put_set − OpenLDAP LBER simplified Basic Encoding Rules library routines for encoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3785>3785</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3786>3786</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3787>3787</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3788>3788</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3789>3789</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3790>3790</a></td>\n' +
            '<td>int ber_flush(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3791>3791</a></td>\n' +
            '<td>int ber_flush2(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3792>3792</a></td>\n' +
            '<td>int ber_printf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3793>3793</a></td>\n' +
            '<td>int ber_put_int(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3794>3794</a></td>\n' +
            '<td>int ber_put_enum(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3795>3795</a></td>\n' +
            '<td>int ber_put_ostring(BerElement *ber, const char *str, ber_len_t len, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3796>3796</a></td>\n' +
            '<td>int ber_put_string(BerElement *ber, const char *str, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3797>3797</a></td>\n' +
            '<td>int ber_put_null(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3798>3798</a></td>\n' +
            '<td>int ber_put_boolean(BerElement *ber, ber_int_t bool, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3799>3799</a></td>\n' +
            '<td>int ber_put_bitstring(BerElement *ber, const char *str, ber_len_t blen, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3800>3800</a></td>\n' +
            '<td>int ber_start_seq(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3801>3801</a></td>\n' +
            '<td>int ber_start_set(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3802>3802</a></td>\n' +
            '<td>int ber_put_seq(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3803>3803</a></td>\n' +
            '<td>int ber_put_set(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3804>3804</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3805>3805</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the encoding routines in the lber library. See lber-decode(3) for details on the corresponding decoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3806>3806</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_alloc_t() to allocate a BER element for encoding, ber_printf() to do the actual encoding, and ber_flush2() to actually write the element. The other routines are provided for those applications that need more control than ber_printf() provides. In general, these routines return the length of the element encoded, or -1 if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3807>3807</a></td>\n' +
            '<td>The ber_alloc_t() routine is used to allocate a new BER element. It should be called with an argument of LBER_USE_DER.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3808>3808</a></td>\n' +
            '<td>The ber_flush2() routine is used to actually write the element to a socket (or file) descriptor, once it has been fully encoded (using ber_printf() and friends). See lber-sockbuf(3) for more details on the Sockbuf implementation of the sb parameter. If the freeit parameter is non-zero, the supplied ber will be freed. If LBER_FLUSH_FREE_ON_SUCCESS is used, the ber is only freed when successfully flushed, otherwise it is left intact; if LBER_FLUSH_FREE_ON_ERROR is used, the ber is only freed when an error occurs, otherwise it is left intact; if LBER_FLUSH_FREE_ALWAYS is used, the ber is freed anyway. This function differs from the original ber_flush(3) function, whose behavior corresponds to that indicated for LBER_FLUSH_FREE_ON_SUCCESS. Note that in the future, the behavior of ber_flush(3) with freeit non-zero might change into that of ber_flush2(3) with freeit set to LBER_FLUSH_FREE_ALWAYS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3809>3809</a></td>\n' +
            '<td>The ber_printf() routine is used to encode a BER element in much the same way that sprintf(3) works. One important difference, though, is that some state information is kept with the ber parameter so that multiple calls can be made to ber_printf() to append things to the end of the BER element. Ber_printf() writes to ber, a pointer to a BerElement such as returned by ber_alloc_t(). It interprets and formats its arguments according to the format string fmt. The format string can contain the following characters:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3810>3810</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3811>3811</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3812>3812</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3813>3813</a></td>\n' +
            '<td>Boolean. An ber_int_t parameter should be supplied. A boolean element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3814>3814</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3815>3815</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3816>3816</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3817>3817</a></td>\n' +
            '<td>Enumeration. An ber_int_t parameter should be supplied. An enumeration element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3818>3818</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3819>3819</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3820>3820</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3821>3821</a></td>\n' +
            '<td>Integer. An ber_int_t parameter should be supplied. An integer element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3822>3822</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3823>3823</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3824>3824</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3825>3825</a></td>\n' +
            '<td>Bitstring. A char * pointer to the start of the bitstring is supplied, followed by the number of bits in the bitstring. A bitstring element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3826>3826</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3827>3827</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3828>3828</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3829>3829</a></td>\n' +
            '<td>Null. No parameter is required. A null element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3830>3830</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3831>3831</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3832>3832</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3833>3833</a></td>\n' +
            '<td>Octet string. A char * is supplied, followed by the length of the string pointed to. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3834>3834</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3835>3835</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3836>3836</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3837>3837</a></td>\n' +
            '<td>Octet string. A struct berval * is supplied. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3838>3838</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3839>3839</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3840>3840</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3841>3841</a></td>\n' +
            '<td>Octet string. A null-terminated string is supplied. An octet string element is output, not including the trailing NULL octet.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3842>3842</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3843>3843</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3844>3844</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3845>3845</a></td>\n' +
            '<td>Tag. A ber_tag_t specifying the tag to give the next element is provided. This works across calls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3846>3846</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3847>3847</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3848>3848</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3849>3849</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of char *’s is supplied. Note that a construct like ’{v}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3850>3850</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3851>3851</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3852>3852</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3853>3853</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of struct berval *’s is supplied. Note that a construct like ’{V}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3854>3854</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3855>3855</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3856>3856</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3857>3857</a></td>\n' +
            '<td>Several octet strings. An array of struct berval’s is supplied. The array is terminated by a struct berval with a NULL bv_val. Note that a construct like ’{W}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3858>3858</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3859>3859</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3860>3860</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3861>3861</a></td>\n' +
            '<td>Begin sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3862>3862</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3863>3863</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3864>3864</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3865>3865</a></td>\n' +
            '<td>End sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3866>3866</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3867>3867</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3868>3868</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3869>3869</a></td>\n' +
            '<td>Begin set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3870>3870</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3871>3871</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3872>3872</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3873>3873</a></td>\n' +
            '<td>End set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3874>3874</a></td>\n' +
            '<td>The ber_put_int() routine writes the integer element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3875>3875</a></td>\n' +
            '<td>The ber_put_enum() routine writes the enumeration element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3876>3876</a></td>\n' +
            '<td>The ber_put_boolean() routine writes the boolean value given by bool to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3877>3877</a></td>\n' +
            '<td>The ber_put_bitstring() routine writes blen bits starting at str as a bitstring value to the given BER element. Note that blen is the length in bits of the bitstring.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3878>3878</a></td>\n' +
            '<td>The ber_put_ostring() routine writes len bytes starting at str to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3879>3879</a></td>\n' +
            '<td>The ber_put_string() routine writes the null-terminated string (minus the terminating ’ ’) to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3880>3880</a></td>\n' +
            '<td>The ber_put_null() routine writes a NULL element to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3881>3881</a></td>\n' +
            '<td>The ber_start_seq() routine is used to start a sequence in the BER element. The ber_start_set() routine works similarly. The end of the sequence or set is marked by the nearest matching call to ber_put_seq() or ber_put_set(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3882>3882</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3883>3883</a></td>\n' +
            '<td>Assuming the following variable declarations, and that the variables have been assigned appropriately, an lber encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3884>3884</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3885>3885</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3886>3886</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3887>3887</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3888>3888</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3889>3889</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3890>3890</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3891>3891</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3892>3892</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3893>3893</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3894>3894</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3895>3895</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3896>3896</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3897>3897</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3898>3898</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3899>3899</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3900>3900</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3901>3901</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3902>3902</a></td>\n' +
            '<td>can be achieved like so:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3903>3903</a></td>\n' +
            '<td>int rc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3904>3904</a></td>\n' +
            '<td>ber_int_t scope, ali, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3905>3905</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3906>3906</a></td>\n' +
            '<td>BerElement *ber;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3907>3907</a></td>\n' +
            '<td>/* ... fill in values ... */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3908>3908</a></td>\n' +
            '<td>ber = ber_alloc_t( LBER_USE_DER );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3909>3909</a></td>\n' +
            '<td>if ( ber == NULL ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3910>3910</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3911>3911</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3912>3912</a></td>\n' +
            '<td>rc = ber_printf( ber, "{siiiib{v}}", dn, scope, ali,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3913>3913</a></td>\n' +
            '<td>size, time, attrsonly, attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3914>3914</a></td>\n' +
            '<td>if( rc == −1 ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3915>3915</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3916>3916</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3917>3917</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3918>3918</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3919>3919</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3920>3920</a></td>\n' +
            '<td>If an error occurs during encoding, generally these routines return −1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3921>3921</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3922>3922</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3923>3923</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3924>3924</a></td>\n' +
            '<td>lber-decode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3925>3925</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3926>3926</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3927>3927</a></td>\n' +
            '<td>LBER_ENCODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3928>3928</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3929>3929</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3930>3930</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3931>3931</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3932>3932</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3933>3933</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3934>3934</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3935>3935</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3936>3936</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3937>3937</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3938>3938</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3939>3939</a></td>\n' +
            '<td>ber_alloc_t, ber_flush, ber_flush2, ber_printf, ber_put_int, ber_put_enum, ber_put_ostring, ber_put_string, ber_put_null, ber_put_boolean, ber_put_bitstring, ber_start_seq, ber_start_set, ber_put_seq, ber_put_set − OpenLDAP LBER simplified Basic Encoding Rules library routines for encoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3940>3940</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3941>3941</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3942>3942</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3943>3943</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3944>3944</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3945>3945</a></td>\n' +
            '<td>int ber_flush(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3946>3946</a></td>\n' +
            '<td>int ber_flush2(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3947>3947</a></td>\n' +
            '<td>int ber_printf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3948>3948</a></td>\n' +
            '<td>int ber_put_int(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3949>3949</a></td>\n' +
            '<td>int ber_put_enum(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3950>3950</a></td>\n' +
            '<td>int ber_put_ostring(BerElement *ber, const char *str, ber_len_t len, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3951>3951</a></td>\n' +
            '<td>int ber_put_string(BerElement *ber, const char *str, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3952>3952</a></td>\n' +
            '<td>int ber_put_null(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3953>3953</a></td>\n' +
            '<td>int ber_put_boolean(BerElement *ber, ber_int_t bool, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3954>3954</a></td>\n' +
            '<td>int ber_put_bitstring(BerElement *ber, const char *str, ber_len_t blen, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3955>3955</a></td>\n' +
            '<td>int ber_start_seq(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3956>3956</a></td>\n' +
            '<td>int ber_start_set(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3957>3957</a></td>\n' +
            '<td>int ber_put_seq(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3958>3958</a></td>\n' +
            '<td>int ber_put_set(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3959>3959</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3960>3960</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the encoding routines in the lber library. See lber-decode(3) for details on the corresponding decoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3961>3961</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_alloc_t() to allocate a BER element for encoding, ber_printf() to do the actual encoding, and ber_flush2() to actually write the element. The other routines are provided for those applications that need more control than ber_printf() provides. In general, these routines return the length of the element encoded, or -1 if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3962>3962</a></td>\n' +
            '<td>The ber_alloc_t() routine is used to allocate a new BER element. It should be called with an argument of LBER_USE_DER.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3963>3963</a></td>\n' +
            '<td>The ber_flush2() routine is used to actually write the element to a socket (or file) descriptor, once it has been fully encoded (using ber_printf() and friends). See lber-sockbuf(3) for more details on the Sockbuf implementation of the sb parameter. If the freeit parameter is non-zero, the supplied ber will be freed. If LBER_FLUSH_FREE_ON_SUCCESS is used, the ber is only freed when successfully flushed, otherwise it is left intact; if LBER_FLUSH_FREE_ON_ERROR is used, the ber is only freed when an error occurs, otherwise it is left intact; if LBER_FLUSH_FREE_ALWAYS is used, the ber is freed anyway. This function differs from the original ber_flush(3) function, whose behavior corresponds to that indicated for LBER_FLUSH_FREE_ON_SUCCESS. Note that in the future, the behavior of ber_flush(3) with freeit non-zero might change into that of ber_flush2(3) with freeit set to LBER_FLUSH_FREE_ALWAYS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3964>3964</a></td>\n' +
            '<td>The ber_printf() routine is used to encode a BER element in much the same way that sprintf(3) works. One important difference, though, is that some state information is kept with the ber parameter so that multiple calls can be made to ber_printf() to append things to the end of the BER element. Ber_printf() writes to ber, a pointer to a BerElement such as returned by ber_alloc_t(). It interprets and formats its arguments according to the format string fmt. The format string can contain the following characters:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3965>3965</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3966>3966</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3967>3967</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3968>3968</a></td>\n' +
            '<td>Boolean. An ber_int_t parameter should be supplied. A boolean element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3969>3969</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3970>3970</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3971>3971</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3972>3972</a></td>\n' +
            '<td>Enumeration. An ber_int_t parameter should be supplied. An enumeration element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3973>3973</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3974>3974</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3975>3975</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3976>3976</a></td>\n' +
            '<td>Integer. An ber_int_t parameter should be supplied. An integer element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3977>3977</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3978>3978</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3979>3979</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3980>3980</a></td>\n' +
            '<td>Bitstring. A char * pointer to the start of the bitstring is supplied, followed by the number of bits in the bitstring. A bitstring element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3981>3981</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3982>3982</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3983>3983</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3984>3984</a></td>\n' +
            '<td>Null. No parameter is required. A null element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3985>3985</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3986>3986</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3987>3987</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3988>3988</a></td>\n' +
            '<td>Octet string. A char * is supplied, followed by the length of the string pointed to. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3989>3989</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3990>3990</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3991>3991</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3992>3992</a></td>\n' +
            '<td>Octet string. A struct berval * is supplied. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3993>3993</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3994>3994</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3995>3995</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3996>3996</a></td>\n' +
            '<td>Octet string. A null-terminated string is supplied. An octet string element is output, not including the trailing NULL octet.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3997>3997</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3998>3998</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=3999>3999</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4000>4000</a></td>\n' +
            '<td>Tag. A ber_tag_t specifying the tag to give the next element is provided. This works across calls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4001>4001</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4002>4002</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4003>4003</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4004>4004</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of char *’s is supplied. Note that a construct like ’{v}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4005>4005</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4006>4006</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4007>4007</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4008>4008</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of struct berval *’s is supplied. Note that a construct like ’{V}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4009>4009</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4010>4010</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4011>4011</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4012>4012</a></td>\n' +
            '<td>Several octet strings. An array of struct berval’s is supplied. The array is terminated by a struct berval with a NULL bv_val. Note that a construct like ’{W}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4013>4013</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4014>4014</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4015>4015</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4016>4016</a></td>\n' +
            '<td>Begin sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4017>4017</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4018>4018</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4019>4019</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4020>4020</a></td>\n' +
            '<td>End sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4021>4021</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4022>4022</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4023>4023</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4024>4024</a></td>\n' +
            '<td>Begin set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4025>4025</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4026>4026</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4027>4027</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4028>4028</a></td>\n' +
            '<td>End set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4029>4029</a></td>\n' +
            '<td>The ber_put_int() routine writes the integer element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4030>4030</a></td>\n' +
            '<td>The ber_put_enum() routine writes the enumeration element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4031>4031</a></td>\n' +
            '<td>The ber_put_boolean() routine writes the boolean value given by bool to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4032>4032</a></td>\n' +
            '<td>The ber_put_bitstring() routine writes blen bits starting at str as a bitstring value to the given BER element. Note that blen is the length in bits of the bitstring.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4033>4033</a></td>\n' +
            '<td>The ber_put_ostring() routine writes len bytes starting at str to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4034>4034</a></td>\n' +
            '<td>The ber_put_string() routine writes the null-terminated string (minus the terminating ’ ’) to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4035>4035</a></td>\n' +
            '<td>The ber_put_null() routine writes a NULL element to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4036>4036</a></td>\n' +
            '<td>The ber_start_seq() routine is used to start a sequence in the BER element. The ber_start_set() routine works similarly. The end of the sequence or set is marked by the nearest matching call to ber_put_seq() or ber_put_set(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4037>4037</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4038>4038</a></td>\n' +
            '<td>Assuming the following variable declarations, and that the variables have been assigned appropriately, an lber encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4039>4039</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4040>4040</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4041>4041</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4042>4042</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4043>4043</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4044>4044</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4045>4045</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4046>4046</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4047>4047</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4048>4048</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4049>4049</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4050>4050</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4051>4051</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4052>4052</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4053>4053</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4054>4054</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4055>4055</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4056>4056</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4057>4057</a></td>\n' +
            '<td>can be achieved like so:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4058>4058</a></td>\n' +
            '<td>int rc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4059>4059</a></td>\n' +
            '<td>ber_int_t scope, ali, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4060>4060</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4061>4061</a></td>\n' +
            '<td>BerElement *ber;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4062>4062</a></td>\n' +
            '<td>/* ... fill in values ... */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4063>4063</a></td>\n' +
            '<td>ber = ber_alloc_t( LBER_USE_DER );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4064>4064</a></td>\n' +
            '<td>if ( ber == NULL ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4065>4065</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4066>4066</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4067>4067</a></td>\n' +
            '<td>rc = ber_printf( ber, "{siiiib{v}}", dn, scope, ali,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4068>4068</a></td>\n' +
            '<td>size, time, attrsonly, attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4069>4069</a></td>\n' +
            '<td>if( rc == −1 ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4070>4070</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4071>4071</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4072>4072</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4073>4073</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4074>4074</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4075>4075</a></td>\n' +
            '<td>If an error occurs during encoding, generally these routines return −1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4076>4076</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4077>4077</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4078>4078</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4079>4079</a></td>\n' +
            '<td>lber-decode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4080>4080</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4081>4081</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4082>4082</a></td>\n' +
            '<td>LBER_DECODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4083>4083</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4084>4084</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4085>4085</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4086>4086</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4087>4087</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4088>4088</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4089>4089</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4090>4090</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4091>4091</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4092>4092</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4093>4093</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4094>4094</a></td>\n' +
            '<td>ber_get_next, ber_skip_tag, ber_peek_tag, ber_scanf, ber_get_int, ber_get_enum, ber_get_stringb, ber_get_stringa, ber_get_stringal, ber_get_stringbv, ber_get_null, ber_get_boolean, ber_get_bitstring, ber_first_element, ber_next_element − OpenLDAP LBER simplified Basic Encoding Rules library routines for decoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4095>4095</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4096>4096</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4097>4097</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4098>4098</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4099>4099</a></td>\n' +
            '<td>ber_tag_t ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4100>4100</a></td>\n' +
            '<td>ber_tag_t ber_skip_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4101>4101</a></td>\n' +
            '<td>ber_tag_t ber_peek_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4102>4102</a></td>\n' +
            '<td>ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4103>4103</a></td>\n' +
            '<td>ber_tag_t ber_get_int(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4104>4104</a></td>\n' +
            '<td>ber_tag_t ber_get_enum(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4105>4105</a></td>\n' +
            '<td>ber_tag_t ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4106>4106</a></td>\n' +
            '<td>ber_tag_t ber_get_stringa(BerElement *ber, char **buf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4107>4107</a></td>\n' +
            '<td>ber_tag_t ber_get_stringal(BerElement *ber, struct berval **bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4108>4108</a></td>\n' +
            '<td>ber_tag_t ber_get_stringbv(BerElement *ber, struct berval *bv, int alloc);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4109>4109</a></td>\n' +
            '<td>ber_tag_t ber_get_null(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4110>4110</a></td>\n' +
            '<td>ber_tag_t ber_get_boolean(BerElement *ber, ber_int_t *bool);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4111>4111</a></td>\n' +
            '<td>ber_tag_t ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *blen);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4112>4112</a></td>\n' +
            '<td>ber_tag_t ber_first_element(BerElement *ber, ber_len_t *len, char **cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4113>4113</a></td>\n' +
            '<td>ber_tag_t ber_next_element(BerElement *ber, ber_len_t *len, const char *cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4114>4114</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4115>4115</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the decoding routines in the lber library. See lber-encode(3) for details on the corresponding encoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4116>4116</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_get_next() to get the next BER element and ber_scanf() to do the actual decoding. In some cases, ber_peek_tag() may also need to be called in normal usage. The other routines are provided for those applications that need more control than ber_scanf() provides. In general, these routines return the tag of the element decoded, or LBER_ERROR if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4117>4117</a></td>\n' +
            '<td>The ber_get_next() routine is used to read the next BER element from the given Sockbuf, sb. It strips off and returns the leading tag, strips off and returns the length of the entire element in len, and sets up ber for subsequent calls to ber_scanf() et al to decode the element. See lber-sockbuf(3) for details of the Sockbuf implementation of the sb parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4118>4118</a></td>\n' +
            '<td>The ber_scanf() routine is used to decode a BER element in much the same way that scanf(3) works. It reads from ber, a pointer to a BerElement such as returned by ber_get_next(), interprets the bytes according to the format string fmt, and stores the results in its additional arguments. The format string contains conversion specifications which are used to direct the interpretation of the BER element. The format string can contain the following characters.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4119>4119</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4120>4120</a></td>\n' +
            '<td>a</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4121>4121</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4122>4122</a></td>\n' +
            '<td>Octet string. A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4123>4123</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4124>4124</a></td>\n' +
            '<td>A</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4125>4125</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4126>4126</a></td>\n' +
            '<td>Octet string. A variant of "a". A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter, unless a zero-length string would result; in that case, the arg is set to NULL. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4127>4127</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4128>4128</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4129>4129</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4130>4130</a></td>\n' +
            '<td>Octet string. A char * buffer should be supplied, followed by a pointer to a ber_len_t initialized to the size of the buffer. Upon return, the null-terminated octet string is put into the buffer, and the ber_len_t is set to the actual size of the octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4131>4131</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4132>4132</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4133>4133</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4134>4134</a></td>\n' +
            '<td>Octet string. A struct ber_val ** should be supplied, which upon return points to a dynamically allocated struct berval containing the octet string and its length. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4135>4135</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4136>4136</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4137>4137</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4138>4138</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the dynamically allocated octet string and its length. The caller should free the returned octet string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4139>4139</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4140>4140</a></td>\n' +
            '<td>m</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4141>4141</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4142>4142</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the octet string and its length. The string resides in memory assigned to the BerElement, and must not be freed by the caller.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4143>4143</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4144>4144</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4145>4145</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4146>4146</a></td>\n' +
            '<td>Boolean. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4147>4147</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4148>4148</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4149>4149</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4150>4150</a></td>\n' +
            '<td>Enumeration. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4151>4151</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4152>4152</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4153>4153</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4154>4154</a></td>\n' +
            '<td>Integer. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4155>4155</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4156>4156</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4157>4157</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4158>4158</a></td>\n' +
            '<td>Bitstring. A char ** should be supplied which will point to the dynamically allocated bits, followed by a ber_len_t *, which will point to the length (in bits) of the bitstring returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4159>4159</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4160>4160</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4161>4161</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4162>4162</a></td>\n' +
            '<td>Null. No parameter is required. The element is simply skipped if it is recognized.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4163>4163</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4164>4164</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4165>4165</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4166>4166</a></td>\n' +
            '<td>Sequence of octet strings. A char *** should be supplied, which upon return points to a dynamically allocated null-terminated array of char *’s containing the octet strings. NULL is returned if the sequence is empty. The caller should free the returned array and octet strings using ber_memvfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4167>4167</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4168>4168</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4169>4169</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4170>4170</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A struct berval *** should be supplied, which upon return points to a dynamically allocated null-terminated array of struct berval *’s containing the octet strings and their lengths. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvecfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4171>4171</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4172>4172</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4173>4173</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4174>4174</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A BerVarray * should be supplied, which upon return points to a dynamically allocated array of struct berval’s containing the octet strings and their lengths. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvarray_fr ee().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4175>4175</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4176>4176</a></td>\n' +
            '<td>M</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4177>4177</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4178>4178</a></td>\n' +
            '<td>Sequence of octet strings with lengths. This is a generalized form of the previous three formats. A void ** (ptr) should be supplied, followed by a ber_len_t * (len) and a ber_len_t (off). Upon return (ptr) will point to a dynamically allocated array whose elements are all of size (*len). A struct berval will be filled starting at offset (off) in each element. The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The number of elements in the array is also stored in (*len) on return. The caller should free the returned array using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4179>4179</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4180>4180</a></td>\n' +
            '<td>l</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4181>4181</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4182>4182</a></td>\n' +
            '<td>Length of the next element. A pointer to a ber_len_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4183>4183</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4184>4184</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4185>4185</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4186>4186</a></td>\n' +
            '<td>Tag of the next element. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4187>4187</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4188>4188</a></td>\n' +
            '<td>T</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4189>4189</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4190>4190</a></td>\n' +
            '<td>Skip element and return its tag. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4191>4191</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4192>4192</a></td>\n' +
            '<td>x</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4193>4193</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4194>4194</a></td>\n' +
            '<td>Skip element. The next element is skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4195>4195</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4196>4196</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4197>4197</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4198>4198</a></td>\n' +
            '<td>Begin sequence. No parameter is required. The initial sequence tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4199>4199</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4200>4200</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4201>4201</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4202>4202</a></td>\n' +
            '<td>End sequence. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4203>4203</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4204>4204</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4205>4205</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4206>4206</a></td>\n' +
            '<td>Begin set. No parameter is required. The initial set tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4207>4207</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4208>4208</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4209>4209</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4210>4210</a></td>\n' +
            '<td>End set. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4211>4211</a></td>\n' +
            '<td>The ber_get_int() routine tries to interpret the next element as an integer, returning the result in num. The tag of whatever it finds is returned on success, LBER_ERROR (−1) on failure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4212>4212</a></td>\n' +
            '<td>The ber_get_stringb() routine is used to read an octet string into a preallocated buffer. The len parameter should be initialized to the size of the buffer, and will contain the length of the octet string read upon return. The buffer should be big enough to take the octet string value plus a terminating NULL byte.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4213>4213</a></td>\n' +
            '<td>The ber_get_stringa() routine is used to dynamically allocate space into which an octet string is read. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4214>4214</a></td>\n' +
            '<td>The ber_get_stringal() routine is used to dynamically allocate space into which an octet string and its length are read. It takes a struct berval **, and returns the result in this parameter. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4215>4215</a></td>\n' +
            '<td>The ber_get_stringbv() routine is used to read an octet string and its length into the provided struct berval *. If the alloc parameter is zero, the string will reside in memory assigned to the BerElement, and must not be freed by the caller. If the alloc parameter is non-zero, the string will be copied into dynamically allocated space which should be returned using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4216>4216</a></td>\n' +
            '<td>The ber_get_null() routine is used to read a NULL element. It returns the tag of the element it skips over.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4217>4217</a></td>\n' +
            '<td>The ber_get_boolean() routine is used to read a boolean value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4218>4218</a></td>\n' +
            '<td>The ber_get_enum() routine is used to read a enumeration value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4219>4219</a></td>\n' +
            '<td>The ber_get_bitstringa() routine is used to read a bitstring value. It takes a char ** which will hold the dynamically allocated bits, followed by an ber_len_t *, which will point to the length (in bits) of the bitstring returned. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4220>4220</a></td>\n' +
            '<td>The ber_first_element() routine is used to return the tag and length of the first element in a set or sequence. It also returns in cookie a magic cookie parameter that should be passed to subsequent calls to ber_next_element(), which returns similar information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4221>4221</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4222>4222</a></td>\n' +
            '<td>Assume the variable ber contains a lightweight BER encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4223>4223</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4224>4224</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4225>4225</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4226>4226</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4227>4227</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4228>4228</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4229>4229</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4230>4230</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4231>4231</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4232>4232</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4233>4233</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4234>4234</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4235>4235</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4236>4236</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4237>4237</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4238>4238</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4239>4239</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4240>4240</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4241>4241</a></td>\n' +
            '<td>The element can be decoded using ber_scanf() as follows.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4242>4242</a></td>\n' +
            '<td>ber_int_t scope, deref, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4243>4243</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4244>4244</a></td>\n' +
            '<td>ber_tag_t tag;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4245>4245</a></td>\n' +
            '<td>tag = ber_scanf( ber, "{aeeiib{v}}",</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4246>4246</a></td>\n' +
            '<td>&amp;dn, &amp;scope, &amp;deref,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4247>4247</a></td>\n' +
            '<td>&amp;size, &amp;time, &amp;attrsonly, &amp;attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4248>4248</a></td>\n' +
            '<td>if( tag == LBER_ERROR ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4249>4249</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4250>4250</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4251>4251</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4252>4252</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4253>4253</a></td>\n' +
            '<td>ber_memfree( dn );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4254>4254</a></td>\n' +
            '<td>ber_memvfree( attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4255>4255</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4256>4256</a></td>\n' +
            '<td>If an error occurs during decoding, generally these routines return LBER_ERROR ((ber_tag_t)−1).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4257>4257</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4258>4258</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file. Some routines may dynamically allocate memory which must be freed by the caller using supplied deallocation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4259>4259</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4260>4260</a></td>\n' +
            '<td>lber-encode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4261>4261</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4262>4262</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4263>4263</a></td>\n' +
            '<td>LBER_DECODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4264>4264</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4265>4265</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4266>4266</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4267>4267</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4268>4268</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4269>4269</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4270>4270</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4271>4271</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4272>4272</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4273>4273</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4274>4274</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4275>4275</a></td>\n' +
            '<td>ber_get_next, ber_skip_tag, ber_peek_tag, ber_scanf, ber_get_int, ber_get_enum, ber_get_stringb, ber_get_stringa, ber_get_stringal, ber_get_stringbv, ber_get_null, ber_get_boolean, ber_get_bitstring, ber_first_element, ber_next_element − OpenLDAP LBER simplified Basic Encoding Rules library routines for decoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4276>4276</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4277>4277</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4278>4278</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4279>4279</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4280>4280</a></td>\n' +
            '<td>ber_tag_t ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4281>4281</a></td>\n' +
            '<td>ber_tag_t ber_skip_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4282>4282</a></td>\n' +
            '<td>ber_tag_t ber_peek_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4283>4283</a></td>\n' +
            '<td>ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4284>4284</a></td>\n' +
            '<td>ber_tag_t ber_get_int(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4285>4285</a></td>\n' +
            '<td>ber_tag_t ber_get_enum(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4286>4286</a></td>\n' +
            '<td>ber_tag_t ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4287>4287</a></td>\n' +
            '<td>ber_tag_t ber_get_stringa(BerElement *ber, char **buf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4288>4288</a></td>\n' +
            '<td>ber_tag_t ber_get_stringal(BerElement *ber, struct berval **bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4289>4289</a></td>\n' +
            '<td>ber_tag_t ber_get_stringbv(BerElement *ber, struct berval *bv, int alloc);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4290>4290</a></td>\n' +
            '<td>ber_tag_t ber_get_null(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4291>4291</a></td>\n' +
            '<td>ber_tag_t ber_get_boolean(BerElement *ber, ber_int_t *bool);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4292>4292</a></td>\n' +
            '<td>ber_tag_t ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *blen);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4293>4293</a></td>\n' +
            '<td>ber_tag_t ber_first_element(BerElement *ber, ber_len_t *len, char **cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4294>4294</a></td>\n' +
            '<td>ber_tag_t ber_next_element(BerElement *ber, ber_len_t *len, const char *cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4295>4295</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4296>4296</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the decoding routines in the lber library. See lber-encode(3) for details on the corresponding encoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4297>4297</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_get_next() to get the next BER element and ber_scanf() to do the actual decoding. In some cases, ber_peek_tag() may also need to be called in normal usage. The other routines are provided for those applications that need more control than ber_scanf() provides. In general, these routines return the tag of the element decoded, or LBER_ERROR if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4298>4298</a></td>\n' +
            '<td>The ber_get_next() routine is used to read the next BER element from the given Sockbuf, sb. It strips off and returns the leading tag, strips off and returns the length of the entire element in len, and sets up ber for subsequent calls to ber_scanf() et al to decode the element. See lber-sockbuf(3) for details of the Sockbuf implementation of the sb parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4299>4299</a></td>\n' +
            '<td>The ber_scanf() routine is used to decode a BER element in much the same way that scanf(3) works. It reads from ber, a pointer to a BerElement such as returned by ber_get_next(), interprets the bytes according to the format string fmt, and stores the results in its additional arguments. The format string contains conversion specifications which are used to direct the interpretation of the BER element. The format string can contain the following characters.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4300>4300</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4301>4301</a></td>\n' +
            '<td>a</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4302>4302</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4303>4303</a></td>\n' +
            '<td>Octet string. A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4304>4304</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4305>4305</a></td>\n' +
            '<td>A</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4306>4306</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4307>4307</a></td>\n' +
            '<td>Octet string. A variant of "a". A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter, unless a zero-length string would result; in that case, the arg is set to NULL. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4308>4308</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4309>4309</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4310>4310</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4311>4311</a></td>\n' +
            '<td>Octet string. A char * buffer should be supplied, followed by a pointer to a ber_len_t initialized to the size of the buffer. Upon return, the null-terminated octet string is put into the buffer, and the ber_len_t is set to the actual size of the octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4312>4312</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4313>4313</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4314>4314</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4315>4315</a></td>\n' +
            '<td>Octet string. A struct ber_val ** should be supplied, which upon return points to a dynamically allocated struct berval containing the octet string and its length. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4316>4316</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4317>4317</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4318>4318</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4319>4319</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the dynamically allocated octet string and its length. The caller should free the returned octet string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4320>4320</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4321>4321</a></td>\n' +
            '<td>m</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4322>4322</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4323>4323</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the octet string and its length. The string resides in memory assigned to the BerElement, and must not be freed by the caller.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4324>4324</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4325>4325</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4326>4326</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4327>4327</a></td>\n' +
            '<td>Boolean. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4328>4328</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4329>4329</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4330>4330</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4331>4331</a></td>\n' +
            '<td>Enumeration. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4332>4332</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4333>4333</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4334>4334</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4335>4335</a></td>\n' +
            '<td>Integer. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4336>4336</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4337>4337</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4338>4338</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4339>4339</a></td>\n' +
            '<td>Bitstring. A char ** should be supplied which will point to the dynamically allocated bits, followed by a ber_len_t *, which will point to the length (in bits) of the bitstring returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4340>4340</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4341>4341</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4342>4342</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4343>4343</a></td>\n' +
            '<td>Null. No parameter is required. The element is simply skipped if it is recognized.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4344>4344</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4345>4345</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4346>4346</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4347>4347</a></td>\n' +
            '<td>Sequence of octet strings. A char *** should be supplied, which upon return points to a dynamically allocated null-terminated array of char *’s containing the octet strings. NULL is returned if the sequence is empty. The caller should free the returned array and octet strings using ber_memvfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4348>4348</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4349>4349</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4350>4350</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4351>4351</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A struct berval *** should be supplied, which upon return points to a dynamically allocated null-terminated array of struct berval *’s containing the octet strings and their lengths. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvecfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4352>4352</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4353>4353</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4354>4354</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4355>4355</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A BerVarray * should be supplied, which upon return points to a dynamically allocated array of struct berval’s containing the octet strings and their lengths. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvarray_fr ee().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4356>4356</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4357>4357</a></td>\n' +
            '<td>M</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4358>4358</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4359>4359</a></td>\n' +
            '<td>Sequence of octet strings with lengths. This is a generalized form of the previous three formats. A void ** (ptr) should be supplied, followed by a ber_len_t * (len) and a ber_len_t (off). Upon return (ptr) will point to a dynamically allocated array whose elements are all of size (*len). A struct berval will be filled starting at offset (off) in each element. The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The number of elements in the array is also stored in (*len) on return. The caller should free the returned array using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4360>4360</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4361>4361</a></td>\n' +
            '<td>l</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4362>4362</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4363>4363</a></td>\n' +
            '<td>Length of the next element. A pointer to a ber_len_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4364>4364</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4365>4365</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4366>4366</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4367>4367</a></td>\n' +
            '<td>Tag of the next element. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4368>4368</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4369>4369</a></td>\n' +
            '<td>T</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4370>4370</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4371>4371</a></td>\n' +
            '<td>Skip element and return its tag. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4372>4372</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4373>4373</a></td>\n' +
            '<td>x</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4374>4374</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4375>4375</a></td>\n' +
            '<td>Skip element. The next element is skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4376>4376</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4377>4377</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4378>4378</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4379>4379</a></td>\n' +
            '<td>Begin sequence. No parameter is required. The initial sequence tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4380>4380</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4381>4381</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4382>4382</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4383>4383</a></td>\n' +
            '<td>End sequence. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4384>4384</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4385>4385</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4386>4386</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4387>4387</a></td>\n' +
            '<td>Begin set. No parameter is required. The initial set tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4388>4388</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4389>4389</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4390>4390</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4391>4391</a></td>\n' +
            '<td>End set. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4392>4392</a></td>\n' +
            '<td>The ber_get_int() routine tries to interpret the next element as an integer, returning the result in num. The tag of whatever it finds is returned on success, LBER_ERROR (−1) on failure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4393>4393</a></td>\n' +
            '<td>The ber_get_stringb() routine is used to read an octet string into a preallocated buffer. The len parameter should be initialized to the size of the buffer, and will contain the length of the octet string read upon return. The buffer should be big enough to take the octet string value plus a terminating NULL byte.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4394>4394</a></td>\n' +
            '<td>The ber_get_stringa() routine is used to dynamically allocate space into which an octet string is read. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4395>4395</a></td>\n' +
            '<td>The ber_get_stringal() routine is used to dynamically allocate space into which an octet string and its length are read. It takes a struct berval **, and returns the result in this parameter. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4396>4396</a></td>\n' +
            '<td>The ber_get_stringbv() routine is used to read an octet string and its length into the provided struct berval *. If the alloc parameter is zero, the string will reside in memory assigned to the BerElement, and must not be freed by the caller. If the alloc parameter is non-zero, the string will be copied into dynamically allocated space which should be returned using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4397>4397</a></td>\n' +
            '<td>The ber_get_null() routine is used to read a NULL element. It returns the tag of the element it skips over.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4398>4398</a></td>\n' +
            '<td>The ber_get_boolean() routine is used to read a boolean value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4399>4399</a></td>\n' +
            '<td>The ber_get_enum() routine is used to read a enumeration value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4400>4400</a></td>\n' +
            '<td>The ber_get_bitstringa() routine is used to read a bitstring value. It takes a char ** which will hold the dynamically allocated bits, followed by an ber_len_t *, which will point to the length (in bits) of the bitstring returned. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4401>4401</a></td>\n' +
            '<td>The ber_first_element() routine is used to return the tag and length of the first element in a set or sequence. It also returns in cookie a magic cookie parameter that should be passed to subsequent calls to ber_next_element(), which returns similar information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4402>4402</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4403>4403</a></td>\n' +
            '<td>Assume the variable ber contains a lightweight BER encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4404>4404</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4405>4405</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4406>4406</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4407>4407</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4408>4408</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4409>4409</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4410>4410</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4411>4411</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4412>4412</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4413>4413</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4414>4414</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4415>4415</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4416>4416</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4417>4417</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4418>4418</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4419>4419</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4420>4420</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4421>4421</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4422>4422</a></td>\n' +
            '<td>The element can be decoded using ber_scanf() as follows.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4423>4423</a></td>\n' +
            '<td>ber_int_t scope, deref, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4424>4424</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4425>4425</a></td>\n' +
            '<td>ber_tag_t tag;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4426>4426</a></td>\n' +
            '<td>tag = ber_scanf( ber, "{aeeiib{v}}",</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4427>4427</a></td>\n' +
            '<td>&amp;dn, &amp;scope, &amp;deref,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4428>4428</a></td>\n' +
            '<td>&amp;size, &amp;time, &amp;attrsonly, &amp;attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4429>4429</a></td>\n' +
            '<td>if( tag == LBER_ERROR ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4430>4430</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4431>4431</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4432>4432</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4433>4433</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4434>4434</a></td>\n' +
            '<td>ber_memfree( dn );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4435>4435</a></td>\n' +
            '<td>ber_memvfree( attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4436>4436</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4437>4437</a></td>\n' +
            '<td>If an error occurs during decoding, generally these routines return LBER_ERROR ((ber_tag_t)−1).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4438>4438</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4439>4439</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file. Some routines may dynamically allocate memory which must be freed by the caller using supplied deallocation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4440>4440</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4441>4441</a></td>\n' +
            '<td>lber-encode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4442>4442</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4443>4443</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4444>4444</a></td>\n' +
            '<td>LBER_ENCODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4445>4445</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4446>4446</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4447>4447</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4448>4448</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4449>4449</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4450>4450</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4451>4451</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4452>4452</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4453>4453</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4454>4454</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4455>4455</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4456>4456</a></td>\n' +
            '<td>ber_alloc_t, ber_flush, ber_flush2, ber_printf, ber_put_int, ber_put_enum, ber_put_ostring, ber_put_string, ber_put_null, ber_put_boolean, ber_put_bitstring, ber_start_seq, ber_start_set, ber_put_seq, ber_put_set − OpenLDAP LBER simplified Basic Encoding Rules library routines for encoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4457>4457</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4458>4458</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4459>4459</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4460>4460</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4461>4461</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4462>4462</a></td>\n' +
            '<td>int ber_flush(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4463>4463</a></td>\n' +
            '<td>int ber_flush2(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4464>4464</a></td>\n' +
            '<td>int ber_printf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4465>4465</a></td>\n' +
            '<td>int ber_put_int(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4466>4466</a></td>\n' +
            '<td>int ber_put_enum(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4467>4467</a></td>\n' +
            '<td>int ber_put_ostring(BerElement *ber, const char *str, ber_len_t len, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4468>4468</a></td>\n' +
            '<td>int ber_put_string(BerElement *ber, const char *str, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4469>4469</a></td>\n' +
            '<td>int ber_put_null(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4470>4470</a></td>\n' +
            '<td>int ber_put_boolean(BerElement *ber, ber_int_t bool, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4471>4471</a></td>\n' +
            '<td>int ber_put_bitstring(BerElement *ber, const char *str, ber_len_t blen, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4472>4472</a></td>\n' +
            '<td>int ber_start_seq(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4473>4473</a></td>\n' +
            '<td>int ber_start_set(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4474>4474</a></td>\n' +
            '<td>int ber_put_seq(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4475>4475</a></td>\n' +
            '<td>int ber_put_set(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4476>4476</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4477>4477</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the encoding routines in the lber library. See lber-decode(3) for details on the corresponding decoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4478>4478</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_alloc_t() to allocate a BER element for encoding, ber_printf() to do the actual encoding, and ber_flush2() to actually write the element. The other routines are provided for those applications that need more control than ber_printf() provides. In general, these routines return the length of the element encoded, or -1 if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4479>4479</a></td>\n' +
            '<td>The ber_alloc_t() routine is used to allocate a new BER element. It should be called with an argument of LBER_USE_DER.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4480>4480</a></td>\n' +
            '<td>The ber_flush2() routine is used to actually write the element to a socket (or file) descriptor, once it has been fully encoded (using ber_printf() and friends). See lber-sockbuf(3) for more details on the Sockbuf implementation of the sb parameter. If the freeit parameter is non-zero, the supplied ber will be freed. If LBER_FLUSH_FREE_ON_SUCCESS is used, the ber is only freed when successfully flushed, otherwise it is left intact; if LBER_FLUSH_FREE_ON_ERROR is used, the ber is only freed when an error occurs, otherwise it is left intact; if LBER_FLUSH_FREE_ALWAYS is used, the ber is freed anyway. This function differs from the original ber_flush(3) function, whose behavior corresponds to that indicated for LBER_FLUSH_FREE_ON_SUCCESS. Note that in the future, the behavior of ber_flush(3) with freeit non-zero might change into that of ber_flush2(3) with freeit set to LBER_FLUSH_FREE_ALWAYS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4481>4481</a></td>\n' +
            '<td>The ber_printf() routine is used to encode a BER element in much the same way that sprintf(3) works. One important difference, though, is that some state information is kept with the ber parameter so that multiple calls can be made to ber_printf() to append things to the end of the BER element. Ber_printf() writes to ber, a pointer to a BerElement such as returned by ber_alloc_t(). It interprets and formats its arguments according to the format string fmt. The format string can contain the following characters:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4482>4482</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4483>4483</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4484>4484</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4485>4485</a></td>\n' +
            '<td>Boolean. An ber_int_t parameter should be supplied. A boolean element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4486>4486</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4487>4487</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4488>4488</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4489>4489</a></td>\n' +
            '<td>Enumeration. An ber_int_t parameter should be supplied. An enumeration element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4490>4490</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4491>4491</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4492>4492</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4493>4493</a></td>\n' +
            '<td>Integer. An ber_int_t parameter should be supplied. An integer element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4494>4494</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4495>4495</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4496>4496</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4497>4497</a></td>\n' +
            '<td>Bitstring. A char * pointer to the start of the bitstring is supplied, followed by the number of bits in the bitstring. A bitstring element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4498>4498</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4499>4499</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4500>4500</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4501>4501</a></td>\n' +
            '<td>Null. No parameter is required. A null element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4502>4502</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4503>4503</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4504>4504</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4505>4505</a></td>\n' +
            '<td>Octet string. A char * is supplied, followed by the length of the string pointed to. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4506>4506</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4507>4507</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4508>4508</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4509>4509</a></td>\n' +
            '<td>Octet string. A struct berval * is supplied. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4510>4510</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4511>4511</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4512>4512</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4513>4513</a></td>\n' +
            '<td>Octet string. A null-terminated string is supplied. An octet string element is output, not including the trailing NULL octet.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4514>4514</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4515>4515</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4516>4516</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4517>4517</a></td>\n' +
            '<td>Tag. A ber_tag_t specifying the tag to give the next element is provided. This works across calls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4518>4518</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4519>4519</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4520>4520</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4521>4521</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of char *’s is supplied. Note that a construct like ’{v}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4522>4522</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4523>4523</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4524>4524</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4525>4525</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of struct berval *’s is supplied. Note that a construct like ’{V}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4526>4526</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4527>4527</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4528>4528</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4529>4529</a></td>\n' +
            '<td>Several octet strings. An array of struct berval’s is supplied. The array is terminated by a struct berval with a NULL bv_val. Note that a construct like ’{W}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4530>4530</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4531>4531</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4532>4532</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4533>4533</a></td>\n' +
            '<td>Begin sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4534>4534</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4535>4535</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4536>4536</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4537>4537</a></td>\n' +
            '<td>End sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4538>4538</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4539>4539</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4540>4540</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4541>4541</a></td>\n' +
            '<td>Begin set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4542>4542</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4543>4543</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4544>4544</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4545>4545</a></td>\n' +
            '<td>End set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4546>4546</a></td>\n' +
            '<td>The ber_put_int() routine writes the integer element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4547>4547</a></td>\n' +
            '<td>The ber_put_enum() routine writes the enumeration element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4548>4548</a></td>\n' +
            '<td>The ber_put_boolean() routine writes the boolean value given by bool to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4549>4549</a></td>\n' +
            '<td>The ber_put_bitstring() routine writes blen bits starting at str as a bitstring value to the given BER element. Note that blen is the length in bits of the bitstring.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4550>4550</a></td>\n' +
            '<td>The ber_put_ostring() routine writes len bytes starting at str to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4551>4551</a></td>\n' +
            '<td>The ber_put_string() routine writes the null-terminated string (minus the terminating ’ ’) to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4552>4552</a></td>\n' +
            '<td>The ber_put_null() routine writes a NULL element to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4553>4553</a></td>\n' +
            '<td>The ber_start_seq() routine is used to start a sequence in the BER element. The ber_start_set() routine works similarly. The end of the sequence or set is marked by the nearest matching call to ber_put_seq() or ber_put_set(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4554>4554</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4555>4555</a></td>\n' +
            '<td>Assuming the following variable declarations, and that the variables have been assigned appropriately, an lber encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4556>4556</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4557>4557</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4558>4558</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4559>4559</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4560>4560</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4561>4561</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4562>4562</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4563>4563</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4564>4564</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4565>4565</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4566>4566</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4567>4567</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4568>4568</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4569>4569</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4570>4570</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4571>4571</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4572>4572</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4573>4573</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4574>4574</a></td>\n' +
            '<td>can be achieved like so:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4575>4575</a></td>\n' +
            '<td>int rc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4576>4576</a></td>\n' +
            '<td>ber_int_t scope, ali, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4577>4577</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4578>4578</a></td>\n' +
            '<td>BerElement *ber;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4579>4579</a></td>\n' +
            '<td>/* ... fill in values ... */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4580>4580</a></td>\n' +
            '<td>ber = ber_alloc_t( LBER_USE_DER );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4581>4581</a></td>\n' +
            '<td>if ( ber == NULL ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4582>4582</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4583>4583</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4584>4584</a></td>\n' +
            '<td>rc = ber_printf( ber, "{siiiib{v}}", dn, scope, ali,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4585>4585</a></td>\n' +
            '<td>size, time, attrsonly, attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4586>4586</a></td>\n' +
            '<td>if( rc == −1 ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4587>4587</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4588>4588</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4589>4589</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4590>4590</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4591>4591</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4592>4592</a></td>\n' +
            '<td>If an error occurs during encoding, generally these routines return −1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4593>4593</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4594>4594</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4595>4595</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4596>4596</a></td>\n' +
            '<td>lber-decode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4597>4597</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4598>4598</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4599>4599</a></td>\n' +
            '<td>LBER_TYPES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4600>4600</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4601>4601</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4602>4602</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4603>4603</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4604>4604</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4605>4605</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4606>4606</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4607>4607</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4608>4608</a></td>\n' +
            '<td>ber_int_t, ber_uint_t, ber_len_t, ber_slen_t, ber_tag_t, struct berval, BerValue, BerVarray, BerElement, ber_bvfree, ber_bvecfree, ber_bvecadd, ber_bvarray_free, ber_bvarray_add, ber_bvdup, ber_dupbv, ber_bvstr, ber_bvstrdup, ber_str2bv, ber_alloc_t, ber_init, ber_init2, ber_free − OpenLDAP LBER types and allocation functions</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4609>4609</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4610>4610</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4611>4611</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4612>4612</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4613>4613</a></td>\n' +
            '<td>typedef impl_tag_t ber_tag_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4614>4614</a></td>\n' +
            '<td>typedef impl_int_t ber_int_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4615>4615</a></td>\n' +
            '<td>typedef impl_uint_t ber_uint_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4616>4616</a></td>\n' +
            '<td>typedef impl_len_t ber_len_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4617>4617</a></td>\n' +
            '<td>typedef impl_slen_t ber_slen_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4618>4618</a></td>\n' +
            '<td>typedef struct berval {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4619>4619</a></td>\n' +
            '<td>ber_len_t bv_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4620>4620</a></td>\n' +
            '<td>char *bv_val;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4621>4621</a></td>\n' +
            '<td>} BerValue, *BerVarray;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4622>4622</a></td>\n' +
            '<td>typedef struct berelement BerElement;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4623>4623</a></td>\n' +
            '<td>void ber_bvfree(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4624>4624</a></td>\n' +
            '<td>void ber_bvecfree(struct berval **bvec);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4625>4625</a></td>\n' +
            '<td>void ber_bvecadd(struct berval ***bvec, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4626>4626</a></td>\n' +
            '<td>void ber_bvarray_free(struct berval *bvarray);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4627>4627</a></td>\n' +
            '<td>void ber_bvarray_add(BerVarray *bvarray, BerValue *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4628>4628</a></td>\n' +
            '<td>struct berval *ber_bvdup(const struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4629>4629</a></td>\n' +
            '<td>struct berval *ber_dupbv(const struct berval *dst, struct berval *src);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4630>4630</a></td>\n' +
            '<td>struct berval *ber_bvstr(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4631>4631</a></td>\n' +
            '<td>struct berval *ber_bvstrdup(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4632>4632</a></td>\n' +
            '<td>struct berval *ber_str2bv(const char *str, ber_len_t len, int dup, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4633>4633</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4634>4634</a></td>\n' +
            '<td>BerElement *ber_init(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4635>4635</a></td>\n' +
            '<td>void ber_init2(BerElement *ber, struct berval *bv, int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4636>4636</a></td>\n' +
            '<td>void ber_free(BerElement *ber, int freebuf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4637>4637</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4638>4638</a></td>\n' +
            '<td>The following are the basic types and structures defined for use with the Lightweight BER library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4639>4639</a></td>\n' +
            '<td>ber_int_t is a signed integer of at least 32 bits. It is commonly equivalent to int. ber_uint_t is the unsigned variant of ber_int_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4640>4640</a></td>\n' +
            '<td>ber_len_t is an unsigned integer of at least 32 bits used to represent a length. It is commonly equivalent to a size_t. ber_slen_t is the signed variant to ber_len_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4641>4641</a></td>\n' +
            '<td>ber_tag_t is an unsigned integer of at least 32 bits used to represent a BER tag. It is commonly equivalent to a unsigned long.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4642>4642</a></td>\n' +
            '<td>The actual definitions of the integral impl_TYPE_t types are platform specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4643>4643</a></td>\n' +
            '<td>BerValue, commonly used as struct berval, is used to hold an arbitrary sequence of octets. bv_val points to bv_len octets. bv_val is not necessarily terminated by a NULL (zero) octet. ber_bvfree() frees a BerValue, pointed to by bv, returned from this API. If bv is NULL, the routine does nothing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4644>4644</a></td>\n' +
            '<td>ber_bvecfree() frees an array of BerValues (and the array), pointed to by bvec, returned from this API. If bvec is NULL, the routine does nothing. ber_bvecadd() appends the bv pointer to the bvec array. Space for the array is allocated as needed. The end of the array is marked by a NULL pointer.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4645>4645</a></td>\n' +
            '<td>ber_bvarray_free() frees an array of BerValues (and the array), pointed to by bvarray, returned from this API. If bvarray is NULL, the routine does nothing. ber_bvarray_add() appends the contents of the BerValue pointed to by bv to the bvarray array. Space for the new element is allocated as needed. The end of the array is marked by a BerValue with a NULL bv_val field.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4646>4646</a></td>\n' +
            '<td>ber_bvdup() returns a copy of a BerValue. The routine returns NULL upon error (e.g. out of memory). The caller should use ber_bvfree() to deallocate the resulting BerValue. ber_dupbv() copies a BerValue from src to dst. If dst is NULL a new BerValue will be allocated to hold the copy. The routine returns NULL upon error, otherwise it returns a pointer to the copy. If dst is NULL the caller should use ber_bvfree() to deallocate the resulting BerValue, otherwise ber_memfree() should be used to deallocate the dst-&gt;bv_val. (The ber_bvdup() function is internally implemented as ber_dupbv(NULL, bv). ber_bvdup() is provided only for compatibility with an expired draft of the LDAP C API; ber_dupbv() is the preferred interface.)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4647>4647</a></td>\n' +
            '<td>ber_bvstr() returns a BerValue containing the string pointed to by str. ber_bvstrdup() returns a BerValue containing a copy of the string pointed to by str. ber_str2bv() returns a BerValue containing the string pointed to by str, whose length may be optionally specified in len. If dup is non-zero, the BerValue will contain a copy of str. If len is zero, the number of bytes to copy will be determined by strlen(3), otherwise len bytes will be copied. If bv is non-NULL, the result will be stored in the given BerValue, otherwise a new BerValue will be allocated to store the result. NOTE: Both ber_bvstr() and ber_bvstrdup() are implemented as macros using ber_str2bv() in this version of the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4648>4648</a></td>\n' +
            '<td>BerElement is an opaque structure used to maintain state information used in encoding and decoding. ber_alloc_t() is used to create an empty BerElement structure. If LBER_USE_DER is specified for the options parameter then data lengths for data written to the BerElement will be encoded in the minimal number of octets required, otherwise they will always be written as four byte values. ber_init() creates a BerElement structure that is initialized with a copy of the data in its bv parameter. ber_init2() initializes an existing BerElement ber using the data in the bv parameter. The data is referenced directly, not copied. The options parameter is the same as for ber_alloc_t(). ber_free() frees a BerElement pointed to by ber. If ber is NULL, the routine does nothing. If freebuf is zero, the internal buffer is not freed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4649>4649</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4650>4650</a></td>\n' +
            '<td>lber-encode(3), lber-decode(3), lber-memory(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4651>4651</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4652>4652</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4653>4653</a></td>\n' +
            '<td>LBER_DECODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4654>4654</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4655>4655</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4656>4656</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4657>4657</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4658>4658</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4659>4659</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4660>4660</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4661>4661</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4662>4662</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4663>4663</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4664>4664</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4665>4665</a></td>\n' +
            '<td>ber_get_next, ber_skip_tag, ber_peek_tag, ber_scanf, ber_get_int, ber_get_enum, ber_get_stringb, ber_get_stringa, ber_get_stringal, ber_get_stringbv, ber_get_null, ber_get_boolean, ber_get_bitstring, ber_first_element, ber_next_element − OpenLDAP LBER simplified Basic Encoding Rules library routines for decoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4666>4666</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4667>4667</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4668>4668</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4669>4669</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4670>4670</a></td>\n' +
            '<td>ber_tag_t ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4671>4671</a></td>\n' +
            '<td>ber_tag_t ber_skip_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4672>4672</a></td>\n' +
            '<td>ber_tag_t ber_peek_tag(BerElement *ber, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4673>4673</a></td>\n' +
            '<td>ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4674>4674</a></td>\n' +
            '<td>ber_tag_t ber_get_int(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4675>4675</a></td>\n' +
            '<td>ber_tag_t ber_get_enum(BerElement *ber, ber_int_t *num);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4676>4676</a></td>\n' +
            '<td>ber_tag_t ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4677>4677</a></td>\n' +
            '<td>ber_tag_t ber_get_stringa(BerElement *ber, char **buf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4678>4678</a></td>\n' +
            '<td>ber_tag_t ber_get_stringal(BerElement *ber, struct berval **bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4679>4679</a></td>\n' +
            '<td>ber_tag_t ber_get_stringbv(BerElement *ber, struct berval *bv, int alloc);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4680>4680</a></td>\n' +
            '<td>ber_tag_t ber_get_null(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4681>4681</a></td>\n' +
            '<td>ber_tag_t ber_get_boolean(BerElement *ber, ber_int_t *bool);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4682>4682</a></td>\n' +
            '<td>ber_tag_t ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *blen);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4683>4683</a></td>\n' +
            '<td>ber_tag_t ber_first_element(BerElement *ber, ber_len_t *len, char **cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4684>4684</a></td>\n' +
            '<td>ber_tag_t ber_next_element(BerElement *ber, ber_len_t *len, const char *cookie);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4685>4685</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4686>4686</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the decoding routines in the lber library. See lber-encode(3) for details on the corresponding encoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4687>4687</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_get_next() to get the next BER element and ber_scanf() to do the actual decoding. In some cases, ber_peek_tag() may also need to be called in normal usage. The other routines are provided for those applications that need more control than ber_scanf() provides. In general, these routines return the tag of the element decoded, or LBER_ERROR if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4688>4688</a></td>\n' +
            '<td>The ber_get_next() routine is used to read the next BER element from the given Sockbuf, sb. It strips off and returns the leading tag, strips off and returns the length of the entire element in len, and sets up ber for subsequent calls to ber_scanf() et al to decode the element. See lber-sockbuf(3) for details of the Sockbuf implementation of the sb parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4689>4689</a></td>\n' +
            '<td>The ber_scanf() routine is used to decode a BER element in much the same way that scanf(3) works. It reads from ber, a pointer to a BerElement such as returned by ber_get_next(), interprets the bytes according to the format string fmt, and stores the results in its additional arguments. The format string contains conversion specifications which are used to direct the interpretation of the BER element. The format string can contain the following characters.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4690>4690</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4691>4691</a></td>\n' +
            '<td>a</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4692>4692</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4693>4693</a></td>\n' +
            '<td>Octet string. A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4694>4694</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4695>4695</a></td>\n' +
            '<td>A</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4696>4696</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4697>4697</a></td>\n' +
            '<td>Octet string. A variant of "a". A char ** should be supplied. Memory is allocated, filled with the contents of the octet string, null-terminated, and returned in the parameter, unless a zero-length string would result; in that case, the arg is set to NULL. The caller should free the returned string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4698>4698</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4699>4699</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4700>4700</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4701>4701</a></td>\n' +
            '<td>Octet string. A char * buffer should be supplied, followed by a pointer to a ber_len_t initialized to the size of the buffer. Upon return, the null-terminated octet string is put into the buffer, and the ber_len_t is set to the actual size of the octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4702>4702</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4703>4703</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4704>4704</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4705>4705</a></td>\n' +
            '<td>Octet string. A struct ber_val ** should be supplied, which upon return points to a dynamically allocated struct berval containing the octet string and its length. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4706>4706</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4707>4707</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4708>4708</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4709>4709</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the dynamically allocated octet string and its length. The caller should free the returned octet string using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4710>4710</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4711>4711</a></td>\n' +
            '<td>m</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4712>4712</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4713>4713</a></td>\n' +
            '<td>Octet string. A struct ber_val * should be supplied, which upon return contains the octet string and its length. The string resides in memory assigned to the BerElement, and must not be freed by the caller.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4714>4714</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4715>4715</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4716>4716</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4717>4717</a></td>\n' +
            '<td>Boolean. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4718>4718</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4719>4719</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4720>4720</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4721>4721</a></td>\n' +
            '<td>Enumeration. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4722>4722</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4723>4723</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4724>4724</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4725>4725</a></td>\n' +
            '<td>Integer. A pointer to a ber_int_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4726>4726</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4727>4727</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4728>4728</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4729>4729</a></td>\n' +
            '<td>Bitstring. A char ** should be supplied which will point to the dynamically allocated bits, followed by a ber_len_t *, which will point to the length (in bits) of the bitstring returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4730>4730</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4731>4731</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4732>4732</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4733>4733</a></td>\n' +
            '<td>Null. No parameter is required. The element is simply skipped if it is recognized.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4734>4734</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4735>4735</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4736>4736</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4737>4737</a></td>\n' +
            '<td>Sequence of octet strings. A char *** should be supplied, which upon return points to a dynamically allocated null-terminated array of char *’s containing the octet strings. NULL is returned if the sequence is empty. The caller should free the returned array and octet strings using ber_memvfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4738>4738</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4739>4739</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4740>4740</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4741>4741</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A struct berval *** should be supplied, which upon return points to a dynamically allocated null-terminated array of struct berval *’s containing the octet strings and their lengths. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvecfree( ).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4742>4742</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4743>4743</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4744>4744</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4745>4745</a></td>\n' +
            '<td>Sequence of octet strings with lengths. A BerVarray * should be supplied, which upon return points to a dynamically allocated array of struct berval’s containing the octet strings and their lengths. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The caller should free the returned structures using ber_bvarray_fr ee().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4746>4746</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4747>4747</a></td>\n' +
            '<td>M</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4748>4748</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4749>4749</a></td>\n' +
            '<td>Sequence of octet strings with lengths. This is a generalized form of the previous three formats. A void ** (ptr) should be supplied, followed by a ber_len_t * (len) and a ber_len_t (off). Upon return (ptr) will point to a dynamically allocated array whose elements are all of size (*len). A struct berval will be filled starting at offset (off) in each element. The strings in each struct berval reside in memory assigned to the BerElement and must not be freed by the caller. The array is terminated by a struct berval with a NULL bv_val string pointer. NULL is returned if the sequence is empty. The number of elements in the array is also stored in (*len) on return. The caller should free the returned array using ber_memfree() .</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4750>4750</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4751>4751</a></td>\n' +
            '<td>l</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4752>4752</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4753>4753</a></td>\n' +
            '<td>Length of the next element. A pointer to a ber_len_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4754>4754</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4755>4755</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4756>4756</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4757>4757</a></td>\n' +
            '<td>Tag of the next element. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4758>4758</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4759>4759</a></td>\n' +
            '<td>T</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4760>4760</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4761>4761</a></td>\n' +
            '<td>Skip element and return its tag. A pointer to a ber_tag_t should be supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4762>4762</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4763>4763</a></td>\n' +
            '<td>x</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4764>4764</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4765>4765</a></td>\n' +
            '<td>Skip element. The next element is skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4766>4766</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4767>4767</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4768>4768</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4769>4769</a></td>\n' +
            '<td>Begin sequence. No parameter is required. The initial sequence tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4770>4770</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4771>4771</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4772>4772</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4773>4773</a></td>\n' +
            '<td>End sequence. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4774>4774</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4775>4775</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4776>4776</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4777>4777</a></td>\n' +
            '<td>Begin set. No parameter is required. The initial set tag and length are skipped.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4778>4778</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4779>4779</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4780>4780</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4781>4781</a></td>\n' +
            '<td>End set. No parameter is required and no action is taken.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4782>4782</a></td>\n' +
            '<td>The ber_get_int() routine tries to interpret the next element as an integer, returning the result in num. The tag of whatever it finds is returned on success, LBER_ERROR (−1) on failure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4783>4783</a></td>\n' +
            '<td>The ber_get_stringb() routine is used to read an octet string into a preallocated buffer. The len parameter should be initialized to the size of the buffer, and will contain the length of the octet string read upon return. The buffer should be big enough to take the octet string value plus a terminating NULL byte.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4784>4784</a></td>\n' +
            '<td>The ber_get_stringa() routine is used to dynamically allocate space into which an octet string is read. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4785>4785</a></td>\n' +
            '<td>The ber_get_stringal() routine is used to dynamically allocate space into which an octet string and its length are read. It takes a struct berval **, and returns the result in this parameter. The caller should free the returned structure using ber_bvfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4786>4786</a></td>\n' +
            '<td>The ber_get_stringbv() routine is used to read an octet string and its length into the provided struct berval *. If the alloc parameter is zero, the string will reside in memory assigned to the BerElement, and must not be freed by the caller. If the alloc parameter is non-zero, the string will be copied into dynamically allocated space which should be returned using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4787>4787</a></td>\n' +
            '<td>The ber_get_null() routine is used to read a NULL element. It returns the tag of the element it skips over.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4788>4788</a></td>\n' +
            '<td>The ber_get_boolean() routine is used to read a boolean value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4789>4789</a></td>\n' +
            '<td>The ber_get_enum() routine is used to read a enumeration value. It is called the same way that ber_get_int() is called.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4790>4790</a></td>\n' +
            '<td>The ber_get_bitstringa() routine is used to read a bitstring value. It takes a char ** which will hold the dynamically allocated bits, followed by an ber_len_t *, which will point to the length (in bits) of the bitstring returned. The caller should free the returned string using ber_memfree().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4791>4791</a></td>\n' +
            '<td>The ber_first_element() routine is used to return the tag and length of the first element in a set or sequence. It also returns in cookie a magic cookie parameter that should be passed to subsequent calls to ber_next_element(), which returns similar information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4792>4792</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4793>4793</a></td>\n' +
            '<td>Assume the variable ber contains a lightweight BER encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4794>4794</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4795>4795</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4796>4796</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4797>4797</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4798>4798</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4799>4799</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4800>4800</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4801>4801</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4802>4802</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4803>4803</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4804>4804</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4805>4805</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4806>4806</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4807>4807</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4808>4808</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4809>4809</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4810>4810</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4811>4811</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4812>4812</a></td>\n' +
            '<td>The element can be decoded using ber_scanf() as follows.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4813>4813</a></td>\n' +
            '<td>ber_int_t scope, deref, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4814>4814</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4815>4815</a></td>\n' +
            '<td>ber_tag_t tag;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4816>4816</a></td>\n' +
            '<td>tag = ber_scanf( ber, "{aeeiib{v}}",</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4817>4817</a></td>\n' +
            '<td>&amp;dn, &amp;scope, &amp;deref,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4818>4818</a></td>\n' +
            '<td>&amp;size, &amp;time, &amp;attrsonly, &amp;attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4819>4819</a></td>\n' +
            '<td>if( tag == LBER_ERROR ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4820>4820</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4821>4821</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4822>4822</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4823>4823</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4824>4824</a></td>\n' +
            '<td>ber_memfree( dn );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4825>4825</a></td>\n' +
            '<td>ber_memvfree( attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4826>4826</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4827>4827</a></td>\n' +
            '<td>If an error occurs during decoding, generally these routines return LBER_ERROR ((ber_tag_t)−1).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4828>4828</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4829>4829</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file. Some routines may dynamically allocate memory which must be freed by the caller using supplied deallocation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4830>4830</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4831>4831</a></td>\n' +
            '<td>lber-encode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4832>4832</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4833>4833</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4834>4834</a></td>\n' +
            '<td>LBER_ENCODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4835>4835</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4836>4836</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4837>4837</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4838>4838</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4839>4839</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4840>4840</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4841>4841</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4842>4842</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4843>4843</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4844>4844</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4845>4845</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4846>4846</a></td>\n' +
            '<td>ber_alloc_t, ber_flush, ber_flush2, ber_printf, ber_put_int, ber_put_enum, ber_put_ostring, ber_put_string, ber_put_null, ber_put_boolean, ber_put_bitstring, ber_start_seq, ber_start_set, ber_put_seq, ber_put_set − OpenLDAP LBER simplified Basic Encoding Rules library routines for encoding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4847>4847</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4848>4848</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4849>4849</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4850>4850</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4851>4851</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4852>4852</a></td>\n' +
            '<td>int ber_flush(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4853>4853</a></td>\n' +
            '<td>int ber_flush2(Sockbuf *sb, BerElement *ber, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4854>4854</a></td>\n' +
            '<td>int ber_printf(BerElement *ber, const char *fmt, ...);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4855>4855</a></td>\n' +
            '<td>int ber_put_int(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4856>4856</a></td>\n' +
            '<td>int ber_put_enum(BerElement *ber, ber_int_t num, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4857>4857</a></td>\n' +
            '<td>int ber_put_ostring(BerElement *ber, const char *str, ber_len_t len, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4858>4858</a></td>\n' +
            '<td>int ber_put_string(BerElement *ber, const char *str, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4859>4859</a></td>\n' +
            '<td>int ber_put_null(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4860>4860</a></td>\n' +
            '<td>int ber_put_boolean(BerElement *ber, ber_int_t bool, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4861>4861</a></td>\n' +
            '<td>int ber_put_bitstring(BerElement *ber, const char *str, ber_len_t blen, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4862>4862</a></td>\n' +
            '<td>int ber_start_seq(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4863>4863</a></td>\n' +
            '<td>int ber_start_set(BerElement *ber, ber_tag_t tag);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4864>4864</a></td>\n' +
            '<td>int ber_put_seq(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4865>4865</a></td>\n' +
            '<td>int ber_put_set(BerElement *ber);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4866>4866</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4867>4867</a></td>\n' +
            '<td>These routines provide a subroutine interface to a simplified implementation of the Basic Encoding Rules of ASN.1. The version of BER these routines support is the one defined for the LDAP protocol. The encoding rules are the same as BER, except that only definite form lengths are used, and bitstrings and octet strings are always encoded in primitive form. This man page describes the encoding routines in the lber library. See lber-decode(3) for details on the corresponding decoding routines. Consult lber-types(3) for information about types, allocators, and deallocators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4868>4868</a></td>\n' +
            '<td>Normally, the only routines that need to be called by an application are ber_alloc_t() to allocate a BER element for encoding, ber_printf() to do the actual encoding, and ber_flush2() to actually write the element. The other routines are provided for those applications that need more control than ber_printf() provides. In general, these routines return the length of the element encoded, or -1 if an error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4869>4869</a></td>\n' +
            '<td>The ber_alloc_t() routine is used to allocate a new BER element. It should be called with an argument of LBER_USE_DER.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4870>4870</a></td>\n' +
            '<td>The ber_flush2() routine is used to actually write the element to a socket (or file) descriptor, once it has been fully encoded (using ber_printf() and friends). See lber-sockbuf(3) for more details on the Sockbuf implementation of the sb parameter. If the freeit parameter is non-zero, the supplied ber will be freed. If LBER_FLUSH_FREE_ON_SUCCESS is used, the ber is only freed when successfully flushed, otherwise it is left intact; if LBER_FLUSH_FREE_ON_ERROR is used, the ber is only freed when an error occurs, otherwise it is left intact; if LBER_FLUSH_FREE_ALWAYS is used, the ber is freed anyway. This function differs from the original ber_flush(3) function, whose behavior corresponds to that indicated for LBER_FLUSH_FREE_ON_SUCCESS. Note that in the future, the behavior of ber_flush(3) with freeit non-zero might change into that of ber_flush2(3) with freeit set to LBER_FLUSH_FREE_ALWAYS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4871>4871</a></td>\n' +
            '<td>The ber_printf() routine is used to encode a BER element in much the same way that sprintf(3) works. One important difference, though, is that some state information is kept with the ber parameter so that multiple calls can be made to ber_printf() to append things to the end of the BER element. Ber_printf() writes to ber, a pointer to a BerElement such as returned by ber_alloc_t(). It interprets and formats its arguments according to the format string fmt. The format string can contain the following characters:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4872>4872</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4873>4873</a></td>\n' +
            '<td>b</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4874>4874</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4875>4875</a></td>\n' +
            '<td>Boolean. An ber_int_t parameter should be supplied. A boolean element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4876>4876</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4877>4877</a></td>\n' +
            '<td>e</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4878>4878</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4879>4879</a></td>\n' +
            '<td>Enumeration. An ber_int_t parameter should be supplied. An enumeration element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4880>4880</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4881>4881</a></td>\n' +
            '<td>i</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4882>4882</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4883>4883</a></td>\n' +
            '<td>Integer. An ber_int_t parameter should be supplied. An integer element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4884>4884</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4885>4885</a></td>\n' +
            '<td>B</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4886>4886</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4887>4887</a></td>\n' +
            '<td>Bitstring. A char * pointer to the start of the bitstring is supplied, followed by the number of bits in the bitstring. A bitstring element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4888>4888</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4889>4889</a></td>\n' +
            '<td>n</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4890>4890</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4891>4891</a></td>\n' +
            '<td>Null. No parameter is required. A null element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4892>4892</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4893>4893</a></td>\n' +
            '<td>o</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4894>4894</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4895>4895</a></td>\n' +
            '<td>Octet string. A char * is supplied, followed by the length of the string pointed to. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4896>4896</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4897>4897</a></td>\n' +
            '<td>O</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4898>4898</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4899>4899</a></td>\n' +
            '<td>Octet string. A struct berval * is supplied. An octet string element is output.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4900>4900</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4901>4901</a></td>\n' +
            '<td>s</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4902>4902</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4903>4903</a></td>\n' +
            '<td>Octet string. A null-terminated string is supplied. An octet string element is output, not including the trailing NULL octet.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4904>4904</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4905>4905</a></td>\n' +
            '<td>t</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4906>4906</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4907>4907</a></td>\n' +
            '<td>Tag. A ber_tag_t specifying the tag to give the next element is provided. This works across calls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4908>4908</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4909>4909</a></td>\n' +
            '<td>v</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4910>4910</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4911>4911</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of char *’s is supplied. Note that a construct like ’{v}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4912>4912</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4913>4913</a></td>\n' +
            '<td>V</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4914>4914</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4915>4915</a></td>\n' +
            '<td>Several octet strings. A null-terminated array of struct berval *’s is supplied. Note that a construct like ’{V}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4916>4916</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4917>4917</a></td>\n' +
            '<td>W</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4918>4918</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4919>4919</a></td>\n' +
            '<td>Several octet strings. An array of struct berval’s is supplied. The array is terminated by a struct berval with a NULL bv_val. Note that a construct like ’{W}’ is required to get an actual SEQUENCE OF octet strings.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4920>4920</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4921>4921</a></td>\n' +
            '<td>{</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4922>4922</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4923>4923</a></td>\n' +
            '<td>Begin sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4924>4924</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4925>4925</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4926>4926</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4927>4927</a></td>\n' +
            '<td>End sequence. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4928>4928</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4929>4929</a></td>\n' +
            '<td>[</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4930>4930</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4931>4931</a></td>\n' +
            '<td>Begin set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4932>4932</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4933>4933</a></td>\n' +
            '<td>]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4934>4934</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4935>4935</a></td>\n' +
            '<td>End set. No parameter is required.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4936>4936</a></td>\n' +
            '<td>The ber_put_int() routine writes the integer element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4937>4937</a></td>\n' +
            '<td>The ber_put_enum() routine writes the enumeration element num to the BER element ber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4938>4938</a></td>\n' +
            '<td>The ber_put_boolean() routine writes the boolean value given by bool to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4939>4939</a></td>\n' +
            '<td>The ber_put_bitstring() routine writes blen bits starting at str as a bitstring value to the given BER element. Note that blen is the length in bits of the bitstring.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4940>4940</a></td>\n' +
            '<td>The ber_put_ostring() routine writes len bytes starting at str to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4941>4941</a></td>\n' +
            '<td>The ber_put_string() routine writes the null-terminated string (minus the terminating ’ ’) to the BER element as an octet string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4942>4942</a></td>\n' +
            '<td>The ber_put_null() routine writes a NULL element to the BER element.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4943>4943</a></td>\n' +
            '<td>The ber_start_seq() routine is used to start a sequence in the BER element. The ber_start_set() routine works similarly. The end of the sequence or set is marked by the nearest matching call to ber_put_seq() or ber_put_set(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4944>4944</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4945>4945</a></td>\n' +
            '<td>Assuming the following variable declarations, and that the variables have been assigned appropriately, an lber encoding of the following ASN.1 object:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4946>4946</a></td>\n' +
            '<td>AlmostASearchRequest := SEQUENCE {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4947>4947</a></td>\n' +
            '<td>baseObject DistinguishedName,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4948>4948</a></td>\n' +
            '<td>scope ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4949>4949</a></td>\n' +
            '<td>baseObject (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4950>4950</a></td>\n' +
            '<td>singleLevel (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4951>4951</a></td>\n' +
            '<td>wholeSubtree (2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4952>4952</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4953>4953</a></td>\n' +
            '<td>derefAliases ENUMERATED {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4954>4954</a></td>\n' +
            '<td>neverDerefaliases (0),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4955>4955</a></td>\n' +
            '<td>derefInSearching (1),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4956>4956</a></td>\n' +
            '<td>derefFindingBaseObj (2),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4957>4957</a></td>\n' +
            '<td>alwaysDerefAliases (3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4958>4958</a></td>\n' +
            '<td>},</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4959>4959</a></td>\n' +
            '<td>sizelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4960>4960</a></td>\n' +
            '<td>timelimit INTEGER (0 .. 65535),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4961>4961</a></td>\n' +
            '<td>attrsOnly BOOLEAN,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4962>4962</a></td>\n' +
            '<td>attributes SEQUENCE OF AttributeType</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4963>4963</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4964>4964</a></td>\n' +
            '<td>can be achieved like so:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4965>4965</a></td>\n' +
            '<td>int rc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4966>4966</a></td>\n' +
            '<td>ber_int_t scope, ali, size, time, attrsonly;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4967>4967</a></td>\n' +
            '<td>char *dn, **attrs;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4968>4968</a></td>\n' +
            '<td>BerElement *ber;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4969>4969</a></td>\n' +
            '<td>/* ... fill in values ... */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4970>4970</a></td>\n' +
            '<td>ber = ber_alloc_t( LBER_USE_DER );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4971>4971</a></td>\n' +
            '<td>if ( ber == NULL ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4972>4972</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4973>4973</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4974>4974</a></td>\n' +
            '<td>rc = ber_printf( ber, "{siiiib{v}}", dn, scope, ali,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4975>4975</a></td>\n' +
            '<td>size, time, attrsonly, attrs );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4976>4976</a></td>\n' +
            '<td>if( rc == −1 ) {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4977>4977</a></td>\n' +
            '<td>/* error */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4978>4978</a></td>\n' +
            '<td>} else {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4979>4979</a></td>\n' +
            '<td>/* success */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4980>4980</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4981>4981</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4982>4982</a></td>\n' +
            '<td>If an error occurs during encoding, generally these routines return −1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4983>4983</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4984>4984</a></td>\n' +
            '<td>The return values for all of these functions are declared in the &lt;lber.h&gt; header file.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4985>4985</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4986>4986</a></td>\n' +
            '<td>lber-decode(3), lber-memory(3), lber-sockbuf(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4987>4987</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4988>4988</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4989>4989</a></td>\n' +
            '<td>LBER_MEMORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4990>4990</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4991>4991</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4992>4992</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4993>4993</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4994>4994</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4995>4995</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4996>4996</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4997>4997</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4998>4998</a></td>\n' +
            '<td>ber_memalloc, ber_memcalloc, ber_memrealloc, ber_memfree, ber_memvfree − OpenLDAP LBER memory allocators</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=4999>4999</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5000>5000</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5001>5001</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5002>5002</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5003>5003</a></td>\n' +
            '<td>void *ber_memalloc(ber_len_t bytes);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5004>5004</a></td>\n' +
            '<td>void *ber_memcalloc(ber_len_t nelems, ber_len_t bytes);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5005>5005</a></td>\n' +
            '<td>void *ber_memrealloc(void *ptr, ber_len_t bytes);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5006>5006</a></td>\n' +
            '<td>void ber_memfree(void *ptr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5007>5007</a></td>\n' +
            '<td>void ber_memvfree(void **vec);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5008>5008</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5009>5009</a></td>\n' +
            '<td>These routines are used to allocate/deallocate memory used/returned by the Lightweight BER library as required by lber-encode(3) and lber-decode(3). ber_memalloc(), ber_memcalloc(), ber_memrealloc(), and ber_memfree() are used exactly like the standard malloc(3), calloc(3), realloc(3), and free(3) routines, respectively. The ber_memvfree() routine is used to free a dynamically allocated array of pointers to arbitrary dynamically allocated objects.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5010>5010</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5011>5011</a></td>\n' +
            '<td>lber-decode(3), lber-encode(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5012>5012</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5013>5013</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5014>5014</a></td>\n' +
            '<td>LBER_SOCKBUF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5015>5015</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5016>5016</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5017>5017</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5018>5018</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5019>5019</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5020>5020</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5021>5021</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5022>5022</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5023>5023</a></td>\n' +
            '<td>ber_sockbuf_alloc, ber_sockbuf_free, ber_sockbuf_ctrl, ber_sockbuf_add_io, ber_sockbuf_remove_io, Sockbuf_IO − OpenLDAP LBER I/O infrastructure</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5024>5024</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5025>5025</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5026>5026</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5027>5027</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5028>5028</a></td>\n' +
            '<td>Sockbuf *ber_sockbuf_alloc( void );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5029>5029</a></td>\n' +
            '<td>void ber_sockbuf_free(Sockbuf *sb);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5030>5030</a></td>\n' +
            '<td>int ber_sockbuf_ctrl(Sockbuf *sb, int opt, void *arg);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5031>5031</a></td>\n' +
            '<td>int ber_sockbuf_add_io(Sockbuf *sb, Sockbuf_IO *sbio, int layer, void *arg);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5032>5032</a></td>\n' +
            '<td>int ber_sockbuf_remove_io(Sockbuf *sb, Sockbuf_IO *sbio, int layer);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5033>5033</a></td>\n' +
            '<td>typedef struct sockbuf_io_desc {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5034>5034</a></td>\n' +
            '<td>int sbiod_level;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5035>5035</a></td>\n' +
            '<td>Sockbuf *sbiod_sb;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5036>5036</a></td>\n' +
            '<td>Sockbuf_IO *sbiod_io;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5037>5037</a></td>\n' +
            '<td>void *sbiod_pvt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5038>5038</a></td>\n' +
            '<td>struct sockbuf_io_desc *sbiod_next;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5039>5039</a></td>\n' +
            '<td>} Sockbuf_IO_Desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5040>5040</a></td>\n' +
            '<td>typedef struct sockbuf_io {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5041>5041</a></td>\n' +
            '<td>int (*sbi_setup)(Sockbuf_IO_Desc *sbiod, void *arg);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5042>5042</a></td>\n' +
            '<td>int (*sbi_remove)(Sockbuf_IO_Desc *sbiod);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5043>5043</a></td>\n' +
            '<td>int (*sbi_ctrl)(Sockbuf_IO_Desc *sbiod, int opt, void *arg);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5044>5044</a></td>\n' +
            '<td>ber_slen_t (*sbi_read)(Sockbuf_IO_Desc *sbiod, void *buf, ber_len_t len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5045>5045</a></td>\n' +
            '<td>ber_slen_t (*sbi_write)(Sockbuf_IO_Desc *sbiod, void *buf, ber_len_t len);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5046>5046</a></td>\n' +
            '<td>int (*sbi_close)(Sockbuf_IO_Desc *sbiod);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5047>5047</a></td>\n' +
            '<td>} Sockbuf_IO;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5048>5048</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5049>5049</a></td>\n' +
            '<td>These routines are used to manage the low level I/O operations performed by the Lightweight BER library. They are called implicitly by the other libraries and usually do not need to be called directly from applications. The I/O framework is modularized and new transport layers can be supported by appropriately defining a Sockbuf_IO structure and installing it onto an existing Sockbuf. Sockbuf structures are allocated and freed by ber_sockbuf_alloc() and ber_sockbuf_free(), respectively. The ber_sockbuf_ctrl() function is used to get and set options related to a Sockbuf or to a specific I/O layer of the Sockbuf. The ber_sockbuf_add_io() and ber_sockbuf_remove_io() functions are used to add and remove specific I/O layers on a Sockbuf.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5050>5050</a></td>\n' +
            '<td>Options for ber_sockbuf_ctrl() include:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5051>5051</a></td>\n' +
            '<td>LBER_SB_OPT_HAS_IO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5052>5052</a></td>\n' +
            '<td>Takes a Sockbuf_IO * argument and returns 1 if the given handler is installed on the Sockbuf, otherwise returns 0.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5053>5053</a></td>\n' +
            '<td>LBER_SB_OPT_GET_FD</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5054>5054</a></td>\n' +
            '<td>Retrieves the file descriptor associated to the Sockbuf; arg must be a ber_socket_t *. The return value will be 1 if a valid descriptor was present, −1 otherwise.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5055>5055</a></td>\n' +
            '<td>LBER_SB_OPT_SET_FD</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5056>5056</a></td>\n' +
            '<td>Sets the file descriptor of the Sockbuf to the descriptor pointed to by arg; arg must be a ber_socket_t *. The return value will always be 1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5057>5057</a></td>\n' +
            '<td>LBER_SB_OPT_SET_NONBLOCK</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5058>5058</a></td>\n' +
            '<td>Toggles the non-blocking state of the file descriptor associated to the Sockbuf. arg should be NULL to disable and non-NULL to enable the non-blocking state. The return value will be 1 for success, −1 otherwise.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5059>5059</a></td>\n' +
            '<td>LBER_SB_OPT_DRAIN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5060>5060</a></td>\n' +
            '<td>Flush (read and discard) all available input on the Sockbuf. The return value will be 1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5061>5061</a></td>\n' +
            '<td>LBER_SB_OPT_NEEDS_READ</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5062>5062</a></td>\n' +
            '<td>Returns non-zero if input is waiting to be read.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5063>5063</a></td>\n' +
            '<td>LBER_SB_OPT_NEEDS_WRITE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5064>5064</a></td>\n' +
            '<td>Returns non-zero if the Sockbuf is ready to be written.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5065>5065</a></td>\n' +
            '<td>LBER_SB_OPT_GET_MAX_INCOMING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5066>5066</a></td>\n' +
            '<td>Returns the maximum allowed size of an incoming message; arg must be a ber_len_t *. The return value will be 1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5067>5067</a></td>\n' +
            '<td>LBER_SB_OPT_SET_MAX_INCOMING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5068>5068</a></td>\n' +
            '<td>Sets the maximum allowed size of an incoming message; arg must be a ber_len_t *. The return value will be 1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5069>5069</a></td>\n' +
            '<td>Options not in this list will be passed down to each Sockbuf_IO handler in turn until one of them processes it. If the option is not handled ber_sockbuf_ctrl() will return 0.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5070>5070</a></td>\n' +
            '<td>Multiple Sockbuf_IO handlers can be stacked in multiple layers to provide various functionality. Currently defined layers include</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5071>5071</a></td>\n' +
            '<td>LBER_SBIOD_LEVEL_PROVIDER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5072>5072</a></td>\n' +
            '<td>the lowest layer, talking directly to a network</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5073>5073</a></td>\n' +
            '<td>LBER_SBIOD_LEVEL_TRANSPORT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5074>5074</a></td>\n' +
            '<td>an intermediate layer</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5075>5075</a></td>\n' +
            '<td>LBER_SBIOD_LEVEL_APPLICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5076>5076</a></td>\n' +
            '<td>a higher layer</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5077>5077</a></td>\n' +
            '<td>Currently defined Sockbuf_IO handlers in liblber include</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5078>5078</a></td>\n' +
            '<td>ber_sockbuf_io_tcp</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5079>5079</a></td>\n' +
            '<td>The default stream-oriented provider</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5080>5080</a></td>\n' +
            '<td>ber_sockbuf_io_fd</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5081>5081</a></td>\n' +
            '<td>A stream-oriented provider for local IPC sockets</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5082>5082</a></td>\n' +
            '<td>ber_sockbuf_io_dgram</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5083>5083</a></td>\n' +
            '<td>A datagram-oriented provider. This handler is only present if the liblber library was built with LDAP_CONNECTIONLESS defined.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5084>5084</a></td>\n' +
            '<td>ber_sockbuf_io_readahead</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5085>5085</a></td>\n' +
            '<td>A buffering layer, usually used with a datagram provider to hide the datagram semantics from upper layers.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5086>5086</a></td>\n' +
            '<td>ber_sockbuf_io_debug</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5087>5087</a></td>\n' +
            '<td>A generic handler that outputs hex dumps of all traffic. This handler may be inserted multiple times at arbitrary layers to show the flow of data between other handlers.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5088>5088</a></td>\n' +
            '<td>Additional handlers may be present in libldap if support for them was enabled:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5089>5089</a></td>\n' +
            '<td>ldap_pvt_sockbuf_io_sasl</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5090>5090</a></td>\n' +
            '<td>An application layer handler for SASL encoding/decoding.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5091>5091</a></td>\n' +
            '<td>sb_tls_sbio</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5092>5092</a></td>\n' +
            '<td>A transport layer handler for SSL/TLS encoding/decoding. Note that this handler is private to the library and is not exposed in the API.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5093>5093</a></td>\n' +
            '<td>The provided handlers are all instantiated implicitly by libldap, and applications generally will not need to directly manipulate them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5094>5094</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5095>5095</a></td>\n' +
            '<td>lber-decode(3), lber-encode(3), lber-types(3), ldap_get_option(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5096>5096</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5097>5097</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5098>5098</a></td>\n' +
            '<td>LBER_TYPES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5099>5099</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5100>5100</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5101>5101</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5102>5102</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5103>5103</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5104>5104</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5105>5105</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5106>5106</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5107>5107</a></td>\n' +
            '<td>ber_int_t, ber_uint_t, ber_len_t, ber_slen_t, ber_tag_t, struct berval, BerValue, BerVarray, BerElement, ber_bvfree, ber_bvecfree, ber_bvecadd, ber_bvarray_free, ber_bvarray_add, ber_bvdup, ber_dupbv, ber_bvstr, ber_bvstrdup, ber_str2bv, ber_alloc_t, ber_init, ber_init2, ber_free − OpenLDAP LBER types and allocation functions</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5108>5108</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5109>5109</a></td>\n' +
            '<td>OpenLDAP LBER (liblber, −llber)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5110>5110</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5111>5111</a></td>\n' +
            '<td>#include &lt;lber.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5112>5112</a></td>\n' +
            '<td>typedef impl_tag_t ber_tag_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5113>5113</a></td>\n' +
            '<td>typedef impl_int_t ber_int_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5114>5114</a></td>\n' +
            '<td>typedef impl_uint_t ber_uint_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5115>5115</a></td>\n' +
            '<td>typedef impl_len_t ber_len_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5116>5116</a></td>\n' +
            '<td>typedef impl_slen_t ber_slen_t;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5117>5117</a></td>\n' +
            '<td>typedef struct berval {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5118>5118</a></td>\n' +
            '<td>ber_len_t bv_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5119>5119</a></td>\n' +
            '<td>char *bv_val;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5120>5120</a></td>\n' +
            '<td>} BerValue, *BerVarray;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5121>5121</a></td>\n' +
            '<td>typedef struct berelement BerElement;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5122>5122</a></td>\n' +
            '<td>void ber_bvfree(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5123>5123</a></td>\n' +
            '<td>void ber_bvecfree(struct berval **bvec);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5124>5124</a></td>\n' +
            '<td>void ber_bvecadd(struct berval ***bvec, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5125>5125</a></td>\n' +
            '<td>void ber_bvarray_free(struct berval *bvarray);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5126>5126</a></td>\n' +
            '<td>void ber_bvarray_add(BerVarray *bvarray, BerValue *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5127>5127</a></td>\n' +
            '<td>struct berval *ber_bvdup(const struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5128>5128</a></td>\n' +
            '<td>struct berval *ber_dupbv(const struct berval *dst, struct berval *src);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5129>5129</a></td>\n' +
            '<td>struct berval *ber_bvstr(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5130>5130</a></td>\n' +
            '<td>struct berval *ber_bvstrdup(const char *str);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5131>5131</a></td>\n' +
            '<td>struct berval *ber_str2bv(const char *str, ber_len_t len, int dup, struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5132>5132</a></td>\n' +
            '<td>BerElement *ber_alloc_t(int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5133>5133</a></td>\n' +
            '<td>BerElement *ber_init(struct berval *bv);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5134>5134</a></td>\n' +
            '<td>void ber_init2(BerElement *ber, struct berval *bv, int options);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5135>5135</a></td>\n' +
            '<td>void ber_free(BerElement *ber, int freebuf);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5136>5136</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5137>5137</a></td>\n' +
            '<td>The following are the basic types and structures defined for use with the Lightweight BER library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5138>5138</a></td>\n' +
            '<td>ber_int_t is a signed integer of at least 32 bits. It is commonly equivalent to int. ber_uint_t is the unsigned variant of ber_int_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5139>5139</a></td>\n' +
            '<td>ber_len_t is an unsigned integer of at least 32 bits used to represent a length. It is commonly equivalent to a size_t. ber_slen_t is the signed variant to ber_len_t.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5140>5140</a></td>\n' +
            '<td>ber_tag_t is an unsigned integer of at least 32 bits used to represent a BER tag. It is commonly equivalent to a unsigned long.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5141>5141</a></td>\n' +
            '<td>The actual definitions of the integral impl_TYPE_t types are platform specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5142>5142</a></td>\n' +
            '<td>BerValue, commonly used as struct berval, is used to hold an arbitrary sequence of octets. bv_val points to bv_len octets. bv_val is not necessarily terminated by a NULL (zero) octet. ber_bvfree() frees a BerValue, pointed to by bv, returned from this API. If bv is NULL, the routine does nothing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5143>5143</a></td>\n' +
            '<td>ber_bvecfree() frees an array of BerValues (and the array), pointed to by bvec, returned from this API. If bvec is NULL, the routine does nothing. ber_bvecadd() appends the bv pointer to the bvec array. Space for the array is allocated as needed. The end of the array is marked by a NULL pointer.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5144>5144</a></td>\n' +
            '<td>ber_bvarray_free() frees an array of BerValues (and the array), pointed to by bvarray, returned from this API. If bvarray is NULL, the routine does nothing. ber_bvarray_add() appends the contents of the BerValue pointed to by bv to the bvarray array. Space for the new element is allocated as needed. The end of the array is marked by a BerValue with a NULL bv_val field.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5145>5145</a></td>\n' +
            '<td>ber_bvdup() returns a copy of a BerValue. The routine returns NULL upon error (e.g. out of memory). The caller should use ber_bvfree() to deallocate the resulting BerValue. ber_dupbv() copies a BerValue from src to dst. If dst is NULL a new BerValue will be allocated to hold the copy. The routine returns NULL upon error, otherwise it returns a pointer to the copy. If dst is NULL the caller should use ber_bvfree() to deallocate the resulting BerValue, otherwise ber_memfree() should be used to deallocate the dst-&gt;bv_val. (The ber_bvdup() function is internally implemented as ber_dupbv(NULL, bv). ber_bvdup() is provided only for compatibility with an expired draft of the LDAP C API; ber_dupbv() is the preferred interface.)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5146>5146</a></td>\n' +
            '<td>ber_bvstr() returns a BerValue containing the string pointed to by str. ber_bvstrdup() returns a BerValue containing a copy of the string pointed to by str. ber_str2bv() returns a BerValue containing the string pointed to by str, whose length may be optionally specified in len. If dup is non-zero, the BerValue will contain a copy of str. If len is zero, the number of bytes to copy will be determined by strlen(3), otherwise len bytes will be copied. If bv is non-NULL, the result will be stored in the given BerValue, otherwise a new BerValue will be allocated to store the result. NOTE: Both ber_bvstr() and ber_bvstrdup() are implemented as macros using ber_str2bv() in this version of the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5147>5147</a></td>\n' +
            '<td>BerElement is an opaque structure used to maintain state information used in encoding and decoding. ber_alloc_t() is used to create an empty BerElement structure. If LBER_USE_DER is specified for the options parameter then data lengths for data written to the BerElement will be encoded in the minimal number of octets required, otherwise they will always be written as four byte values. ber_init() creates a BerElement structure that is initialized with a copy of the data in its bv parameter. ber_init2() initializes an existing BerElement ber using the data in the bv parameter. The data is referenced directly, not copied. The options parameter is the same as for ber_alloc_t(). ber_free() frees a BerElement pointed to by ber. If ber is NULL, the routine does nothing. If freebuf is zero, the internal buffer is not freed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5148>5148</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5149>5149</a></td>\n' +
            '<td>lber-encode(3), lber-decode(3), lber-memory(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5150>5150</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5151>5151</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5152>5152</a></td>\n' +
            '<td>LDAP_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5153>5153</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5154>5154</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5155>5155</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5156>5156</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5157>5157</a></td>\n' +
            '<td>PROTOCOL RESULT CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5158>5158</a></td>\n' +
            '<td>API ERROR CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5159>5159</a></td>\n' +
            '<td>DEPRECATED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5160>5160</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5161>5161</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5162>5162</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5163>5163</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5164>5164</a></td>\n' +
            '<td>ldap_perror, ld_errno, ldap_result2error, ldap_errlist, ldap_err2string − LDAP protocol error handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5165>5165</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5166>5166</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5167>5167</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5168>5168</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5169>5169</a></td>\n' +
            '<td>char *ldap_err2string( int err );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5170>5170</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5171>5171</a></td>\n' +
            '<td>The ldap_err2string() routine provides short description of the various codes returned by routines in this library. The returned string is a pointer to a static area that should not be modified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5172>5172</a></td>\n' +
            '<td>These codes are either negative, indicating an API error code; positive, indicating an LDAP resultCode other than ´success’ (0), or - zero, indicating both successful use of the API and the LDAP resultCode ´success’ (0).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5173>5173</a></td>\n' +
            '<td>The code associated with an LDAP session is accessible using ldap_get_option(3) and ldap_set_option(3) with the LDAP_OPT_RESULT_CODE option (previously called LDAP_OPT_ERROR_NUMBER).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5174>5174</a></td>\n' +
            '<td>PROTOCOL RESULT CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5175>5175</a></td>\n' +
            '<td>This section provides a partial list of protocol codes recognized by the library. As LDAP is extensible, additional values may be returned. A complete listing of registered LDAP result codes can be obtained from the Internet Assigned Numbers Authority &lt;http://www.iana.org&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5176>5176</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5177>5177</a></td>\n' +
            '<td>LDAP_SUCCESS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5178>5178</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5179>5179</a></td>\n' +
            '<td>The request was successful.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5180>5180</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5181>5181</a></td>\n' +
            '<td>LDAP_OPERATIONS_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5182>5182</a></td>\n' +
            '<td>An operations error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5183>5183</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5184>5184</a></td>\n' +
            '<td>LDAP_PROTOCOL _ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5185>5185</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5186>5186</a></td>\n' +
            '<td>A protocol violation was detected.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5187>5187</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5188>5188</a></td>\n' +
            '<td>LDAP_TIMELIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5189>5189</a></td>\n' +
            '<td>An LDAP time limit was exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5190>5190</a></td>\n' +
            '<td>LDAP_SIZELIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5191>5191</a></td>\n' +
            '<td>An LDAP size limit was exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5192>5192</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5193>5193</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5194>5194</a></td>\n' +
            '<td>_FALSE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5195>5195</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5196>5196</a></td>\n' +
            '<td>A compare operation returned false.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5197>5197</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5198>5198</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5199>5199</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5200>5200</a></td>\n' +
            '<td>_TRUE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5201>5201</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5202>5202</a></td>\n' +
            '<td>A compare operation returned true.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5203>5203</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5204>5204</a></td>\n' +
            '<td>LDAP_STRONG_AUTH_NOT_SUPPORTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5205>5205</a></td>\n' +
            '<td>The LDAP server does not support strong authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5206>5206</a></td>\n' +
            '<td>LDAP_STRONG_AUTH_REQUIRED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5207>5207</a></td>\n' +
            '<td>Strong authentication is required for the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5208>5208</a></td>\n' +
            '<td>LDAP_PARTIAL_RESULTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5209>5209</a></td>\n' +
            '<td>Partial results only returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5210>5210</a></td>\n' +
            '<td>LDAP_NO_SUCH_ATTRIBUTE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5211>5211</a></td>\n' +
            '<td>The attribute type specified does not exist in the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5212>5212</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5213>5213</a></td>\n' +
            '<td>LDAP_UNDEFINED_T YPE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5214>5214</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5215>5215</a></td>\n' +
            '<td>The attribute type specified is invalid.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5216>5216</a></td>\n' +
            '<td>LDAP_INAPPROPRIATE_MATCHING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5217>5217</a></td>\n' +
            '<td>Filter type not supported for the specified attribute.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5218>5218</a></td>\n' +
            '<td>LDAP_CONSTRAINT_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5219>5219</a></td>\n' +
            '<td>An attribute value specified violates some constraint (e.g., a postalAddress has too many lines, or a line that is too long).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5220>5220</a></td>\n' +
            '<td>LDAP_TYPE_OR_VALUE_EXISTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5221>5221</a></td>\n' +
            '<td>An attribute type or attribute value specified already exists in the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5222>5222</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5223>5223</a></td>\n' +
            '<td>LDAP_INVALID_SYN TAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5224>5224</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5225>5225</a></td>\n' +
            '<td>An invalid attribute value was specified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5226>5226</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5227>5227</a></td>\n' +
            '<td>LDAP_NO_SUCH_OB JECT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5228>5228</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5229>5229</a></td>\n' +
            '<td>The specified object does not exist in The Directory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5230>5230</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5231>5231</a></td>\n' +
            '<td>LDAP_ALIAS_PROBL EM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5232>5232</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5233>5233</a></td>\n' +
            '<td>An alias in The Directory points to a nonexistent entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5234>5234</a></td>\n' +
            '<td>LDAP_INVALID_DN_SYNTAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5235>5235</a></td>\n' +
            '<td>A syntactically invalid DN was specified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5236>5236</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5237>5237</a></td>\n' +
            '<td>LDAP_IS_LEAF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5238>5238</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5239>5239</a></td>\n' +
            '<td>The object specified is a leaf.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5240>5240</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5241>5241</a></td>\n' +
            '<td>LDAP_ALIAS_DEREF_PROBLEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5242>5242</a></td>\n' +
            '<td>A problem was encountered when dereferencing an alias.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5243>5243</a></td>\n' +
            '<td>LDAP_INAPPROPRIATE_AUTH</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5244>5244</a></td>\n' +
            '<td>Inappropriate authentication was specified (e.g., LDAP_AUTH_SIMPLE was specified and the entry does not have a userPassword attribute).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5245>5245</a></td>\n' +
            '<td>LDAP_INVALID_CREDENTIALS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5246>5246</a></td>\n' +
            '<td>Invalid credentials were presented (e.g., the wrong password).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5247>5247</a></td>\n' +
            '<td>LDAP_INSUFFICIENT_ACCESS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5248>5248</a></td>\n' +
            '<td>The user has insufficient access to perform the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5249>5249</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5250>5250</a></td>\n' +
            '<td>LDAP_BUSY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5251>5251</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5252>5252</a></td>\n' +
            '<td>The DSA is busy.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5253>5253</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5254>5254</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5255>5255</a></td>\n' +
            '<td>LDAP_UNAVAILA BLE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5256>5256</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5257>5257</a></td>\n' +
            '<td>The DSA is unavailable.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5258>5258</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5259>5259</a></td>\n' +
            '<td>LDAP_UNWILLING_TO_PERFORM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5260>5260</a></td>\n' +
            '<td>The DSA is unwilling to perform the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5261>5261</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5262>5262</a></td>\n' +
            '<td>LDAP_LOOP_DE TECT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5263>5263</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5264>5264</a></td>\n' +
            '<td>A loop was detected.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5265>5265</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5266>5266</a></td>\n' +
            '<td>LDAP_NAMING_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5267>5267</a></td>\n' +
            '<td>A naming violation occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5268>5268</a></td>\n' +
            '<td>LDAP_OBJECT_CLASS_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5269>5269</a></td>\n' +
            '<td>An object class violation occurred (e.g., a "must" attribute was missing from the entry).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5270>5270</a></td>\n' +
            '<td>LDAP_NOT_ALLOWED_ON_NONLEAF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5271>5271</a></td>\n' +
            '<td>The operation is not allowed on a nonleaf object.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5272>5272</a></td>\n' +
            '<td>LDAP_NOT_ALLOWED_ON_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5273>5273</a></td>\n' +
            '<td>The operation is not allowed on an RDN.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5274>5274</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5275>5275</a></td>\n' +
            '<td>LDAP_ALREADY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5276>5276</a></td>\n' +
            '<td>_EXISTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5277>5277</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5278>5278</a></td>\n' +
            '<td>The entry already exists.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5279>5279</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5280>5280</a></td>\n' +
            '<td>LDAP_NO_OBJECT_CLASS_MODS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5281>5281</a></td>\n' +
            '<td>Object class modifications are not allowed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5282>5282</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5283>5283</a></td>\n' +
            '<td>LDAP_OTHER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5284>5284</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5285>5285</a></td>\n' +
            '<td>An unknown error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5286>5286</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5287>5287</a></td>\n' +
            '<td>API ERROR CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5288>5288</a></td>\n' +
            '<td>This section provides a complete list of API error codes recognized by the library. Note that LDAP_SUCCESS indicates success of an API call in addition to representing the return of the LDAP ´success’ resultCode.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5289>5289</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5290>5290</a></td>\n' +
            '<td>LDAP_SERVER_DOWN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5291>5291</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5292>5292</a></td>\n' +
            '<td>The LDAP library can’t contact the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5293>5293</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5294>5294</a></td>\n' +
            '<td>LDAP_LOCAL_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5295>5295</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5296>5296</a></td>\n' +
            '<td>Some local error occurred. This is usually a failed dynamic memory allocation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5297>5297</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5298>5298</a></td>\n' +
            '<td>LDAP_ENCODING_ER ROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5299>5299</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5300>5300</a></td>\n' +
            '<td>An error was encountered encoding parameters to send to the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5301>5301</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5302>5302</a></td>\n' +
            '<td>LDAP_DECODING_ER ROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5303>5303</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5304>5304</a></td>\n' +
            '<td>An error was encountered decoding a result from the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5305>5305</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5306>5306</a></td>\n' +
            '<td>LDAP_TIMEOUT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5307>5307</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5308>5308</a></td>\n' +
            '<td>A timelimit was exceeded while waiting for a result.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5309>5309</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5310>5310</a></td>\n' +
            '<td>LDAP_AUTH_UNKNOW N</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5311>5311</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5312>5312</a></td>\n' +
            '<td>The authentication method specified to ldap_bind() is not known.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5313>5313</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5314>5314</a></td>\n' +
            '<td>LDAP_FILTER_ERRO R</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5315>5315</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5316>5316</a></td>\n' +
            '<td>An invalid filter was supplied to ldap_search() (e.g., unbalanced parentheses).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5317>5317</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5318>5318</a></td>\n' +
            '<td>LDAP_PARAM_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5319>5319</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5320>5320</a></td>\n' +
            '<td>An ldap routine was called with a bad parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5321>5321</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5322>5322</a></td>\n' +
            '<td>LDAP_NO_MEMORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5323>5323</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5324>5324</a></td>\n' +
            '<td>An memory allocation (e.g., malloc(3) or other dynamic memory allocator) call failed in an ldap library routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5325>5325</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5326>5326</a></td>\n' +
            '<td>LDAP_USER_CANCEL ED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5327>5327</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5328>5328</a></td>\n' +
            '<td>Indicates the user cancelled the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5329>5329</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5330>5330</a></td>\n' +
            '<td>LDAP_CONNECT_ERR OR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5331>5331</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5332>5332</a></td>\n' +
            '<td>Indicates a connection problem.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5333>5333</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5334>5334</a></td>\n' +
            '<td>LDAP_NOT_SUPPORT ED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5335>5335</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5336>5336</a></td>\n' +
            '<td>Indicates the routine was called in a manner not supported by the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5337>5337</a></td>\n' +
            '<td>LDAP_CONTROL_NOT_FOUND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5338>5338</a></td>\n' +
            '<td>Indicates the control provided is unknown to the client library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5339>5339</a></td>\n' +
            '<td>LDAP_NO_RESULTS_RETURNED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5340>5340</a></td>\n' +
            '<td>Indicates no results returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5341>5341</a></td>\n' +
            '<td>LDAP_MORE_RESULTS_TO_RETURN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5342>5342</a></td>\n' +
            '<td>Indicates more results could be returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5343>5343</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5344>5344</a></td>\n' +
            '<td>LDAP_CLIENT_LOOP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5345>5345</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5346>5346</a></td>\n' +
            '<td>Indicates the library has detected a loop in its processing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5347>5347</a></td>\n' +
            '<td>LDAP_REFERRAL_LIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5348>5348</a></td>\n' +
            '<td>Indicates the referral limit has been exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5349>5349</a></td>\n' +
            '<td>DEPRECATED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5350>5350</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5351>5351</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5352>5352</a></td>\n' +
            '<td>ldap(3),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5353>5353</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5354>5354</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5355>5355</a></td>\n' +
            '<td>LDAP.CONF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5356>5356</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5357>5357</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5358>5358</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5359>5359</a></td>\n' +
            '<td>SYNTAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5360>5360</a></td>\n' +
            '<td>OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5361>5361</a></td>\n' +
            '<td>SASL OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5362>5362</a></td>\n' +
            '<td>GSSAPI OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5363>5363</a></td>\n' +
            '<td>TLS OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5364>5364</a></td>\n' +
            '<td>ENVIRONMENT VARIABLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5365>5365</a></td>\n' +
            '<td>FILES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5366>5366</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5367>5367</a></td>\n' +
            '<td>AUTHOR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5368>5368</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5369>5369</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5370>5370</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5371>5371</a></td>\n' +
            '<td>ldap.conf, .ldaprc − LDAP configuration file/environment variables</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5372>5372</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5373>5373</a></td>\n' +
            '<td>/etc/openldap/ldap.conf, ldaprc, .ldaprc, $LDAP&lt;option-name&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5374>5374</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5375>5375</a></td>\n' +
            '<td>If the environment variable LDAPNOINIT is defined, all defaulting is disabled.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5376>5376</a></td>\n' +
            '<td>The ldap.conf configuration file is used to set system-wide defaults to be applied when running ldap clients.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5377>5377</a></td>\n' +
            '<td>Users may create an optional configuration file, ldaprc or .ldaprc, in their home directory which will be used to override the system-wide defaults file. The file ldaprc in the current working directory is also used.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5378>5378</a></td>\n' +
            '<td>Additional configuration files can be specified using the LDAPCONF and LDAPRC environment variables. LDAPCONF may be set to the path of a configuration file. This path can be absolute or relative to the current working directory. The LDAPRC, if defined, should be the basename of a file in the current working directory or in the user’s home directory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5379>5379</a></td>\n' +
            '<td>Environmental variables may also be used to augment the file based defaults. The name of the variable is the option name with an added prefix of LDAP. For example, to define BASE via the environment, set the variable LDAPBASE to the desired value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5380>5380</a></td>\n' +
            '<td>Some options are user-only. Such options are ignored if present in the ldap.conf (or file specified by LDAPCONF).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5381>5381</a></td>\n' +
            '<td>Thus the following files and variables are read, in order:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5382>5382</a></td>\n' +
            '<td>variable $LDAPNOINIT, and if that is not set:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5383>5383</a></td>\n' +
            '<td>system file /etc/openldap/ldap.conf,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5384>5384</a></td>\n' +
            '<td>user files $HOME/ldaprc, $HOME/.ldaprc, ./ldaprc,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5385>5385</a></td>\n' +
            '<td>system file $LDAPCONF,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5386>5386</a></td>\n' +
            '<td>user files $HOME/$LDAPRC, $HOME/.$LDAPRC, ./$LDAPRC,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5387>5387</a></td>\n' +
            '<td>variables $LDAP&lt;uppercase option name&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5388>5388</a></td>\n' +
            '<td>Settings late in the list override earlier ones.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5389>5389</a></td>\n' +
            '<td>SYNTAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5390>5390</a></td>\n' +
            '<td>The configuration options are case-insensitive; their value, on a case by case basis, may be case-sensitive.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5391>5391</a></td>\n' +
            '<td>Blank lines are ignored.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5392>5392</a></td>\n' +
            '<td>Lines beginning with a hash mark (‘#’) are comments, and ignored.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5393>5393</a></td>\n' +
            '<td>Valid lines are made of an option’s name (a sequence of non-blanks, conventionally written in uppercase, although not required), followed by a value. The value starts with the first non-blank character after the option’s name, and terminates at the end of the line, or at the last sequence of blanks before the end of the line. The tokenization of the value, if any, is delegated to the handler(s) for that option, if any. Quoting values that contain blanks may be incorrect, as the quotes would become part of the value. For example,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5394>5394</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5395>5395</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5396>5396</a></td>\n' +
            '<td># Wrong - erroneous quotes:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5397>5397</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5398>5398</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5399>5399</a></td>\n' +
            '<td>URI "ldap:// ldaps://"</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5400>5400</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5401>5401</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5402>5402</a></td>\n' +
            '<td># Right - space-separated list of URIs, without quotes:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5403>5403</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5404>5404</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5405>5405</a></td>\n' +
            '<td>URI ldap:// ldaps://</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5406>5406</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5407>5407</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5408>5408</a></td>\n' +
            '<td># Right - DN syntax needs quoting for Example, Inc:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5409>5409</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5410>5410</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5411>5411</a></td>\n' +
            '<td>BASE ou=IT staff,o="Example, Inc",c=US</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5412>5412</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5413>5413</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5414>5414</a></td>\n' +
            '<td># or:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5415>5415</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5416>5416</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5417>5417</a></td>\n' +
            '<td>BASE ou=IT staff,o=Example2C Inc,c=US</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5418>5418</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5419>5419</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5420>5420</a></td>\n' +
            '<td># Wrong - comment on same line as option:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5421>5421</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5422>5422</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5423>5423</a></td>\n' +
            '<td>DEREF never # Never follow aliases</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5424>5424</a></td>\n' +
            '<td>A line cannot be longer than LINE_MAX, which should be more than 2000 bytes on all platforms. There is no mechanism to split a long line on multiple lines, either for beautification or to overcome the above limit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5425>5425</a></td>\n' +
            '<td>OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5426>5426</a></td>\n' +
            '<td>The different configuration options are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5427>5427</a></td>\n' +
            '<td>URI &lt;ldap[si]://[name[:port]] ...&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5428>5428</a></td>\n' +
            '<td>Specifies the URI(s) of an LDAP server(s) to which the LDAP library should connect. The URI scheme may be any of ldap, ldaps or ldapi, which refer to LDAP over TCP, LDAP over SSL (TLS) and LDAP over IPC (UNIX domain sockets), respectively. Each server’s name can be specified as a domain-style name or an IP address literal. Optionally, the server’s name can followed by a ’:’ and the port number the LDAP server is listening on. If no port number is provided, the default port for the scheme is used (389 for ldap://, 636 for ldaps://). For LDAP over IPC, name is the name of the socket, and no port is required, nor allowed; note that directory separators must be URL-encoded, like any other characters that are special to URLs; so the socket</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5429>5429</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5430>5430</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5431>5431</a></td>\n' +
            '<td>/usr/local/var/ldapi</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5432>5432</a></td>\n' +
            '<td>must be specified as</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5433>5433</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5434>5434</a></td>\n' +
            '<td>ldapi://%2Fusr%2Flocal%2Fvar%2Fldapi</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5435>5435</a></td>\n' +
            '<td>A space separated list of URIs may be provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5436>5436</a></td>\n' +
            '<td>BASE &lt;base&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5437>5437</a></td>\n' +
            '<td>Specifies the default base DN to use when performing ldap operations. The base must be specified as a Distinguished Name in LDAP format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5438>5438</a></td>\n' +
            '<td>BINDDN &lt;dn&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5439>5439</a></td>\n' +
            '<td>Specifies the default bind DN to use when performing ldap operations. The bind DN must be specified as a Distinguished Name in LDAP format. This is a user-only option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5440>5440</a></td>\n' +
            '<td>DEREF &lt;when&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5441>5441</a></td>\n' +
            '<td>Specifies how alias dereferencing is done when performing a search. The &lt;when&gt; can be specified as one of the following keywords:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5442>5442</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5443>5443</a></td>\n' +
            '<td>never</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5444>5444</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5445>5445</a></td>\n' +
            '<td>Aliases are never dereferenced. This is the default.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5446>5446</a></td>\n' +
            '<td>searching</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5447>5447</a></td>\n' +
            '<td>Aliases are dereferenced in subordinates of the base object, but not in locating the base object of the search.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5448>5448</a></td>\n' +
            '<td>finding</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5449>5449</a></td>\n' +
            '<td>Aliases are only dereferenced when locating the base object of the search.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5450>5450</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5451>5451</a></td>\n' +
            '<td>always</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5452>5452</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5453>5453</a></td>\n' +
            '<td>Aliases are dereferenced both in searching and in locating the base object of the search.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5454>5454</a></td>\n' +
            '<td>HOST &lt;name[:port] ...&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5455>5455</a></td>\n' +
            '<td>Specifies the name(s) of an LDAP server(s) to which the LDAP library should connect. Each server’s name can be specified as a domain-style name or an IP address and optionally followed by a ’:’ and the port number the ldap server is listening on. A space separated list of hosts may be provided. HOST is deprecated in favor of URI.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5456>5456</a></td>\n' +
            '<td>NETWORK_TIMEOUT &lt;integer&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5457>5457</a></td>\n' +
            '<td>Specifies the timeout (in seconds) after which the poll(2)/select(2) following a connect(2) returns in case of no activity.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5458>5458</a></td>\n' +
            '<td>PORT &lt;port&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5459>5459</a></td>\n' +
            '<td>Specifies the default port used when connecting to LDAP servers(s). The port may be specified as a number. PORT is deprecated in favor of URI.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5460>5460</a></td>\n' +
            '<td>REFERRALS &lt;on/true/yes/off/false/no&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5461>5461</a></td>\n' +
            '<td>Specifies if the client should automatically follow referrals returned by LDAP servers. The default is on. Note that the command line tools ldapsearch(1) &amp;co always override this option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5462>5462</a></td>\n' +
            '<td>SIZELIMIT &lt;integer&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5463>5463</a></td>\n' +
            '<td>Specifies a size limit (number of entries) to use when performing searches. The number should be a non-negative integer. SIZELIMIT of zero (0) specifies a request for unlimited search size. Please note that the server may still apply any server-side limit on the amount of entries that can be returned by a search operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5464>5464</a></td>\n' +
            '<td>TIMELIMIT &lt;integer&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5465>5465</a></td>\n' +
            '<td>Specifies a time limit (in seconds) to use when performing searches. The number should be a non-negative integer. TIMELIMIT of zero (0) specifies unlimited search time to be used. Please note that the server may still apply any server-side limit on the duration of a search operation. VERSION {2|3} Specifies what version of the LDAP protocol should be used.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5466>5466</a></td>\n' +
            '<td>TIMEOUT &lt;integer&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5467>5467</a></td>\n' +
            '<td>Specifies a timeout (in seconds) after which calls to synchronous LDAP APIs will abort if no response is received. Also used for any ldap_result(3) calls where a NULL timeout parameter is supplied.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5468>5468</a></td>\n' +
            '<td>SASL OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5469>5469</a></td>\n' +
            '<td>If OpenLDAP is built with Simple Authentication and Security Layer support, there are more options you can specify.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5470>5470</a></td>\n' +
            '<td>SASL_MECH &lt;mechanism&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5471>5471</a></td>\n' +
            '<td>Specifies the SASL mechanism to use. This is a user-only option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5472>5472</a></td>\n' +
            '<td>SASL_REALM &lt;realm&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5473>5473</a></td>\n' +
            '<td>Specifies the SASL realm. This is a user-only option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5474>5474</a></td>\n' +
            '<td>SASL_AUTHCID &lt;authcid&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5475>5475</a></td>\n' +
            '<td>Specifies the authentication identity. This is a user-only option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5476>5476</a></td>\n' +
            '<td>SASL_AUTHZID &lt;authcid&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5477>5477</a></td>\n' +
            '<td>Specifies the proxy authorization identity. This is a user-only option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5478>5478</a></td>\n' +
            '<td>SASL_SECPROPS &lt;properties&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5479>5479</a></td>\n' +
            '<td>Specifies Cyrus SASL security properties. The &lt;properties&gt; can be specified as a comma-separated list of the following:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5480>5480</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5481>5481</a></td>\n' +
            '<td>none</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5482>5482</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5483>5483</a></td>\n' +
            '<td>(without any other properties) causes the properties defaults ("noanonymous,nopl ain") to be cleared.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5484>5484</a></td>\n' +
            '<td>noplain</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5485>5485</a></td>\n' +
            '<td>disables mechanisms susceptible to simple passive attacks.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5486>5486</a></td>\n' +
            '<td>noactive</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5487>5487</a></td>\n' +
            '<td>disables mechanisms susceptible to active attacks.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5488>5488</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5489>5489</a></td>\n' +
            '<td>nodict</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5490>5490</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5491>5491</a></td>\n' +
            '<td>disables mechanisms susceptible to passive dictionary attacks.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5492>5492</a></td>\n' +
            '<td>noanonymous</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5493>5493</a></td>\n' +
            '<td>disables mechanisms which support anonymous login.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5494>5494</a></td>\n' +
            '<td>forwardsec</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5495>5495</a></td>\n' +
            '<td>requires forward secrecy between sessions.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5496>5496</a></td>\n' +
            '<td>passcred</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5497>5497</a></td>\n' +
            '<td>requires mechanisms which pass client credentials (and allows mechanisms which can pass credentials to do so).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5498>5498</a></td>\n' +
            '<td>minssf=&lt;factor&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5499>5499</a></td>\n' +
            '<td>specifies the minimum acceptable security strength factor as an integer approximating the effective key length used for encryption. 0 (zero) implies no protection, 1 implies integrity protection only, 56 allows DES or other weak ciphers, 112 allows triple DES and other strong ciphers, 128 allows RC4, Blowfish and other modern strong ciphers. The default is 0.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5500>5500</a></td>\n' +
            '<td>maxssf=&lt;factor&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5501>5501</a></td>\n' +
            '<td>specifies the maximum acceptable security strength factor as an integer (see minssf description). The default is INT_MAX.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5502>5502</a></td>\n' +
            '<td>maxbufsize=&lt;factor&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5503>5503</a></td>\n' +
            '<td>specifies the maximum security layer receive buffer size allowed. 0 disables security layers. The default is 65536.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5504>5504</a></td>\n' +
            '<td>GSSAPI OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5505>5505</a></td>\n' +
            '<td>If OpenLDAP is built with Generic Security Services Application Programming Interface support, there are more options you can specify.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5506>5506</a></td>\n' +
            '<td>GSSAPI_SIGN &lt;on/true/yes/off/false/no&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5507>5507</a></td>\n' +
            '<td>Specifies if GSSAPI signing (GSS_C_INTEG_FLAG) should be used. The default is off.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5508>5508</a></td>\n' +
            '<td>GSSAPI_ENCRYPT &lt;on/true/yes/off/false/no&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5509>5509</a></td>\n' +
            '<td>Specifies if GSSAPI encryption (GSS_C_INTEG_FLAG and GSS_C_CONF_FLAG) should be used. The default is off.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5510>5510</a></td>\n' +
            '<td>GSSAPI_ALLOW_REMOTE_PRINCIPAL &lt;on/true/yes/off/false/no&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5511>5511</a></td>\n' +
            '<td>Specifies if GSSAPI based authentication should try to form the target principal name out of the ldapServiceName or dnsHostName attribute of the targets RootDSE entry. The default is off.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5512>5512</a></td>\n' +
            '<td>TLS OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5513>5513</a></td>\n' +
            '<td>If OpenLDAP is built with Transport Layer Security support, there are more options you can specify. These options are used when an ldaps:// URI is selected (by default or otherwise) or when the application negotiates TLS by issuing the LDAP StartTLS operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5514>5514</a></td>\n' +
            '<td>TLS_CACERT &lt;filename&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5515>5515</a></td>\n' +
            '<td>Specifies the file that contains certificates for all of the Certificate Authorities the client will recognize.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5516>5516</a></td>\n' +
            '<td>TLS_CACERTDIR &lt;path&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5517>5517</a></td>\n' +
            '<td>Specifies the path of a directory that contains Certificate Authority certificates in separate individual files. The TLS_CACERT is always used before TLS_CACERTDIR. This parameter is ignored with GnuTLS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5518>5518</a></td>\n' +
            '<td>When using Mozilla NSS, &lt;path&gt; may contain a Mozilla NSS cert/key database. If &lt;path&gt; contains a Mozilla NSS cert/key database and CA cert files, OpenLDAP will use the cert/key database and will ignore the CA cert files.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5519>5519</a></td>\n' +
            '<td>TLS_CERT &lt;filename&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5520>5520</a></td>\n' +
            '<td>Specifies the file that contains the client certificate. This is a user-only option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5521>5521</a></td>\n' +
            '<td>When using Mozilla NSS, if using a cert/key database (specified with TLS_CACERTDIR), TLS_CERT specifies the name of the certificate to use:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5522>5522</a></td>\n' +
            '<td>TLS_CERT Certificate for Sam Carter</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5523>5523</a></td>\n' +
            '<td>If using a token other than the internal built in token, specify the token name first, followed by a colon:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5524>5524</a></td>\n' +
            '<td>TLS_CERT my hardware device:Certificate for Sam Carter</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5525>5525</a></td>\n' +
            '<td>Use certutil -L to list the certificates by name:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5526>5526</a></td>\n' +
            '<td>certutil -d /path/to/certdbdir -L</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5527>5527</a></td>\n' +
            '<td>TLS_KEY &lt;filename&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5528>5528</a></td>\n' +
            '<td>Specifies the file that contains the private key that matches the certificate stored in the TLS_CERT file. Currently, the private key must not be protected with a password, so it is of critical importance that the key file is protected carefully. This is a user-only option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5529>5529</a></td>\n' +
            '<td>When using Mozilla NSS, TLS_KEY specifies the name of a file that contains the password for the key for the certificate specified with TLS_CERT. The modutil command can be used to turn off password protection for the cert/key database. For example, if TLS_CACERTDIR specifies /home/scarter/.moznss as the location of the cert/key database, use modutil to change the password to the empty string:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5530>5530</a></td>\n' +
            '<td>modutil -dbdir ~/.moznss -changepw ’NSS Certificate DB’</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5531>5531</a></td>\n' +
            '<td>You must have the old password, if any. Ignore the WARNING about the running browser. Press ’Enter’ for the new password.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5532>5532</a></td>\n' +
            '<td>TLS_CIPHER_SUITE &lt;cipher-suite-spec&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5533>5533</a></td>\n' +
            '<td>Specifies acceptable cipher suite and preference order. &lt;cipher-suite-spec&gt; should be a cipher specification for the TLS library in use (OpenSSL, GnuTLS, or Mozilla NSS). Example:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5534>5534</a></td>\n' +
            '<td>OpenSSL:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5535>5535</a></td>\n' +
            '<td>TLS_CIPHER_SUITE HIGH:MEDIUM:+SSLv2</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5536>5536</a></td>\n' +
            '<td>GnuTLS:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5537>5537</a></td>\n' +
            '<td>TLS_CIPHER_SUITE SECURE256:!AES-128-CBC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5538>5538</a></td>\n' +
            '<td>To check what ciphers a given spec selects in OpenSSL, use:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5539>5539</a></td>\n' +
            '<td>openssl ciphers −v &lt;cipher-suite-spec&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5540>5540</a></td>\n' +
            '<td>With GnuTLS the available specs can be found in the manual page of gnutls−cli(1) (see the description of the option −−priority).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5541>5541</a></td>\n' +
            '<td>In older versions of GnuTLS, where gnutls−cli does not support the option −−priority, you can obtain the — more limited — list of ciphers by calling:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5542>5542</a></td>\n' +
            '<td>gnutls−cli −l</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5543>5543</a></td>\n' +
            '<td>When using Mozilla NSS, the OpenSSL cipher suite specifications are used and translated into the format used internally by Mozilla NSS. There isn’t an easy way to list the cipher suites from the command line. The authoritative list is in the source code for Mozilla NSS in the file sslinfo.c in the structure</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5544>5544</a></td>\n' +
            '<td>static const SSLCipherSuiteInfo suiteInfo[]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5545>5545</a></td>\n' +
            '<td>TLS_PROTOCOL_MIN &lt;major&gt;[.&lt;minor&gt;]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5546>5546</a></td>\n' +
            '<td>Specifies minimum SSL/TLS protocol version that will be negotiated. If the server doesn’t support at least that version, the SSL handshake will fail. To require TLS 1.x or higher, set this option to 3.(x+1), e.g.,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5547>5547</a></td>\n' +
            '<td>TLS_PROTOCOL_MIN 3.2</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5548>5548</a></td>\n' +
            '<td>would require TLS 1.1. Specifying a minimum that is higher than that supported by the OpenLDAP implementation will result in it requiring the highest level that it does support. This parameter is ignored with GnuTLS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5549>5549</a></td>\n' +
            '<td>TLS_RANDFILE &lt;filename&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5550>5550</a></td>\n' +
            '<td>Specifies the file to obtain random bits from when /dev/[u]random is not available. Generally set to the name of the EGD/PRNGD socket. The environment variable RANDFILE can also be used to specify the filename. This parameter is ignored with GnuTLS and Mozilla NSS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5551>5551</a></td>\n' +
            '<td>TLS_REQCERT &lt;level&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5552>5552</a></td>\n' +
            '<td>Specifies what checks to perform on server certificates in a TLS session, if any. The &lt;level&gt; can be specified as one of the following keywords:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5553>5553</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5554>5554</a></td>\n' +
            '<td>never</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5555>5555</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5556>5556</a></td>\n' +
            '<td>The client will not request or check any server certificate.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5557>5557</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5558>5558</a></td>\n' +
            '<td>allow</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5559>5559</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5560>5560</a></td>\n' +
            '<td>The server certificate is requested. If no certificate is provided, the session proceeds normally. If a bad certificate is provided, it will be ignored and the session proceeds normally.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5561>5561</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5562>5562</a></td>\n' +
            '<td>try</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5563>5563</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5564>5564</a></td>\n' +
            '<td>The server certificate is requested. If no certificate is provided, the session proceeds normally. If a bad certificate is provided, the session is immediately terminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5565>5565</a></td>\n' +
            '<td>demand | hard</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5566>5566</a></td>\n' +
            '<td>These keywords are equivalent. The server certificate is requested. If no certificate is provided, or a bad certificate is provided, the session is immediately terminated. This is the default setting.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5567>5567</a></td>\n' +
            '<td>TLS_CRLCHECK &lt;level&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5568>5568</a></td>\n' +
            '<td>Specifies if the Certificate Revocation List (CRL) of the CA should be used to verify if the server certificates have not been revoked. This requires TLS_CACERTDIR parameter to be set. This parameter is ignored with GnuTLS and Mozilla NSS. &lt;level&gt; can be specified as one of the following keywords:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5569>5569</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5570>5570</a></td>\n' +
            '<td>none</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5571>5571</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5572>5572</a></td>\n' +
            '<td>No CRL checks are performed</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5573>5573</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5574>5574</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5575>5575</a></td>\n' +
            '<td>peer</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5576>5576</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5577>5577</a></td>\n' +
            '<td>Check the CRL of the peer certificate</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5578>5578</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5579>5579</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5580>5580</a></td>\n' +
            '<td>all</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5581>5581</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5582>5582</a></td>\n' +
            '<td>Check the CRL for a whole certificate chain</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5583>5583</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5584>5584</a></td>\n' +
            '<td>TLS_CRLFILE &lt;filename&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5585>5585</a></td>\n' +
            '<td>Specifies the file containing a Certificate Revocation List to be used to verify if the server certificates have not been revoked. This parameter is only supported with GnuTLS and Mozilla NSS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5586>5586</a></td>\n' +
            '<td>ENVIRONMENT VARIABLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5587>5587</a></td>\n' +
            '<td>LDAPNOINIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5588>5588</a></td>\n' +
            '<td>disable all defaulting</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5589>5589</a></td>\n' +
            '<td>LDAPCONF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5590>5590</a></td>\n' +
            '<td>path of a configuration file</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5591>5591</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5592>5592</a></td>\n' +
            '<td>LDAPRC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5593>5593</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5594>5594</a></td>\n' +
            '<td>basename of ldaprc file in $HOME or $CWD</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5595>5595</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5596>5596</a></td>\n' +
            '<td>LDAP&lt;option-name&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5597>5597</a></td>\n' +
            '<td>Set &lt;option-name&gt; as from ldap.conf</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5598>5598</a></td>\n' +
            '<td>FILES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5599>5599</a></td>\n' +
            '<td>/etc/openldap/ldap.conf</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5600>5600</a></td>\n' +
            '<td>system-wide ldap configuration file</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5601>5601</a></td>\n' +
            '<td>$HOME/ldaprc, $HOME/.ldaprc</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5602>5602</a></td>\n' +
            '<td>user ldap configuration file</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5603>5603</a></td>\n' +
            '<td>$CWD/ldaprc</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5604>5604</a></td>\n' +
            '<td>local ldap configuration file</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5605>5605</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5606>5606</a></td>\n' +
            '<td>ldap(3), ldap_set_option(3), ldap_result(3), openssl(1), sasl(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5607>5607</a></td>\n' +
            '<td>AUTHOR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5608>5608</a></td>\n' +
            '<td>Kurt Zeilenga, The OpenLDAP Project</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5609>5609</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5610>5610</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5611>5611</a></td>\n' +
            '<td>ldap</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5612>5612</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5613>5613</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5614>5614</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5615>5615</a></td>\n' +
            '<td>TLS SECURITY CONSIDERATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5616>5616</a></td>\n' +
            '<td>COMMANDS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5617>5617</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5618>5618</a></td>\n' +
            '<td>BUGS, IDEAS, FEEDBACK</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5619>5619</a></td>\n' +
            '<td>KEYWORDS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5620>5620</a></td>\n' +
            '<td>CATEGORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5621>5621</a></td>\n' +
            '<td>COPYRIGHT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5622>5622</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5623>5623</a></td>\n' +
            '<td>______________________________________________________________________________</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5624>5624</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5625>5625</a></td>\n' +
            '<td>ldap − LDAP client</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5626>5626</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5627>5627</a></td>\n' +
            '<td>package require Tcl 8.4</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5628>5628</a></td>\n' +
            '<td>package require ldap ?1.8?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5629>5629</a></td>\n' +
            '<td>::ldap::connect host ?port?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5630>5630</a></td>\n' +
            '<td>::ldap::secure_connect host ?port?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5631>5631</a></td>\n' +
            '<td>::ldap::disconnect handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5632>5632</a></td>\n' +
            '<td>::ldap::starttls handle ?cafile? ?certfile? ?keyfile?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5633>5633</a></td>\n' +
            '<td>::ldap::bind handle ?name? ?password?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5634>5634</a></td>\n' +
            '<td>::ldap::bindSASL handle ?name? ?password?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5635>5635</a></td>\n' +
            '<td>::ldap::unbind handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5636>5636</a></td>\n' +
            '<td>::ldap::search handle baseObject filterString attributes options</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5637>5637</a></td>\n' +
            '<td>::ldap::searchInit handle baseObject filterString attributes options</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5638>5638</a></td>\n' +
            '<td>::ldap::searchNext handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5639>5639</a></td>\n' +
            '<td>::ldap::searchEnd handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5640>5640</a></td>\n' +
            '<td>::ldap::modify handle dn attrValToReplace ?attrToDelete? ?attrValToAdd?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5641>5641</a></td>\n' +
            '<td>::ldap::modifyMulti handle dn attrValToReplace ?attrValToDelete? ?attrValToAdd?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5642>5642</a></td>\n' +
            '<td>::ldap::add handle dn attrValueTuples</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5643>5643</a></td>\n' +
            '<td>::ldap::addMulti handle dn attrValueTuples</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5644>5644</a></td>\n' +
            '<td>::ldap::delete handle dn</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5645>5645</a></td>\n' +
            '<td>::ldap::modifyDN handle dn newrdn ?deleteOld? ?newSuperior?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5646>5646</a></td>\n' +
            '<td>::ldap::info ip handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5647>5647</a></td>\n' +
            '<td>::ldap::info bound handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5648>5648</a></td>\n' +
            '<td>::ldap::info bounduser handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5649>5649</a></td>\n' +
            '<td>::ldap::info connections</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5650>5650</a></td>\n' +
            '<td>::ldap::info tls handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5651>5651</a></td>\n' +
            '<td>::ldap::info saslmechanisms handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5652>5652</a></td>\n' +
            '<td>::ldap::info control handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5653>5653</a></td>\n' +
            '<td>::ldap::info extensions extensions</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5654>5654</a></td>\n' +
            '<td>::ldap::info whoami handle ______________________________________________________________________________</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5655>5655</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5656>5656</a></td>\n' +
            '<td>The ldap package provides a Tcl-only client library for the LDAPv3 protocol as specified in RFC 4511 (http://www.rfc-editor.org/rfc/rfc4511.txt). It works by opening the standard (or secure) LDAP socket on the server, and then providing a Tcl API to access the LDAP protocol commands. All server errors are returned as Tcl errors (thrown) which must be caught with the Tcl catch command.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5657>5657</a></td>\n' +
            '<td>TLS SECURITY CONSIDERATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5658>5658</a></td>\n' +
            '<td>This package uses the TLS package to handle the security for https urls and other socket connections.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5659>5659</a></td>\n' +
            '<td>Policy decisions like the set of protocols to support and what ciphers to use are not the responsibility of TLS, nor of this package itself however. Such decisions are the responsibility of whichever application is using the package, and are likely influenced by the set of servers the application will talk to as well.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5660>5660</a></td>\n' +
            '<td>For example, in light of the recent POODLE attack [http://googleonlinesecurity.blogspot.co.uk/2014/10/this-poodle-bites-exploiting-ssl-30.html] discovered by Google many servers will disable support for the SSLv3 protocol. To handle this change the applications using TLS must be patched, and not this package, nor TLS itself. Such a patch may be as simple as generally activating tls1 support, as shown in the example below.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5661>5661</a></td>\n' +
            '<td>package require tls</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5662>5662</a></td>\n' +
            '<td>tls::init -tls1 1 ;# forcibly activate support for the TLS1 protocol</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5663>5663</a></td>\n' +
            '<td>... your own application code ...</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5664>5664</a></td>\n' +
            '<td>COMMANDS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5665>5665</a></td>\n' +
            '<td>::ldap::connect host ?port?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5666>5666</a></td>\n' +
            '<td>Opens a LDAPv3 connection to the specified host, at the given port, and returns a token for the connection. This token is the handle argument for all other commands. If no port is specified it will default to 389.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5667>5667</a></td>\n' +
            '<td>The command blocks until the connection has been established, or establishment definitely failed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5668>5668</a></td>\n' +
            '<td>::ldap::secure_connect host ?port?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5669>5669</a></td>\n' +
            '<td>Like ::ldap::connect, except that the created connection is secured by SSL. The port defaults to 636. This command depends on the availability of the package TLS, which is a SSL binding for Tcl. If TLS is not available, then this command will fail.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5670>5670</a></td>\n' +
            '<td>The command blocks until the connection has been established, or establishment definitely failed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5671>5671</a></td>\n' +
            '<td>::ldap::disconnect handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5672>5672</a></td>\n' +
            '<td>Closes the ldap connection refered to by the token handle. Returns the empty string as its result.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5673>5673</a></td>\n' +
            '<td>::ldap::starttls handle ?cafile? ?certfile? ?keyfile?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5674>5674</a></td>\n' +
            '<td>Start TLS negotiation on the connection denoted by handle. This is currently experimental and subject to change, more control over the TLS details will probably be exposed later, to allow users to fine tune the negotiation according to their security needs.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5675>5675</a></td>\n' +
            '<td>::ldap::bind handle ?name? ?password?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5676>5676</a></td>\n' +
            '<td>This command authenticates the ldap connection refered to by the token in handle, with a user name and associated password. It blocks until a response from the ldap server arrives. Its result is the empty string. Both name and passwd default to the empty string if they are not specified. By leaving out name and passwd you can make an anonymous bind to the ldap server. You can issue ::ldap::bind again to bind with different credentials.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5677>5677</a></td>\n' +
            '<td>::ldap::bindSASL handle ?name? ?password?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5678>5678</a></td>\n' +
            '<td>This command uses SASL authentication mechanisms to do a multistage bind. Its otherwise identical to the standard ::ldap::bind. This feature is currently experimental and subject to change. See the documentation for the SASL and the "SASL.txt" in the tcllib CVS repository for details how to setup and use SASL with openldap.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5679>5679</a></td>\n' +
            '<td>::ldap::unbind handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5680>5680</a></td>\n' +
            '<td>This command asks the ldap server to release the last bind done for the connection refered to by the token in handle. The handle is invalid after the unbind, as the server closes the connection. So this is effectivly just a more polite disconnect operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5681>5681</a></td>\n' +
            '<td>::ldap::search handle baseObject filterString attributes options</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5682>5682</a></td>\n' +
            '<td>This command performs a LDAP search below the baseObject tree using a complex LDAP search expression filterString and returns the specified attributes of all matching objects (DNs). If the list of attributes was empty all attributes are returned. The command blocks until it has received all results. The valid options are identical to the options listed for ::ldap::searchInit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5683>5683</a></td>\n' +
            '<td>An example of a search expression is</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5684>5684</a></td>\n' +
            '<td>set filterString "|(cn=Linus*)(sn=Torvalds*)"</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5685>5685</a></td>\n' +
            '<td>The return value of the command is a list of nested dictionaries. The first level keys are object identifiers (DNs), second levels keys are attribute names. In other words, it is in the form</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5686>5686</a></td>\n' +
            '<td>{dn1 {attr1 {val11 val12 ...} attr2 {val21...} ...}} {dn2 {a1 {v11 ...} ...}} ...</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5687>5687</a></td>\n' +
            '<td>::ldap::searchInit handle baseObject filterString attributes options</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5688>5688</a></td>\n' +
            '<td>This command initiates a LDAP search below the baseObject tree using a complex LDAP search expression filterString. The search gets the specified attributes of all matching objects (DNs). The command itself just starts the search, to retrieve the actual results, use ::ldap::searchNext. A search can be terminated at any time by ::ldap::searchEnd. This informs the server that no further results should be sent by sending and ABANDON message and cleans up the internal state of the search. Only one ::ldap::search can be active at a given time, this includes the introspection commands ::ldap::info saslmechanisms, ldap::info control and ldap::info extensions, which invoke a search internally. Error responses from the server due to wrong arguments or similar things are returned with the first ::ldap::searchNext call and should be checked and dealed with there. If the list of requested attributes is empty all attributes will be returned. The parameter options specifies the options to be used in the search, and has the following format:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5689>5689</a></td>\n' +
            '<td>{-option1 value1 -option2 value2 ... }</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5690>5690</a></td>\n' +
            '<td>Following options are available:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5691>5691</a></td>\n' +
            '<td>-scope base one sub</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5692>5692</a></td>\n' +
            '<td>Control the scope of the search to be one of base, one, or sub, to specify a base object, one-level or subtree search. The default is sub.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5693>5693</a></td>\n' +
            '<td>-derefaliases never search find always</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5694>5694</a></td>\n' +
            '<td>Control how aliases dereferencing is done. Should be one of never, always, search, or find to specify that aliases are never dereferenced, always dereferenced, dereferenced when searching, or dereferenced only when locating the base object for the search. The default is to never dereference aliases.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5695>5695</a></td>\n' +
            '<td>-sizelimit num</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5696>5696</a></td>\n' +
            '<td>Determines the maximum number of entries to return in a search. If specified as 0 no limit is enforced. The server may enforce a configuration dependent sizelimit, which may be lower than the one given by this option. The default is 0, no limit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5697>5697</a></td>\n' +
            '<td>-timelimit seconds</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5698>5698</a></td>\n' +
            '<td>Asks the server to use a timelimit of seconds for the search. Zero means no limit. The default is 0, no limit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5699>5699</a></td>\n' +
            '<td>-attrsonly boolean</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5700>5700</a></td>\n' +
            '<td>If set to 1 only the attribute names but not the values will be present in the search result. The default is to retrieve attribute names and values.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5701>5701</a></td>\n' +
            '<td>-referencevar varname</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5702>5702</a></td>\n' +
            '<td>If set the search result reference LDAPURIs, if any, are returned in the given variable. The caller can than decide to follow those references and query other LDAP servers for further results.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5703>5703</a></td>\n' +
            '<td>::ldap::searchNext handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5704>5704</a></td>\n' +
            '<td>This command returns the next entry from a LDAP search initiated by ::ldap::searchInit. It returns only after a new result is received or when no further results are available, but takes care to keep the event loop alive. The returned entry is a list with two elements: the first is the DN of the entry, the second is the list of attributes and values, under the format:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5705>5705</a></td>\n' +
            '<td>dn {attr1 {val11 val12 ...} attr2 {val21...} ...}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5706>5706</a></td>\n' +
            '<td>The ::ldap::searchNext command returns an empty list at the end of the search.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5707>5707</a></td>\n' +
            '<td>::ldap::searchEnd handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5708>5708</a></td>\n' +
            '<td>This command terminates a LDAP search initiated by ::ldap::searchInit. It also cleans up the internal state so a new search can be initiated. If the client has not yet received all results, the client sends an ABANDON message to inform the server that no further results for the previous search should to be sent.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5709>5709</a></td>\n' +
            '<td>::ldap::modify handle dn attrValToReplace ?attrToDelete? ?attrValToAdd?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5710>5710</a></td>\n' +
            '<td>This command modifies the object dn on the ldap server we are connected to via handle. It replaces attributes with new values, deletes attributes, and adds new attributes with new values. All arguments are dictionaries mapping attribute names to values. The optional arguments default to the empty dictionary, which means that no attributes will be deleted nor added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5711>5711</a></td>\n' +
            '<td>dictionary attrValToReplace (in)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5712>5712</a></td>\n' +
            '<td>No attributes will be changed if this argument is empty. The dictionary contains the new attributes and their values. They replace all attributes known to the object.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5713>5713</a></td>\n' +
            '<td>dictionary attrToDelete (in)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5714>5714</a></td>\n' +
            '<td>No attributes will be deleted if this argument is empty. The dictionary values are restrictions on the deletion. An attribute listed here will be deleted if and only if its current value at the server matches the value specified in the dictionary, or if the value in the dictionary is the empty string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5715>5715</a></td>\n' +
            '<td>dictionary attrValToAdd (in)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5716>5716</a></td>\n' +
            '<td>No attributes will be added if this argument is empty. The dictionary values are the values for the new attributes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5717>5717</a></td>\n' +
            '<td>The command blocks until all modifications have completed. Its result is the empty string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5718>5718</a></td>\n' +
            '<td>::ldap::modifyMulti handle dn attrValToReplace ?attrValToDelete?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5719>5719</a></td>\n' +
            '<td>?attrValToAdd?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5720>5720</a></td>\n' +
            '<td>This command modifies the object dn on the ldap server we are connected to via handle. It replaces attributes with new values, deletes attributes, and adds new attributes with new values. All arguments are lists with the format:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5721>5721</a></td>\n' +
            '<td>attr1 {val11 val12 ...} attr2 {val21...} ...</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5722>5722</a></td>\n' +
            '<td>where each value list may be empty for deleting all attributes. The optional arguments default to empty lists of attributes to delete and to add.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5723>5723</a></td>\n' +
            '<td>list attrValToReplace (in)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5724>5724</a></td>\n' +
            '<td>No attributes will be changed if this argument is empty. The dictionary contains the new attributes and their values. They replace all attributes known to the object.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5725>5725</a></td>\n' +
            '<td>list attrValToDelete (in)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5726>5726</a></td>\n' +
            '<td>No attributes will be deleted if this argument is empty. If no value is specified, the whole set of values for an attribute will be deleted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5727>5727</a></td>\n' +
            '<td>list attrValToAdd (in)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5728>5728</a></td>\n' +
            '<td>No attributes will be added if this argument is empty.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5729>5729</a></td>\n' +
            '<td>The command blocks until all modifications have completed. Its result is the empty string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5730>5730</a></td>\n' +
            '<td>::ldap::add handle dn attrValueTuples</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5731>5731</a></td>\n' +
            '<td>This command creates a new object using the specified dn. The attributes of the new object are set to the values in the list attrValueTuples. Multiple valuated attributes may be specified using multiple tuples. The command blocks until the operation has completed. Its result is the empty string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5732>5732</a></td>\n' +
            '<td>::ldap::addMulti handle dn attrValueTuples</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5733>5733</a></td>\n' +
            '<td>This command is the preferred one to create a new object using the specified dn. The attributes of the new object are set to the values in the dictionary attrValueTuples (which is keyed by the attribute names). Each tuple is a list containing multiple values. The command blocks until the operation has completed. Its result is the empty string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5734>5734</a></td>\n' +
            '<td>::ldap::delete handle dn</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5735>5735</a></td>\n' +
            '<td>This command removes the object specified by dn, and all its attributes from the server. The command blocks until the operation has completed. Its result is the empty string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5736>5736</a></td>\n' +
            '<td>::ldap::modifyDN handle dn newrdn ?deleteOld? ?newSuperior?</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5737>5737</a></td>\n' +
            '<td>] This command moves or copies the object specified by dn to a new location in the tree of object. This location is specified by newrdn, a relative designation, or by newrdn and newSuperior, a absolute designation. The optional argument deleteOld defaults to true, i.e. a move operation. If deleteOld is not set, then the operation will create a copy of dn in the new location. The optional argument newSuperior defaults an empty string, meaning that the object must not be relocated in another branch of the tree. If this argument is given, the argument deleteOld must be specified also. The command blocks until the operation has completed. Its result is the empty string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5738>5738</a></td>\n' +
            '<td>::ldap::info ip handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5739>5739</a></td>\n' +
            '<td>This command returns the IP address of the remote LDAP server the handle is connected to.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5740>5740</a></td>\n' +
            '<td>::ldap::info bound handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5741>5741</a></td>\n' +
            '<td>This command returns 1 if a handle has successfully completed a ::ldap::bind. If no bind was done or it failed, a 0 is returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5742>5742</a></td>\n' +
            '<td>::ldap::info bounduser handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5743>5743</a></td>\n' +
            '<td>This command returns the username used in the bind operation if a handle has successfully completed a ::ldap::bind. If no bound was done or it failed, an empty string is returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5744>5744</a></td>\n' +
            '<td>::ldap::info connections</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5745>5745</a></td>\n' +
            '<td>This command returns all currently existing ldap connection handles.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5746>5746</a></td>\n' +
            '<td>::ldap::info tls handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5747>5747</a></td>\n' +
            '<td>This command returns 1 if the ldap connection handle used TLS/SSL for connection via ldap::secure_connect or completed ldap::starttls, 0 otherwise.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5748>5748</a></td>\n' +
            '<td>::ldap::info saslmechanisms handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5749>5749</a></td>\n' +
            '<td>Return the supported SASL mechanisms advertised by the server. Only valid in a bound state (anonymous or other).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5750>5750</a></td>\n' +
            '<td>::ldap::info control handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5751>5751</a></td>\n' +
            '<td>Return the supported controls advertised by the server as a list of OIDs. Only valid in a bound state. This is currently experimental and subject to change.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5752>5752</a></td>\n' +
            '<td>::ldap::info extensions extensions</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5753>5753</a></td>\n' +
            '<td>Returns the supported LDAP extensions as list of OIDs. Only valid in a bound state. This is currently experimental and subject to change.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5754>5754</a></td>\n' +
            '<td>::ldap::info whoami handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5755>5755</a></td>\n' +
            '<td>Returns authzId for the current connection. This implements the RFC 4532 protocol extension.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5756>5756</a></td>\n' +
            '<td>EXAMPLES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5757>5757</a></td>\n' +
            '<td>A small example, extracted from the test application coming with this code.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5758>5758</a></td>\n' +
            '<td>package require ldap</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5759>5759</a></td>\n' +
            '<td># Connect, bind, add a new object, modify it in various ways</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5760>5760</a></td>\n' +
            '<td>set handle [ldap::connect localhost 9009]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5761>5761</a></td>\n' +
            '<td>set dn "cn=Manager, o=University of Michigan, c=US"</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5762>5762</a></td>\n' +
            '<td>set pw secret</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5763>5763</a></td>\n' +
            '<td>ldap::bind $handle $dn $pw</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5764>5764</a></td>\n' +
            '<td>set dn "cn=Test User,ou=People,o=University of Michigan,c=US"</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5765>5765</a></td>\n' +
            '<td>ldap::add $handle $dn {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5766>5766</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5767>5767</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5768>5768</a></td>\n' +
            '<td>objectClass OpenLDAPperson</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5769>5769</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5770>5770</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5771>5771</a></td>\n' +
            '<td>cn {Test User}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5772>5772</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5773>5773</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5774>5774</a></td>\n' +
            '<td>mail test.user@google.com</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5775>5775</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5776>5776</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5777>5777</a></td>\n' +
            '<td>uid testuid</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5778>5778</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5779>5779</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5780>5780</a></td>\n' +
            '<td>sn User</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5781>5781</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5782>5782</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5783>5783</a></td>\n' +
            '<td>telephoneNumber +31415926535</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5784>5784</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5785>5785</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5786>5786</a></td>\n' +
            '<td>telephoneNumber +27182818285</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5787>5787</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5788>5788</a></td>\n' +
            '<td>set dn "cn=Another User,ou=People,o=University of Michigan,c=US"</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5789>5789</a></td>\n' +
            '<td>ldap::addMulti $handle $dn {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5790>5790</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5791>5791</a></td>\n' +
            '<td>objectClass {OpenLDAPperson}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5792>5792</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5793>5793</a></td>\n' +
            '<td>cn {{Anotther User}}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5794>5794</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5795>5795</a></td>\n' +
            '<td>mail {test.user@google.com}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5796>5796</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5797>5797</a></td>\n' +
            '<td>uid {testuid}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5798>5798</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5799>5799</a></td>\n' +
            '<td>sn {User}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5800>5800</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5801>5801</a></td>\n' +
            '<td>telephoneNumber {+31415926535 +27182818285}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5802>5802</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5803>5803</a></td>\n' +
            '<td># Replace all attributes</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5804>5804</a></td>\n' +
            '<td>ldap::modify $handle $dn [list drink icetea uid JOLO]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5805>5805</a></td>\n' +
            '<td># Add some more</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5806>5806</a></td>\n' +
            '<td>ldap::modify $handle $dn {} {} [list drink water drink orangeJuice pager "+1 313 555 7671"]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5807>5807</a></td>\n' +
            '<td># Delete</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5808>5808</a></td>\n' +
            '<td>ldap::modify $handle $dn {} [list drink water pager ""]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5809>5809</a></td>\n' +
            '<td># Move</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5810>5810</a></td>\n' +
            '<td>ldap::modifyDN $handle $dn "cn=Tester"</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5811>5811</a></td>\n' +
            '<td># Kill the test object, and shut the connection down.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5812>5812</a></td>\n' +
            '<td>set dn "cn=Tester,ou=People,o=University of Michigan,c=US"</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5813>5813</a></td>\n' +
            '<td>ldap::delete $handle $dn</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5814>5814</a></td>\n' +
            '<td>ldap::unbind $handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5815>5815</a></td>\n' +
            '<td>ldap::disconnect $handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5816>5816</a></td>\n' +
            '<td>And a another example, a simple query, and processing the results.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5817>5817</a></td>\n' +
            '<td>package require ldap</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5818>5818</a></td>\n' +
            '<td>set handle [ldap::connect ldap.acme.com 389]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5819>5819</a></td>\n' +
            '<td>ldap::bind $handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5820>5820</a></td>\n' +
            '<td>set results [ldap::search $handle "o=acme,dc=com" "(uid=jdoe)" {}]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5821>5821</a></td>\n' +
            '<td>foreach result $results {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5822>5822</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5823>5823</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5824>5824</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5825>5825</a></td>\n' +
            '<td>foreach {object attributes} $result break</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5826>5826</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5827>5827</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5828>5828</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5829>5829</a></td>\n' +
            '<td># The processing here is similar to what ’parray’ does.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5830>5830</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5831>5831</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5832>5832</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5833>5833</a></td>\n' +
            '<td># I.e. finding the longest attribute name and then</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5834>5834</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5835>5835</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5836>5836</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5837>5837</a></td>\n' +
            '<td># generating properly aligned output listing all attributes</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5838>5838</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5839>5839</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5840>5840</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5841>5841</a></td>\n' +
            '<td># and their values.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5842>5842</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5843>5843</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5844>5844</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5845>5845</a></td>\n' +
            '<td>set width 0</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5846>5846</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5847>5847</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5848>5848</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5849>5849</a></td>\n' +
            '<td>set sortedAttribs {}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5850>5850</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5851>5851</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5852>5852</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5853>5853</a></td>\n' +
            '<td>foreach {type values} $attributes {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5854>5854</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5855>5855</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5856>5856</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5857>5857</a></td>\n' +
            '<td>if {[string length $type] &gt; $width} {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5858>5858</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5859>5859</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5860>5860</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5861>5861</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5862>5862</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5863>5863</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5864>5864</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5865>5865</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5866>5866</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5867>5867</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5868>5868</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5869>5869</a></td>\n' +
            '<td>set width [string length $type]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5870>5870</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5871>5871</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5872>5872</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5873>5873</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5874>5874</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5875>5875</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5876>5876</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5877>5877</a></td>\n' +
            '<td>lappend sortedAttribs [list $type $values]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5878>5878</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5879>5879</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5880>5880</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5881>5881</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5882>5882</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5883>5883</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5884>5884</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5885>5885</a></td>\n' +
            '<td>puts "object=’$object’ "</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5886>5886</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5887>5887</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5888>5888</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5889>5889</a></td>\n' +
            '<td>foreach sortedAttrib $sortedAttribs {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5890>5890</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5891>5891</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5892>5892</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5893>5893</a></td>\n' +
            '<td>foreach {type values} $sortedAttrib break</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5894>5894</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5895>5895</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5896>5896</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5897>5897</a></td>\n' +
            '<td>foreach value $values {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5898>5898</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5899>5899</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5900>5900</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5901>5901</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5902>5902</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5903>5903</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5904>5904</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5905>5905</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5906>5906</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5907>5907</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5908>5908</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5909>5909</a></td>\n' +
            '<td>regsub -all "\\[\\x01-\\x1f\\ ]" $value ? value</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5910>5910</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5911>5911</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5912>5912</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5913>5913</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5914>5914</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5915>5915</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5916>5916</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5917>5917</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5918>5918</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5919>5919</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5920>5920</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5921>5921</a></td>\n' +
            '<td>puts [format " %-${width}s %s" $type $value]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5922>5922</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5923>5923</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5924>5924</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5925>5925</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5926>5926</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5927>5927</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5928>5928</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5929>5929</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5930>5930</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5931>5931</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5932>5932</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5933>5933</a></td>\n' +
            '<td>puts ""</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5934>5934</a></td>\n' +
            '<td>}</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5935>5935</a></td>\n' +
            '<td>ldap::unbind $handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5936>5936</a></td>\n' +
            '<td>ldap::disconnect $handle</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5937>5937</a></td>\n' +
            '<td>BUGS, IDEAS, FEEDBACK</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5938>5938</a></td>\n' +
            '<td>This document, and the package it describes, will undoubtedly contain bugs and other problems. Please report such in the category ldap of the Tcllib Trackers [http://core.tcl.tk/tcllib/reportlist]. Please also report any ideas for enhancements you may have for either package and/or documentation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5939>5939</a></td>\n' +
            '<td>KEYWORDS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5940>5940</a></td>\n' +
            '<td>directory access, internet, ldap, ldap client, protocol, rfc 2251, rfc 4511, x.500</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5941>5941</a></td>\n' +
            '<td>CATEGORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5942>5942</a></td>\n' +
            '<td>Networking</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5943>5943</a></td>\n' +
            '<td>COPYRIGHT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5944>5944</a></td>\n' +
            '<td>Copyright (c) 2004 Andreas Kupries &lt;andreas_kupries@users.sourceforge.net&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5945>5945</a></td>\n' +
            '<td>Copyright (c) 2004 Jochen Loewer &lt;loewerj@web.de&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5946>5946</a></td>\n' +
            '<td>Copyright (c) 2006 Michael Schlenker &lt;mic42@users.sourceforge.net&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5947>5947</a></td>\n' +
            '<td>LDAP_ABANDON</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5948>5948</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5949>5949</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5950>5950</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5951>5951</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5952>5952</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5953>5953</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5954>5954</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5955>5955</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5956>5956</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5957>5957</a></td>\n' +
            '<td>ldap_abandon_ext − Abandon an LDAP operation in progress</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5958>5958</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5959>5959</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5960>5960</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5961>5961</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5962>5962</a></td>\n' +
            '<td>int ldap_abandon_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5963>5963</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5964>5964</a></td>\n' +
            '<td>Bint msgid,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5965>5965</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5966>5966</a></td>\n' +
            '<td>LDAPControl **cctrls );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5967>5967</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5968>5968</a></td>\n' +
            '<td>The ldap_abandon_ext() routine is used to send a LDAP Abandon request for an operation in progress. The msgid passed should be the message id of an outstanding LDAP operation, such as returned by ldap_search_ext(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5969>5969</a></td>\n' +
            '<td>ldap_abandon_ext() checks to see if the result of the operation has already come in. If it has, it deletes it from the queue of pending messages. If not, it sends an LDAP abandon request to the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5970>5970</a></td>\n' +
            '<td>The caller can expect that the result of an abandoned operation will not be returned from a future call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5971>5971</a></td>\n' +
            '<td>ldap_abandon_ext() allows server and client controls to be passed in via the sctrls and cctrls parameters, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5972>5972</a></td>\n' +
            '<td>ldap_abandon_ext() returns a code indicating success or, in the case of failure, the nature of the failure. See ldap_error(3) for details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5973>5973</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5974>5974</a></td>\n' +
            '<td>The ldap_abandon() routine is deprecated in favor of the ldap_abandon_ext() routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5975>5975</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5976>5976</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5977>5977</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_result(3), ldap_search_ext(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5978>5978</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5979>5979</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5980>5980</a></td>\n' +
            '<td>LDAP_ABANDON</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5981>5981</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5982>5982</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5983>5983</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5984>5984</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5985>5985</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5986>5986</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5987>5987</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5988>5988</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5989>5989</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5990>5990</a></td>\n' +
            '<td>ldap_abandon_ext − Abandon an LDAP operation in progress</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5991>5991</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5992>5992</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5993>5993</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5994>5994</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5995>5995</a></td>\n' +
            '<td>int ldap_abandon_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5996>5996</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5997>5997</a></td>\n' +
            '<td>Bint msgid,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5998>5998</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=5999>5999</a></td>\n' +
            '<td>LDAPControl **cctrls );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6000>6000</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6001>6001</a></td>\n' +
            '<td>The ldap_abandon_ext() routine is used to send a LDAP Abandon request for an operation in progress. The msgid passed should be the message id of an outstanding LDAP operation, such as returned by ldap_search_ext(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6002>6002</a></td>\n' +
            '<td>ldap_abandon_ext() checks to see if the result of the operation has already come in. If it has, it deletes it from the queue of pending messages. If not, it sends an LDAP abandon request to the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6003>6003</a></td>\n' +
            '<td>The caller can expect that the result of an abandoned operation will not be returned from a future call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6004>6004</a></td>\n' +
            '<td>ldap_abandon_ext() allows server and client controls to be passed in via the sctrls and cctrls parameters, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6005>6005</a></td>\n' +
            '<td>ldap_abandon_ext() returns a code indicating success or, in the case of failure, the nature of the failure. See ldap_error(3) for details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6006>6006</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6007>6007</a></td>\n' +
            '<td>The ldap_abandon() routine is deprecated in favor of the ldap_abandon_ext() routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6008>6008</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6009>6009</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6010>6010</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_result(3), ldap_search_ext(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6011>6011</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6012>6012</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6013>6013</a></td>\n' +
            '<td>LDAP_ADD</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6014>6014</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6015>6015</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6016>6016</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6017>6017</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6018>6018</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6019>6019</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6020>6020</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6021>6021</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6022>6022</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6023>6023</a></td>\n' +
            '<td>ldap_add_ext, ldap_add_ext_s − Perform an LDAP add operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6024>6024</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6025>6025</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6026>6026</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6027>6027</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6028>6028</a></td>\n' +
            '<td>int ldap_add_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6029>6029</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6030>6030</a></td>\n' +
            '<td>const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6031>6031</a></td>\n' +
            '<td>LDAPMod **attrs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6032>6032</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6033>6033</a></td>\n' +
            '<td>LDAPControl **cctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6034>6034</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6035>6035</a></td>\n' +
            '<td>int ldap_add_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6036>6036</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6037>6037</a></td>\n' +
            '<td>const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6038>6038</a></td>\n' +
            '<td>LDAPMod **attrs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6039>6039</a></td>\n' +
            '<td>LDAPControl *sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6040>6040</a></td>\n' +
            '<td>LDAPControl *cctrls );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6041>6041</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6042>6042</a></td>\n' +
            '<td>The ldap_add_ext_s() routine is used to perform an LDAP add operation. It takes dn, the DN of the entry to add, and attrs, a null-terminated array of the entry’s attributes. The LDAPMod structure is used to represent attributes, with the mod_type and mod_values fields being used as described under ldap_modify_ext(3), and the ldap_op field being used only if you need to specify the LDAP_MOD_BVALUES option. Otherwise, it should be set to zero.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6043>6043</a></td>\n' +
            '<td>Note that all entries except that specified by the last component in the given DN must already exist. ldap_add_ext_s() returns an code indicating success or, in the case of failure, indicating the nature of failure of the operation. See ldap_error(3) for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6044>6044</a></td>\n' +
            '<td>The ldap_add_ext() routine works just like ldap_add_ext_s(), but it is asynchronous. It returns the message id of the request it initiated. The result of this operation can be obtained by calling ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6045>6045</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6046>6046</a></td>\n' +
            '<td>The ldap_add() and ldap_add_s() routines are deprecated in favor of the ldap_add_ext() and ldap_add_ext_s() routines, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6047>6047</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6048>6048</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6049>6049</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_modify(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6050>6050</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6051>6051</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6052>6052</a></td>\n' +
            '<td>LDAP_ADD</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6053>6053</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6054>6054</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6055>6055</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6056>6056</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6057>6057</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6058>6058</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6059>6059</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6060>6060</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6061>6061</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6062>6062</a></td>\n' +
            '<td>ldap_add_ext, ldap_add_ext_s − Perform an LDAP add operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6063>6063</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6064>6064</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6065>6065</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6066>6066</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6067>6067</a></td>\n' +
            '<td>int ldap_add_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6068>6068</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6069>6069</a></td>\n' +
            '<td>const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6070>6070</a></td>\n' +
            '<td>LDAPMod **attrs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6071>6071</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6072>6072</a></td>\n' +
            '<td>LDAPControl **cctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6073>6073</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6074>6074</a></td>\n' +
            '<td>int ldap_add_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6075>6075</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6076>6076</a></td>\n' +
            '<td>const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6077>6077</a></td>\n' +
            '<td>LDAPMod **attrs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6078>6078</a></td>\n' +
            '<td>LDAPControl *sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6079>6079</a></td>\n' +
            '<td>LDAPControl *cctrls );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6080>6080</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6081>6081</a></td>\n' +
            '<td>The ldap_add_ext_s() routine is used to perform an LDAP add operation. It takes dn, the DN of the entry to add, and attrs, a null-terminated array of the entry’s attributes. The LDAPMod structure is used to represent attributes, with the mod_type and mod_values fields being used as described under ldap_modify_ext(3), and the ldap_op field being used only if you need to specify the LDAP_MOD_BVALUES option. Otherwise, it should be set to zero.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6082>6082</a></td>\n' +
            '<td>Note that all entries except that specified by the last component in the given DN must already exist. ldap_add_ext_s() returns an code indicating success or, in the case of failure, indicating the nature of failure of the operation. See ldap_error(3) for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6083>6083</a></td>\n' +
            '<td>The ldap_add_ext() routine works just like ldap_add_ext_s(), but it is asynchronous. It returns the message id of the request it initiated. The result of this operation can be obtained by calling ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6084>6084</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6085>6085</a></td>\n' +
            '<td>The ldap_add() and ldap_add_s() routines are deprecated in favor of the ldap_add_ext() and ldap_add_ext_s() routines, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6086>6086</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6087>6087</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6088>6088</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_modify(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6089>6089</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6090>6090</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6091>6091</a></td>\n' +
            '<td>LDAP_ADD</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6092>6092</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6093>6093</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6094>6094</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6095>6095</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6096>6096</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6097>6097</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6098>6098</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6099>6099</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6100>6100</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6101>6101</a></td>\n' +
            '<td>ldap_add_ext, ldap_add_ext_s − Perform an LDAP add operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6102>6102</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6103>6103</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6104>6104</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6105>6105</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6106>6106</a></td>\n' +
            '<td>int ldap_add_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6107>6107</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6108>6108</a></td>\n' +
            '<td>const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6109>6109</a></td>\n' +
            '<td>LDAPMod **attrs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6110>6110</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6111>6111</a></td>\n' +
            '<td>LDAPControl **cctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6112>6112</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6113>6113</a></td>\n' +
            '<td>int ldap_add_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6114>6114</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6115>6115</a></td>\n' +
            '<td>const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6116>6116</a></td>\n' +
            '<td>LDAPMod **attrs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6117>6117</a></td>\n' +
            '<td>LDAPControl *sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6118>6118</a></td>\n' +
            '<td>LDAPControl *cctrls );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6119>6119</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6120>6120</a></td>\n' +
            '<td>The ldap_add_ext_s() routine is used to perform an LDAP add operation. It takes dn, the DN of the entry to add, and attrs, a null-terminated array of the entry’s attributes. The LDAPMod structure is used to represent attributes, with the mod_type and mod_values fields being used as described under ldap_modify_ext(3), and the ldap_op field being used only if you need to specify the LDAP_MOD_BVALUES option. Otherwise, it should be set to zero.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6121>6121</a></td>\n' +
            '<td>Note that all entries except that specified by the last component in the given DN must already exist. ldap_add_ext_s() returns an code indicating success or, in the case of failure, indicating the nature of failure of the operation. See ldap_error(3) for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6122>6122</a></td>\n' +
            '<td>The ldap_add_ext() routine works just like ldap_add_ext_s(), but it is asynchronous. It returns the message id of the request it initiated. The result of this operation can be obtained by calling ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6123>6123</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6124>6124</a></td>\n' +
            '<td>The ldap_add() and ldap_add_s() routines are deprecated in favor of the ldap_add_ext() and ldap_add_ext_s() routines, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6125>6125</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6126>6126</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6127>6127</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_modify(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6128>6128</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6129>6129</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6130>6130</a></td>\n' +
            '<td>LDAP_ADD</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6131>6131</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6132>6132</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6133>6133</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6134>6134</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6135>6135</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6136>6136</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6137>6137</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6138>6138</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6139>6139</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6140>6140</a></td>\n' +
            '<td>ldap_add_ext, ldap_add_ext_s − Perform an LDAP add operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6141>6141</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6142>6142</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6143>6143</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6144>6144</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6145>6145</a></td>\n' +
            '<td>int ldap_add_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6146>6146</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6147>6147</a></td>\n' +
            '<td>const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6148>6148</a></td>\n' +
            '<td>LDAPMod **attrs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6149>6149</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6150>6150</a></td>\n' +
            '<td>LDAPControl **cctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6151>6151</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6152>6152</a></td>\n' +
            '<td>int ldap_add_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6153>6153</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6154>6154</a></td>\n' +
            '<td>const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6155>6155</a></td>\n' +
            '<td>LDAPMod **attrs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6156>6156</a></td>\n' +
            '<td>LDAPControl *sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6157>6157</a></td>\n' +
            '<td>LDAPControl *cctrls );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6158>6158</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6159>6159</a></td>\n' +
            '<td>The ldap_add_ext_s() routine is used to perform an LDAP add operation. It takes dn, the DN of the entry to add, and attrs, a null-terminated array of the entry’s attributes. The LDAPMod structure is used to represent attributes, with the mod_type and mod_values fields being used as described under ldap_modify_ext(3), and the ldap_op field being used only if you need to specify the LDAP_MOD_BVALUES option. Otherwise, it should be set to zero.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6160>6160</a></td>\n' +
            '<td>Note that all entries except that specified by the last component in the given DN must already exist. ldap_add_ext_s() returns an code indicating success or, in the case of failure, indicating the nature of failure of the operation. See ldap_error(3) for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6161>6161</a></td>\n' +
            '<td>The ldap_add_ext() routine works just like ldap_add_ext_s(), but it is asynchronous. It returns the message id of the request it initiated. The result of this operation can be obtained by calling ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6162>6162</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6163>6163</a></td>\n' +
            '<td>The ldap_add() and ldap_add_s() routines are deprecated in favor of the ldap_add_ext() and ldap_add_ext_s() routines, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6164>6164</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6165>6165</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6166>6166</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_modify(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6167>6167</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6168>6168</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6169>6169</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6170>6170</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6171>6171</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6172>6172</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6173>6173</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6174>6174</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6175>6175</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6176>6176</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6177>6177</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6178>6178</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6179>6179</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6180>6180</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6181>6181</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6182>6182</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6183>6183</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6184>6184</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6185>6185</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6186>6186</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6187>6187</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6188>6188</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6189>6189</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6190>6190</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6191>6191</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6192>6192</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6193>6193</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6194>6194</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6195>6195</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6196>6196</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6197>6197</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6198>6198</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6199>6199</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6200>6200</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6201>6201</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6202>6202</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6203>6203</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6204>6204</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6205>6205</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6206>6206</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6207>6207</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6208>6208</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6209>6209</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6210>6210</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6211>6211</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6212>6212</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6213>6213</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6214>6214</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6215>6215</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6216>6216</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6217>6217</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6218>6218</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6219>6219</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6220>6220</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6221>6221</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6222>6222</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6223>6223</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6224>6224</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6225>6225</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6226>6226</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6227>6227</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6228>6228</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6229>6229</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6230>6230</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6231>6231</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6232>6232</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6233>6233</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6234>6234</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6235>6235</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6236>6236</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6237>6237</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6238>6238</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6239>6239</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6240>6240</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6241>6241</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6242>6242</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6243>6243</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6244>6244</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6245>6245</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6246>6246</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6247>6247</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6248>6248</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6249>6249</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6250>6250</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6251>6251</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6252>6252</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6253>6253</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6254>6254</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6255>6255</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6256>6256</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6257>6257</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6258>6258</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6259>6259</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6260>6260</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6261>6261</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6262>6262</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6263>6263</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6264>6264</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6265>6265</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6266>6266</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6267>6267</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6268>6268</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6269>6269</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6270>6270</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6271>6271</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6272>6272</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6273>6273</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6274>6274</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6275>6275</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6276>6276</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6277>6277</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6278>6278</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6279>6279</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6280>6280</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6281>6281</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6282>6282</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6283>6283</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6284>6284</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6285>6285</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6286>6286</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6287>6287</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6288>6288</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6289>6289</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6290>6290</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6291>6291</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6292>6292</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6293>6293</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6294>6294</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6295>6295</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6296>6296</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6297>6297</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6298>6298</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6299>6299</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6300>6300</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6301>6301</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6302>6302</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6303>6303</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6304>6304</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6305>6305</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6306>6306</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6307>6307</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6308>6308</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6309>6309</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6310>6310</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6311>6311</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6312>6312</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6313>6313</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6314>6314</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6315>6315</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6316>6316</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6317>6317</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6318>6318</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6319>6319</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6320>6320</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6321>6321</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6322>6322</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6323>6323</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6324>6324</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6325>6325</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6326>6326</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6327>6327</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6328>6328</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6329>6329</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6330>6330</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6331>6331</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6332>6332</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6333>6333</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6334>6334</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6335>6335</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6336>6336</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6337>6337</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6338>6338</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6339>6339</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6340>6340</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6341>6341</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6342>6342</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6343>6343</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6344>6344</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6345>6345</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6346>6346</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6347>6347</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6348>6348</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6349>6349</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6350>6350</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6351>6351</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6352>6352</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6353>6353</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6354>6354</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6355>6355</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6356>6356</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6357>6357</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6358>6358</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6359>6359</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6360>6360</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6361>6361</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6362>6362</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6363>6363</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6364>6364</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6365>6365</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6366>6366</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6367>6367</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6368>6368</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6369>6369</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6370>6370</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6371>6371</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6372>6372</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6373>6373</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6374>6374</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6375>6375</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6376>6376</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6377>6377</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6378>6378</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6379>6379</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6380>6380</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6381>6381</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6382>6382</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6383>6383</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6384>6384</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6385>6385</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6386>6386</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6387>6387</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6388>6388</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6389>6389</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6390>6390</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6391>6391</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6392>6392</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6393>6393</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6394>6394</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6395>6395</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6396>6396</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6397>6397</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6398>6398</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6399>6399</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6400>6400</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6401>6401</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6402>6402</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6403>6403</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6404>6404</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6405>6405</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6406>6406</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6407>6407</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6408>6408</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6409>6409</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6410>6410</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6411>6411</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6412>6412</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6413>6413</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6414>6414</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6415>6415</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6416>6416</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6417>6417</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6418>6418</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6419>6419</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6420>6420</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6421>6421</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6422>6422</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6423>6423</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6424>6424</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6425>6425</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6426>6426</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6427>6427</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6428>6428</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6429>6429</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6430>6430</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6431>6431</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6432>6432</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6433>6433</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6434>6434</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6435>6435</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6436>6436</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6437>6437</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6438>6438</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6439>6439</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6440>6440</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6441>6441</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6442>6442</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6443>6443</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6444>6444</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6445>6445</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6446>6446</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6447>6447</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6448>6448</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6449>6449</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6450>6450</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6451>6451</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6452>6452</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6453>6453</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6454>6454</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6455>6455</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6456>6456</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6457>6457</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6458>6458</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6459>6459</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6460>6460</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6461>6461</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6462>6462</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6463>6463</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6464>6464</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6465>6465</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6466>6466</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6467>6467</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6468>6468</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6469>6469</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6470>6470</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6471>6471</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6472>6472</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6473>6473</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6474>6474</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6475>6475</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6476>6476</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6477>6477</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6478>6478</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6479>6479</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6480>6480</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6481>6481</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6482>6482</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6483>6483</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6484>6484</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6485>6485</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6486>6486</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6487>6487</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6488>6488</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6489>6489</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6490>6490</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6491>6491</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6492>6492</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6493>6493</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6494>6494</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6495>6495</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6496>6496</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6497>6497</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6498>6498</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6499>6499</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6500>6500</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6501>6501</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6502>6502</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6503>6503</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6504>6504</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6505>6505</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6506>6506</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6507>6507</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6508>6508</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6509>6509</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6510>6510</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6511>6511</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6512>6512</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6513>6513</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6514>6514</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6515>6515</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6516>6516</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6517>6517</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6518>6518</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6519>6519</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6520>6520</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6521>6521</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6522>6522</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6523>6523</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6524>6524</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6525>6525</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6526>6526</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6527>6527</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6528>6528</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6529>6529</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6530>6530</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6531>6531</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6532>6532</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6533>6533</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6534>6534</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6535>6535</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6536>6536</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6537>6537</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6538>6538</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6539>6539</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6540>6540</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6541>6541</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6542>6542</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6543>6543</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6544>6544</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6545>6545</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6546>6546</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6547>6547</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6548>6548</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6549>6549</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6550>6550</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6551>6551</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6552>6552</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6553>6553</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6554>6554</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6555>6555</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6556>6556</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6557>6557</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6558>6558</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6559>6559</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6560>6560</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6561>6561</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6562>6562</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6563>6563</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6564>6564</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6565>6565</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6566>6566</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6567>6567</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6568>6568</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6569>6569</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6570>6570</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6571>6571</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6572>6572</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6573>6573</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6574>6574</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6575>6575</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6576>6576</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6577>6577</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6578>6578</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6579>6579</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6580>6580</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6581>6581</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6582>6582</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6583>6583</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6584>6584</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6585>6585</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6586>6586</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6587>6587</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6588>6588</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6589>6589</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6590>6590</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6591>6591</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6592>6592</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6593>6593</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6594>6594</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6595>6595</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6596>6596</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6597>6597</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6598>6598</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6599>6599</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6600>6600</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6601>6601</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6602>6602</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6603>6603</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6604>6604</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6605>6605</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6606>6606</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6607>6607</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6608>6608</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6609>6609</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6610>6610</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6611>6611</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6612>6612</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6613>6613</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6614>6614</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6615>6615</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6616>6616</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6617>6617</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6618>6618</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6619>6619</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6620>6620</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6621>6621</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6622>6622</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6623>6623</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6624>6624</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6625>6625</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6626>6626</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6627>6627</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6628>6628</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6629>6629</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6630>6630</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6631>6631</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6632>6632</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6633>6633</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6634>6634</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6635>6635</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6636>6636</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6637>6637</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6638>6638</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6639>6639</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6640>6640</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6641>6641</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6642>6642</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6643>6643</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6644>6644</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6645>6645</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6646>6646</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6647>6647</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6648>6648</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6649>6649</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6650>6650</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6651>6651</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6652>6652</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6653>6653</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6654>6654</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6655>6655</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6656>6656</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6657>6657</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6658>6658</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6659>6659</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6660>6660</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6661>6661</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6662>6662</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6663>6663</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6664>6664</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6665>6665</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6666>6666</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6667>6667</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6668>6668</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6669>6669</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6670>6670</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6671>6671</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6672>6672</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6673>6673</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6674>6674</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6675>6675</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6676>6676</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6677>6677</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6678>6678</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6679>6679</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6680>6680</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6681>6681</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6682>6682</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6683>6683</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6684>6684</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6685>6685</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6686>6686</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6687>6687</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6688>6688</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6689>6689</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6690>6690</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6691>6691</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6692>6692</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6693>6693</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6694>6694</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6695>6695</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6696>6696</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6697>6697</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6698>6698</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6699>6699</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6700>6700</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6701>6701</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6702>6702</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6703>6703</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6704>6704</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6705>6705</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6706>6706</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6707>6707</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6708>6708</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6709>6709</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6710>6710</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6711>6711</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6712>6712</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6713>6713</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6714>6714</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6715>6715</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6716>6716</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6717>6717</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6718>6718</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6719>6719</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6720>6720</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6721>6721</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6722>6722</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6723>6723</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6724>6724</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6725>6725</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6726>6726</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6727>6727</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6728>6728</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6729>6729</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6730>6730</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6731>6731</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6732>6732</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6733>6733</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6734>6734</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6735>6735</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6736>6736</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6737>6737</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6738>6738</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6739>6739</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6740>6740</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6741>6741</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6742>6742</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6743>6743</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6744>6744</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6745>6745</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6746>6746</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6747>6747</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6748>6748</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6749>6749</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6750>6750</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6751>6751</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6752>6752</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6753>6753</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6754>6754</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6755>6755</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6756>6756</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6757>6757</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6758>6758</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6759>6759</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6760>6760</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6761>6761</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6762>6762</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6763>6763</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6764>6764</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6765>6765</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6766>6766</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6767>6767</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6768>6768</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6769>6769</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6770>6770</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6771>6771</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6772>6772</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6773>6773</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6774>6774</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6775>6775</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6776>6776</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6777>6777</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6778>6778</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6779>6779</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6780>6780</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6781>6781</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6782>6782</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6783>6783</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6784>6784</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6785>6785</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6786>6786</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6787>6787</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6788>6788</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6789>6789</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6790>6790</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6791>6791</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6792>6792</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6793>6793</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6794>6794</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6795>6795</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6796>6796</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6797>6797</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6798>6798</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6799>6799</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6800>6800</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6801>6801</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6802>6802</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6803>6803</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6804>6804</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6805>6805</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6806>6806</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6807>6807</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6808>6808</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6809>6809</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6810>6810</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6811>6811</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6812>6812</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6813>6813</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6814>6814</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6815>6815</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6816>6816</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6817>6817</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6818>6818</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6819>6819</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6820>6820</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6821>6821</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6822>6822</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6823>6823</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6824>6824</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6825>6825</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6826>6826</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6827>6827</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6828>6828</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6829>6829</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6830>6830</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6831>6831</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6832>6832</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6833>6833</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6834>6834</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6835>6835</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6836>6836</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6837>6837</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6838>6838</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6839>6839</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6840>6840</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6841>6841</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6842>6842</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6843>6843</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6844>6844</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6845>6845</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6846>6846</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6847>6847</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6848>6848</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6849>6849</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6850>6850</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6851>6851</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6852>6852</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6853>6853</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6854>6854</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6855>6855</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6856>6856</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6857>6857</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6858>6858</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6859>6859</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6860>6860</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6861>6861</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6862>6862</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6863>6863</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6864>6864</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6865>6865</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6866>6866</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6867>6867</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6868>6868</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6869>6869</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6870>6870</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6871>6871</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6872>6872</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6873>6873</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6874>6874</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6875>6875</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6876>6876</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6877>6877</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6878>6878</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6879>6879</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6880>6880</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6881>6881</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6882>6882</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6883>6883</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6884>6884</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6885>6885</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6886>6886</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6887>6887</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6888>6888</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6889>6889</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6890>6890</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6891>6891</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6892>6892</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6893>6893</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6894>6894</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6895>6895</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6896>6896</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6897>6897</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6898>6898</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6899>6899</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6900>6900</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6901>6901</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6902>6902</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6903>6903</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6904>6904</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6905>6905</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6906>6906</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6907>6907</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6908>6908</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6909>6909</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6910>6910</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6911>6911</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6912>6912</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6913>6913</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6914>6914</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6915>6915</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6916>6916</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6917>6917</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6918>6918</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6919>6919</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6920>6920</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6921>6921</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6922>6922</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6923>6923</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6924>6924</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6925>6925</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6926>6926</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6927>6927</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6928>6928</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6929>6929</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6930>6930</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6931>6931</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6932>6932</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6933>6933</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6934>6934</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6935>6935</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6936>6936</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6937>6937</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6938>6938</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6939>6939</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6940>6940</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6941>6941</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6942>6942</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6943>6943</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6944>6944</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6945>6945</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6946>6946</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6947>6947</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6948>6948</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6949>6949</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6950>6950</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6951>6951</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6952>6952</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6953>6953</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6954>6954</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6955>6955</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6956>6956</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6957>6957</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6958>6958</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6959>6959</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6960>6960</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6961>6961</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6962>6962</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6963>6963</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6964>6964</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6965>6965</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6966>6966</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6967>6967</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6968>6968</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6969>6969</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6970>6970</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6971>6971</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6972>6972</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6973>6973</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6974>6974</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6975>6975</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6976>6976</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6977>6977</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6978>6978</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6979>6979</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6980>6980</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6981>6981</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6982>6982</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6983>6983</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6984>6984</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6985>6985</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6986>6986</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6987>6987</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6988>6988</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6989>6989</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6990>6990</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6991>6991</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6992>6992</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6993>6993</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6994>6994</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6995>6995</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6996>6996</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6997>6997</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6998>6998</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=6999>6999</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7000>7000</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7001>7001</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7002>7002</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7003>7003</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7004>7004</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7005>7005</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7006>7006</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7007>7007</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7008>7008</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7009>7009</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7010>7010</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7011>7011</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7012>7012</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7013>7013</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7014>7014</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7015>7015</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7016>7016</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7017>7017</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7018>7018</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7019>7019</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7020>7020</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7021>7021</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7022>7022</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7023>7023</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7024>7024</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7025>7025</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7026>7026</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7027>7027</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7028>7028</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7029>7029</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7030>7030</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7031>7031</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7032>7032</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7033>7033</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7034>7034</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7035>7035</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7036>7036</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7037>7037</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7038>7038</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7039>7039</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7040>7040</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7041>7041</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7042>7042</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7043>7043</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7044>7044</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7045>7045</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7046>7046</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7047>7047</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7048>7048</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7049>7049</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7050>7050</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7051>7051</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7052>7052</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7053>7053</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7054>7054</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7055>7055</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7056>7056</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7057>7057</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7058>7058</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7059>7059</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7060>7060</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7061>7061</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7062>7062</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7063>7063</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7064>7064</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7065>7065</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7066>7066</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7067>7067</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7068>7068</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7069>7069</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7070>7070</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7071>7071</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7072>7072</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7073>7073</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7074>7074</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7075>7075</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7076>7076</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7077>7077</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7078>7078</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7079>7079</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7080>7080</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7081>7081</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7082>7082</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7083>7083</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7084>7084</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7085>7085</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7086>7086</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7087>7087</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7088>7088</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7089>7089</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7090>7090</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7091>7091</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7092>7092</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7093>7093</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7094>7094</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7095>7095</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7096>7096</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7097>7097</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7098>7098</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7099>7099</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7100>7100</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7101>7101</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7102>7102</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7103>7103</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7104>7104</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7105>7105</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7106>7106</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7107>7107</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7108>7108</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7109>7109</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7110>7110</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7111>7111</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7112>7112</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7113>7113</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7114>7114</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7115>7115</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7116>7116</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7117>7117</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7118>7118</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7119>7119</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7120>7120</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7121>7121</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7122>7122</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7123>7123</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7124>7124</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7125>7125</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7126>7126</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7127>7127</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7128>7128</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7129>7129</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7130>7130</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7131>7131</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7132>7132</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7133>7133</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7134>7134</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7135>7135</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7136>7136</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7137>7137</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7138>7138</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7139>7139</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7140>7140</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7141>7141</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7142>7142</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7143>7143</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7144>7144</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7145>7145</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7146>7146</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7147>7147</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7148>7148</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7149>7149</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7150>7150</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7151>7151</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7152>7152</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7153>7153</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7154>7154</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7155>7155</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7156>7156</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7157>7157</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7158>7158</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7159>7159</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7160>7160</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7161>7161</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7162>7162</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7163>7163</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7164>7164</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7165>7165</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7166>7166</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7167>7167</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7168>7168</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7169>7169</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7170>7170</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7171>7171</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7172>7172</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7173>7173</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7174>7174</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7175>7175</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7176>7176</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7177>7177</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7178>7178</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7179>7179</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7180>7180</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7181>7181</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7182>7182</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7183>7183</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7184>7184</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7185>7185</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7186>7186</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7187>7187</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7188>7188</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7189>7189</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7190>7190</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7191>7191</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7192>7192</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7193>7193</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7194>7194</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7195>7195</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7196>7196</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7197>7197</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7198>7198</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7199>7199</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7200>7200</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7201>7201</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7202>7202</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7203>7203</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7204>7204</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7205>7205</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7206>7206</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7207>7207</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7208>7208</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7209>7209</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7210>7210</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7211>7211</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7212>7212</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7213>7213</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7214>7214</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7215>7215</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7216>7216</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7217>7217</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7218>7218</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7219>7219</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7220>7220</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7221>7221</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7222>7222</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7223>7223</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7224>7224</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7225>7225</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7226>7226</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7227>7227</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7228>7228</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7229>7229</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7230>7230</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7231>7231</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7232>7232</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7233>7233</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7234>7234</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7235>7235</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7236>7236</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7237>7237</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7238>7238</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7239>7239</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7240>7240</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7241>7241</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7242>7242</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7243>7243</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7244>7244</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7245>7245</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7246>7246</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7247>7247</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7248>7248</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7249>7249</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7250>7250</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7251>7251</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7252>7252</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7253>7253</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7254>7254</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7255>7255</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7256>7256</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7257>7257</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7258>7258</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7259>7259</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7260>7260</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7261>7261</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7262>7262</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7263>7263</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7264>7264</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7265>7265</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7266>7266</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7267>7267</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7268>7268</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7269>7269</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7270>7270</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7271>7271</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7272>7272</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7273>7273</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7274>7274</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7275>7275</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7276>7276</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7277>7277</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7278>7278</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7279>7279</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7280>7280</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7281>7281</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7282>7282</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7283>7283</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7284>7284</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7285>7285</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7286>7286</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7287>7287</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7288>7288</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7289>7289</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7290>7290</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7291>7291</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7292>7292</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7293>7293</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7294>7294</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7295>7295</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7296>7296</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7297>7297</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7298>7298</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7299>7299</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7300>7300</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7301>7301</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7302>7302</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7303>7303</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7304>7304</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7305>7305</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7306>7306</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7307>7307</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7308>7308</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7309>7309</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7310>7310</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7311>7311</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7312>7312</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7313>7313</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7314>7314</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7315>7315</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7316>7316</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7317>7317</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7318>7318</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7319>7319</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7320>7320</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7321>7321</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7322>7322</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7323>7323</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7324>7324</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7325>7325</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7326>7326</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7327>7327</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7328>7328</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7329>7329</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7330>7330</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7331>7331</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7332>7332</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7333>7333</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7334>7334</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7335>7335</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7336>7336</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7337>7337</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7338>7338</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7339>7339</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7340>7340</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7341>7341</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7342>7342</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7343>7343</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7344>7344</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7345>7345</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7346>7346</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7347>7347</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7348>7348</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7349>7349</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7350>7350</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7351>7351</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7352>7352</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7353>7353</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7354>7354</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7355>7355</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7356>7356</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7357>7357</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7358>7358</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7359>7359</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7360>7360</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7361>7361</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7362>7362</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7363>7363</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7364>7364</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7365>7365</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7366>7366</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7367>7367</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7368>7368</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7369>7369</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7370>7370</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7371>7371</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7372>7372</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7373>7373</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7374>7374</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7375>7375</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7376>7376</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7377>7377</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7378>7378</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7379>7379</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7380>7380</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7381>7381</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7382>7382</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7383>7383</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7384>7384</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7385>7385</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7386>7386</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7387>7387</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7388>7388</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7389>7389</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7390>7390</a></td>\n' +
            '<td>LDAP_BIND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7391>7391</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7392>7392</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7393>7393</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7394>7394</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7395>7395</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7396>7396</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7397>7397</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7398>7398</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7399>7399</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7400>7400</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7401>7401</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7402>7402</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7403>7403</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7404>7404</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7405>7405</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7406>7406</a></td>\n' +
            '<td>ldap_bind, ldap_bind_s, ldap_simple_bind, ldap_simple_bind_s, ldap_sasl_bind, ldap_sasl_bind_s, ldap_sasl_interactive_bind_s, ldap_parse_sasl_bind_result, ldap_unbind, ldap_unbind_s, ldap_unbind_ext, ldap_unbind_ext_s, ldap_set_rebind_proc − LDAP bind routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7407>7407</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7408>7408</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7409>7409</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7410>7410</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7411>7411</a></td>\n' +
            '<td>int ldap_bind(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7412>7412</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7413>7413</a></td>\n' +
            '<td>int ldap_bind_s(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7414>7414</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7415>7415</a></td>\n' +
            '<td>int ldap_simple_bind(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7416>7416</a></td>\n' +
            '<td>int ldap_simple_bind_s(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7417>7417</a></td>\n' +
            '<td>int ldap_sasl_bind(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7418>7418</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7419>7419</a></td>\n' +
            '<td>LDAPControl *cctrls[], int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7420>7420</a></td>\n' +
            '<td>int ldap_sasl_bind_s(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7421>7421</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7422>7422</a></td>\n' +
            '<td>LDAPControl *cctrls[], struct berval **servercredp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7423>7423</a></td>\n' +
            '<td>int ldap_parse_sasl_bind_result(LDAP *ld, LDAPMessage *res,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7424>7424</a></td>\n' +
            '<td>struct berval **servercredp, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7425>7425</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind_s(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7426>7426</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7427>7427</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7428>7428</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7429>7429</a></td>\n' +
            '<td>void *defaults);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7430>7430</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7431>7431</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7432>7432</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7433>7433</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7434>7434</a></td>\n' +
            '<td>void *defaults, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7435>7435</a></td>\n' +
            '<td>const char **rmechp, int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7436>7436</a></td>\n' +
            '<td>int (LDAP_SASL_INTERACT_PROC)(LDAP *ld, unsigned flags, void *defaults, void *sasl_interact);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7437>7437</a></td>\n' +
            '<td>int ldap_unbind(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7438>7438</a></td>\n' +
            '<td>int ldap_unbind_s(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7439>7439</a></td>\n' +
            '<td>int ldap_unbind_ext(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7440>7440</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7441>7441</a></td>\n' +
            '<td>int ldap_unbind_ext_s(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7442>7442</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7443>7443</a></td>\n' +
            '<td>int ldap_set_rebind_proc (LDAP *ld, LDAP_REBIND_PROC *ldap_proc, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7444>7444</a></td>\n' +
            '<td>int (LDAP_REBIND_PROC)(LDAP *ld, LDAP_CONST char *url, ber_tag_t request, ber_int_t msgid, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7445>7445</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7446>7446</a></td>\n' +
            '<td>These routines provide various interfaces to the LDAP bind operation. After an association with an LDAP server is made using ldap_init(3), an LDAP bind operation should be performed before other operations are attempted over the connection. An LDAP bind is required when using Version 2 of the LDAP protocol; it is optional for Version 3 but is usually needed due to security considerations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7447>7447</a></td>\n' +
            '<td>There are three types of bind calls, ones providing simple authentication, ones providing SASL authentication, and general routines capable of doing either simple or SASL authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7448>7448</a></td>\n' +
            '<td>SASL (Simple Authentication and Security Layer) can negotiate one of many different kinds of authentication. Both synchronous and asynchronous versions of each variant of the bind call are provided. All routines take ld as their first parameter, as returned from ldap_init(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7449>7449</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7450>7450</a></td>\n' +
            '<td>The simplest form of the bind call is ldap_simple_bind_s(). It takes the DN to bind as in who, and the userPassword associated with the entry in passwd. It returns an LDAP error indication (see ldap_error(3)). The ldap_simple_bind() call is asynchronous, taking the same parameters but only initiating the bind operation and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7451>7451</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7452>7452</a></td>\n' +
            '<td>The ldap_bind() and ldap_bind_s() routines can be used when the authentication method to use needs to be selected at runtime. They both take an extra method parameter selecting the authentication method to use. It should be set to LDAP_AUTH_SIMPLE to select simple authentication. ldap_bind() returns the message id of the request it initiates. ldap_bind_s() returns an LDAP error indication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7453>7453</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7454>7454</a></td>\n' +
            '<td>For SASL binds the server always ignores any provided DN, so the dn parameter should always be NULL. ldap_sasl_bind_s() sends a single SASL bind request with the given SASL mechanism and credentials in the cred parameter. The format of the credentials depends on the particular SASL mechanism in use. For mechanisms that provide mutual authentication the server’s credentials will be returned in the servercredp parameter. The routine returns an LDAP error indication (see ldap_error(3)). The ldap_sasl_bind() call is asynchronous, taking the same parameters but only sending the request and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3). The result must be additionally parsed by ldap_parse_sasl_bind_result() to obtain any server credentials sent from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7455>7455</a></td>\n' +
            '<td>Many SASL mechanisms require multiple message exchanges to perform a complete authentication. Applications should generally use ldap_sasl_interactive_bind_s() rather than calling the basic ldap_sasl_bind() functions directly. The mechs parameter should contain a space-separated list of candidate mechanisms to use. If this parameter is NULL or empty the library will query the supportedSASLMechanisms attribute from the server’s rootDSE for the list of SASL mechanisms the server supports. The flags parameter controls the interaction used to retrieve any necessary SASL authentication parameters and should be one of:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7456>7456</a></td>\n' +
            '<td>LDAP_SASL_AUTOMATIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7457>7457</a></td>\n' +
            '<td>use defaults if available, prompt otherwise</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7458>7458</a></td>\n' +
            '<td>LDAP_SASL_INTERACTIVE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7459>7459</a></td>\n' +
            '<td>always prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7460>7460</a></td>\n' +
            '<td>LDAP_SASL_QUIET</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7461>7461</a></td>\n' +
            '<td>never prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7462>7462</a></td>\n' +
            '<td>The interact function uses the provided defaults to handle requests from the SASL library for particular authentication parameters. There is no defined format for the defaults information; it is up to the caller to use whatever format is appropriate for the supplied interact function. The sasl_interact parameter comes from the underlying SASL library. When used with Cyrus SASL this is an array of sasl_interact_t structures. The Cyrus SASL library will prompt for a variety of inputs, including:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7463>7463</a></td>\n' +
            '<td>SASL_CB_GETREALM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7464>7464</a></td>\n' +
            '<td>the realm for the authentication attempt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7465>7465</a></td>\n' +
            '<td>SASL_CB_AUTHNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7466>7466</a></td>\n' +
            '<td>the username to authenticate</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7467>7467</a></td>\n' +
            '<td>SASL_CB_PASS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7468>7468</a></td>\n' +
            '<td>the password for the provided username</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7469>7469</a></td>\n' +
            '<td>SASL_CB_USER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7470>7470</a></td>\n' +
            '<td>the username to use for proxy authorization</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7471>7471</a></td>\n' +
            '<td>SASL_CB_NOECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7472>7472</a></td>\n' +
            '<td>generic prompt for input with input echoing disabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7473>7473</a></td>\n' +
            '<td>SASL_CB_ECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7474>7474</a></td>\n' +
            '<td>generic prompt for input with input echoing enabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7475>7475</a></td>\n' +
            '<td>SASL_CB_LIST_END</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7476>7476</a></td>\n' +
            '<td>indicates the end of the array of prompts</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7477>7477</a></td>\n' +
            '<td>See the Cyrus SASL documentation for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7478>7478</a></td>\n' +
            '<td>Applications which need to manage connections asynchronously may use ldap_sasl_interactive_bind() instead of the synchronous version. A valid mechs parameter must be supplied, otherwise the library will be forced to query the server for a list of supported mechanisms, and this query will be performed synchronously. The other parameters are the same as for the synchronous function, with three additional parameters. The actual SASL mechanism that was used, and the message ID for use with ldap_result() will be returned in rmechp and msgidp, respectively. The value in rmechp must not be modified by the caller and must be passed back on each subsequent call. The message obtained from ldap_result() must be passed in the result parameter. This parameter must be NULL when initiating a new Bind. The caller must free the result message after each call using ldap_msgfree(). The ldap_sasl_interactive_bind() function returns an LDAP result code. If the code is LDAP_SASL_BIND_IN_PROGRESS then the Bind is not complete yet, and this function must be called again with the next result from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7479>7479</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7480>7480</a></td>\n' +
            '<td>The ldap_set_rebind_proc function() sets the process to use for binding when an operation returns a referral. This function is used when an application needs to bind to another server in order to follow a referral or search continuation reference.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7481>7481</a></td>\n' +
            '<td>The function takes ld, the rebind function, and the params, the arbitrary data like state information which the client might need to properly rebind. The LDAP_OPT_REFERRALS option in the ld must be set to ON for the libraries to use the rebind function. Use the ldap_set_option function to set the value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7482>7482</a></td>\n' +
            '<td>The rebind function parameters are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7483>7483</a></td>\n' +
            '<td>The ld parameter must be used by the application when binding to the referred server if the application wants the libraries to follow the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7484>7484</a></td>\n' +
            '<td>The url parameter points to the URL referral string received from the LDAP server. The LDAP application can use the ldap_url_parse(3) function to parse the string into its components.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7485>7485</a></td>\n' +
            '<td>The request parameter specifies the type of request that generated the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7486>7486</a></td>\n' +
            '<td>The msgid parameter specifies the message ID of the request generating the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7487>7487</a></td>\n' +
            '<td>The params parameter is the same value as passed originally to the ldap_set_rebind_proc() function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7488>7488</a></td>\n' +
            '<td>The LDAP libraries set all the parameters when they call the rebind function. The application should not attempt to free either the ld or the url structures in the rebind function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7489>7489</a></td>\n' +
            '<td>The application must supply to the rebind function the required authentication information such as, user name, password, and certificates. The rebind function must use a synchronous bind method.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7490>7490</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7491>7491</a></td>\n' +
            '<td>The ldap_unbind() call is used to unbind from the directory, terminate the current association, and free the resources contained in the ld structure. Once it is called, the connection to the LDAP server is closed, and the ld structure is invalid. The ldap_unbind_s() call is just another name for ldap_unbind(); both of these calls are synchronous in nature.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7492>7492</a></td>\n' +
            '<td>The ldap_unbind_ext() and ldap_unbind_ext_s() allows the operations to specify controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7493>7493</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7494>7494</a></td>\n' +
            '<td>Asynchronous routines will return −1 in case of error, setting the ld_errno parameter of the ld structure. Synchronous routines return whatever ld_errno is set to. See ldap_error(3) for more information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7495>7495</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7496>7496</a></td>\n' +
            '<td>If an anonymous bind is sufficient for the application, the rebind process need not be provided. The LDAP libraries with the LDAP_OPT_REFERRALS option set to ON (default value) will automatically follow referrals using an anonymous bind.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7497>7497</a></td>\n' +
            '<td>If the application needs stronger authentication than an anonymous bind, you need to provide a rebind process for that authentication method. The bind method must be synchronous.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7498>7498</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7499>7499</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_open(3), ldap_set_option(3), ldap_url_parse(3) RFC 4422 (http://www.rfc-editor.org), Cyrus SASL (http://asg.web.cmu.edu/sasl/)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7500>7500</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7501>7501</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7502>7502</a></td>\n' +
            '<td>LDAP_BIND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7503>7503</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7504>7504</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7505>7505</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7506>7506</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7507>7507</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7508>7508</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7509>7509</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7510>7510</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7511>7511</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7512>7512</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7513>7513</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7514>7514</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7515>7515</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7516>7516</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7517>7517</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7518>7518</a></td>\n' +
            '<td>ldap_bind, ldap_bind_s, ldap_simple_bind, ldap_simple_bind_s, ldap_sasl_bind, ldap_sasl_bind_s, ldap_sasl_interactive_bind_s, ldap_parse_sasl_bind_result, ldap_unbind, ldap_unbind_s, ldap_unbind_ext, ldap_unbind_ext_s, ldap_set_rebind_proc − LDAP bind routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7519>7519</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7520>7520</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7521>7521</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7522>7522</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7523>7523</a></td>\n' +
            '<td>int ldap_bind(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7524>7524</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7525>7525</a></td>\n' +
            '<td>int ldap_bind_s(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7526>7526</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7527>7527</a></td>\n' +
            '<td>int ldap_simple_bind(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7528>7528</a></td>\n' +
            '<td>int ldap_simple_bind_s(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7529>7529</a></td>\n' +
            '<td>int ldap_sasl_bind(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7530>7530</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7531>7531</a></td>\n' +
            '<td>LDAPControl *cctrls[], int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7532>7532</a></td>\n' +
            '<td>int ldap_sasl_bind_s(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7533>7533</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7534>7534</a></td>\n' +
            '<td>LDAPControl *cctrls[], struct berval **servercredp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7535>7535</a></td>\n' +
            '<td>int ldap_parse_sasl_bind_result(LDAP *ld, LDAPMessage *res,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7536>7536</a></td>\n' +
            '<td>struct berval **servercredp, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7537>7537</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind_s(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7538>7538</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7539>7539</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7540>7540</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7541>7541</a></td>\n' +
            '<td>void *defaults);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7542>7542</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7543>7543</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7544>7544</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7545>7545</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7546>7546</a></td>\n' +
            '<td>void *defaults, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7547>7547</a></td>\n' +
            '<td>const char **rmechp, int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7548>7548</a></td>\n' +
            '<td>int (LDAP_SASL_INTERACT_PROC)(LDAP *ld, unsigned flags, void *defaults, void *sasl_interact);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7549>7549</a></td>\n' +
            '<td>int ldap_unbind(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7550>7550</a></td>\n' +
            '<td>int ldap_unbind_s(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7551>7551</a></td>\n' +
            '<td>int ldap_unbind_ext(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7552>7552</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7553>7553</a></td>\n' +
            '<td>int ldap_unbind_ext_s(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7554>7554</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7555>7555</a></td>\n' +
            '<td>int ldap_set_rebind_proc (LDAP *ld, LDAP_REBIND_PROC *ldap_proc, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7556>7556</a></td>\n' +
            '<td>int (LDAP_REBIND_PROC)(LDAP *ld, LDAP_CONST char *url, ber_tag_t request, ber_int_t msgid, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7557>7557</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7558>7558</a></td>\n' +
            '<td>These routines provide various interfaces to the LDAP bind operation. After an association with an LDAP server is made using ldap_init(3), an LDAP bind operation should be performed before other operations are attempted over the connection. An LDAP bind is required when using Version 2 of the LDAP protocol; it is optional for Version 3 but is usually needed due to security considerations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7559>7559</a></td>\n' +
            '<td>There are three types of bind calls, ones providing simple authentication, ones providing SASL authentication, and general routines capable of doing either simple or SASL authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7560>7560</a></td>\n' +
            '<td>SASL (Simple Authentication and Security Layer) can negotiate one of many different kinds of authentication. Both synchronous and asynchronous versions of each variant of the bind call are provided. All routines take ld as their first parameter, as returned from ldap_init(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7561>7561</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7562>7562</a></td>\n' +
            '<td>The simplest form of the bind call is ldap_simple_bind_s(). It takes the DN to bind as in who, and the userPassword associated with the entry in passwd. It returns an LDAP error indication (see ldap_error(3)). The ldap_simple_bind() call is asynchronous, taking the same parameters but only initiating the bind operation and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7563>7563</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7564>7564</a></td>\n' +
            '<td>The ldap_bind() and ldap_bind_s() routines can be used when the authentication method to use needs to be selected at runtime. They both take an extra method parameter selecting the authentication method to use. It should be set to LDAP_AUTH_SIMPLE to select simple authentication. ldap_bind() returns the message id of the request it initiates. ldap_bind_s() returns an LDAP error indication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7565>7565</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7566>7566</a></td>\n' +
            '<td>For SASL binds the server always ignores any provided DN, so the dn parameter should always be NULL. ldap_sasl_bind_s() sends a single SASL bind request with the given SASL mechanism and credentials in the cred parameter. The format of the credentials depends on the particular SASL mechanism in use. For mechanisms that provide mutual authentication the server’s credentials will be returned in the servercredp parameter. The routine returns an LDAP error indication (see ldap_error(3)). The ldap_sasl_bind() call is asynchronous, taking the same parameters but only sending the request and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3). The result must be additionally parsed by ldap_parse_sasl_bind_result() to obtain any server credentials sent from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7567>7567</a></td>\n' +
            '<td>Many SASL mechanisms require multiple message exchanges to perform a complete authentication. Applications should generally use ldap_sasl_interactive_bind_s() rather than calling the basic ldap_sasl_bind() functions directly. The mechs parameter should contain a space-separated list of candidate mechanisms to use. If this parameter is NULL or empty the library will query the supportedSASLMechanisms attribute from the server’s rootDSE for the list of SASL mechanisms the server supports. The flags parameter controls the interaction used to retrieve any necessary SASL authentication parameters and should be one of:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7568>7568</a></td>\n' +
            '<td>LDAP_SASL_AUTOMATIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7569>7569</a></td>\n' +
            '<td>use defaults if available, prompt otherwise</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7570>7570</a></td>\n' +
            '<td>LDAP_SASL_INTERACTIVE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7571>7571</a></td>\n' +
            '<td>always prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7572>7572</a></td>\n' +
            '<td>LDAP_SASL_QUIET</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7573>7573</a></td>\n' +
            '<td>never prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7574>7574</a></td>\n' +
            '<td>The interact function uses the provided defaults to handle requests from the SASL library for particular authentication parameters. There is no defined format for the defaults information; it is up to the caller to use whatever format is appropriate for the supplied interact function. The sasl_interact parameter comes from the underlying SASL library. When used with Cyrus SASL this is an array of sasl_interact_t structures. The Cyrus SASL library will prompt for a variety of inputs, including:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7575>7575</a></td>\n' +
            '<td>SASL_CB_GETREALM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7576>7576</a></td>\n' +
            '<td>the realm for the authentication attempt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7577>7577</a></td>\n' +
            '<td>SASL_CB_AUTHNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7578>7578</a></td>\n' +
            '<td>the username to authenticate</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7579>7579</a></td>\n' +
            '<td>SASL_CB_PASS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7580>7580</a></td>\n' +
            '<td>the password for the provided username</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7581>7581</a></td>\n' +
            '<td>SASL_CB_USER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7582>7582</a></td>\n' +
            '<td>the username to use for proxy authorization</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7583>7583</a></td>\n' +
            '<td>SASL_CB_NOECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7584>7584</a></td>\n' +
            '<td>generic prompt for input with input echoing disabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7585>7585</a></td>\n' +
            '<td>SASL_CB_ECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7586>7586</a></td>\n' +
            '<td>generic prompt for input with input echoing enabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7587>7587</a></td>\n' +
            '<td>SASL_CB_LIST_END</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7588>7588</a></td>\n' +
            '<td>indicates the end of the array of prompts</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7589>7589</a></td>\n' +
            '<td>See the Cyrus SASL documentation for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7590>7590</a></td>\n' +
            '<td>Applications which need to manage connections asynchronously may use ldap_sasl_interactive_bind() instead of the synchronous version. A valid mechs parameter must be supplied, otherwise the library will be forced to query the server for a list of supported mechanisms, and this query will be performed synchronously. The other parameters are the same as for the synchronous function, with three additional parameters. The actual SASL mechanism that was used, and the message ID for use with ldap_result() will be returned in rmechp and msgidp, respectively. The value in rmechp must not be modified by the caller and must be passed back on each subsequent call. The message obtained from ldap_result() must be passed in the result parameter. This parameter must be NULL when initiating a new Bind. The caller must free the result message after each call using ldap_msgfree(). The ldap_sasl_interactive_bind() function returns an LDAP result code. If the code is LDAP_SASL_BIND_IN_PROGRESS then the Bind is not complete yet, and this function must be called again with the next result from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7591>7591</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7592>7592</a></td>\n' +
            '<td>The ldap_set_rebind_proc function() sets the process to use for binding when an operation returns a referral. This function is used when an application needs to bind to another server in order to follow a referral or search continuation reference.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7593>7593</a></td>\n' +
            '<td>The function takes ld, the rebind function, and the params, the arbitrary data like state information which the client might need to properly rebind. The LDAP_OPT_REFERRALS option in the ld must be set to ON for the libraries to use the rebind function. Use the ldap_set_option function to set the value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7594>7594</a></td>\n' +
            '<td>The rebind function parameters are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7595>7595</a></td>\n' +
            '<td>The ld parameter must be used by the application when binding to the referred server if the application wants the libraries to follow the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7596>7596</a></td>\n' +
            '<td>The url parameter points to the URL referral string received from the LDAP server. The LDAP application can use the ldap_url_parse(3) function to parse the string into its components.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7597>7597</a></td>\n' +
            '<td>The request parameter specifies the type of request that generated the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7598>7598</a></td>\n' +
            '<td>The msgid parameter specifies the message ID of the request generating the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7599>7599</a></td>\n' +
            '<td>The params parameter is the same value as passed originally to the ldap_set_rebind_proc() function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7600>7600</a></td>\n' +
            '<td>The LDAP libraries set all the parameters when they call the rebind function. The application should not attempt to free either the ld or the url structures in the rebind function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7601>7601</a></td>\n' +
            '<td>The application must supply to the rebind function the required authentication information such as, user name, password, and certificates. The rebind function must use a synchronous bind method.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7602>7602</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7603>7603</a></td>\n' +
            '<td>The ldap_unbind() call is used to unbind from the directory, terminate the current association, and free the resources contained in the ld structure. Once it is called, the connection to the LDAP server is closed, and the ld structure is invalid. The ldap_unbind_s() call is just another name for ldap_unbind(); both of these calls are synchronous in nature.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7604>7604</a></td>\n' +
            '<td>The ldap_unbind_ext() and ldap_unbind_ext_s() allows the operations to specify controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7605>7605</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7606>7606</a></td>\n' +
            '<td>Asynchronous routines will return −1 in case of error, setting the ld_errno parameter of the ld structure. Synchronous routines return whatever ld_errno is set to. See ldap_error(3) for more information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7607>7607</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7608>7608</a></td>\n' +
            '<td>If an anonymous bind is sufficient for the application, the rebind process need not be provided. The LDAP libraries with the LDAP_OPT_REFERRALS option set to ON (default value) will automatically follow referrals using an anonymous bind.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7609>7609</a></td>\n' +
            '<td>If the application needs stronger authentication than an anonymous bind, you need to provide a rebind process for that authentication method. The bind method must be synchronous.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7610>7610</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7611>7611</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_open(3), ldap_set_option(3), ldap_url_parse(3) RFC 4422 (http://www.rfc-editor.org), Cyrus SASL (http://asg.web.cmu.edu/sasl/)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7612>7612</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7613>7613</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7614>7614</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7615>7615</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7616>7616</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7617>7617</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7618>7618</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7619>7619</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7620>7620</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7621>7621</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7622>7622</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7623>7623</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7624>7624</a></td>\n' +
            '<td>ldap_compare, ldap_compare_s, ldap_compare_ext, ldap_compare_ext_s − Perform an LDAP compare operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7625>7625</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7626>7626</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7627>7627</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7628>7628</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7629>7629</a></td>\n' +
            '<td>int ldap_compare_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7630>7630</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7631>7631</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7632>7632</a></td>\n' +
            '<td>char *attr,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7633>7633</a></td>\n' +
            '<td>const struct berval *bvalue,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7634>7634</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7635>7635</a></td>\n' +
            '<td>LDAPControl **clientctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7636>7636</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7637>7637</a></td>\n' +
            '<td>int ldap_compare_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7638>7638</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7639>7639</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7640>7640</a></td>\n' +
            '<td>char *attr,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7641>7641</a></td>\n' +
            '<td>const struct berval *bvalue,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7642>7642</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7643>7643</a></td>\n' +
            '<td>LDAPControl **clientctrls );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7644>7644</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7645>7645</a></td>\n' +
            '<td>The ldap_compare_ext_s() routine is used to perform an LDAP compare operation synchronously. It takes dn, the DN of the entry upon which to perform the compare, and attr and value, the attribute description and value to compare to those found in the entry. It returns a code, which will be LDAP_COMPARE_TRUE if the entry contains the attribute value and LDAP_COMPARE_FALSE if it does not. Otherwise, an error code is returned that indicates the nature of the problem. See ldap(3) for details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7646>7646</a></td>\n' +
            '<td>The ldap_compare_ext() routine is used to perform an LDAP compare operation asynchronously. It takes the same parameters as ldap_compare_ext_s(), but provides the message id of the request it initiated in the integer pointed to msgidp. The result of the compare can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7647>7647</a></td>\n' +
            '<td>Both routines allow server and client controls to be specified to extend the compare request.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7648>7648</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7649>7649</a></td>\n' +
            '<td>The routines ldap_compare() and ldap_compare_s() are deprecated in favor of ldap_compare_ext() and ldap_compare_ext_s(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7650>7650</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7651>7651</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7652>7652</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7653>7653</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7654>7654</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7655>7655</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7656>7656</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7657>7657</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7658>7658</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7659>7659</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7660>7660</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7661>7661</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7662>7662</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7663>7663</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7664>7664</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7665>7665</a></td>\n' +
            '<td>ldap_compare, ldap_compare_s, ldap_compare_ext, ldap_compare_ext_s − Perform an LDAP compare operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7666>7666</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7667>7667</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7668>7668</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7669>7669</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7670>7670</a></td>\n' +
            '<td>int ldap_compare_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7671>7671</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7672>7672</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7673>7673</a></td>\n' +
            '<td>char *attr,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7674>7674</a></td>\n' +
            '<td>const struct berval *bvalue,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7675>7675</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7676>7676</a></td>\n' +
            '<td>LDAPControl **clientctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7677>7677</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7678>7678</a></td>\n' +
            '<td>int ldap_compare_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7679>7679</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7680>7680</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7681>7681</a></td>\n' +
            '<td>char *attr,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7682>7682</a></td>\n' +
            '<td>const struct berval *bvalue,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7683>7683</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7684>7684</a></td>\n' +
            '<td>LDAPControl **clientctrls );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7685>7685</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7686>7686</a></td>\n' +
            '<td>The ldap_compare_ext_s() routine is used to perform an LDAP compare operation synchronously. It takes dn, the DN of the entry upon which to perform the compare, and attr and value, the attribute description and value to compare to those found in the entry. It returns a code, which will be LDAP_COMPARE_TRUE if the entry contains the attribute value and LDAP_COMPARE_FALSE if it does not. Otherwise, an error code is returned that indicates the nature of the problem. See ldap(3) for details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7687>7687</a></td>\n' +
            '<td>The ldap_compare_ext() routine is used to perform an LDAP compare operation asynchronously. It takes the same parameters as ldap_compare_ext_s(), but provides the message id of the request it initiated in the integer pointed to msgidp. The result of the compare can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7688>7688</a></td>\n' +
            '<td>Both routines allow server and client controls to be specified to extend the compare request.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7689>7689</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7690>7690</a></td>\n' +
            '<td>The routines ldap_compare() and ldap_compare_s() are deprecated in favor of ldap_compare_ext() and ldap_compare_ext_s(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7691>7691</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7692>7692</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7693>7693</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7694>7694</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7695>7695</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7696>7696</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7697>7697</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7698>7698</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7699>7699</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7700>7700</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7701>7701</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7702>7702</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7703>7703</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7704>7704</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7705>7705</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7706>7706</a></td>\n' +
            '<td>ldap_compare, ldap_compare_s, ldap_compare_ext, ldap_compare_ext_s − Perform an LDAP compare operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7707>7707</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7708>7708</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7709>7709</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7710>7710</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7711>7711</a></td>\n' +
            '<td>int ldap_compare_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7712>7712</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7713>7713</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7714>7714</a></td>\n' +
            '<td>char *attr,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7715>7715</a></td>\n' +
            '<td>const struct berval *bvalue,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7716>7716</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7717>7717</a></td>\n' +
            '<td>LDAPControl **clientctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7718>7718</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7719>7719</a></td>\n' +
            '<td>int ldap_compare_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7720>7720</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7721>7721</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7722>7722</a></td>\n' +
            '<td>char *attr,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7723>7723</a></td>\n' +
            '<td>const struct berval *bvalue,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7724>7724</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7725>7725</a></td>\n' +
            '<td>LDAPControl **clientctrls );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7726>7726</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7727>7727</a></td>\n' +
            '<td>The ldap_compare_ext_s() routine is used to perform an LDAP compare operation synchronously. It takes dn, the DN of the entry upon which to perform the compare, and attr and value, the attribute description and value to compare to those found in the entry. It returns a code, which will be LDAP_COMPARE_TRUE if the entry contains the attribute value and LDAP_COMPARE_FALSE if it does not. Otherwise, an error code is returned that indicates the nature of the problem. See ldap(3) for details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7728>7728</a></td>\n' +
            '<td>The ldap_compare_ext() routine is used to perform an LDAP compare operation asynchronously. It takes the same parameters as ldap_compare_ext_s(), but provides the message id of the request it initiated in the integer pointed to msgidp. The result of the compare can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7729>7729</a></td>\n' +
            '<td>Both routines allow server and client controls to be specified to extend the compare request.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7730>7730</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7731>7731</a></td>\n' +
            '<td>The routines ldap_compare() and ldap_compare_s() are deprecated in favor of ldap_compare_ext() and ldap_compare_ext_s(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7732>7732</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7733>7733</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7734>7734</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7735>7735</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7736>7736</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7737>7737</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7738>7738</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7739>7739</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7740>7740</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7741>7741</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7742>7742</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7743>7743</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7744>7744</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7745>7745</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7746>7746</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7747>7747</a></td>\n' +
            '<td>ldap_compare, ldap_compare_s, ldap_compare_ext, ldap_compare_ext_s − Perform an LDAP compare operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7748>7748</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7749>7749</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7750>7750</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7751>7751</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7752>7752</a></td>\n' +
            '<td>int ldap_compare_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7753>7753</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7754>7754</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7755>7755</a></td>\n' +
            '<td>char *attr,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7756>7756</a></td>\n' +
            '<td>const struct berval *bvalue,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7757>7757</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7758>7758</a></td>\n' +
            '<td>LDAPControl **clientctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7759>7759</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7760>7760</a></td>\n' +
            '<td>int ldap_compare_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7761>7761</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7762>7762</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7763>7763</a></td>\n' +
            '<td>char *attr,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7764>7764</a></td>\n' +
            '<td>const struct berval *bvalue,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7765>7765</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7766>7766</a></td>\n' +
            '<td>LDAPControl **clientctrls );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7767>7767</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7768>7768</a></td>\n' +
            '<td>The ldap_compare_ext_s() routine is used to perform an LDAP compare operation synchronously. It takes dn, the DN of the entry upon which to perform the compare, and attr and value, the attribute description and value to compare to those found in the entry. It returns a code, which will be LDAP_COMPARE_TRUE if the entry contains the attribute value and LDAP_COMPARE_FALSE if it does not. Otherwise, an error code is returned that indicates the nature of the problem. See ldap(3) for details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7769>7769</a></td>\n' +
            '<td>The ldap_compare_ext() routine is used to perform an LDAP compare operation asynchronously. It takes the same parameters as ldap_compare_ext_s(), but provides the message id of the request it initiated in the integer pointed to msgidp. The result of the compare can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7770>7770</a></td>\n' +
            '<td>Both routines allow server and client controls to be specified to extend the compare request.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7771>7771</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7772>7772</a></td>\n' +
            '<td>The routines ldap_compare() and ldap_compare_s() are deprecated in favor of ldap_compare_ext() and ldap_compare_ext_s(), respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7773>7773</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7774>7774</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7775>7775</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7776>7776</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7777>7777</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7778>7778</a></td>\n' +
            '<td>LDAP_CONTROLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7779>7779</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7780>7780</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7781>7781</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7782>7782</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7783>7783</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7784>7784</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7785>7785</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7786>7786</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7787>7787</a></td>\n' +
            '<td>ldap_control_create, ldap_control_find, ldap_control_dup, ldap_controls_dup, ldap_control_free, ldap_controls_free − LDAP control manipulation routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7788>7788</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7789>7789</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7790>7790</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7791>7791</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7792>7792</a></td>\n' +
            '<td>int ldap_control_create(const char *oid, int iscritical, struct berval *value, int dupval, LDAPControl **ctrlp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7793>7793</a></td>\n' +
            '<td>LDAPControl *ldap_control_find( const char *oid, LDAPControl **ctrls, LDAPControl ***nextctrlp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7794>7794</a></td>\n' +
            '<td>LDAPControl *ldap_control_dup(LDAPControl *ctrl);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7795>7795</a></td>\n' +
            '<td>LDAPControl **ldap_controls_dup(LDAPControl **ctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7796>7796</a></td>\n' +
            '<td>void ldap_control_free(LDAPControl *ctrl);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7797>7797</a></td>\n' +
            '<td>void ldap_controls_free(LDAPControl **ctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7798>7798</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7799>7799</a></td>\n' +
            '<td>These routines are used to manipulate structures used for LDAP controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7800>7800</a></td>\n' +
            '<td>ldap_control_create() creates a control with the specified OID using the contents of the value parameter for the control value, if any. The content of value is duplicated if dupval is non-zero. The iscritical parameter must be non-zero for a critical control. The created control is returned in the ctrlp parameter. The routine returns LDAP_SUCCESS on success or some other error code on failure. The content of value, for supported control types, can be prepared using helpers provided by this implementation of libldap, usually in the form ldap_create_&lt;control name&gt;_control_value(). Otherwise, it can be BER-encoded using the functionalities of liblber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7801>7801</a></td>\n' +
            '<td>ldap_control_find() searches the NULL-terminated ctrls array for a control whose OID matches the oid parameter. The routine returns a pointer to the control if found, NULL otherwise. If the parameter nextctrlp is not NULL, on return it will point to the next control in the array, and can be passed to the ldap_control_find() routine for subsequent calls, to find further occurrences of the same control type. The use of this function is discouraged; the recommended way of handling controls in responses consists in going through the array of controls, dealing with each of them in the returned order, since it could matter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7802>7802</a></td>\n' +
            '<td>ldap_control_dup() duplicates an individual control structure, and ldap_controls_dup() duplicates a NULL-terminated array of controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7803>7803</a></td>\n' +
            '<td>ldap_control_free() frees an individual control structure, and ldap_controls_free() frees a NULL-terminated array of controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7804>7804</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7805>7805</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7806>7806</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7807>7807</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7808>7808</a></td>\n' +
            '<td>LDAP_CONTROLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7809>7809</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7810>7810</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7811>7811</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7812>7812</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7813>7813</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7814>7814</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7815>7815</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7816>7816</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7817>7817</a></td>\n' +
            '<td>ldap_control_create, ldap_control_find, ldap_control_dup, ldap_controls_dup, ldap_control_free, ldap_controls_free − LDAP control manipulation routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7818>7818</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7819>7819</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7820>7820</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7821>7821</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7822>7822</a></td>\n' +
            '<td>int ldap_control_create(const char *oid, int iscritical, struct berval *value, int dupval, LDAPControl **ctrlp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7823>7823</a></td>\n' +
            '<td>LDAPControl *ldap_control_find( const char *oid, LDAPControl **ctrls, LDAPControl ***nextctrlp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7824>7824</a></td>\n' +
            '<td>LDAPControl *ldap_control_dup(LDAPControl *ctrl);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7825>7825</a></td>\n' +
            '<td>LDAPControl **ldap_controls_dup(LDAPControl **ctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7826>7826</a></td>\n' +
            '<td>void ldap_control_free(LDAPControl *ctrl);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7827>7827</a></td>\n' +
            '<td>void ldap_controls_free(LDAPControl **ctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7828>7828</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7829>7829</a></td>\n' +
            '<td>These routines are used to manipulate structures used for LDAP controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7830>7830</a></td>\n' +
            '<td>ldap_control_create() creates a control with the specified OID using the contents of the value parameter for the control value, if any. The content of value is duplicated if dupval is non-zero. The iscritical parameter must be non-zero for a critical control. The created control is returned in the ctrlp parameter. The routine returns LDAP_SUCCESS on success or some other error code on failure. The content of value, for supported control types, can be prepared using helpers provided by this implementation of libldap, usually in the form ldap_create_&lt;control name&gt;_control_value(). Otherwise, it can be BER-encoded using the functionalities of liblber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7831>7831</a></td>\n' +
            '<td>ldap_control_find() searches the NULL-terminated ctrls array for a control whose OID matches the oid parameter. The routine returns a pointer to the control if found, NULL otherwise. If the parameter nextctrlp is not NULL, on return it will point to the next control in the array, and can be passed to the ldap_control_find() routine for subsequent calls, to find further occurrences of the same control type. The use of this function is discouraged; the recommended way of handling controls in responses consists in going through the array of controls, dealing with each of them in the returned order, since it could matter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7832>7832</a></td>\n' +
            '<td>ldap_control_dup() duplicates an individual control structure, and ldap_controls_dup() duplicates a NULL-terminated array of controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7833>7833</a></td>\n' +
            '<td>ldap_control_free() frees an individual control structure, and ldap_controls_free() frees a NULL-terminated array of controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7834>7834</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7835>7835</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7836>7836</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7837>7837</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7838>7838</a></td>\n' +
            '<td>LDAP_CONTROLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7839>7839</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7840>7840</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7841>7841</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7842>7842</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7843>7843</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7844>7844</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7845>7845</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7846>7846</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7847>7847</a></td>\n' +
            '<td>ldap_control_create, ldap_control_find, ldap_control_dup, ldap_controls_dup, ldap_control_free, ldap_controls_free − LDAP control manipulation routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7848>7848</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7849>7849</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7850>7850</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7851>7851</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7852>7852</a></td>\n' +
            '<td>int ldap_control_create(const char *oid, int iscritical, struct berval *value, int dupval, LDAPControl **ctrlp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7853>7853</a></td>\n' +
            '<td>LDAPControl *ldap_control_find( const char *oid, LDAPControl **ctrls, LDAPControl ***nextctrlp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7854>7854</a></td>\n' +
            '<td>LDAPControl *ldap_control_dup(LDAPControl *ctrl);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7855>7855</a></td>\n' +
            '<td>LDAPControl **ldap_controls_dup(LDAPControl **ctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7856>7856</a></td>\n' +
            '<td>void ldap_control_free(LDAPControl *ctrl);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7857>7857</a></td>\n' +
            '<td>void ldap_controls_free(LDAPControl **ctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7858>7858</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7859>7859</a></td>\n' +
            '<td>These routines are used to manipulate structures used for LDAP controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7860>7860</a></td>\n' +
            '<td>ldap_control_create() creates a control with the specified OID using the contents of the value parameter for the control value, if any. The content of value is duplicated if dupval is non-zero. The iscritical parameter must be non-zero for a critical control. The created control is returned in the ctrlp parameter. The routine returns LDAP_SUCCESS on success or some other error code on failure. The content of value, for supported control types, can be prepared using helpers provided by this implementation of libldap, usually in the form ldap_create_&lt;control name&gt;_control_value(). Otherwise, it can be BER-encoded using the functionalities of liblber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7861>7861</a></td>\n' +
            '<td>ldap_control_find() searches the NULL-terminated ctrls array for a control whose OID matches the oid parameter. The routine returns a pointer to the control if found, NULL otherwise. If the parameter nextctrlp is not NULL, on return it will point to the next control in the array, and can be passed to the ldap_control_find() routine for subsequent calls, to find further occurrences of the same control type. The use of this function is discouraged; the recommended way of handling controls in responses consists in going through the array of controls, dealing with each of them in the returned order, since it could matter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7862>7862</a></td>\n' +
            '<td>ldap_control_dup() duplicates an individual control structure, and ldap_controls_dup() duplicates a NULL-terminated array of controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7863>7863</a></td>\n' +
            '<td>ldap_control_free() frees an individual control structure, and ldap_controls_free() frees a NULL-terminated array of controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7864>7864</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7865>7865</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7866>7866</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7867>7867</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7868>7868</a></td>\n' +
            '<td>LDAP_CONTROLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7869>7869</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7870>7870</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7871>7871</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7872>7872</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7873>7873</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7874>7874</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7875>7875</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7876>7876</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7877>7877</a></td>\n' +
            '<td>ldap_control_create, ldap_control_find, ldap_control_dup, ldap_controls_dup, ldap_control_free, ldap_controls_free − LDAP control manipulation routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7878>7878</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7879>7879</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7880>7880</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7881>7881</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7882>7882</a></td>\n' +
            '<td>int ldap_control_create(const char *oid, int iscritical, struct berval *value, int dupval, LDAPControl **ctrlp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7883>7883</a></td>\n' +
            '<td>LDAPControl *ldap_control_find( const char *oid, LDAPControl **ctrls, LDAPControl ***nextctrlp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7884>7884</a></td>\n' +
            '<td>LDAPControl *ldap_control_dup(LDAPControl *ctrl);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7885>7885</a></td>\n' +
            '<td>LDAPControl **ldap_controls_dup(LDAPControl **ctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7886>7886</a></td>\n' +
            '<td>void ldap_control_free(LDAPControl *ctrl);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7887>7887</a></td>\n' +
            '<td>void ldap_controls_free(LDAPControl **ctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7888>7888</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7889>7889</a></td>\n' +
            '<td>These routines are used to manipulate structures used for LDAP controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7890>7890</a></td>\n' +
            '<td>ldap_control_create() creates a control with the specified OID using the contents of the value parameter for the control value, if any. The content of value is duplicated if dupval is non-zero. The iscritical parameter must be non-zero for a critical control. The created control is returned in the ctrlp parameter. The routine returns LDAP_SUCCESS on success or some other error code on failure. The content of value, for supported control types, can be prepared using helpers provided by this implementation of libldap, usually in the form ldap_create_&lt;control name&gt;_control_value(). Otherwise, it can be BER-encoded using the functionalities of liblber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7891>7891</a></td>\n' +
            '<td>ldap_control_find() searches the NULL-terminated ctrls array for a control whose OID matches the oid parameter. The routine returns a pointer to the control if found, NULL otherwise. If the parameter nextctrlp is not NULL, on return it will point to the next control in the array, and can be passed to the ldap_control_find() routine for subsequent calls, to find further occurrences of the same control type. The use of this function is discouraged; the recommended way of handling controls in responses consists in going through the array of controls, dealing with each of them in the returned order, since it could matter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7892>7892</a></td>\n' +
            '<td>ldap_control_dup() duplicates an individual control structure, and ldap_controls_dup() duplicates a NULL-terminated array of controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7893>7893</a></td>\n' +
            '<td>ldap_control_free() frees an individual control structure, and ldap_controls_free() frees a NULL-terminated array of controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7894>7894</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7895>7895</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7896>7896</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7897>7897</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7898>7898</a></td>\n' +
            '<td>LDAP_CONTROLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7899>7899</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7900>7900</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7901>7901</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7902>7902</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7903>7903</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7904>7904</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7905>7905</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7906>7906</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7907>7907</a></td>\n' +
            '<td>ldap_control_create, ldap_control_find, ldap_control_dup, ldap_controls_dup, ldap_control_free, ldap_controls_free − LDAP control manipulation routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7908>7908</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7909>7909</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7910>7910</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7911>7911</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7912>7912</a></td>\n' +
            '<td>int ldap_control_create(const char *oid, int iscritical, struct berval *value, int dupval, LDAPControl **ctrlp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7913>7913</a></td>\n' +
            '<td>LDAPControl *ldap_control_find( const char *oid, LDAPControl **ctrls, LDAPControl ***nextctrlp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7914>7914</a></td>\n' +
            '<td>LDAPControl *ldap_control_dup(LDAPControl *ctrl);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7915>7915</a></td>\n' +
            '<td>LDAPControl **ldap_controls_dup(LDAPControl **ctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7916>7916</a></td>\n' +
            '<td>void ldap_control_free(LDAPControl *ctrl);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7917>7917</a></td>\n' +
            '<td>void ldap_controls_free(LDAPControl **ctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7918>7918</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7919>7919</a></td>\n' +
            '<td>These routines are used to manipulate structures used for LDAP controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7920>7920</a></td>\n' +
            '<td>ldap_control_create() creates a control with the specified OID using the contents of the value parameter for the control value, if any. The content of value is duplicated if dupval is non-zero. The iscritical parameter must be non-zero for a critical control. The created control is returned in the ctrlp parameter. The routine returns LDAP_SUCCESS on success or some other error code on failure. The content of value, for supported control types, can be prepared using helpers provided by this implementation of libldap, usually in the form ldap_create_&lt;control name&gt;_control_value(). Otherwise, it can be BER-encoded using the functionalities of liblber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7921>7921</a></td>\n' +
            '<td>ldap_control_find() searches the NULL-terminated ctrls array for a control whose OID matches the oid parameter. The routine returns a pointer to the control if found, NULL otherwise. If the parameter nextctrlp is not NULL, on return it will point to the next control in the array, and can be passed to the ldap_control_find() routine for subsequent calls, to find further occurrences of the same control type. The use of this function is discouraged; the recommended way of handling controls in responses consists in going through the array of controls, dealing with each of them in the returned order, since it could matter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7922>7922</a></td>\n' +
            '<td>ldap_control_dup() duplicates an individual control structure, and ldap_controls_dup() duplicates a NULL-terminated array of controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7923>7923</a></td>\n' +
            '<td>ldap_control_free() frees an individual control structure, and ldap_controls_free() frees a NULL-terminated array of controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7924>7924</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7925>7925</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7926>7926</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7927>7927</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7928>7928</a></td>\n' +
            '<td>LDAP_CONTROLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7929>7929</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7930>7930</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7931>7931</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7932>7932</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7933>7933</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7934>7934</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7935>7935</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7936>7936</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7937>7937</a></td>\n' +
            '<td>ldap_control_create, ldap_control_find, ldap_control_dup, ldap_controls_dup, ldap_control_free, ldap_controls_free − LDAP control manipulation routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7938>7938</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7939>7939</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7940>7940</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7941>7941</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7942>7942</a></td>\n' +
            '<td>int ldap_control_create(const char *oid, int iscritical, struct berval *value, int dupval, LDAPControl **ctrlp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7943>7943</a></td>\n' +
            '<td>LDAPControl *ldap_control_find( const char *oid, LDAPControl **ctrls, LDAPControl ***nextctrlp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7944>7944</a></td>\n' +
            '<td>LDAPControl *ldap_control_dup(LDAPControl *ctrl);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7945>7945</a></td>\n' +
            '<td>LDAPControl **ldap_controls_dup(LDAPControl **ctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7946>7946</a></td>\n' +
            '<td>void ldap_control_free(LDAPControl *ctrl);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7947>7947</a></td>\n' +
            '<td>void ldap_controls_free(LDAPControl **ctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7948>7948</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7949>7949</a></td>\n' +
            '<td>These routines are used to manipulate structures used for LDAP controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7950>7950</a></td>\n' +
            '<td>ldap_control_create() creates a control with the specified OID using the contents of the value parameter for the control value, if any. The content of value is duplicated if dupval is non-zero. The iscritical parameter must be non-zero for a critical control. The created control is returned in the ctrlp parameter. The routine returns LDAP_SUCCESS on success or some other error code on failure. The content of value, for supported control types, can be prepared using helpers provided by this implementation of libldap, usually in the form ldap_create_&lt;control name&gt;_control_value(). Otherwise, it can be BER-encoded using the functionalities of liblber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7951>7951</a></td>\n' +
            '<td>ldap_control_find() searches the NULL-terminated ctrls array for a control whose OID matches the oid parameter. The routine returns a pointer to the control if found, NULL otherwise. If the parameter nextctrlp is not NULL, on return it will point to the next control in the array, and can be passed to the ldap_control_find() routine for subsequent calls, to find further occurrences of the same control type. The use of this function is discouraged; the recommended way of handling controls in responses consists in going through the array of controls, dealing with each of them in the returned order, since it could matter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7952>7952</a></td>\n' +
            '<td>ldap_control_dup() duplicates an individual control structure, and ldap_controls_dup() duplicates a NULL-terminated array of controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7953>7953</a></td>\n' +
            '<td>ldap_control_free() frees an individual control structure, and ldap_controls_free() frees a NULL-terminated array of controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7954>7954</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7955>7955</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7956>7956</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7957>7957</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7958>7958</a></td>\n' +
            '<td>LDAP_CONTROLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7959>7959</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7960>7960</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7961>7961</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7962>7962</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7963>7963</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7964>7964</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7965>7965</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7966>7966</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7967>7967</a></td>\n' +
            '<td>ldap_control_create, ldap_control_find, ldap_control_dup, ldap_controls_dup, ldap_control_free, ldap_controls_free − LDAP control manipulation routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7968>7968</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7969>7969</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7970>7970</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7971>7971</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7972>7972</a></td>\n' +
            '<td>int ldap_control_create(const char *oid, int iscritical, struct berval *value, int dupval, LDAPControl **ctrlp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7973>7973</a></td>\n' +
            '<td>LDAPControl *ldap_control_find( const char *oid, LDAPControl **ctrls, LDAPControl ***nextctrlp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7974>7974</a></td>\n' +
            '<td>LDAPControl *ldap_control_dup(LDAPControl *ctrl);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7975>7975</a></td>\n' +
            '<td>LDAPControl **ldap_controls_dup(LDAPControl **ctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7976>7976</a></td>\n' +
            '<td>void ldap_control_free(LDAPControl *ctrl);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7977>7977</a></td>\n' +
            '<td>void ldap_controls_free(LDAPControl **ctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7978>7978</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7979>7979</a></td>\n' +
            '<td>These routines are used to manipulate structures used for LDAP controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7980>7980</a></td>\n' +
            '<td>ldap_control_create() creates a control with the specified OID using the contents of the value parameter for the control value, if any. The content of value is duplicated if dupval is non-zero. The iscritical parameter must be non-zero for a critical control. The created control is returned in the ctrlp parameter. The routine returns LDAP_SUCCESS on success or some other error code on failure. The content of value, for supported control types, can be prepared using helpers provided by this implementation of libldap, usually in the form ldap_create_&lt;control name&gt;_control_value(). Otherwise, it can be BER-encoded using the functionalities of liblber.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7981>7981</a></td>\n' +
            '<td>ldap_control_find() searches the NULL-terminated ctrls array for a control whose OID matches the oid parameter. The routine returns a pointer to the control if found, NULL otherwise. If the parameter nextctrlp is not NULL, on return it will point to the next control in the array, and can be passed to the ldap_control_find() routine for subsequent calls, to find further occurrences of the same control type. The use of this function is discouraged; the recommended way of handling controls in responses consists in going through the array of controls, dealing with each of them in the returned order, since it could matter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7982>7982</a></td>\n' +
            '<td>ldap_control_dup() duplicates an individual control structure, and ldap_controls_dup() duplicates a NULL-terminated array of controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7983>7983</a></td>\n' +
            '<td>ldap_control_free() frees an individual control structure, and ldap_controls_free() frees a NULL-terminated array of controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7984>7984</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7985>7985</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7986>7986</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7987>7987</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7988>7988</a></td>\n' +
            '<td>LDAP_FIRST_ENTRY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7989>7989</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7990>7990</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7991>7991</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7992>7992</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7993>7993</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7994>7994</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7995>7995</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7996>7996</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7997>7997</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7998>7998</a></td>\n' +
            '<td>ldap_first_entry, ldap_next_entry, ldap_count_entries − LDAP result entry parsing and counting routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=7999>7999</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8000>8000</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8001>8001</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8002>8002</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8003>8003</a></td>\n' +
            '<td>int ldap_count_entries( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8004>8004</a></td>\n' +
            '<td>LDAPMessage *ldap_first_entry( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8005>8005</a></td>\n' +
            '<td>LDAPMessage *ldap_next_entry( LDAP *ld, LDAPMessage *entry )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8006>8006</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8007>8007</a></td>\n' +
            '<td>These routines are used to parse results received from ldap_result(3) or the synchronous LDAP search operation routines ldap_search_s(3) and ldap_search_st(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8008>8008</a></td>\n' +
            '<td>The ldap_first_entry() routine is used to retrieve the first entry in a chain of search results. It takes the result as returned by a call to ldap_result(3) or ldap_search_s(3) or ldap_search_st(3) and returns a pointer to the first entry in the result.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8009>8009</a></td>\n' +
            '<td>This pointer should be supplied on a subsequent call to ldap_next_entry() to get the next entry, the result of which should be supplied to the next call to ldap_next_entry(), etc. ldap_next_entry() will return NULL when there are no more entries. The entries returned from these calls are used in calls to the routines described in ldap_get_dn(3), ldap_first_attribute(3), ldap_get_values(3), etc.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8010>8010</a></td>\n' +
            '<td>A count of the number of entries in the search result can be obtained by calling ldap_count_entries().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8011>8011</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8012>8012</a></td>\n' +
            '<td>If an error occurs in ldap_first_entry() or ldap_next_entry(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. If an error occurs in ldap_count_entries(), -1 is returned, and ld_errno is set appropriately. See ldap_error(3) for a description of possible error codes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8013>8013</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8014>8014</a></td>\n' +
            '<td>ldap(3), ldap_result(3), ldap_search(3), ldap_first_attribute(3), ldap_get_values(3), ldap_get_dn(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8015>8015</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8016>8016</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8017>8017</a></td>\n' +
            '<td>LDAP_FIRST_MESSAGE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8018>8018</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8019>8019</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8020>8020</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8021>8021</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8022>8022</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8023>8023</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8024>8024</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8025>8025</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8026>8026</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8027>8027</a></td>\n' +
            '<td>ldap_first_message, ldap_next_message, ldap_count_messages − Stepping through messages in a result chain</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8028>8028</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8029>8029</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8030>8030</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8031>8031</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8032>8032</a></td>\n' +
            '<td>int ldap_count_messages( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8033>8033</a></td>\n' +
            '<td>LDAPMessage *ldap_first_message( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8034>8034</a></td>\n' +
            '<td>LDAPMessage *ldap_next_message( LDAP *ld, LDAPMessage *message )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8035>8035</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8036>8036</a></td>\n' +
            '<td>These routines are used to step through the messages in a result chain received from ldap_result(3). For search operations, the result chain can contain referral, entry and result messages. The ldap_msgtype(3) function can be used to distinguish between the different message types.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8037>8037</a></td>\n' +
            '<td>The ldap_first_message() routine is used to retrieve the first message in a result chain. It takes the result as returned by a call to ldap_result(3), ldap_search_s(3) or ldap_search_st(3) and returns a pointer to the first message in the result chain.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8038>8038</a></td>\n' +
            '<td>This pointer should be supplied on a subsequent call to ldap_next_message() to get the next message, the result of which should be supplied to the next call to ldap_next_message(), etc. ldap_next_message() will return NULL when there are no more messages.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8039>8039</a></td>\n' +
            '<td>These functions are useful when using routines like ldap_parse_result(3) that only operate on the first result in the chain.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8040>8040</a></td>\n' +
            '<td>A count of the number of messages in the result chain can be obtained by calling ldap_count_messages(). It can also be used to count the number of remaining messages in a chain if called with a message, entry or reference returned by ldap_first_message() , ldap_next_message() , ldap_first_entry(3), ldap_next_entry(3), ldap_first_reference(3), ldap_next_reference(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8041>8041</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8042>8042</a></td>\n' +
            '<td>If an error occurs in ldap_first_message() or ldap_next_message(), NULL is returned. If an error occurs in ldap_count_messages(), -1 is returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8043>8043</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8044>8044</a></td>\n' +
            '<td>ldap(3), ldap_search(3), ldap_result(3), ldap_parse_result(3), ldap_first_entry(3), ldap_first_reference(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8045>8045</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8046>8046</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8047>8047</a></td>\n' +
            '<td>LDAP_FIRST_REFERENCE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8048>8048</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8049>8049</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8050>8050</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8051>8051</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8052>8052</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8053>8053</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8054>8054</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8055>8055</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8056>8056</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8057>8057</a></td>\n' +
            '<td>ldap_first_reference, ldap_next_reference, ldap_count_references − Stepping through continuation references in a result chain</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8058>8058</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8059>8059</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8060>8060</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8061>8061</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8062>8062</a></td>\n' +
            '<td>int ldap_count_references( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8063>8063</a></td>\n' +
            '<td>LDAPMessage *ldap_first_reference( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8064>8064</a></td>\n' +
            '<td>LDAPMessage *ldap_next_reference( LDAP *ld, LDAPMessage *reference )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8065>8065</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8066>8066</a></td>\n' +
            '<td>These routines are used to step through the continuation references in a result chain received from ldap_result(3) or the synchronous LDAP search operation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8067>8067</a></td>\n' +
            '<td>The ldap_first_reference() routine is used to retrieve the first reference message in a result chain. It takes the result as returned by a call to ldap_result(3), ldap_search_s(3) or ldap_search_st(3) and returns a pointer to the first reference message in the result chain.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8068>8068</a></td>\n' +
            '<td>This pointer should be supplied on a subsequent call to ldap_next_reference() to get the next reference message, the result of which should be supplied to the next call to ldap_next_reference(), etc. ldap_next_reference() will return NULL when there are no more reference messages. The reference messages returned from these calls are used by ldap_parse_reference(3) to extract referrals and controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8069>8069</a></td>\n' +
            '<td>A count of the number of reference messages in the search result can be obtained by calling ldap_count_references(). It can also be used to count the number of reference messages remaining in a result chain.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8070>8070</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8071>8071</a></td>\n' +
            '<td>If an error occurs in ldap_first_reference() or ldap_next_reference(), NULL is returned. If an error occurs in ldap_count_references(), -1 is returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8072>8072</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8073>8073</a></td>\n' +
            '<td>ldap(3), ldap_result(3), ldap_search(3), ldap_parse_reference(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8074>8074</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8075>8075</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8076>8076</a></td>\n' +
            '<td>LDAP_GET_VALUES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8077>8077</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8078>8078</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8079>8079</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8080>8080</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8081>8081</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8082>8082</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8083>8083</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8084>8084</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8085>8085</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8086>8086</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8087>8087</a></td>\n' +
            '<td>ldap_get_values, ldap_get_values_len, ldap_count_values − LDAP attribute value handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8088>8088</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8089>8089</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8090>8090</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8091>8091</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8092>8092</a></td>\n' +
            '<td>char **ldap_get_values(ld, entry, attr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8093>8093</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8094>8094</a></td>\n' +
            '<td>LDAPMessage *entry;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8095>8095</a></td>\n' +
            '<td>char *attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8096>8096</a></td>\n' +
            '<td>struct berval **ldap_get_values_len(ld, entry, attr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8097>8097</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8098>8098</a></td>\n' +
            '<td>LDAPMessage *entry;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8099>8099</a></td>\n' +
            '<td>char *attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8100>8100</a></td>\n' +
            '<td>int ldap_count_values(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8101>8101</a></td>\n' +
            '<td>char **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8102>8102</a></td>\n' +
            '<td>int ldap_count_values_len(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8103>8103</a></td>\n' +
            '<td>struct berval **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8104>8104</a></td>\n' +
            '<td>void ldap_value_free(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8105>8105</a></td>\n' +
            '<td>char **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8106>8106</a></td>\n' +
            '<td>void ldap_value_free_len(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8107>8107</a></td>\n' +
            '<td>struct berval **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8108>8108</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8109>8109</a></td>\n' +
            '<td>These routines are used to retrieve and manipulate attribute values from an LDAP entry as returned by ldap_first_entry(3) or ldap_next_entry(3). ldap_get_values() takes the entry and the attribute attr whose values are desired and returns a NULL-terminated array of the attribute’s values. attr may be an attribute type as returned from ldap_first_attribute(3) or ldap_next_attribute(3), or if the attribute type is known it can simply be given.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8110>8110</a></td>\n' +
            '<td>The number of values in the array can be counted by calling ldap_count_values(). The array of values returned can be freed by calling ldap_value_free().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8111>8111</a></td>\n' +
            '<td>If the attribute values are binary in nature, and thus not suitable to be returned as an array of char *’s, the ldap_get_values_len() routine can be used instead. It takes the same parameters as ldap_get_values(), but returns a NULL-terminated array of pointers to berval structures, each containing the length of and a pointer to a value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8112>8112</a></td>\n' +
            '<td>The number of values in the array can be counted by calling ldap_count_values_len(). The array of values returned can be freed by calling ldap_value_free_len().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8113>8113</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8114>8114</a></td>\n' +
            '<td>If an error occurs in ldap_get_values() or ldap_get_values_len(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8115>8115</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8116>8116</a></td>\n' +
            '<td>These routines dynamically allocate memory which the caller must free using the supplied routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8117>8117</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8118>8118</a></td>\n' +
            '<td>ldap(3), ldap_first_entry(3), ldap_first_attribute(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8119>8119</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8120>8120</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8121>8121</a></td>\n' +
            '<td>LDAP_GET_VALUES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8122>8122</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8123>8123</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8124>8124</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8125>8125</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8126>8126</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8127>8127</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8128>8128</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8129>8129</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8130>8130</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8131>8131</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8132>8132</a></td>\n' +
            '<td>ldap_get_values, ldap_get_values_len, ldap_count_values − LDAP attribute value handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8133>8133</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8134>8134</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8135>8135</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8136>8136</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8137>8137</a></td>\n' +
            '<td>char **ldap_get_values(ld, entry, attr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8138>8138</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8139>8139</a></td>\n' +
            '<td>LDAPMessage *entry;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8140>8140</a></td>\n' +
            '<td>char *attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8141>8141</a></td>\n' +
            '<td>struct berval **ldap_get_values_len(ld, entry, attr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8142>8142</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8143>8143</a></td>\n' +
            '<td>LDAPMessage *entry;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8144>8144</a></td>\n' +
            '<td>char *attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8145>8145</a></td>\n' +
            '<td>int ldap_count_values(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8146>8146</a></td>\n' +
            '<td>char **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8147>8147</a></td>\n' +
            '<td>int ldap_count_values_len(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8148>8148</a></td>\n' +
            '<td>struct berval **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8149>8149</a></td>\n' +
            '<td>void ldap_value_free(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8150>8150</a></td>\n' +
            '<td>char **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8151>8151</a></td>\n' +
            '<td>void ldap_value_free_len(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8152>8152</a></td>\n' +
            '<td>struct berval **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8153>8153</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8154>8154</a></td>\n' +
            '<td>These routines are used to retrieve and manipulate attribute values from an LDAP entry as returned by ldap_first_entry(3) or ldap_next_entry(3). ldap_get_values() takes the entry and the attribute attr whose values are desired and returns a NULL-terminated array of the attribute’s values. attr may be an attribute type as returned from ldap_first_attribute(3) or ldap_next_attribute(3), or if the attribute type is known it can simply be given.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8155>8155</a></td>\n' +
            '<td>The number of values in the array can be counted by calling ldap_count_values(). The array of values returned can be freed by calling ldap_value_free().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8156>8156</a></td>\n' +
            '<td>If the attribute values are binary in nature, and thus not suitable to be returned as an array of char *’s, the ldap_get_values_len() routine can be used instead. It takes the same parameters as ldap_get_values(), but returns a NULL-terminated array of pointers to berval structures, each containing the length of and a pointer to a value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8157>8157</a></td>\n' +
            '<td>The number of values in the array can be counted by calling ldap_count_values_len(). The array of values returned can be freed by calling ldap_value_free_len().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8158>8158</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8159>8159</a></td>\n' +
            '<td>If an error occurs in ldap_get_values() or ldap_get_values_len(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8160>8160</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8161>8161</a></td>\n' +
            '<td>These routines dynamically allocate memory which the caller must free using the supplied routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8162>8162</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8163>8163</a></td>\n' +
            '<td>ldap(3), ldap_first_entry(3), ldap_first_attribute(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8164>8164</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8165>8165</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8166>8166</a></td>\n' +
            '<td>LDAP_GET_DN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8167>8167</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8168>8168</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8169>8169</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8170>8170</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8171>8171</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8172>8172</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8173>8173</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8174>8174</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8175>8175</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8176>8176</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8177>8177</a></td>\n' +
            '<td>ldap_get_dn, ldap_explode_dn, ldap_explode_rdn, ldap_dn2ufn − LDAP DN handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8178>8178</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8179>8179</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8180>8180</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8181>8181</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8182>8182</a></td>\n' +
            '<td>char *ldap_get_dn( LDAP *ld, LDAPMessage *entry )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8183>8183</a></td>\n' +
            '<td>int ldap_str2dn( const char *str, LDAPDN *dn, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8184>8184</a></td>\n' +
            '<td>void ldap_dnfree( LDAPDN dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8185>8185</a></td>\n' +
            '<td>int ldap_dn2str( LDAPDN dn, char **str, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8186>8186</a></td>\n' +
            '<td>char **ldap_explode_dn( const char *dn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8187>8187</a></td>\n' +
            '<td>char **ldap_explode_rdn( const char *rdn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8188>8188</a></td>\n' +
            '<td>char *ldap_dn2ufn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8189>8189</a></td>\n' +
            '<td>char *ldap_dn2dcedn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8190>8190</a></td>\n' +
            '<td>char *ldap_dcedn2dn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8191>8191</a></td>\n' +
            '<td>char *ldap_dn2ad_canonical( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8192>8192</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8193>8193</a></td>\n' +
            '<td>These routines allow LDAP entry names (Distinguished Names, or DNs) to be obtained, parsed, converted to a user-friendly form, and tested. A DN has the form described in RFC 4414 "Lightweight Directory Access Protocol (LDAP): String Representation of Distinguished Names".</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8194>8194</a></td>\n' +
            '<td>The ldap_get_dn() routine takes an entry as returned by ldap_first_entry(3) or ldap_next_entry(3) and returns a copy of the entry’s DN. Space for the DN will be obtained dynamically and should be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8195>8195</a></td>\n' +
            '<td>ldap_str2dn() parses a string representation of a distinguished name contained in str into its components, which are stored in dn as ldap_ava structures, arranged in LDAPAVA, LDAPRDN, and LDAPDN terms. Space for dn will be obtained dynamically and should be freed by the caller using ldap_dnfree(3). The LDAPDN is defined as:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8196>8196</a></td>\n' +
            '<td>typedef struct ldap_ava {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8197>8197</a></td>\n' +
            '<td>struct berval la_attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8198>8198</a></td>\n' +
            '<td>struct berval la_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8199>8199</a></td>\n' +
            '<td>unsigned la_flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8200>8200</a></td>\n' +
            '<td>} LDAPAVA;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8201>8201</a></td>\n' +
            '<td>typedef LDAPAVA** LDAPRDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8202>8202</a></td>\n' +
            '<td>typedef LDAPRDN* LDAPDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8203>8203</a></td>\n' +
            '<td>The attribute types and the attribute values are not normalized. The la_flags can be either LDAP_AVA_STRING or LDAP_AVA_BINARY, the latter meaning that the value is BER/DER encoded and thus must be represented as, quoting from RFC 4514, " ... an octothorpe character (’#’ ASCII 35) followed by the hexadecimal representation of each of the bytes of the BER encoding of the X.500 AttributeValue." The flags parameter to ldap_str2dn() can be</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8204>8204</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8205>8205</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8206>8206</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 3</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8207>8207</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8208>8208</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8209>8209</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 2</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8210>8210</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8211>8211</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8212>8212</a></td>\n' +
            '<td>LDAP_DN_FORMAT_DCE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8213>8213</a></td>\n' +
            '<td>which defines what DN syntax is expected (according to RFC 4514, RFC 1779 and DCE, respectively). The format can be ORed to the flags</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8214>8214</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8215>8215</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8216>8216</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8217>8217</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8218>8218</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8219>8219</a></td>\n' +
            '<td>...</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8220>8220</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8221>8221</a></td>\n' +
            '<td>LDAP_DN_PEDANTIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8222>8222</a></td>\n' +
            '<td>The latter is a shortcut for all the previous limitations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8223>8223</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES does not allow extra spaces in the dn; the default is to silently eliminate spaces around AVA separators (’=’), RDN component separators (’+’ for LDAPv3/LDAPv2 or ’,’ for DCE) and RDN separators (’,’ LDAPv3/LDAPv2 or ’/’ for DCE).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8224>8224</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN does not allow a single space after RDN separators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8225>8225</a></td>\n' +
            '<td>ldap_dn2str() performs the inverse operation, yielding in str a string representation of dn. It allows the same values for flags as ldap_str2dn(), plus</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8226>8226</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8227>8227</a></td>\n' +
            '<td>LDAP_DN_FORMAT_UFN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8228>8228</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8229>8229</a></td>\n' +
            '<td>LDAP_DN_FORMAT_AD_CANONICAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8230>8230</a></td>\n' +
            '<td>for user-friendly naming (RFC 1781) and AD canonical.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8231>8231</a></td>\n' +
            '<td>The following routines are viewed as deprecated in favor of ldap_str2dn() and ldap_dn2str(). They are provided to support legacy applications.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8232>8232</a></td>\n' +
            '<td>The ldap_explode_dn() routine takes a DN as returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as a Relative Distinguished Name, or RDN. ldap_explode_dn() returns a NULL-terminated array, each component of which contains an RDN from the DN. The notypes parameter is used to request that only the RDN values be returned, not their types. For example, the DN "cn=Bob, c=US" would return as either { "cn=Bob", "c=US", NULL } or { "Bob", "US", NULL }, depending on whether notypes was 0 or 1, respectively. Assertion values in RDN strings may included escaped characters. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8233>8233</a></td>\n' +
            '<td>Similarly, the ldap_explode_rdn() routine takes an RDN as returned by ldap_explode_dn(dn,0) and breaks it up into its "type=value" component parts (or just "value", if the notypes parameter is set). Note the value is not unescaped. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8234>8234</a></td>\n' +
            '<td>ldap_dn2ufn() is used to turn a DN as returned by ldap_get_dn(3) into a more user-friendly form, stripping off all type names. See "Using the Directory to Achieve User Friendly Naming" (RFC 1781) for more details on the UFN format. Due to the ambiguous nature of the format, it is generally only used for display purposes. The space for the UFN returned is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8235>8235</a></td>\n' +
            '<td>ldap_dn2dcedn() is used to turn a DN as returned by ldap_get_dn(3) into a DCE-style DN, e.g. a string with most-significant to least significant rdns separated by slashes (’/’); rdn components are separated by commas (’,’). Only printable chars (e.g. LDAPv2 printable string) are allowed, at least in this implementation. ldap_dcedn2dn() performs the opposite operation. ldap_dn2ad_canonical() turns a DN into a AD canonical name, which is basically a DCE dn with attribute types omitted. The trailing domain, if present, is turned in a DNS-like domain. The space for the returned value is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8236>8236</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8237>8237</a></td>\n' +
            '<td>If an error occurs in ldap_get_dn(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes. ldap_explode_dn(), ldap_explode_rdn(), ldap_dn2ufn(), ldap_dn2dcedn(), ldap_dcedn2dn(), and ldap_dn2ad_canonical() will return NULL with errno(3) set appropriately in case of trouble.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8238>8238</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8239>8239</a></td>\n' +
            '<td>These routines dynamically allocate memory that the caller must free.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8240>8240</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8241>8241</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_first_entry(3), ldap_memfree(3), ldap_value_free(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8242>8242</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8243>8243</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8244>8244</a></td>\n' +
            '<td>LDAP_DELETE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8245>8245</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8246>8246</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8247>8247</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8248>8248</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8249>8249</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8250>8250</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8251>8251</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8252>8252</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8253>8253</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8254>8254</a></td>\n' +
            '<td>ldap_delete, ldap_delete_s, ldap_delete_ext, ldap_delete_ext_s − Perform an LDAP delete operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8255>8255</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8256>8256</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8257>8257</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8258>8258</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8259>8259</a></td>\n' +
            '<td>int ldap_delete_s(ld, dn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8260>8260</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8261>8261</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8262>8262</a></td>\n' +
            '<td>int ldap_delete(ld, dn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8263>8263</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8264>8264</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8265>8265</a></td>\n' +
            '<td>int ldap_delete_ext(ld, dn, serverctrls, clientctrls, msgidp)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8266>8266</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8267>8267</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8268>8268</a></td>\n' +
            '<td>LDAPControl **serverctrls, **clientctrls;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8269>8269</a></td>\n' +
            '<td>int *msgidp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8270>8270</a></td>\n' +
            '<td>int ldap_delete_ext_s(ld, dn, serverctrls, clientctrls)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8271>8271</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8272>8272</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8273>8273</a></td>\n' +
            '<td>LDAPControl **serverctrls, **clientctrls;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8274>8274</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8275>8275</a></td>\n' +
            '<td>The ldap_delete_s() routine is used to perform an LDAP delete operation synchronously. It takes dn, the DN of the entry to be deleted. It returns an LDAP error code, indicating the success or failure of the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8276>8276</a></td>\n' +
            '<td>The ldap_delete() routine is used to perform an LDAP delete operation asynchronously. It takes the same parameters as ldap_delete_s(), but returns the message id of the request it initiated. The result of the delete can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8277>8277</a></td>\n' +
            '<td>The ldap_delete_ext() routine allows server and client controls to be specified to extend the delete request. This routine is asynchronous like ldap_delete(), but its return value is an LDAP error code. It stores the message id of the request in the integer pointed to by msgidp.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8278>8278</a></td>\n' +
            '<td>The ldap_delete_ext_s() routine is the synchronous version of ldap_delete_ext(). It also returns an LDAP error code indicating success or failure of the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8279>8279</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8280>8280</a></td>\n' +
            '<td>ldap_delete_s() returns an LDAP error code which can be interpreted by calling one of ldap_perror(3) and friends. ldap_delete() returns −1 if something went wrong initiating the request. It returns the non-negative message id of the request if things went ok.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8281>8281</a></td>\n' +
            '<td>ldap_delete_ext() and ldap_delete_ext_s() return some Non-zero value if something went wrong initiating the request, else return 0.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8282>8282</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8283>8283</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8284>8284</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8285>8285</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8286>8286</a></td>\n' +
            '<td>LDAP_DELETE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8287>8287</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8288>8288</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8289>8289</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8290>8290</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8291>8291</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8292>8292</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8293>8293</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8294>8294</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8295>8295</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8296>8296</a></td>\n' +
            '<td>ldap_delete, ldap_delete_s, ldap_delete_ext, ldap_delete_ext_s − Perform an LDAP delete operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8297>8297</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8298>8298</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8299>8299</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8300>8300</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8301>8301</a></td>\n' +
            '<td>int ldap_delete_s(ld, dn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8302>8302</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8303>8303</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8304>8304</a></td>\n' +
            '<td>int ldap_delete(ld, dn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8305>8305</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8306>8306</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8307>8307</a></td>\n' +
            '<td>int ldap_delete_ext(ld, dn, serverctrls, clientctrls, msgidp)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8308>8308</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8309>8309</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8310>8310</a></td>\n' +
            '<td>LDAPControl **serverctrls, **clientctrls;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8311>8311</a></td>\n' +
            '<td>int *msgidp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8312>8312</a></td>\n' +
            '<td>int ldap_delete_ext_s(ld, dn, serverctrls, clientctrls)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8313>8313</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8314>8314</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8315>8315</a></td>\n' +
            '<td>LDAPControl **serverctrls, **clientctrls;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8316>8316</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8317>8317</a></td>\n' +
            '<td>The ldap_delete_s() routine is used to perform an LDAP delete operation synchronously. It takes dn, the DN of the entry to be deleted. It returns an LDAP error code, indicating the success or failure of the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8318>8318</a></td>\n' +
            '<td>The ldap_delete() routine is used to perform an LDAP delete operation asynchronously. It takes the same parameters as ldap_delete_s(), but returns the message id of the request it initiated. The result of the delete can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8319>8319</a></td>\n' +
            '<td>The ldap_delete_ext() routine allows server and client controls to be specified to extend the delete request. This routine is asynchronous like ldap_delete(), but its return value is an LDAP error code. It stores the message id of the request in the integer pointed to by msgidp.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8320>8320</a></td>\n' +
            '<td>The ldap_delete_ext_s() routine is the synchronous version of ldap_delete_ext(). It also returns an LDAP error code indicating success or failure of the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8321>8321</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8322>8322</a></td>\n' +
            '<td>ldap_delete_s() returns an LDAP error code which can be interpreted by calling one of ldap_perror(3) and friends. ldap_delete() returns −1 if something went wrong initiating the request. It returns the non-negative message id of the request if things went ok.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8323>8323</a></td>\n' +
            '<td>ldap_delete_ext() and ldap_delete_ext_s() return some Non-zero value if something went wrong initiating the request, else return 0.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8324>8324</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8325>8325</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8326>8326</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8327>8327</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8328>8328</a></td>\n' +
            '<td>LDAP_DELETE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8329>8329</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8330>8330</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8331>8331</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8332>8332</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8333>8333</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8334>8334</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8335>8335</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8336>8336</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8337>8337</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8338>8338</a></td>\n' +
            '<td>ldap_delete, ldap_delete_s, ldap_delete_ext, ldap_delete_ext_s − Perform an LDAP delete operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8339>8339</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8340>8340</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8341>8341</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8342>8342</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8343>8343</a></td>\n' +
            '<td>int ldap_delete_s(ld, dn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8344>8344</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8345>8345</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8346>8346</a></td>\n' +
            '<td>int ldap_delete(ld, dn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8347>8347</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8348>8348</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8349>8349</a></td>\n' +
            '<td>int ldap_delete_ext(ld, dn, serverctrls, clientctrls, msgidp)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8350>8350</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8351>8351</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8352>8352</a></td>\n' +
            '<td>LDAPControl **serverctrls, **clientctrls;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8353>8353</a></td>\n' +
            '<td>int *msgidp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8354>8354</a></td>\n' +
            '<td>int ldap_delete_ext_s(ld, dn, serverctrls, clientctrls)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8355>8355</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8356>8356</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8357>8357</a></td>\n' +
            '<td>LDAPControl **serverctrls, **clientctrls;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8358>8358</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8359>8359</a></td>\n' +
            '<td>The ldap_delete_s() routine is used to perform an LDAP delete operation synchronously. It takes dn, the DN of the entry to be deleted. It returns an LDAP error code, indicating the success or failure of the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8360>8360</a></td>\n' +
            '<td>The ldap_delete() routine is used to perform an LDAP delete operation asynchronously. It takes the same parameters as ldap_delete_s(), but returns the message id of the request it initiated. The result of the delete can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8361>8361</a></td>\n' +
            '<td>The ldap_delete_ext() routine allows server and client controls to be specified to extend the delete request. This routine is asynchronous like ldap_delete(), but its return value is an LDAP error code. It stores the message id of the request in the integer pointed to by msgidp.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8362>8362</a></td>\n' +
            '<td>The ldap_delete_ext_s() routine is the synchronous version of ldap_delete_ext(). It also returns an LDAP error code indicating success or failure of the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8363>8363</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8364>8364</a></td>\n' +
            '<td>ldap_delete_s() returns an LDAP error code which can be interpreted by calling one of ldap_perror(3) and friends. ldap_delete() returns −1 if something went wrong initiating the request. It returns the non-negative message id of the request if things went ok.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8365>8365</a></td>\n' +
            '<td>ldap_delete_ext() and ldap_delete_ext_s() return some Non-zero value if something went wrong initiating the request, else return 0.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8366>8366</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8367>8367</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8368>8368</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8369>8369</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8370>8370</a></td>\n' +
            '<td>LDAP_DELETE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8371>8371</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8372>8372</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8373>8373</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8374>8374</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8375>8375</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8376>8376</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8377>8377</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8378>8378</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8379>8379</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8380>8380</a></td>\n' +
            '<td>ldap_delete, ldap_delete_s, ldap_delete_ext, ldap_delete_ext_s − Perform an LDAP delete operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8381>8381</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8382>8382</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8383>8383</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8384>8384</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8385>8385</a></td>\n' +
            '<td>int ldap_delete_s(ld, dn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8386>8386</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8387>8387</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8388>8388</a></td>\n' +
            '<td>int ldap_delete(ld, dn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8389>8389</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8390>8390</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8391>8391</a></td>\n' +
            '<td>int ldap_delete_ext(ld, dn, serverctrls, clientctrls, msgidp)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8392>8392</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8393>8393</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8394>8394</a></td>\n' +
            '<td>LDAPControl **serverctrls, **clientctrls;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8395>8395</a></td>\n' +
            '<td>int *msgidp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8396>8396</a></td>\n' +
            '<td>int ldap_delete_ext_s(ld, dn, serverctrls, clientctrls)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8397>8397</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8398>8398</a></td>\n' +
            '<td>char *dn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8399>8399</a></td>\n' +
            '<td>LDAPControl **serverctrls, **clientctrls;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8400>8400</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8401>8401</a></td>\n' +
            '<td>The ldap_delete_s() routine is used to perform an LDAP delete operation synchronously. It takes dn, the DN of the entry to be deleted. It returns an LDAP error code, indicating the success or failure of the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8402>8402</a></td>\n' +
            '<td>The ldap_delete() routine is used to perform an LDAP delete operation asynchronously. It takes the same parameters as ldap_delete_s(), but returns the message id of the request it initiated. The result of the delete can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8403>8403</a></td>\n' +
            '<td>The ldap_delete_ext() routine allows server and client controls to be specified to extend the delete request. This routine is asynchronous like ldap_delete(), but its return value is an LDAP error code. It stores the message id of the request in the integer pointed to by msgidp.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8404>8404</a></td>\n' +
            '<td>The ldap_delete_ext_s() routine is the synchronous version of ldap_delete_ext(). It also returns an LDAP error code indicating success or failure of the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8405>8405</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8406>8406</a></td>\n' +
            '<td>ldap_delete_s() returns an LDAP error code which can be interpreted by calling one of ldap_perror(3) and friends. ldap_delete() returns −1 if something went wrong initiating the request. It returns the non-negative message id of the request if things went ok.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8407>8407</a></td>\n' +
            '<td>ldap_delete_ext() and ldap_delete_ext_s() return some Non-zero value if something went wrong initiating the request, else return 0.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8408>8408</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8409>8409</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8410>8410</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8411>8411</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8412>8412</a></td>\n' +
            '<td>LDAP_OPEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8413>8413</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8414>8414</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8415>8415</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8416>8416</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8417>8417</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8418>8418</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8419>8419</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8420>8420</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8421>8421</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8422>8422</a></td>\n' +
            '<td>ldap_dup, ldap_destroy, − Duplicate and destroy LDAP session handles</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8423>8423</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8424>8424</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8425>8425</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8426>8426</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8427>8427</a></td>\n' +
            '<td>LDAP *ldap_dup(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8428>8428</a></td>\n' +
            '<td>LDAP *old );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8429>8429</a></td>\n' +
            '<td>int ldap_destroy(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8430>8430</a></td>\n' +
            '<td>LDAP *old );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8431>8431</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8432>8432</a></td>\n' +
            '<td>ldap_dup() duplicates an existing LDAP (LDAP *) session handle. The new session handle may be used concurrently with the original session handle. In a threaded environment, different threads may execute concurrent requests on the same connection/session without fear of contamination. Each session handle manages its own private error results.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8433>8433</a></td>\n' +
            '<td>ldap_destroy() destroys an existing session handle.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8434>8434</a></td>\n' +
            '<td>The ldap_dup() and ldap_destroy() functions are used in conjunction with a "thread safe" version of libldap (libldap_r) to enable operation thread safe API calls, so that a single session may be simultaneously used across multiple threads with consistent error handling.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8435>8435</a></td>\n' +
            '<td>When a session is created through the use of one of the session creation functions including ldap_open(3), ldap_init(3), ldap_initialize(3) or ldap_init_fd(3) an LDAP * session handle is returned to the application. The session handle may be shared amongst threads, however the error codes are unique to a session handle. Multiple threads performing different operations using the same session handle will result in inconsistent error codes and return values.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8436>8436</a></td>\n' +
            '<td>To prevent this confusion, ldap_dup() is used duplicate an existing session handle so that multiple threads can share the session, and maintain consistent error information and results.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8437>8437</a></td>\n' +
            '<td>The message queues for a session are shared between sibling session handles. Results of operations on a sibling session handles are accessible to all the sibling session handles. Applications desiring results associated with a specific operation should provide the appropriate msgid to ldap_result(). Applications should avoid calling ldap_result() with LDAP_RES_ANY as that may "steal" and return results in the calling thread that another operation in a different thread, using a different session handle, may require to complete.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8438>8438</a></td>\n' +
            '<td>When ldap_unbind() is called on a session handle with siblings, all the siblings become invalid.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8439>8439</a></td>\n' +
            '<td>Siblings must be destroyed using ldap_destroy(). Session handle resources associated with the original (LDAP *) will be freed when the last session handle is destroyed or when ldap_unbind() is called, if no other session handles currently exist.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8440>8440</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8441>8441</a></td>\n' +
            '<td>If an error occurs, ldap_dup() will return NULL and errno should be set appropriately. ldap_destroy() will directly return the LDAP code associated to the error (or LDAP_SUCCESS in case of success); errno should be set as well whenever appropriate.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8442>8442</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8443>8443</a></td>\n' +
            '<td>ldap_open(3), ldap_init(3), ldap_initialize(3), ldap_init_fd(3), errno(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8444>8444</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8445>8445</a></td>\n' +
            '<td>This work is based on the previously proposed LDAP C API Concurrency Extensions draft (draft-zeilenga-ldap-c-api-concurrency-00.txt) effort. OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8446>8446</a></td>\n' +
            '<td>LDAP_GET_DN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8447>8447</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8448>8448</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8449>8449</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8450>8450</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8451>8451</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8452>8452</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8453>8453</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8454>8454</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8455>8455</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8456>8456</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8457>8457</a></td>\n' +
            '<td>ldap_get_dn, ldap_explode_dn, ldap_explode_rdn, ldap_dn2ufn − LDAP DN handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8458>8458</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8459>8459</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8460>8460</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8461>8461</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8462>8462</a></td>\n' +
            '<td>char *ldap_get_dn( LDAP *ld, LDAPMessage *entry )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8463>8463</a></td>\n' +
            '<td>int ldap_str2dn( const char *str, LDAPDN *dn, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8464>8464</a></td>\n' +
            '<td>void ldap_dnfree( LDAPDN dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8465>8465</a></td>\n' +
            '<td>int ldap_dn2str( LDAPDN dn, char **str, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8466>8466</a></td>\n' +
            '<td>char **ldap_explode_dn( const char *dn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8467>8467</a></td>\n' +
            '<td>char **ldap_explode_rdn( const char *rdn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8468>8468</a></td>\n' +
            '<td>char *ldap_dn2ufn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8469>8469</a></td>\n' +
            '<td>char *ldap_dn2dcedn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8470>8470</a></td>\n' +
            '<td>char *ldap_dcedn2dn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8471>8471</a></td>\n' +
            '<td>char *ldap_dn2ad_canonical( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8472>8472</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8473>8473</a></td>\n' +
            '<td>These routines allow LDAP entry names (Distinguished Names, or DNs) to be obtained, parsed, converted to a user-friendly form, and tested. A DN has the form described in RFC 4414 "Lightweight Directory Access Protocol (LDAP): String Representation of Distinguished Names".</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8474>8474</a></td>\n' +
            '<td>The ldap_get_dn() routine takes an entry as returned by ldap_first_entry(3) or ldap_next_entry(3) and returns a copy of the entry’s DN. Space for the DN will be obtained dynamically and should be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8475>8475</a></td>\n' +
            '<td>ldap_str2dn() parses a string representation of a distinguished name contained in str into its components, which are stored in dn as ldap_ava structures, arranged in LDAPAVA, LDAPRDN, and LDAPDN terms. Space for dn will be obtained dynamically and should be freed by the caller using ldap_dnfree(3). The LDAPDN is defined as:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8476>8476</a></td>\n' +
            '<td>typedef struct ldap_ava {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8477>8477</a></td>\n' +
            '<td>struct berval la_attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8478>8478</a></td>\n' +
            '<td>struct berval la_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8479>8479</a></td>\n' +
            '<td>unsigned la_flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8480>8480</a></td>\n' +
            '<td>} LDAPAVA;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8481>8481</a></td>\n' +
            '<td>typedef LDAPAVA** LDAPRDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8482>8482</a></td>\n' +
            '<td>typedef LDAPRDN* LDAPDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8483>8483</a></td>\n' +
            '<td>The attribute types and the attribute values are not normalized. The la_flags can be either LDAP_AVA_STRING or LDAP_AVA_BINARY, the latter meaning that the value is BER/DER encoded and thus must be represented as, quoting from RFC 4514, " ... an octothorpe character (’#’ ASCII 35) followed by the hexadecimal representation of each of the bytes of the BER encoding of the X.500 AttributeValue." The flags parameter to ldap_str2dn() can be</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8484>8484</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8485>8485</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8486>8486</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 3</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8487>8487</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8488>8488</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8489>8489</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 2</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8490>8490</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8491>8491</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8492>8492</a></td>\n' +
            '<td>LDAP_DN_FORMAT_DCE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8493>8493</a></td>\n' +
            '<td>which defines what DN syntax is expected (according to RFC 4514, RFC 1779 and DCE, respectively). The format can be ORed to the flags</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8494>8494</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8495>8495</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8496>8496</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8497>8497</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8498>8498</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8499>8499</a></td>\n' +
            '<td>...</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8500>8500</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8501>8501</a></td>\n' +
            '<td>LDAP_DN_PEDANTIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8502>8502</a></td>\n' +
            '<td>The latter is a shortcut for all the previous limitations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8503>8503</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES does not allow extra spaces in the dn; the default is to silently eliminate spaces around AVA separators (’=’), RDN component separators (’+’ for LDAPv3/LDAPv2 or ’,’ for DCE) and RDN separators (’,’ LDAPv3/LDAPv2 or ’/’ for DCE).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8504>8504</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN does not allow a single space after RDN separators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8505>8505</a></td>\n' +
            '<td>ldap_dn2str() performs the inverse operation, yielding in str a string representation of dn. It allows the same values for flags as ldap_str2dn(), plus</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8506>8506</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8507>8507</a></td>\n' +
            '<td>LDAP_DN_FORMAT_UFN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8508>8508</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8509>8509</a></td>\n' +
            '<td>LDAP_DN_FORMAT_AD_CANONICAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8510>8510</a></td>\n' +
            '<td>for user-friendly naming (RFC 1781) and AD canonical.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8511>8511</a></td>\n' +
            '<td>The following routines are viewed as deprecated in favor of ldap_str2dn() and ldap_dn2str(). They are provided to support legacy applications.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8512>8512</a></td>\n' +
            '<td>The ldap_explode_dn() routine takes a DN as returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as a Relative Distinguished Name, or RDN. ldap_explode_dn() returns a NULL-terminated array, each component of which contains an RDN from the DN. The notypes parameter is used to request that only the RDN values be returned, not their types. For example, the DN "cn=Bob, c=US" would return as either { "cn=Bob", "c=US", NULL } or { "Bob", "US", NULL }, depending on whether notypes was 0 or 1, respectively. Assertion values in RDN strings may included escaped characters. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8513>8513</a></td>\n' +
            '<td>Similarly, the ldap_explode_rdn() routine takes an RDN as returned by ldap_explode_dn(dn,0) and breaks it up into its "type=value" component parts (or just "value", if the notypes parameter is set). Note the value is not unescaped. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8514>8514</a></td>\n' +
            '<td>ldap_dn2ufn() is used to turn a DN as returned by ldap_get_dn(3) into a more user-friendly form, stripping off all type names. See "Using the Directory to Achieve User Friendly Naming" (RFC 1781) for more details on the UFN format. Due to the ambiguous nature of the format, it is generally only used for display purposes. The space for the UFN returned is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8515>8515</a></td>\n' +
            '<td>ldap_dn2dcedn() is used to turn a DN as returned by ldap_get_dn(3) into a DCE-style DN, e.g. a string with most-significant to least significant rdns separated by slashes (’/’); rdn components are separated by commas (’,’). Only printable chars (e.g. LDAPv2 printable string) are allowed, at least in this implementation. ldap_dcedn2dn() performs the opposite operation. ldap_dn2ad_canonical() turns a DN into a AD canonical name, which is basically a DCE dn with attribute types omitted. The trailing domain, if present, is turned in a DNS-like domain. The space for the returned value is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8516>8516</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8517>8517</a></td>\n' +
            '<td>If an error occurs in ldap_get_dn(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes. ldap_explode_dn(), ldap_explode_rdn(), ldap_dn2ufn(), ldap_dn2dcedn(), ldap_dcedn2dn(), and ldap_dn2ad_canonical() will return NULL with errno(3) set appropriately in case of trouble.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8518>8518</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8519>8519</a></td>\n' +
            '<td>These routines dynamically allocate memory that the caller must free.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8520>8520</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8521>8521</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_first_entry(3), ldap_memfree(3), ldap_value_free(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8522>8522</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8523>8523</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8524>8524</a></td>\n' +
            '<td>LDAP_GET_DN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8525>8525</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8526>8526</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8527>8527</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8528>8528</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8529>8529</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8530>8530</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8531>8531</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8532>8532</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8533>8533</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8534>8534</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8535>8535</a></td>\n' +
            '<td>ldap_get_dn, ldap_explode_dn, ldap_explode_rdn, ldap_dn2ufn − LDAP DN handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8536>8536</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8537>8537</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8538>8538</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8539>8539</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8540>8540</a></td>\n' +
            '<td>char *ldap_get_dn( LDAP *ld, LDAPMessage *entry )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8541>8541</a></td>\n' +
            '<td>int ldap_str2dn( const char *str, LDAPDN *dn, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8542>8542</a></td>\n' +
            '<td>void ldap_dnfree( LDAPDN dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8543>8543</a></td>\n' +
            '<td>int ldap_dn2str( LDAPDN dn, char **str, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8544>8544</a></td>\n' +
            '<td>char **ldap_explode_dn( const char *dn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8545>8545</a></td>\n' +
            '<td>char **ldap_explode_rdn( const char *rdn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8546>8546</a></td>\n' +
            '<td>char *ldap_dn2ufn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8547>8547</a></td>\n' +
            '<td>char *ldap_dn2dcedn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8548>8548</a></td>\n' +
            '<td>char *ldap_dcedn2dn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8549>8549</a></td>\n' +
            '<td>char *ldap_dn2ad_canonical( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8550>8550</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8551>8551</a></td>\n' +
            '<td>These routines allow LDAP entry names (Distinguished Names, or DNs) to be obtained, parsed, converted to a user-friendly form, and tested. A DN has the form described in RFC 4414 "Lightweight Directory Access Protocol (LDAP): String Representation of Distinguished Names".</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8552>8552</a></td>\n' +
            '<td>The ldap_get_dn() routine takes an entry as returned by ldap_first_entry(3) or ldap_next_entry(3) and returns a copy of the entry’s DN. Space for the DN will be obtained dynamically and should be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8553>8553</a></td>\n' +
            '<td>ldap_str2dn() parses a string representation of a distinguished name contained in str into its components, which are stored in dn as ldap_ava structures, arranged in LDAPAVA, LDAPRDN, and LDAPDN terms. Space for dn will be obtained dynamically and should be freed by the caller using ldap_dnfree(3). The LDAPDN is defined as:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8554>8554</a></td>\n' +
            '<td>typedef struct ldap_ava {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8555>8555</a></td>\n' +
            '<td>struct berval la_attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8556>8556</a></td>\n' +
            '<td>struct berval la_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8557>8557</a></td>\n' +
            '<td>unsigned la_flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8558>8558</a></td>\n' +
            '<td>} LDAPAVA;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8559>8559</a></td>\n' +
            '<td>typedef LDAPAVA** LDAPRDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8560>8560</a></td>\n' +
            '<td>typedef LDAPRDN* LDAPDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8561>8561</a></td>\n' +
            '<td>The attribute types and the attribute values are not normalized. The la_flags can be either LDAP_AVA_STRING or LDAP_AVA_BINARY, the latter meaning that the value is BER/DER encoded and thus must be represented as, quoting from RFC 4514, " ... an octothorpe character (’#’ ASCII 35) followed by the hexadecimal representation of each of the bytes of the BER encoding of the X.500 AttributeValue." The flags parameter to ldap_str2dn() can be</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8562>8562</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8563>8563</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8564>8564</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 3</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8565>8565</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8566>8566</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8567>8567</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 2</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8568>8568</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8569>8569</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8570>8570</a></td>\n' +
            '<td>LDAP_DN_FORMAT_DCE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8571>8571</a></td>\n' +
            '<td>which defines what DN syntax is expected (according to RFC 4514, RFC 1779 and DCE, respectively). The format can be ORed to the flags</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8572>8572</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8573>8573</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8574>8574</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8575>8575</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8576>8576</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8577>8577</a></td>\n' +
            '<td>...</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8578>8578</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8579>8579</a></td>\n' +
            '<td>LDAP_DN_PEDANTIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8580>8580</a></td>\n' +
            '<td>The latter is a shortcut for all the previous limitations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8581>8581</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES does not allow extra spaces in the dn; the default is to silently eliminate spaces around AVA separators (’=’), RDN component separators (’+’ for LDAPv3/LDAPv2 or ’,’ for DCE) and RDN separators (’,’ LDAPv3/LDAPv2 or ’/’ for DCE).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8582>8582</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN does not allow a single space after RDN separators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8583>8583</a></td>\n' +
            '<td>ldap_dn2str() performs the inverse operation, yielding in str a string representation of dn. It allows the same values for flags as ldap_str2dn(), plus</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8584>8584</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8585>8585</a></td>\n' +
            '<td>LDAP_DN_FORMAT_UFN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8586>8586</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8587>8587</a></td>\n' +
            '<td>LDAP_DN_FORMAT_AD_CANONICAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8588>8588</a></td>\n' +
            '<td>for user-friendly naming (RFC 1781) and AD canonical.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8589>8589</a></td>\n' +
            '<td>The following routines are viewed as deprecated in favor of ldap_str2dn() and ldap_dn2str(). They are provided to support legacy applications.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8590>8590</a></td>\n' +
            '<td>The ldap_explode_dn() routine takes a DN as returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as a Relative Distinguished Name, or RDN. ldap_explode_dn() returns a NULL-terminated array, each component of which contains an RDN from the DN. The notypes parameter is used to request that only the RDN values be returned, not their types. For example, the DN "cn=Bob, c=US" would return as either { "cn=Bob", "c=US", NULL } or { "Bob", "US", NULL }, depending on whether notypes was 0 or 1, respectively. Assertion values in RDN strings may included escaped characters. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8591>8591</a></td>\n' +
            '<td>Similarly, the ldap_explode_rdn() routine takes an RDN as returned by ldap_explode_dn(dn,0) and breaks it up into its "type=value" component parts (or just "value", if the notypes parameter is set). Note the value is not unescaped. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8592>8592</a></td>\n' +
            '<td>ldap_dn2ufn() is used to turn a DN as returned by ldap_get_dn(3) into a more user-friendly form, stripping off all type names. See "Using the Directory to Achieve User Friendly Naming" (RFC 1781) for more details on the UFN format. Due to the ambiguous nature of the format, it is generally only used for display purposes. The space for the UFN returned is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8593>8593</a></td>\n' +
            '<td>ldap_dn2dcedn() is used to turn a DN as returned by ldap_get_dn(3) into a DCE-style DN, e.g. a string with most-significant to least significant rdns separated by slashes (’/’); rdn components are separated by commas (’,’). Only printable chars (e.g. LDAPv2 printable string) are allowed, at least in this implementation. ldap_dcedn2dn() performs the opposite operation. ldap_dn2ad_canonical() turns a DN into a AD canonical name, which is basically a DCE dn with attribute types omitted. The trailing domain, if present, is turned in a DNS-like domain. The space for the returned value is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8594>8594</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8595>8595</a></td>\n' +
            '<td>If an error occurs in ldap_get_dn(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes. ldap_explode_dn(), ldap_explode_rdn(), ldap_dn2ufn(), ldap_dn2dcedn(), ldap_dcedn2dn(), and ldap_dn2ad_canonical() will return NULL with errno(3) set appropriately in case of trouble.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8596>8596</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8597>8597</a></td>\n' +
            '<td>These routines dynamically allocate memory that the caller must free.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8598>8598</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8599>8599</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_first_entry(3), ldap_memfree(3), ldap_value_free(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8600>8600</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8601>8601</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8602>8602</a></td>\n' +
            '<td>LDAP_GET_DN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8603>8603</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8604>8604</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8605>8605</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8606>8606</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8607>8607</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8608>8608</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8609>8609</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8610>8610</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8611>8611</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8612>8612</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8613>8613</a></td>\n' +
            '<td>ldap_get_dn, ldap_explode_dn, ldap_explode_rdn, ldap_dn2ufn − LDAP DN handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8614>8614</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8615>8615</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8616>8616</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8617>8617</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8618>8618</a></td>\n' +
            '<td>char *ldap_get_dn( LDAP *ld, LDAPMessage *entry )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8619>8619</a></td>\n' +
            '<td>int ldap_str2dn( const char *str, LDAPDN *dn, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8620>8620</a></td>\n' +
            '<td>void ldap_dnfree( LDAPDN dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8621>8621</a></td>\n' +
            '<td>int ldap_dn2str( LDAPDN dn, char **str, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8622>8622</a></td>\n' +
            '<td>char **ldap_explode_dn( const char *dn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8623>8623</a></td>\n' +
            '<td>char **ldap_explode_rdn( const char *rdn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8624>8624</a></td>\n' +
            '<td>char *ldap_dn2ufn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8625>8625</a></td>\n' +
            '<td>char *ldap_dn2dcedn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8626>8626</a></td>\n' +
            '<td>char *ldap_dcedn2dn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8627>8627</a></td>\n' +
            '<td>char *ldap_dn2ad_canonical( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8628>8628</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8629>8629</a></td>\n' +
            '<td>These routines allow LDAP entry names (Distinguished Names, or DNs) to be obtained, parsed, converted to a user-friendly form, and tested. A DN has the form described in RFC 4414 "Lightweight Directory Access Protocol (LDAP): String Representation of Distinguished Names".</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8630>8630</a></td>\n' +
            '<td>The ldap_get_dn() routine takes an entry as returned by ldap_first_entry(3) or ldap_next_entry(3) and returns a copy of the entry’s DN. Space for the DN will be obtained dynamically and should be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8631>8631</a></td>\n' +
            '<td>ldap_str2dn() parses a string representation of a distinguished name contained in str into its components, which are stored in dn as ldap_ava structures, arranged in LDAPAVA, LDAPRDN, and LDAPDN terms. Space for dn will be obtained dynamically and should be freed by the caller using ldap_dnfree(3). The LDAPDN is defined as:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8632>8632</a></td>\n' +
            '<td>typedef struct ldap_ava {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8633>8633</a></td>\n' +
            '<td>struct berval la_attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8634>8634</a></td>\n' +
            '<td>struct berval la_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8635>8635</a></td>\n' +
            '<td>unsigned la_flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8636>8636</a></td>\n' +
            '<td>} LDAPAVA;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8637>8637</a></td>\n' +
            '<td>typedef LDAPAVA** LDAPRDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8638>8638</a></td>\n' +
            '<td>typedef LDAPRDN* LDAPDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8639>8639</a></td>\n' +
            '<td>The attribute types and the attribute values are not normalized. The la_flags can be either LDAP_AVA_STRING or LDAP_AVA_BINARY, the latter meaning that the value is BER/DER encoded and thus must be represented as, quoting from RFC 4514, " ... an octothorpe character (’#’ ASCII 35) followed by the hexadecimal representation of each of the bytes of the BER encoding of the X.500 AttributeValue." The flags parameter to ldap_str2dn() can be</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8640>8640</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8641>8641</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8642>8642</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 3</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8643>8643</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8644>8644</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8645>8645</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 2</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8646>8646</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8647>8647</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8648>8648</a></td>\n' +
            '<td>LDAP_DN_FORMAT_DCE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8649>8649</a></td>\n' +
            '<td>which defines what DN syntax is expected (according to RFC 4514, RFC 1779 and DCE, respectively). The format can be ORed to the flags</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8650>8650</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8651>8651</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8652>8652</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8653>8653</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8654>8654</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8655>8655</a></td>\n' +
            '<td>...</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8656>8656</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8657>8657</a></td>\n' +
            '<td>LDAP_DN_PEDANTIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8658>8658</a></td>\n' +
            '<td>The latter is a shortcut for all the previous limitations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8659>8659</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES does not allow extra spaces in the dn; the default is to silently eliminate spaces around AVA separators (’=’), RDN component separators (’+’ for LDAPv3/LDAPv2 or ’,’ for DCE) and RDN separators (’,’ LDAPv3/LDAPv2 or ’/’ for DCE).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8660>8660</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN does not allow a single space after RDN separators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8661>8661</a></td>\n' +
            '<td>ldap_dn2str() performs the inverse operation, yielding in str a string representation of dn. It allows the same values for flags as ldap_str2dn(), plus</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8662>8662</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8663>8663</a></td>\n' +
            '<td>LDAP_DN_FORMAT_UFN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8664>8664</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8665>8665</a></td>\n' +
            '<td>LDAP_DN_FORMAT_AD_CANONICAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8666>8666</a></td>\n' +
            '<td>for user-friendly naming (RFC 1781) and AD canonical.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8667>8667</a></td>\n' +
            '<td>The following routines are viewed as deprecated in favor of ldap_str2dn() and ldap_dn2str(). They are provided to support legacy applications.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8668>8668</a></td>\n' +
            '<td>The ldap_explode_dn() routine takes a DN as returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as a Relative Distinguished Name, or RDN. ldap_explode_dn() returns a NULL-terminated array, each component of which contains an RDN from the DN. The notypes parameter is used to request that only the RDN values be returned, not their types. For example, the DN "cn=Bob, c=US" would return as either { "cn=Bob", "c=US", NULL } or { "Bob", "US", NULL }, depending on whether notypes was 0 or 1, respectively. Assertion values in RDN strings may included escaped characters. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8669>8669</a></td>\n' +
            '<td>Similarly, the ldap_explode_rdn() routine takes an RDN as returned by ldap_explode_dn(dn,0) and breaks it up into its "type=value" component parts (or just "value", if the notypes parameter is set). Note the value is not unescaped. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8670>8670</a></td>\n' +
            '<td>ldap_dn2ufn() is used to turn a DN as returned by ldap_get_dn(3) into a more user-friendly form, stripping off all type names. See "Using the Directory to Achieve User Friendly Naming" (RFC 1781) for more details on the UFN format. Due to the ambiguous nature of the format, it is generally only used for display purposes. The space for the UFN returned is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8671>8671</a></td>\n' +
            '<td>ldap_dn2dcedn() is used to turn a DN as returned by ldap_get_dn(3) into a DCE-style DN, e.g. a string with most-significant to least significant rdns separated by slashes (’/’); rdn components are separated by commas (’,’). Only printable chars (e.g. LDAPv2 printable string) are allowed, at least in this implementation. ldap_dcedn2dn() performs the opposite operation. ldap_dn2ad_canonical() turns a DN into a AD canonical name, which is basically a DCE dn with attribute types omitted. The trailing domain, if present, is turned in a DNS-like domain. The space for the returned value is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8672>8672</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8673>8673</a></td>\n' +
            '<td>If an error occurs in ldap_get_dn(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes. ldap_explode_dn(), ldap_explode_rdn(), ldap_dn2ufn(), ldap_dn2dcedn(), ldap_dcedn2dn(), and ldap_dn2ad_canonical() will return NULL with errno(3) set appropriately in case of trouble.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8674>8674</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8675>8675</a></td>\n' +
            '<td>These routines dynamically allocate memory that the caller must free.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8676>8676</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8677>8677</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_first_entry(3), ldap_memfree(3), ldap_value_free(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8678>8678</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8679>8679</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8680>8680</a></td>\n' +
            '<td>LDAP_GET_DN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8681>8681</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8682>8682</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8683>8683</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8684>8684</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8685>8685</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8686>8686</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8687>8687</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8688>8688</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8689>8689</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8690>8690</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8691>8691</a></td>\n' +
            '<td>ldap_get_dn, ldap_explode_dn, ldap_explode_rdn, ldap_dn2ufn − LDAP DN handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8692>8692</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8693>8693</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8694>8694</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8695>8695</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8696>8696</a></td>\n' +
            '<td>char *ldap_get_dn( LDAP *ld, LDAPMessage *entry )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8697>8697</a></td>\n' +
            '<td>int ldap_str2dn( const char *str, LDAPDN *dn, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8698>8698</a></td>\n' +
            '<td>void ldap_dnfree( LDAPDN dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8699>8699</a></td>\n' +
            '<td>int ldap_dn2str( LDAPDN dn, char **str, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8700>8700</a></td>\n' +
            '<td>char **ldap_explode_dn( const char *dn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8701>8701</a></td>\n' +
            '<td>char **ldap_explode_rdn( const char *rdn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8702>8702</a></td>\n' +
            '<td>char *ldap_dn2ufn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8703>8703</a></td>\n' +
            '<td>char *ldap_dn2dcedn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8704>8704</a></td>\n' +
            '<td>char *ldap_dcedn2dn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8705>8705</a></td>\n' +
            '<td>char *ldap_dn2ad_canonical( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8706>8706</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8707>8707</a></td>\n' +
            '<td>These routines allow LDAP entry names (Distinguished Names, or DNs) to be obtained, parsed, converted to a user-friendly form, and tested. A DN has the form described in RFC 4414 "Lightweight Directory Access Protocol (LDAP): String Representation of Distinguished Names".</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8708>8708</a></td>\n' +
            '<td>The ldap_get_dn() routine takes an entry as returned by ldap_first_entry(3) or ldap_next_entry(3) and returns a copy of the entry’s DN. Space for the DN will be obtained dynamically and should be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8709>8709</a></td>\n' +
            '<td>ldap_str2dn() parses a string representation of a distinguished name contained in str into its components, which are stored in dn as ldap_ava structures, arranged in LDAPAVA, LDAPRDN, and LDAPDN terms. Space for dn will be obtained dynamically and should be freed by the caller using ldap_dnfree(3). The LDAPDN is defined as:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8710>8710</a></td>\n' +
            '<td>typedef struct ldap_ava {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8711>8711</a></td>\n' +
            '<td>struct berval la_attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8712>8712</a></td>\n' +
            '<td>struct berval la_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8713>8713</a></td>\n' +
            '<td>unsigned la_flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8714>8714</a></td>\n' +
            '<td>} LDAPAVA;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8715>8715</a></td>\n' +
            '<td>typedef LDAPAVA** LDAPRDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8716>8716</a></td>\n' +
            '<td>typedef LDAPRDN* LDAPDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8717>8717</a></td>\n' +
            '<td>The attribute types and the attribute values are not normalized. The la_flags can be either LDAP_AVA_STRING or LDAP_AVA_BINARY, the latter meaning that the value is BER/DER encoded and thus must be represented as, quoting from RFC 4514, " ... an octothorpe character (’#’ ASCII 35) followed by the hexadecimal representation of each of the bytes of the BER encoding of the X.500 AttributeValue." The flags parameter to ldap_str2dn() can be</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8718>8718</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8719>8719</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8720>8720</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 3</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8721>8721</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8722>8722</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8723>8723</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 2</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8724>8724</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8725>8725</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8726>8726</a></td>\n' +
            '<td>LDAP_DN_FORMAT_DCE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8727>8727</a></td>\n' +
            '<td>which defines what DN syntax is expected (according to RFC 4514, RFC 1779 and DCE, respectively). The format can be ORed to the flags</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8728>8728</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8729>8729</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8730>8730</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8731>8731</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8732>8732</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8733>8733</a></td>\n' +
            '<td>...</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8734>8734</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8735>8735</a></td>\n' +
            '<td>LDAP_DN_PEDANTIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8736>8736</a></td>\n' +
            '<td>The latter is a shortcut for all the previous limitations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8737>8737</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES does not allow extra spaces in the dn; the default is to silently eliminate spaces around AVA separators (’=’), RDN component separators (’+’ for LDAPv3/LDAPv2 or ’,’ for DCE) and RDN separators (’,’ LDAPv3/LDAPv2 or ’/’ for DCE).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8738>8738</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN does not allow a single space after RDN separators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8739>8739</a></td>\n' +
            '<td>ldap_dn2str() performs the inverse operation, yielding in str a string representation of dn. It allows the same values for flags as ldap_str2dn(), plus</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8740>8740</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8741>8741</a></td>\n' +
            '<td>LDAP_DN_FORMAT_UFN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8742>8742</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8743>8743</a></td>\n' +
            '<td>LDAP_DN_FORMAT_AD_CANONICAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8744>8744</a></td>\n' +
            '<td>for user-friendly naming (RFC 1781) and AD canonical.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8745>8745</a></td>\n' +
            '<td>The following routines are viewed as deprecated in favor of ldap_str2dn() and ldap_dn2str(). They are provided to support legacy applications.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8746>8746</a></td>\n' +
            '<td>The ldap_explode_dn() routine takes a DN as returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as a Relative Distinguished Name, or RDN. ldap_explode_dn() returns a NULL-terminated array, each component of which contains an RDN from the DN. The notypes parameter is used to request that only the RDN values be returned, not their types. For example, the DN "cn=Bob, c=US" would return as either { "cn=Bob", "c=US", NULL } or { "Bob", "US", NULL }, depending on whether notypes was 0 or 1, respectively. Assertion values in RDN strings may included escaped characters. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8747>8747</a></td>\n' +
            '<td>Similarly, the ldap_explode_rdn() routine takes an RDN as returned by ldap_explode_dn(dn,0) and breaks it up into its "type=value" component parts (or just "value", if the notypes parameter is set). Note the value is not unescaped. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8748>8748</a></td>\n' +
            '<td>ldap_dn2ufn() is used to turn a DN as returned by ldap_get_dn(3) into a more user-friendly form, stripping off all type names. See "Using the Directory to Achieve User Friendly Naming" (RFC 1781) for more details on the UFN format. Due to the ambiguous nature of the format, it is generally only used for display purposes. The space for the UFN returned is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8749>8749</a></td>\n' +
            '<td>ldap_dn2dcedn() is used to turn a DN as returned by ldap_get_dn(3) into a DCE-style DN, e.g. a string with most-significant to least significant rdns separated by slashes (’/’); rdn components are separated by commas (’,’). Only printable chars (e.g. LDAPv2 printable string) are allowed, at least in this implementation. ldap_dcedn2dn() performs the opposite operation. ldap_dn2ad_canonical() turns a DN into a AD canonical name, which is basically a DCE dn with attribute types omitted. The trailing domain, if present, is turned in a DNS-like domain. The space for the returned value is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8750>8750</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8751>8751</a></td>\n' +
            '<td>If an error occurs in ldap_get_dn(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes. ldap_explode_dn(), ldap_explode_rdn(), ldap_dn2ufn(), ldap_dn2dcedn(), ldap_dcedn2dn(), and ldap_dn2ad_canonical() will return NULL with errno(3) set appropriately in case of trouble.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8752>8752</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8753>8753</a></td>\n' +
            '<td>These routines dynamically allocate memory that the caller must free.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8754>8754</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8755>8755</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_first_entry(3), ldap_memfree(3), ldap_value_free(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8756>8756</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8757>8757</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8758>8758</a></td>\n' +
            '<td>LDAP_GET_DN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8759>8759</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8760>8760</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8761>8761</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8762>8762</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8763>8763</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8764>8764</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8765>8765</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8766>8766</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8767>8767</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8768>8768</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8769>8769</a></td>\n' +
            '<td>ldap_get_dn, ldap_explode_dn, ldap_explode_rdn, ldap_dn2ufn − LDAP DN handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8770>8770</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8771>8771</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8772>8772</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8773>8773</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8774>8774</a></td>\n' +
            '<td>char *ldap_get_dn( LDAP *ld, LDAPMessage *entry )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8775>8775</a></td>\n' +
            '<td>int ldap_str2dn( const char *str, LDAPDN *dn, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8776>8776</a></td>\n' +
            '<td>void ldap_dnfree( LDAPDN dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8777>8777</a></td>\n' +
            '<td>int ldap_dn2str( LDAPDN dn, char **str, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8778>8778</a></td>\n' +
            '<td>char **ldap_explode_dn( const char *dn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8779>8779</a></td>\n' +
            '<td>char **ldap_explode_rdn( const char *rdn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8780>8780</a></td>\n' +
            '<td>char *ldap_dn2ufn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8781>8781</a></td>\n' +
            '<td>char *ldap_dn2dcedn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8782>8782</a></td>\n' +
            '<td>char *ldap_dcedn2dn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8783>8783</a></td>\n' +
            '<td>char *ldap_dn2ad_canonical( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8784>8784</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8785>8785</a></td>\n' +
            '<td>These routines allow LDAP entry names (Distinguished Names, or DNs) to be obtained, parsed, converted to a user-friendly form, and tested. A DN has the form described in RFC 4414 "Lightweight Directory Access Protocol (LDAP): String Representation of Distinguished Names".</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8786>8786</a></td>\n' +
            '<td>The ldap_get_dn() routine takes an entry as returned by ldap_first_entry(3) or ldap_next_entry(3) and returns a copy of the entry’s DN. Space for the DN will be obtained dynamically and should be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8787>8787</a></td>\n' +
            '<td>ldap_str2dn() parses a string representation of a distinguished name contained in str into its components, which are stored in dn as ldap_ava structures, arranged in LDAPAVA, LDAPRDN, and LDAPDN terms. Space for dn will be obtained dynamically and should be freed by the caller using ldap_dnfree(3). The LDAPDN is defined as:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8788>8788</a></td>\n' +
            '<td>typedef struct ldap_ava {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8789>8789</a></td>\n' +
            '<td>struct berval la_attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8790>8790</a></td>\n' +
            '<td>struct berval la_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8791>8791</a></td>\n' +
            '<td>unsigned la_flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8792>8792</a></td>\n' +
            '<td>} LDAPAVA;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8793>8793</a></td>\n' +
            '<td>typedef LDAPAVA** LDAPRDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8794>8794</a></td>\n' +
            '<td>typedef LDAPRDN* LDAPDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8795>8795</a></td>\n' +
            '<td>The attribute types and the attribute values are not normalized. The la_flags can be either LDAP_AVA_STRING or LDAP_AVA_BINARY, the latter meaning that the value is BER/DER encoded and thus must be represented as, quoting from RFC 4514, " ... an octothorpe character (’#’ ASCII 35) followed by the hexadecimal representation of each of the bytes of the BER encoding of the X.500 AttributeValue." The flags parameter to ldap_str2dn() can be</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8796>8796</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8797>8797</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8798>8798</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 3</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8799>8799</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8800>8800</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8801>8801</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 2</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8802>8802</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8803>8803</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8804>8804</a></td>\n' +
            '<td>LDAP_DN_FORMAT_DCE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8805>8805</a></td>\n' +
            '<td>which defines what DN syntax is expected (according to RFC 4514, RFC 1779 and DCE, respectively). The format can be ORed to the flags</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8806>8806</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8807>8807</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8808>8808</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8809>8809</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8810>8810</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8811>8811</a></td>\n' +
            '<td>...</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8812>8812</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8813>8813</a></td>\n' +
            '<td>LDAP_DN_PEDANTIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8814>8814</a></td>\n' +
            '<td>The latter is a shortcut for all the previous limitations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8815>8815</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES does not allow extra spaces in the dn; the default is to silently eliminate spaces around AVA separators (’=’), RDN component separators (’+’ for LDAPv3/LDAPv2 or ’,’ for DCE) and RDN separators (’,’ LDAPv3/LDAPv2 or ’/’ for DCE).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8816>8816</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN does not allow a single space after RDN separators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8817>8817</a></td>\n' +
            '<td>ldap_dn2str() performs the inverse operation, yielding in str a string representation of dn. It allows the same values for flags as ldap_str2dn(), plus</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8818>8818</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8819>8819</a></td>\n' +
            '<td>LDAP_DN_FORMAT_UFN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8820>8820</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8821>8821</a></td>\n' +
            '<td>LDAP_DN_FORMAT_AD_CANONICAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8822>8822</a></td>\n' +
            '<td>for user-friendly naming (RFC 1781) and AD canonical.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8823>8823</a></td>\n' +
            '<td>The following routines are viewed as deprecated in favor of ldap_str2dn() and ldap_dn2str(). They are provided to support legacy applications.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8824>8824</a></td>\n' +
            '<td>The ldap_explode_dn() routine takes a DN as returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as a Relative Distinguished Name, or RDN. ldap_explode_dn() returns a NULL-terminated array, each component of which contains an RDN from the DN. The notypes parameter is used to request that only the RDN values be returned, not their types. For example, the DN "cn=Bob, c=US" would return as either { "cn=Bob", "c=US", NULL } or { "Bob", "US", NULL }, depending on whether notypes was 0 or 1, respectively. Assertion values in RDN strings may included escaped characters. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8825>8825</a></td>\n' +
            '<td>Similarly, the ldap_explode_rdn() routine takes an RDN as returned by ldap_explode_dn(dn,0) and breaks it up into its "type=value" component parts (or just "value", if the notypes parameter is set). Note the value is not unescaped. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8826>8826</a></td>\n' +
            '<td>ldap_dn2ufn() is used to turn a DN as returned by ldap_get_dn(3) into a more user-friendly form, stripping off all type names. See "Using the Directory to Achieve User Friendly Naming" (RFC 1781) for more details on the UFN format. Due to the ambiguous nature of the format, it is generally only used for display purposes. The space for the UFN returned is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8827>8827</a></td>\n' +
            '<td>ldap_dn2dcedn() is used to turn a DN as returned by ldap_get_dn(3) into a DCE-style DN, e.g. a string with most-significant to least significant rdns separated by slashes (’/’); rdn components are separated by commas (’,’). Only printable chars (e.g. LDAPv2 printable string) are allowed, at least in this implementation. ldap_dcedn2dn() performs the opposite operation. ldap_dn2ad_canonical() turns a DN into a AD canonical name, which is basically a DCE dn with attribute types omitted. The trailing domain, if present, is turned in a DNS-like domain. The space for the returned value is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8828>8828</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8829>8829</a></td>\n' +
            '<td>If an error occurs in ldap_get_dn(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes. ldap_explode_dn(), ldap_explode_rdn(), ldap_dn2ufn(), ldap_dn2dcedn(), ldap_dcedn2dn(), and ldap_dn2ad_canonical() will return NULL with errno(3) set appropriately in case of trouble.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8830>8830</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8831>8831</a></td>\n' +
            '<td>These routines dynamically allocate memory that the caller must free.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8832>8832</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8833>8833</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_first_entry(3), ldap_memfree(3), ldap_value_free(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8834>8834</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8835>8835</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8836>8836</a></td>\n' +
            '<td>LDAP_OPEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8837>8837</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8838>8838</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8839>8839</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8840>8840</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8841>8841</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8842>8842</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8843>8843</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8844>8844</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8845>8845</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8846>8846</a></td>\n' +
            '<td>ldap_dup, ldap_destroy, − Duplicate and destroy LDAP session handles</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8847>8847</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8848>8848</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8849>8849</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8850>8850</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8851>8851</a></td>\n' +
            '<td>LDAP *ldap_dup(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8852>8852</a></td>\n' +
            '<td>LDAP *old );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8853>8853</a></td>\n' +
            '<td>int ldap_destroy(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8854>8854</a></td>\n' +
            '<td>LDAP *old );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8855>8855</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8856>8856</a></td>\n' +
            '<td>ldap_dup() duplicates an existing LDAP (LDAP *) session handle. The new session handle may be used concurrently with the original session handle. In a threaded environment, different threads may execute concurrent requests on the same connection/session without fear of contamination. Each session handle manages its own private error results.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8857>8857</a></td>\n' +
            '<td>ldap_destroy() destroys an existing session handle.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8858>8858</a></td>\n' +
            '<td>The ldap_dup() and ldap_destroy() functions are used in conjunction with a "thread safe" version of libldap (libldap_r) to enable operation thread safe API calls, so that a single session may be simultaneously used across multiple threads with consistent error handling.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8859>8859</a></td>\n' +
            '<td>When a session is created through the use of one of the session creation functions including ldap_open(3), ldap_init(3), ldap_initialize(3) or ldap_init_fd(3) an LDAP * session handle is returned to the application. The session handle may be shared amongst threads, however the error codes are unique to a session handle. Multiple threads performing different operations using the same session handle will result in inconsistent error codes and return values.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8860>8860</a></td>\n' +
            '<td>To prevent this confusion, ldap_dup() is used duplicate an existing session handle so that multiple threads can share the session, and maintain consistent error information and results.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8861>8861</a></td>\n' +
            '<td>The message queues for a session are shared between sibling session handles. Results of operations on a sibling session handles are accessible to all the sibling session handles. Applications desiring results associated with a specific operation should provide the appropriate msgid to ldap_result(). Applications should avoid calling ldap_result() with LDAP_RES_ANY as that may "steal" and return results in the calling thread that another operation in a different thread, using a different session handle, may require to complete.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8862>8862</a></td>\n' +
            '<td>When ldap_unbind() is called on a session handle with siblings, all the siblings become invalid.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8863>8863</a></td>\n' +
            '<td>Siblings must be destroyed using ldap_destroy(). Session handle resources associated with the original (LDAP *) will be freed when the last session handle is destroyed or when ldap_unbind() is called, if no other session handles currently exist.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8864>8864</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8865>8865</a></td>\n' +
            '<td>If an error occurs, ldap_dup() will return NULL and errno should be set appropriately. ldap_destroy() will directly return the LDAP code associated to the error (or LDAP_SUCCESS in case of success); errno should be set as well whenever appropriate.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8866>8866</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8867>8867</a></td>\n' +
            '<td>ldap_open(3), ldap_init(3), ldap_initialize(3), ldap_init_fd(3), errno(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8868>8868</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8869>8869</a></td>\n' +
            '<td>This work is based on the previously proposed LDAP C API Concurrency Extensions draft (draft-zeilenga-ldap-c-api-concurrency-00.txt) effort. OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8870>8870</a></td>\n' +
            '<td>LDAP_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8871>8871</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8872>8872</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8873>8873</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8874>8874</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8875>8875</a></td>\n' +
            '<td>PROTOCOL RESULT CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8876>8876</a></td>\n' +
            '<td>API ERROR CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8877>8877</a></td>\n' +
            '<td>DEPRECATED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8878>8878</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8879>8879</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8880>8880</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8881>8881</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8882>8882</a></td>\n' +
            '<td>ldap_perror, ld_errno, ldap_result2error, ldap_errlist, ldap_err2string − LDAP protocol error handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8883>8883</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8884>8884</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8885>8885</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8886>8886</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8887>8887</a></td>\n' +
            '<td>char *ldap_err2string( int err );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8888>8888</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8889>8889</a></td>\n' +
            '<td>The ldap_err2string() routine provides short description of the various codes returned by routines in this library. The returned string is a pointer to a static area that should not be modified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8890>8890</a></td>\n' +
            '<td>These codes are either negative, indicating an API error code; positive, indicating an LDAP resultCode other than ´success’ (0), or - zero, indicating both successful use of the API and the LDAP resultCode ´success’ (0).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8891>8891</a></td>\n' +
            '<td>The code associated with an LDAP session is accessible using ldap_get_option(3) and ldap_set_option(3) with the LDAP_OPT_RESULT_CODE option (previously called LDAP_OPT_ERROR_NUMBER).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8892>8892</a></td>\n' +
            '<td>PROTOCOL RESULT CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8893>8893</a></td>\n' +
            '<td>This section provides a partial list of protocol codes recognized by the library. As LDAP is extensible, additional values may be returned. A complete listing of registered LDAP result codes can be obtained from the Internet Assigned Numbers Authority &lt;http://www.iana.org&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8894>8894</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8895>8895</a></td>\n' +
            '<td>LDAP_SUCCESS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8896>8896</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8897>8897</a></td>\n' +
            '<td>The request was successful.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8898>8898</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8899>8899</a></td>\n' +
            '<td>LDAP_OPERATIONS_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8900>8900</a></td>\n' +
            '<td>An operations error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8901>8901</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8902>8902</a></td>\n' +
            '<td>LDAP_PROTOCOL _ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8903>8903</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8904>8904</a></td>\n' +
            '<td>A protocol violation was detected.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8905>8905</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8906>8906</a></td>\n' +
            '<td>LDAP_TIMELIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8907>8907</a></td>\n' +
            '<td>An LDAP time limit was exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8908>8908</a></td>\n' +
            '<td>LDAP_SIZELIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8909>8909</a></td>\n' +
            '<td>An LDAP size limit was exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8910>8910</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8911>8911</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8912>8912</a></td>\n' +
            '<td>_FALSE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8913>8913</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8914>8914</a></td>\n' +
            '<td>A compare operation returned false.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8915>8915</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8916>8916</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8917>8917</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8918>8918</a></td>\n' +
            '<td>_TRUE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8919>8919</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8920>8920</a></td>\n' +
            '<td>A compare operation returned true.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8921>8921</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8922>8922</a></td>\n' +
            '<td>LDAP_STRONG_AUTH_NOT_SUPPORTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8923>8923</a></td>\n' +
            '<td>The LDAP server does not support strong authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8924>8924</a></td>\n' +
            '<td>LDAP_STRONG_AUTH_REQUIRED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8925>8925</a></td>\n' +
            '<td>Strong authentication is required for the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8926>8926</a></td>\n' +
            '<td>LDAP_PARTIAL_RESULTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8927>8927</a></td>\n' +
            '<td>Partial results only returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8928>8928</a></td>\n' +
            '<td>LDAP_NO_SUCH_ATTRIBUTE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8929>8929</a></td>\n' +
            '<td>The attribute type specified does not exist in the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8930>8930</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8931>8931</a></td>\n' +
            '<td>LDAP_UNDEFINED_T YPE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8932>8932</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8933>8933</a></td>\n' +
            '<td>The attribute type specified is invalid.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8934>8934</a></td>\n' +
            '<td>LDAP_INAPPROPRIATE_MATCHING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8935>8935</a></td>\n' +
            '<td>Filter type not supported for the specified attribute.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8936>8936</a></td>\n' +
            '<td>LDAP_CONSTRAINT_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8937>8937</a></td>\n' +
            '<td>An attribute value specified violates some constraint (e.g., a postalAddress has too many lines, or a line that is too long).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8938>8938</a></td>\n' +
            '<td>LDAP_TYPE_OR_VALUE_EXISTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8939>8939</a></td>\n' +
            '<td>An attribute type or attribute value specified already exists in the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8940>8940</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8941>8941</a></td>\n' +
            '<td>LDAP_INVALID_SYN TAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8942>8942</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8943>8943</a></td>\n' +
            '<td>An invalid attribute value was specified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8944>8944</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8945>8945</a></td>\n' +
            '<td>LDAP_NO_SUCH_OB JECT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8946>8946</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8947>8947</a></td>\n' +
            '<td>The specified object does not exist in The Directory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8948>8948</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8949>8949</a></td>\n' +
            '<td>LDAP_ALIAS_PROBL EM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8950>8950</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8951>8951</a></td>\n' +
            '<td>An alias in The Directory points to a nonexistent entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8952>8952</a></td>\n' +
            '<td>LDAP_INVALID_DN_SYNTAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8953>8953</a></td>\n' +
            '<td>A syntactically invalid DN was specified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8954>8954</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8955>8955</a></td>\n' +
            '<td>LDAP_IS_LEAF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8956>8956</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8957>8957</a></td>\n' +
            '<td>The object specified is a leaf.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8958>8958</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8959>8959</a></td>\n' +
            '<td>LDAP_ALIAS_DEREF_PROBLEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8960>8960</a></td>\n' +
            '<td>A problem was encountered when dereferencing an alias.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8961>8961</a></td>\n' +
            '<td>LDAP_INAPPROPRIATE_AUTH</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8962>8962</a></td>\n' +
            '<td>Inappropriate authentication was specified (e.g., LDAP_AUTH_SIMPLE was specified and the entry does not have a userPassword attribute).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8963>8963</a></td>\n' +
            '<td>LDAP_INVALID_CREDENTIALS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8964>8964</a></td>\n' +
            '<td>Invalid credentials were presented (e.g., the wrong password).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8965>8965</a></td>\n' +
            '<td>LDAP_INSUFFICIENT_ACCESS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8966>8966</a></td>\n' +
            '<td>The user has insufficient access to perform the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8967>8967</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8968>8968</a></td>\n' +
            '<td>LDAP_BUSY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8969>8969</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8970>8970</a></td>\n' +
            '<td>The DSA is busy.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8971>8971</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8972>8972</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8973>8973</a></td>\n' +
            '<td>LDAP_UNAVAILA BLE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8974>8974</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8975>8975</a></td>\n' +
            '<td>The DSA is unavailable.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8976>8976</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8977>8977</a></td>\n' +
            '<td>LDAP_UNWILLING_TO_PERFORM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8978>8978</a></td>\n' +
            '<td>The DSA is unwilling to perform the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8979>8979</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8980>8980</a></td>\n' +
            '<td>LDAP_LOOP_DE TECT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8981>8981</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8982>8982</a></td>\n' +
            '<td>A loop was detected.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8983>8983</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8984>8984</a></td>\n' +
            '<td>LDAP_NAMING_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8985>8985</a></td>\n' +
            '<td>A naming violation occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8986>8986</a></td>\n' +
            '<td>LDAP_OBJECT_CLASS_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8987>8987</a></td>\n' +
            '<td>An object class violation occurred (e.g., a "must" attribute was missing from the entry).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8988>8988</a></td>\n' +
            '<td>LDAP_NOT_ALLOWED_ON_NONLEAF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8989>8989</a></td>\n' +
            '<td>The operation is not allowed on a nonleaf object.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8990>8990</a></td>\n' +
            '<td>LDAP_NOT_ALLOWED_ON_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8991>8991</a></td>\n' +
            '<td>The operation is not allowed on an RDN.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8992>8992</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8993>8993</a></td>\n' +
            '<td>LDAP_ALREADY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8994>8994</a></td>\n' +
            '<td>_EXISTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8995>8995</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8996>8996</a></td>\n' +
            '<td>The entry already exists.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8997>8997</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8998>8998</a></td>\n' +
            '<td>LDAP_NO_OBJECT_CLASS_MODS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=8999>8999</a></td>\n' +
            '<td>Object class modifications are not allowed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9000>9000</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9001>9001</a></td>\n' +
            '<td>LDAP_OTHER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9002>9002</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9003>9003</a></td>\n' +
            '<td>An unknown error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9004>9004</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9005>9005</a></td>\n' +
            '<td>API ERROR CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9006>9006</a></td>\n' +
            '<td>This section provides a complete list of API error codes recognized by the library. Note that LDAP_SUCCESS indicates success of an API call in addition to representing the return of the LDAP ´success’ resultCode.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9007>9007</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9008>9008</a></td>\n' +
            '<td>LDAP_SERVER_DOWN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9009>9009</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9010>9010</a></td>\n' +
            '<td>The LDAP library can’t contact the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9011>9011</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9012>9012</a></td>\n' +
            '<td>LDAP_LOCAL_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9013>9013</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9014>9014</a></td>\n' +
            '<td>Some local error occurred. This is usually a failed dynamic memory allocation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9015>9015</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9016>9016</a></td>\n' +
            '<td>LDAP_ENCODING_ER ROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9017>9017</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9018>9018</a></td>\n' +
            '<td>An error was encountered encoding parameters to send to the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9019>9019</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9020>9020</a></td>\n' +
            '<td>LDAP_DECODING_ER ROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9021>9021</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9022>9022</a></td>\n' +
            '<td>An error was encountered decoding a result from the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9023>9023</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9024>9024</a></td>\n' +
            '<td>LDAP_TIMEOUT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9025>9025</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9026>9026</a></td>\n' +
            '<td>A timelimit was exceeded while waiting for a result.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9027>9027</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9028>9028</a></td>\n' +
            '<td>LDAP_AUTH_UNKNOW N</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9029>9029</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9030>9030</a></td>\n' +
            '<td>The authentication method specified to ldap_bind() is not known.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9031>9031</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9032>9032</a></td>\n' +
            '<td>LDAP_FILTER_ERRO R</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9033>9033</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9034>9034</a></td>\n' +
            '<td>An invalid filter was supplied to ldap_search() (e.g., unbalanced parentheses).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9035>9035</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9036>9036</a></td>\n' +
            '<td>LDAP_PARAM_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9037>9037</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9038>9038</a></td>\n' +
            '<td>An ldap routine was called with a bad parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9039>9039</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9040>9040</a></td>\n' +
            '<td>LDAP_NO_MEMORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9041>9041</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9042>9042</a></td>\n' +
            '<td>An memory allocation (e.g., malloc(3) or other dynamic memory allocator) call failed in an ldap library routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9043>9043</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9044>9044</a></td>\n' +
            '<td>LDAP_USER_CANCEL ED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9045>9045</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9046>9046</a></td>\n' +
            '<td>Indicates the user cancelled the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9047>9047</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9048>9048</a></td>\n' +
            '<td>LDAP_CONNECT_ERR OR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9049>9049</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9050>9050</a></td>\n' +
            '<td>Indicates a connection problem.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9051>9051</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9052>9052</a></td>\n' +
            '<td>LDAP_NOT_SUPPORT ED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9053>9053</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9054>9054</a></td>\n' +
            '<td>Indicates the routine was called in a manner not supported by the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9055>9055</a></td>\n' +
            '<td>LDAP_CONTROL_NOT_FOUND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9056>9056</a></td>\n' +
            '<td>Indicates the control provided is unknown to the client library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9057>9057</a></td>\n' +
            '<td>LDAP_NO_RESULTS_RETURNED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9058>9058</a></td>\n' +
            '<td>Indicates no results returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9059>9059</a></td>\n' +
            '<td>LDAP_MORE_RESULTS_TO_RETURN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9060>9060</a></td>\n' +
            '<td>Indicates more results could be returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9061>9061</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9062>9062</a></td>\n' +
            '<td>LDAP_CLIENT_LOOP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9063>9063</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9064>9064</a></td>\n' +
            '<td>Indicates the library has detected a loop in its processing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9065>9065</a></td>\n' +
            '<td>LDAP_REFERRAL_LIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9066>9066</a></td>\n' +
            '<td>Indicates the referral limit has been exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9067>9067</a></td>\n' +
            '<td>DEPRECATED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9068>9068</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9069>9069</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9070>9070</a></td>\n' +
            '<td>ldap(3),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9071>9071</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9072>9072</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9073>9073</a></td>\n' +
            '<td>LDAP_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9074>9074</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9075>9075</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9076>9076</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9077>9077</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9078>9078</a></td>\n' +
            '<td>PROTOCOL RESULT CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9079>9079</a></td>\n' +
            '<td>API ERROR CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9080>9080</a></td>\n' +
            '<td>DEPRECATED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9081>9081</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9082>9082</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9083>9083</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9084>9084</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9085>9085</a></td>\n' +
            '<td>ldap_perror, ld_errno, ldap_result2error, ldap_errlist, ldap_err2string − LDAP protocol error handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9086>9086</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9087>9087</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9088>9088</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9089>9089</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9090>9090</a></td>\n' +
            '<td>char *ldap_err2string( int err );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9091>9091</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9092>9092</a></td>\n' +
            '<td>The ldap_err2string() routine provides short description of the various codes returned by routines in this library. The returned string is a pointer to a static area that should not be modified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9093>9093</a></td>\n' +
            '<td>These codes are either negative, indicating an API error code; positive, indicating an LDAP resultCode other than ´success’ (0), or - zero, indicating both successful use of the API and the LDAP resultCode ´success’ (0).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9094>9094</a></td>\n' +
            '<td>The code associated with an LDAP session is accessible using ldap_get_option(3) and ldap_set_option(3) with the LDAP_OPT_RESULT_CODE option (previously called LDAP_OPT_ERROR_NUMBER).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9095>9095</a></td>\n' +
            '<td>PROTOCOL RESULT CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9096>9096</a></td>\n' +
            '<td>This section provides a partial list of protocol codes recognized by the library. As LDAP is extensible, additional values may be returned. A complete listing of registered LDAP result codes can be obtained from the Internet Assigned Numbers Authority &lt;http://www.iana.org&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9097>9097</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9098>9098</a></td>\n' +
            '<td>LDAP_SUCCESS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9099>9099</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9100>9100</a></td>\n' +
            '<td>The request was successful.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9101>9101</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9102>9102</a></td>\n' +
            '<td>LDAP_OPERATIONS_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9103>9103</a></td>\n' +
            '<td>An operations error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9104>9104</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9105>9105</a></td>\n' +
            '<td>LDAP_PROTOCOL _ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9106>9106</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9107>9107</a></td>\n' +
            '<td>A protocol violation was detected.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9108>9108</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9109>9109</a></td>\n' +
            '<td>LDAP_TIMELIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9110>9110</a></td>\n' +
            '<td>An LDAP time limit was exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9111>9111</a></td>\n' +
            '<td>LDAP_SIZELIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9112>9112</a></td>\n' +
            '<td>An LDAP size limit was exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9113>9113</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9114>9114</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9115>9115</a></td>\n' +
            '<td>_FALSE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9116>9116</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9117>9117</a></td>\n' +
            '<td>A compare operation returned false.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9118>9118</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9119>9119</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9120>9120</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9121>9121</a></td>\n' +
            '<td>_TRUE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9122>9122</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9123>9123</a></td>\n' +
            '<td>A compare operation returned true.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9124>9124</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9125>9125</a></td>\n' +
            '<td>LDAP_STRONG_AUTH_NOT_SUPPORTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9126>9126</a></td>\n' +
            '<td>The LDAP server does not support strong authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9127>9127</a></td>\n' +
            '<td>LDAP_STRONG_AUTH_REQUIRED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9128>9128</a></td>\n' +
            '<td>Strong authentication is required for the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9129>9129</a></td>\n' +
            '<td>LDAP_PARTIAL_RESULTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9130>9130</a></td>\n' +
            '<td>Partial results only returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9131>9131</a></td>\n' +
            '<td>LDAP_NO_SUCH_ATTRIBUTE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9132>9132</a></td>\n' +
            '<td>The attribute type specified does not exist in the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9133>9133</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9134>9134</a></td>\n' +
            '<td>LDAP_UNDEFINED_T YPE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9135>9135</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9136>9136</a></td>\n' +
            '<td>The attribute type specified is invalid.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9137>9137</a></td>\n' +
            '<td>LDAP_INAPPROPRIATE_MATCHING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9138>9138</a></td>\n' +
            '<td>Filter type not supported for the specified attribute.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9139>9139</a></td>\n' +
            '<td>LDAP_CONSTRAINT_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9140>9140</a></td>\n' +
            '<td>An attribute value specified violates some constraint (e.g., a postalAddress has too many lines, or a line that is too long).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9141>9141</a></td>\n' +
            '<td>LDAP_TYPE_OR_VALUE_EXISTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9142>9142</a></td>\n' +
            '<td>An attribute type or attribute value specified already exists in the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9143>9143</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9144>9144</a></td>\n' +
            '<td>LDAP_INVALID_SYN TAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9145>9145</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9146>9146</a></td>\n' +
            '<td>An invalid attribute value was specified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9147>9147</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9148>9148</a></td>\n' +
            '<td>LDAP_NO_SUCH_OB JECT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9149>9149</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9150>9150</a></td>\n' +
            '<td>The specified object does not exist in The Directory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9151>9151</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9152>9152</a></td>\n' +
            '<td>LDAP_ALIAS_PROBL EM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9153>9153</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9154>9154</a></td>\n' +
            '<td>An alias in The Directory points to a nonexistent entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9155>9155</a></td>\n' +
            '<td>LDAP_INVALID_DN_SYNTAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9156>9156</a></td>\n' +
            '<td>A syntactically invalid DN was specified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9157>9157</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9158>9158</a></td>\n' +
            '<td>LDAP_IS_LEAF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9159>9159</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9160>9160</a></td>\n' +
            '<td>The object specified is a leaf.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9161>9161</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9162>9162</a></td>\n' +
            '<td>LDAP_ALIAS_DEREF_PROBLEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9163>9163</a></td>\n' +
            '<td>A problem was encountered when dereferencing an alias.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9164>9164</a></td>\n' +
            '<td>LDAP_INAPPROPRIATE_AUTH</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9165>9165</a></td>\n' +
            '<td>Inappropriate authentication was specified (e.g., LDAP_AUTH_SIMPLE was specified and the entry does not have a userPassword attribute).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9166>9166</a></td>\n' +
            '<td>LDAP_INVALID_CREDENTIALS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9167>9167</a></td>\n' +
            '<td>Invalid credentials were presented (e.g., the wrong password).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9168>9168</a></td>\n' +
            '<td>LDAP_INSUFFICIENT_ACCESS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9169>9169</a></td>\n' +
            '<td>The user has insufficient access to perform the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9170>9170</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9171>9171</a></td>\n' +
            '<td>LDAP_BUSY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9172>9172</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9173>9173</a></td>\n' +
            '<td>The DSA is busy.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9174>9174</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9175>9175</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9176>9176</a></td>\n' +
            '<td>LDAP_UNAVAILA BLE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9177>9177</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9178>9178</a></td>\n' +
            '<td>The DSA is unavailable.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9179>9179</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9180>9180</a></td>\n' +
            '<td>LDAP_UNWILLING_TO_PERFORM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9181>9181</a></td>\n' +
            '<td>The DSA is unwilling to perform the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9182>9182</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9183>9183</a></td>\n' +
            '<td>LDAP_LOOP_DE TECT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9184>9184</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9185>9185</a></td>\n' +
            '<td>A loop was detected.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9186>9186</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9187>9187</a></td>\n' +
            '<td>LDAP_NAMING_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9188>9188</a></td>\n' +
            '<td>A naming violation occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9189>9189</a></td>\n' +
            '<td>LDAP_OBJECT_CLASS_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9190>9190</a></td>\n' +
            '<td>An object class violation occurred (e.g., a "must" attribute was missing from the entry).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9191>9191</a></td>\n' +
            '<td>LDAP_NOT_ALLOWED_ON_NONLEAF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9192>9192</a></td>\n' +
            '<td>The operation is not allowed on a nonleaf object.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9193>9193</a></td>\n' +
            '<td>LDAP_NOT_ALLOWED_ON_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9194>9194</a></td>\n' +
            '<td>The operation is not allowed on an RDN.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9195>9195</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9196>9196</a></td>\n' +
            '<td>LDAP_ALREADY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9197>9197</a></td>\n' +
            '<td>_EXISTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9198>9198</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9199>9199</a></td>\n' +
            '<td>The entry already exists.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9200>9200</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9201>9201</a></td>\n' +
            '<td>LDAP_NO_OBJECT_CLASS_MODS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9202>9202</a></td>\n' +
            '<td>Object class modifications are not allowed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9203>9203</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9204>9204</a></td>\n' +
            '<td>LDAP_OTHER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9205>9205</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9206>9206</a></td>\n' +
            '<td>An unknown error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9207>9207</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9208>9208</a></td>\n' +
            '<td>API ERROR CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9209>9209</a></td>\n' +
            '<td>This section provides a complete list of API error codes recognized by the library. Note that LDAP_SUCCESS indicates success of an API call in addition to representing the return of the LDAP ´success’ resultCode.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9210>9210</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9211>9211</a></td>\n' +
            '<td>LDAP_SERVER_DOWN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9212>9212</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9213>9213</a></td>\n' +
            '<td>The LDAP library can’t contact the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9214>9214</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9215>9215</a></td>\n' +
            '<td>LDAP_LOCAL_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9216>9216</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9217>9217</a></td>\n' +
            '<td>Some local error occurred. This is usually a failed dynamic memory allocation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9218>9218</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9219>9219</a></td>\n' +
            '<td>LDAP_ENCODING_ER ROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9220>9220</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9221>9221</a></td>\n' +
            '<td>An error was encountered encoding parameters to send to the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9222>9222</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9223>9223</a></td>\n' +
            '<td>LDAP_DECODING_ER ROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9224>9224</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9225>9225</a></td>\n' +
            '<td>An error was encountered decoding a result from the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9226>9226</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9227>9227</a></td>\n' +
            '<td>LDAP_TIMEOUT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9228>9228</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9229>9229</a></td>\n' +
            '<td>A timelimit was exceeded while waiting for a result.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9230>9230</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9231>9231</a></td>\n' +
            '<td>LDAP_AUTH_UNKNOW N</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9232>9232</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9233>9233</a></td>\n' +
            '<td>The authentication method specified to ldap_bind() is not known.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9234>9234</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9235>9235</a></td>\n' +
            '<td>LDAP_FILTER_ERRO R</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9236>9236</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9237>9237</a></td>\n' +
            '<td>An invalid filter was supplied to ldap_search() (e.g., unbalanced parentheses).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9238>9238</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9239>9239</a></td>\n' +
            '<td>LDAP_PARAM_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9240>9240</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9241>9241</a></td>\n' +
            '<td>An ldap routine was called with a bad parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9242>9242</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9243>9243</a></td>\n' +
            '<td>LDAP_NO_MEMORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9244>9244</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9245>9245</a></td>\n' +
            '<td>An memory allocation (e.g., malloc(3) or other dynamic memory allocator) call failed in an ldap library routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9246>9246</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9247>9247</a></td>\n' +
            '<td>LDAP_USER_CANCEL ED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9248>9248</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9249>9249</a></td>\n' +
            '<td>Indicates the user cancelled the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9250>9250</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9251>9251</a></td>\n' +
            '<td>LDAP_CONNECT_ERR OR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9252>9252</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9253>9253</a></td>\n' +
            '<td>Indicates a connection problem.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9254>9254</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9255>9255</a></td>\n' +
            '<td>LDAP_NOT_SUPPORT ED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9256>9256</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9257>9257</a></td>\n' +
            '<td>Indicates the routine was called in a manner not supported by the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9258>9258</a></td>\n' +
            '<td>LDAP_CONTROL_NOT_FOUND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9259>9259</a></td>\n' +
            '<td>Indicates the control provided is unknown to the client library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9260>9260</a></td>\n' +
            '<td>LDAP_NO_RESULTS_RETURNED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9261>9261</a></td>\n' +
            '<td>Indicates no results returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9262>9262</a></td>\n' +
            '<td>LDAP_MORE_RESULTS_TO_RETURN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9263>9263</a></td>\n' +
            '<td>Indicates more results could be returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9264>9264</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9265>9265</a></td>\n' +
            '<td>LDAP_CLIENT_LOOP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9266>9266</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9267>9267</a></td>\n' +
            '<td>Indicates the library has detected a loop in its processing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9268>9268</a></td>\n' +
            '<td>LDAP_REFERRAL_LIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9269>9269</a></td>\n' +
            '<td>Indicates the referral limit has been exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9270>9270</a></td>\n' +
            '<td>DEPRECATED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9271>9271</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9272>9272</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9273>9273</a></td>\n' +
            '<td>ldap(3),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9274>9274</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9275>9275</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9276>9276</a></td>\n' +
            '<td>LDAP_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9277>9277</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9278>9278</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9279>9279</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9280>9280</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9281>9281</a></td>\n' +
            '<td>PROTOCOL RESULT CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9282>9282</a></td>\n' +
            '<td>API ERROR CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9283>9283</a></td>\n' +
            '<td>DEPRECATED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9284>9284</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9285>9285</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9286>9286</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9287>9287</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9288>9288</a></td>\n' +
            '<td>ldap_perror, ld_errno, ldap_result2error, ldap_errlist, ldap_err2string − LDAP protocol error handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9289>9289</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9290>9290</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9291>9291</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9292>9292</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9293>9293</a></td>\n' +
            '<td>char *ldap_err2string( int err );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9294>9294</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9295>9295</a></td>\n' +
            '<td>The ldap_err2string() routine provides short description of the various codes returned by routines in this library. The returned string is a pointer to a static area that should not be modified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9296>9296</a></td>\n' +
            '<td>These codes are either negative, indicating an API error code; positive, indicating an LDAP resultCode other than ´success’ (0), or - zero, indicating both successful use of the API and the LDAP resultCode ´success’ (0).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9297>9297</a></td>\n' +
            '<td>The code associated with an LDAP session is accessible using ldap_get_option(3) and ldap_set_option(3) with the LDAP_OPT_RESULT_CODE option (previously called LDAP_OPT_ERROR_NUMBER).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9298>9298</a></td>\n' +
            '<td>PROTOCOL RESULT CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9299>9299</a></td>\n' +
            '<td>This section provides a partial list of protocol codes recognized by the library. As LDAP is extensible, additional values may be returned. A complete listing of registered LDAP result codes can be obtained from the Internet Assigned Numbers Authority &lt;http://www.iana.org&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9300>9300</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9301>9301</a></td>\n' +
            '<td>LDAP_SUCCESS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9302>9302</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9303>9303</a></td>\n' +
            '<td>The request was successful.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9304>9304</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9305>9305</a></td>\n' +
            '<td>LDAP_OPERATIONS_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9306>9306</a></td>\n' +
            '<td>An operations error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9307>9307</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9308>9308</a></td>\n' +
            '<td>LDAP_PROTOCOL _ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9309>9309</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9310>9310</a></td>\n' +
            '<td>A protocol violation was detected.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9311>9311</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9312>9312</a></td>\n' +
            '<td>LDAP_TIMELIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9313>9313</a></td>\n' +
            '<td>An LDAP time limit was exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9314>9314</a></td>\n' +
            '<td>LDAP_SIZELIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9315>9315</a></td>\n' +
            '<td>An LDAP size limit was exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9316>9316</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9317>9317</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9318>9318</a></td>\n' +
            '<td>_FALSE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9319>9319</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9320>9320</a></td>\n' +
            '<td>A compare operation returned false.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9321>9321</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9322>9322</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9323>9323</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9324>9324</a></td>\n' +
            '<td>_TRUE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9325>9325</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9326>9326</a></td>\n' +
            '<td>A compare operation returned true.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9327>9327</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9328>9328</a></td>\n' +
            '<td>LDAP_STRONG_AUTH_NOT_SUPPORTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9329>9329</a></td>\n' +
            '<td>The LDAP server does not support strong authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9330>9330</a></td>\n' +
            '<td>LDAP_STRONG_AUTH_REQUIRED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9331>9331</a></td>\n' +
            '<td>Strong authentication is required for the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9332>9332</a></td>\n' +
            '<td>LDAP_PARTIAL_RESULTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9333>9333</a></td>\n' +
            '<td>Partial results only returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9334>9334</a></td>\n' +
            '<td>LDAP_NO_SUCH_ATTRIBUTE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9335>9335</a></td>\n' +
            '<td>The attribute type specified does not exist in the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9336>9336</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9337>9337</a></td>\n' +
            '<td>LDAP_UNDEFINED_T YPE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9338>9338</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9339>9339</a></td>\n' +
            '<td>The attribute type specified is invalid.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9340>9340</a></td>\n' +
            '<td>LDAP_INAPPROPRIATE_MATCHING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9341>9341</a></td>\n' +
            '<td>Filter type not supported for the specified attribute.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9342>9342</a></td>\n' +
            '<td>LDAP_CONSTRAINT_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9343>9343</a></td>\n' +
            '<td>An attribute value specified violates some constraint (e.g., a postalAddress has too many lines, or a line that is too long).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9344>9344</a></td>\n' +
            '<td>LDAP_TYPE_OR_VALUE_EXISTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9345>9345</a></td>\n' +
            '<td>An attribute type or attribute value specified already exists in the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9346>9346</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9347>9347</a></td>\n' +
            '<td>LDAP_INVALID_SYN TAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9348>9348</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9349>9349</a></td>\n' +
            '<td>An invalid attribute value was specified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9350>9350</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9351>9351</a></td>\n' +
            '<td>LDAP_NO_SUCH_OB JECT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9352>9352</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9353>9353</a></td>\n' +
            '<td>The specified object does not exist in The Directory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9354>9354</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9355>9355</a></td>\n' +
            '<td>LDAP_ALIAS_PROBL EM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9356>9356</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9357>9357</a></td>\n' +
            '<td>An alias in The Directory points to a nonexistent entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9358>9358</a></td>\n' +
            '<td>LDAP_INVALID_DN_SYNTAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9359>9359</a></td>\n' +
            '<td>A syntactically invalid DN was specified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9360>9360</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9361>9361</a></td>\n' +
            '<td>LDAP_IS_LEAF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9362>9362</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9363>9363</a></td>\n' +
            '<td>The object specified is a leaf.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9364>9364</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9365>9365</a></td>\n' +
            '<td>LDAP_ALIAS_DEREF_PROBLEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9366>9366</a></td>\n' +
            '<td>A problem was encountered when dereferencing an alias.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9367>9367</a></td>\n' +
            '<td>LDAP_INAPPROPRIATE_AUTH</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9368>9368</a></td>\n' +
            '<td>Inappropriate authentication was specified (e.g., LDAP_AUTH_SIMPLE was specified and the entry does not have a userPassword attribute).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9369>9369</a></td>\n' +
            '<td>LDAP_INVALID_CREDENTIALS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9370>9370</a></td>\n' +
            '<td>Invalid credentials were presented (e.g., the wrong password).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9371>9371</a></td>\n' +
            '<td>LDAP_INSUFFICIENT_ACCESS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9372>9372</a></td>\n' +
            '<td>The user has insufficient access to perform the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9373>9373</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9374>9374</a></td>\n' +
            '<td>LDAP_BUSY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9375>9375</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9376>9376</a></td>\n' +
            '<td>The DSA is busy.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9377>9377</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9378>9378</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9379>9379</a></td>\n' +
            '<td>LDAP_UNAVAILA BLE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9380>9380</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9381>9381</a></td>\n' +
            '<td>The DSA is unavailable.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9382>9382</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9383>9383</a></td>\n' +
            '<td>LDAP_UNWILLING_TO_PERFORM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9384>9384</a></td>\n' +
            '<td>The DSA is unwilling to perform the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9385>9385</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9386>9386</a></td>\n' +
            '<td>LDAP_LOOP_DE TECT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9387>9387</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9388>9388</a></td>\n' +
            '<td>A loop was detected.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9389>9389</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9390>9390</a></td>\n' +
            '<td>LDAP_NAMING_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9391>9391</a></td>\n' +
            '<td>A naming violation occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9392>9392</a></td>\n' +
            '<td>LDAP_OBJECT_CLASS_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9393>9393</a></td>\n' +
            '<td>An object class violation occurred (e.g., a "must" attribute was missing from the entry).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9394>9394</a></td>\n' +
            '<td>LDAP_NOT_ALLOWED_ON_NONLEAF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9395>9395</a></td>\n' +
            '<td>The operation is not allowed on a nonleaf object.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9396>9396</a></td>\n' +
            '<td>LDAP_NOT_ALLOWED_ON_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9397>9397</a></td>\n' +
            '<td>The operation is not allowed on an RDN.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9398>9398</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9399>9399</a></td>\n' +
            '<td>LDAP_ALREADY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9400>9400</a></td>\n' +
            '<td>_EXISTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9401>9401</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9402>9402</a></td>\n' +
            '<td>The entry already exists.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9403>9403</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9404>9404</a></td>\n' +
            '<td>LDAP_NO_OBJECT_CLASS_MODS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9405>9405</a></td>\n' +
            '<td>Object class modifications are not allowed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9406>9406</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9407>9407</a></td>\n' +
            '<td>LDAP_OTHER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9408>9408</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9409>9409</a></td>\n' +
            '<td>An unknown error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9410>9410</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9411>9411</a></td>\n' +
            '<td>API ERROR CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9412>9412</a></td>\n' +
            '<td>This section provides a complete list of API error codes recognized by the library. Note that LDAP_SUCCESS indicates success of an API call in addition to representing the return of the LDAP ´success’ resultCode.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9413>9413</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9414>9414</a></td>\n' +
            '<td>LDAP_SERVER_DOWN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9415>9415</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9416>9416</a></td>\n' +
            '<td>The LDAP library can’t contact the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9417>9417</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9418>9418</a></td>\n' +
            '<td>LDAP_LOCAL_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9419>9419</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9420>9420</a></td>\n' +
            '<td>Some local error occurred. This is usually a failed dynamic memory allocation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9421>9421</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9422>9422</a></td>\n' +
            '<td>LDAP_ENCODING_ER ROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9423>9423</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9424>9424</a></td>\n' +
            '<td>An error was encountered encoding parameters to send to the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9425>9425</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9426>9426</a></td>\n' +
            '<td>LDAP_DECODING_ER ROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9427>9427</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9428>9428</a></td>\n' +
            '<td>An error was encountered decoding a result from the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9429>9429</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9430>9430</a></td>\n' +
            '<td>LDAP_TIMEOUT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9431>9431</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9432>9432</a></td>\n' +
            '<td>A timelimit was exceeded while waiting for a result.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9433>9433</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9434>9434</a></td>\n' +
            '<td>LDAP_AUTH_UNKNOW N</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9435>9435</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9436>9436</a></td>\n' +
            '<td>The authentication method specified to ldap_bind() is not known.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9437>9437</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9438>9438</a></td>\n' +
            '<td>LDAP_FILTER_ERRO R</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9439>9439</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9440>9440</a></td>\n' +
            '<td>An invalid filter was supplied to ldap_search() (e.g., unbalanced parentheses).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9441>9441</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9442>9442</a></td>\n' +
            '<td>LDAP_PARAM_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9443>9443</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9444>9444</a></td>\n' +
            '<td>An ldap routine was called with a bad parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9445>9445</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9446>9446</a></td>\n' +
            '<td>LDAP_NO_MEMORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9447>9447</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9448>9448</a></td>\n' +
            '<td>An memory allocation (e.g., malloc(3) or other dynamic memory allocator) call failed in an ldap library routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9449>9449</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9450>9450</a></td>\n' +
            '<td>LDAP_USER_CANCEL ED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9451>9451</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9452>9452</a></td>\n' +
            '<td>Indicates the user cancelled the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9453>9453</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9454>9454</a></td>\n' +
            '<td>LDAP_CONNECT_ERR OR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9455>9455</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9456>9456</a></td>\n' +
            '<td>Indicates a connection problem.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9457>9457</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9458>9458</a></td>\n' +
            '<td>LDAP_NOT_SUPPORT ED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9459>9459</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9460>9460</a></td>\n' +
            '<td>Indicates the routine was called in a manner not supported by the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9461>9461</a></td>\n' +
            '<td>LDAP_CONTROL_NOT_FOUND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9462>9462</a></td>\n' +
            '<td>Indicates the control provided is unknown to the client library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9463>9463</a></td>\n' +
            '<td>LDAP_NO_RESULTS_RETURNED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9464>9464</a></td>\n' +
            '<td>Indicates no results returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9465>9465</a></td>\n' +
            '<td>LDAP_MORE_RESULTS_TO_RETURN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9466>9466</a></td>\n' +
            '<td>Indicates more results could be returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9467>9467</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9468>9468</a></td>\n' +
            '<td>LDAP_CLIENT_LOOP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9469>9469</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9470>9470</a></td>\n' +
            '<td>Indicates the library has detected a loop in its processing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9471>9471</a></td>\n' +
            '<td>LDAP_REFERRAL_LIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9472>9472</a></td>\n' +
            '<td>Indicates the referral limit has been exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9473>9473</a></td>\n' +
            '<td>DEPRECATED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9474>9474</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9475>9475</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9476>9476</a></td>\n' +
            '<td>ldap(3),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9477>9477</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9478>9478</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9479>9479</a></td>\n' +
            '<td>LDAP_GET_DN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9480>9480</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9481>9481</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9482>9482</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9483>9483</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9484>9484</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9485>9485</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9486>9486</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9487>9487</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9488>9488</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9489>9489</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9490>9490</a></td>\n' +
            '<td>ldap_get_dn, ldap_explode_dn, ldap_explode_rdn, ldap_dn2ufn − LDAP DN handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9491>9491</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9492>9492</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9493>9493</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9494>9494</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9495>9495</a></td>\n' +
            '<td>char *ldap_get_dn( LDAP *ld, LDAPMessage *entry )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9496>9496</a></td>\n' +
            '<td>int ldap_str2dn( const char *str, LDAPDN *dn, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9497>9497</a></td>\n' +
            '<td>void ldap_dnfree( LDAPDN dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9498>9498</a></td>\n' +
            '<td>int ldap_dn2str( LDAPDN dn, char **str, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9499>9499</a></td>\n' +
            '<td>char **ldap_explode_dn( const char *dn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9500>9500</a></td>\n' +
            '<td>char **ldap_explode_rdn( const char *rdn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9501>9501</a></td>\n' +
            '<td>char *ldap_dn2ufn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9502>9502</a></td>\n' +
            '<td>char *ldap_dn2dcedn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9503>9503</a></td>\n' +
            '<td>char *ldap_dcedn2dn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9504>9504</a></td>\n' +
            '<td>char *ldap_dn2ad_canonical( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9505>9505</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9506>9506</a></td>\n' +
            '<td>These routines allow LDAP entry names (Distinguished Names, or DNs) to be obtained, parsed, converted to a user-friendly form, and tested. A DN has the form described in RFC 4414 "Lightweight Directory Access Protocol (LDAP): String Representation of Distinguished Names".</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9507>9507</a></td>\n' +
            '<td>The ldap_get_dn() routine takes an entry as returned by ldap_first_entry(3) or ldap_next_entry(3) and returns a copy of the entry’s DN. Space for the DN will be obtained dynamically and should be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9508>9508</a></td>\n' +
            '<td>ldap_str2dn() parses a string representation of a distinguished name contained in str into its components, which are stored in dn as ldap_ava structures, arranged in LDAPAVA, LDAPRDN, and LDAPDN terms. Space for dn will be obtained dynamically and should be freed by the caller using ldap_dnfree(3). The LDAPDN is defined as:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9509>9509</a></td>\n' +
            '<td>typedef struct ldap_ava {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9510>9510</a></td>\n' +
            '<td>struct berval la_attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9511>9511</a></td>\n' +
            '<td>struct berval la_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9512>9512</a></td>\n' +
            '<td>unsigned la_flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9513>9513</a></td>\n' +
            '<td>} LDAPAVA;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9514>9514</a></td>\n' +
            '<td>typedef LDAPAVA** LDAPRDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9515>9515</a></td>\n' +
            '<td>typedef LDAPRDN* LDAPDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9516>9516</a></td>\n' +
            '<td>The attribute types and the attribute values are not normalized. The la_flags can be either LDAP_AVA_STRING or LDAP_AVA_BINARY, the latter meaning that the value is BER/DER encoded and thus must be represented as, quoting from RFC 4514, " ... an octothorpe character (’#’ ASCII 35) followed by the hexadecimal representation of each of the bytes of the BER encoding of the X.500 AttributeValue." The flags parameter to ldap_str2dn() can be</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9517>9517</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9518>9518</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9519>9519</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 3</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9520>9520</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9521>9521</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9522>9522</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 2</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9523>9523</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9524>9524</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9525>9525</a></td>\n' +
            '<td>LDAP_DN_FORMAT_DCE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9526>9526</a></td>\n' +
            '<td>which defines what DN syntax is expected (according to RFC 4514, RFC 1779 and DCE, respectively). The format can be ORed to the flags</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9527>9527</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9528>9528</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9529>9529</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9530>9530</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9531>9531</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9532>9532</a></td>\n' +
            '<td>...</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9533>9533</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9534>9534</a></td>\n' +
            '<td>LDAP_DN_PEDANTIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9535>9535</a></td>\n' +
            '<td>The latter is a shortcut for all the previous limitations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9536>9536</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES does not allow extra spaces in the dn; the default is to silently eliminate spaces around AVA separators (’=’), RDN component separators (’+’ for LDAPv3/LDAPv2 or ’,’ for DCE) and RDN separators (’,’ LDAPv3/LDAPv2 or ’/’ for DCE).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9537>9537</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN does not allow a single space after RDN separators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9538>9538</a></td>\n' +
            '<td>ldap_dn2str() performs the inverse operation, yielding in str a string representation of dn. It allows the same values for flags as ldap_str2dn(), plus</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9539>9539</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9540>9540</a></td>\n' +
            '<td>LDAP_DN_FORMAT_UFN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9541>9541</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9542>9542</a></td>\n' +
            '<td>LDAP_DN_FORMAT_AD_CANONICAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9543>9543</a></td>\n' +
            '<td>for user-friendly naming (RFC 1781) and AD canonical.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9544>9544</a></td>\n' +
            '<td>The following routines are viewed as deprecated in favor of ldap_str2dn() and ldap_dn2str(). They are provided to support legacy applications.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9545>9545</a></td>\n' +
            '<td>The ldap_explode_dn() routine takes a DN as returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as a Relative Distinguished Name, or RDN. ldap_explode_dn() returns a NULL-terminated array, each component of which contains an RDN from the DN. The notypes parameter is used to request that only the RDN values be returned, not their types. For example, the DN "cn=Bob, c=US" would return as either { "cn=Bob", "c=US", NULL } or { "Bob", "US", NULL }, depending on whether notypes was 0 or 1, respectively. Assertion values in RDN strings may included escaped characters. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9546>9546</a></td>\n' +
            '<td>Similarly, the ldap_explode_rdn() routine takes an RDN as returned by ldap_explode_dn(dn,0) and breaks it up into its "type=value" component parts (or just "value", if the notypes parameter is set). Note the value is not unescaped. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9547>9547</a></td>\n' +
            '<td>ldap_dn2ufn() is used to turn a DN as returned by ldap_get_dn(3) into a more user-friendly form, stripping off all type names. See "Using the Directory to Achieve User Friendly Naming" (RFC 1781) for more details on the UFN format. Due to the ambiguous nature of the format, it is generally only used for display purposes. The space for the UFN returned is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9548>9548</a></td>\n' +
            '<td>ldap_dn2dcedn() is used to turn a DN as returned by ldap_get_dn(3) into a DCE-style DN, e.g. a string with most-significant to least significant rdns separated by slashes (’/’); rdn components are separated by commas (’,’). Only printable chars (e.g. LDAPv2 printable string) are allowed, at least in this implementation. ldap_dcedn2dn() performs the opposite operation. ldap_dn2ad_canonical() turns a DN into a AD canonical name, which is basically a DCE dn with attribute types omitted. The trailing domain, if present, is turned in a DNS-like domain. The space for the returned value is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9549>9549</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9550>9550</a></td>\n' +
            '<td>If an error occurs in ldap_get_dn(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes. ldap_explode_dn(), ldap_explode_rdn(), ldap_dn2ufn(), ldap_dn2dcedn(), ldap_dcedn2dn(), and ldap_dn2ad_canonical() will return NULL with errno(3) set appropriately in case of trouble.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9551>9551</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9552>9552</a></td>\n' +
            '<td>These routines dynamically allocate memory that the caller must free.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9553>9553</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9554>9554</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_first_entry(3), ldap_memfree(3), ldap_value_free(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9555>9555</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9556>9556</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9557>9557</a></td>\n' +
            '<td>LDAP_GET_DN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9558>9558</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9559>9559</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9560>9560</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9561>9561</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9562>9562</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9563>9563</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9564>9564</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9565>9565</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9566>9566</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9567>9567</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9568>9568</a></td>\n' +
            '<td>ldap_get_dn, ldap_explode_dn, ldap_explode_rdn, ldap_dn2ufn − LDAP DN handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9569>9569</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9570>9570</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9571>9571</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9572>9572</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9573>9573</a></td>\n' +
            '<td>char *ldap_get_dn( LDAP *ld, LDAPMessage *entry )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9574>9574</a></td>\n' +
            '<td>int ldap_str2dn( const char *str, LDAPDN *dn, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9575>9575</a></td>\n' +
            '<td>void ldap_dnfree( LDAPDN dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9576>9576</a></td>\n' +
            '<td>int ldap_dn2str( LDAPDN dn, char **str, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9577>9577</a></td>\n' +
            '<td>char **ldap_explode_dn( const char *dn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9578>9578</a></td>\n' +
            '<td>char **ldap_explode_rdn( const char *rdn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9579>9579</a></td>\n' +
            '<td>char *ldap_dn2ufn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9580>9580</a></td>\n' +
            '<td>char *ldap_dn2dcedn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9581>9581</a></td>\n' +
            '<td>char *ldap_dcedn2dn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9582>9582</a></td>\n' +
            '<td>char *ldap_dn2ad_canonical( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9583>9583</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9584>9584</a></td>\n' +
            '<td>These routines allow LDAP entry names (Distinguished Names, or DNs) to be obtained, parsed, converted to a user-friendly form, and tested. A DN has the form described in RFC 4414 "Lightweight Directory Access Protocol (LDAP): String Representation of Distinguished Names".</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9585>9585</a></td>\n' +
            '<td>The ldap_get_dn() routine takes an entry as returned by ldap_first_entry(3) or ldap_next_entry(3) and returns a copy of the entry’s DN. Space for the DN will be obtained dynamically and should be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9586>9586</a></td>\n' +
            '<td>ldap_str2dn() parses a string representation of a distinguished name contained in str into its components, which are stored in dn as ldap_ava structures, arranged in LDAPAVA, LDAPRDN, and LDAPDN terms. Space for dn will be obtained dynamically and should be freed by the caller using ldap_dnfree(3). The LDAPDN is defined as:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9587>9587</a></td>\n' +
            '<td>typedef struct ldap_ava {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9588>9588</a></td>\n' +
            '<td>struct berval la_attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9589>9589</a></td>\n' +
            '<td>struct berval la_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9590>9590</a></td>\n' +
            '<td>unsigned la_flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9591>9591</a></td>\n' +
            '<td>} LDAPAVA;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9592>9592</a></td>\n' +
            '<td>typedef LDAPAVA** LDAPRDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9593>9593</a></td>\n' +
            '<td>typedef LDAPRDN* LDAPDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9594>9594</a></td>\n' +
            '<td>The attribute types and the attribute values are not normalized. The la_flags can be either LDAP_AVA_STRING or LDAP_AVA_BINARY, the latter meaning that the value is BER/DER encoded and thus must be represented as, quoting from RFC 4514, " ... an octothorpe character (’#’ ASCII 35) followed by the hexadecimal representation of each of the bytes of the BER encoding of the X.500 AttributeValue." The flags parameter to ldap_str2dn() can be</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9595>9595</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9596>9596</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9597>9597</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 3</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9598>9598</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9599>9599</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9600>9600</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 2</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9601>9601</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9602>9602</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9603>9603</a></td>\n' +
            '<td>LDAP_DN_FORMAT_DCE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9604>9604</a></td>\n' +
            '<td>which defines what DN syntax is expected (according to RFC 4514, RFC 1779 and DCE, respectively). The format can be ORed to the flags</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9605>9605</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9606>9606</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9607>9607</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9608>9608</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9609>9609</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9610>9610</a></td>\n' +
            '<td>...</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9611>9611</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9612>9612</a></td>\n' +
            '<td>LDAP_DN_PEDANTIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9613>9613</a></td>\n' +
            '<td>The latter is a shortcut for all the previous limitations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9614>9614</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES does not allow extra spaces in the dn; the default is to silently eliminate spaces around AVA separators (’=’), RDN component separators (’+’ for LDAPv3/LDAPv2 or ’,’ for DCE) and RDN separators (’,’ LDAPv3/LDAPv2 or ’/’ for DCE).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9615>9615</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN does not allow a single space after RDN separators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9616>9616</a></td>\n' +
            '<td>ldap_dn2str() performs the inverse operation, yielding in str a string representation of dn. It allows the same values for flags as ldap_str2dn(), plus</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9617>9617</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9618>9618</a></td>\n' +
            '<td>LDAP_DN_FORMAT_UFN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9619>9619</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9620>9620</a></td>\n' +
            '<td>LDAP_DN_FORMAT_AD_CANONICAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9621>9621</a></td>\n' +
            '<td>for user-friendly naming (RFC 1781) and AD canonical.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9622>9622</a></td>\n' +
            '<td>The following routines are viewed as deprecated in favor of ldap_str2dn() and ldap_dn2str(). They are provided to support legacy applications.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9623>9623</a></td>\n' +
            '<td>The ldap_explode_dn() routine takes a DN as returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as a Relative Distinguished Name, or RDN. ldap_explode_dn() returns a NULL-terminated array, each component of which contains an RDN from the DN. The notypes parameter is used to request that only the RDN values be returned, not their types. For example, the DN "cn=Bob, c=US" would return as either { "cn=Bob", "c=US", NULL } or { "Bob", "US", NULL }, depending on whether notypes was 0 or 1, respectively. Assertion values in RDN strings may included escaped characters. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9624>9624</a></td>\n' +
            '<td>Similarly, the ldap_explode_rdn() routine takes an RDN as returned by ldap_explode_dn(dn,0) and breaks it up into its "type=value" component parts (or just "value", if the notypes parameter is set). Note the value is not unescaped. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9625>9625</a></td>\n' +
            '<td>ldap_dn2ufn() is used to turn a DN as returned by ldap_get_dn(3) into a more user-friendly form, stripping off all type names. See "Using the Directory to Achieve User Friendly Naming" (RFC 1781) for more details on the UFN format. Due to the ambiguous nature of the format, it is generally only used for display purposes. The space for the UFN returned is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9626>9626</a></td>\n' +
            '<td>ldap_dn2dcedn() is used to turn a DN as returned by ldap_get_dn(3) into a DCE-style DN, e.g. a string with most-significant to least significant rdns separated by slashes (’/’); rdn components are separated by commas (’,’). Only printable chars (e.g. LDAPv2 printable string) are allowed, at least in this implementation. ldap_dcedn2dn() performs the opposite operation. ldap_dn2ad_canonical() turns a DN into a AD canonical name, which is basically a DCE dn with attribute types omitted. The trailing domain, if present, is turned in a DNS-like domain. The space for the returned value is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9627>9627</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9628>9628</a></td>\n' +
            '<td>If an error occurs in ldap_get_dn(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes. ldap_explode_dn(), ldap_explode_rdn(), ldap_dn2ufn(), ldap_dn2dcedn(), ldap_dcedn2dn(), and ldap_dn2ad_canonical() will return NULL with errno(3) set appropriately in case of trouble.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9629>9629</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9630>9630</a></td>\n' +
            '<td>These routines dynamically allocate memory that the caller must free.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9631>9631</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9632>9632</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_first_entry(3), ldap_memfree(3), ldap_value_free(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9633>9633</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9634>9634</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9635>9635</a></td>\n' +
            '<td>LDAP_EXTENDED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9636>9636</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9637>9637</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9638>9638</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9639>9639</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9640>9640</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9641>9641</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9642>9642</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9643>9643</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9644>9644</a></td>\n' +
            '<td>ldap_extended_operation, ldap_extended_operation_s − Extends the LDAP operations to the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9645>9645</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9646>9646</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9647>9647</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9648>9648</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9649>9649</a></td>\n' +
            '<td>int ldap_extended_operation(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9650>9650</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9651>9651</a></td>\n' +
            '<td>const char *requestoid,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9652>9652</a></td>\n' +
            '<td>const struct berval *requestdata,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9653>9653</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9654>9654</a></td>\n' +
            '<td>LDAPControl **cctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9655>9655</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9656>9656</a></td>\n' +
            '<td>int ldap_extended_operation_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9657>9657</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9658>9658</a></td>\n' +
            '<td>const char *requestoid,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9659>9659</a></td>\n' +
            '<td>const struct berval *requestdata,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9660>9660</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9661>9661</a></td>\n' +
            '<td>LDAPControl **cctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9662>9662</a></td>\n' +
            '<td>char **retoidp,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9663>9663</a></td>\n' +
            '<td>struct berval **retdatap );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9664>9664</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9665>9665</a></td>\n' +
            '<td>The ldap_extended_operation_s() routine is used to synchronously perform an LDAP extended operation. It takes requestoid, which points to a dotted-decimal OID string identifying the extended operation to perform. requestdata is the data required for the request, sctrls is an array of LDAPControl structures to use with this extended operation, cctrls is an array of LDAPControl structures that list the client controls to use with this extended operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9666>9666</a></td>\n' +
            '<td>The output parameter retoidp points to a dotted-decimal OID string returned by the LDAP server. The memory used by the string should be freed with the ldap_memfree(3) function. The output parameter retdatap points to a pointer to a berval structure that contains the returned data. If no data is returned by the server, the pointer is set this to NULL. The memory used by this structure should be freed with the ber_bvfree(3) function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9667>9667</a></td>\n' +
            '<td>The ldap_extended_operation() works just like ldap_extended_operation_s(), but the operation is asynchronous. It provides the message id of the request it initiated in the integer pointed to be msgidp. The result of this operation can be obtained by calling ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9668>9668</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9669>9669</a></td>\n' +
            '<td>ber_bvfree(3), ldap_memfree(3), ldap_parse_extended_result(3), ldap_result(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9670>9670</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9671>9671</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9672>9672</a></td>\n' +
            '<td>LDAP_EXTENDED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9673>9673</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9674>9674</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9675>9675</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9676>9676</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9677>9677</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9678>9678</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9679>9679</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9680>9680</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9681>9681</a></td>\n' +
            '<td>ldap_extended_operation, ldap_extended_operation_s − Extends the LDAP operations to the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9682>9682</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9683>9683</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9684>9684</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9685>9685</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9686>9686</a></td>\n' +
            '<td>int ldap_extended_operation(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9687>9687</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9688>9688</a></td>\n' +
            '<td>const char *requestoid,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9689>9689</a></td>\n' +
            '<td>const struct berval *requestdata,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9690>9690</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9691>9691</a></td>\n' +
            '<td>LDAPControl **cctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9692>9692</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9693>9693</a></td>\n' +
            '<td>int ldap_extended_operation_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9694>9694</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9695>9695</a></td>\n' +
            '<td>const char *requestoid,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9696>9696</a></td>\n' +
            '<td>const struct berval *requestdata,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9697>9697</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9698>9698</a></td>\n' +
            '<td>LDAPControl **cctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9699>9699</a></td>\n' +
            '<td>char **retoidp,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9700>9700</a></td>\n' +
            '<td>struct berval **retdatap );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9701>9701</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9702>9702</a></td>\n' +
            '<td>The ldap_extended_operation_s() routine is used to synchronously perform an LDAP extended operation. It takes requestoid, which points to a dotted-decimal OID string identifying the extended operation to perform. requestdata is the data required for the request, sctrls is an array of LDAPControl structures to use with this extended operation, cctrls is an array of LDAPControl structures that list the client controls to use with this extended operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9703>9703</a></td>\n' +
            '<td>The output parameter retoidp points to a dotted-decimal OID string returned by the LDAP server. The memory used by the string should be freed with the ldap_memfree(3) function. The output parameter retdatap points to a pointer to a berval structure that contains the returned data. If no data is returned by the server, the pointer is set this to NULL. The memory used by this structure should be freed with the ber_bvfree(3) function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9704>9704</a></td>\n' +
            '<td>The ldap_extended_operation() works just like ldap_extended_operation_s(), but the operation is asynchronous. It provides the message id of the request it initiated in the integer pointed to be msgidp. The result of this operation can be obtained by calling ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9705>9705</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9706>9706</a></td>\n' +
            '<td>ber_bvfree(3), ldap_memfree(3), ldap_parse_extended_result(3), ldap_result(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9707>9707</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9708>9708</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9709>9709</a></td>\n' +
            '<td>LDAP_FIRST_ATTRIBUTE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9710>9710</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9711>9711</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9712>9712</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9713>9713</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9714>9714</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9715>9715</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9716>9716</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9717>9717</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9718>9718</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9719>9719</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9720>9720</a></td>\n' +
            '<td>ldap_first_attribute, ldap_next_attribute − step through LDAP entry attributes</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9721>9721</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9722>9722</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9723>9723</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9724>9724</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9725>9725</a></td>\n' +
            '<td>char *ldap_first_attribute(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9726>9726</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9727>9727</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9728>9728</a></td>\n' +
            '<td>LDAP *ld, LDAPMessage *entry, BerElement **berptr )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9729>9729</a></td>\n' +
            '<td>char *ldap_next_attribute(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9730>9730</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9731>9731</a></td>\n' +
            '<td>LDAP *ld, LDAPMessage *entry, BerElement *ber )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9732>9732</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9733>9733</a></td>\n' +
            '<td>The ldap_first_attribute() and ldap_next_attribute() routines are used to step through the attributes in an LDAP entry. ldap_first_attribute() takes an entry as returned by ldap_first_entry(3) or ldap_next_entry(3) and returns a pointer to character string containing the first attribute description in the entry. ldap_next_attribute() returns the next attribute description in the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9734>9734</a></td>\n' +
            '<td>It also returns, in berptr, a pointer to a BerElement it has allocated to keep track of its current position. This pointer should be passed to subsequent calls to ldap_next_attribute() and is used to effectively step through the entry’s attributes. The caller is solely responsible for freeing the BerElement pointed to by berptr when it is no longer needed by calling ber_free(3). When calling ber_free(3) in this instance, be sure the second argument is 0.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9735>9735</a></td>\n' +
            '<td>The attribute names returned are suitable for inclusion in a call to ldap_get_values(3) to retrieve the attribute’s values.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9736>9736</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9737>9737</a></td>\n' +
            '<td>If an error occurs, NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9738>9738</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9739>9739</a></td>\n' +
            '<td>The ldap_first_attribute() and ldap_next_attribute() return dynamically allocated memory that must be freed by the caller via ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9740>9740</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9741>9741</a></td>\n' +
            '<td>ldap(3), ldap_first_entry(3), ldap_get_values(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9742>9742</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9743>9743</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9744>9744</a></td>\n' +
            '<td>LDAP_FIRST_ENTRY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9745>9745</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9746>9746</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9747>9747</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9748>9748</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9749>9749</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9750>9750</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9751>9751</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9752>9752</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9753>9753</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9754>9754</a></td>\n' +
            '<td>ldap_first_entry, ldap_next_entry, ldap_count_entries − LDAP result entry parsing and counting routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9755>9755</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9756>9756</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9757>9757</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9758>9758</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9759>9759</a></td>\n' +
            '<td>int ldap_count_entries( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9760>9760</a></td>\n' +
            '<td>LDAPMessage *ldap_first_entry( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9761>9761</a></td>\n' +
            '<td>LDAPMessage *ldap_next_entry( LDAP *ld, LDAPMessage *entry )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9762>9762</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9763>9763</a></td>\n' +
            '<td>These routines are used to parse results received from ldap_result(3) or the synchronous LDAP search operation routines ldap_search_s(3) and ldap_search_st(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9764>9764</a></td>\n' +
            '<td>The ldap_first_entry() routine is used to retrieve the first entry in a chain of search results. It takes the result as returned by a call to ldap_result(3) or ldap_search_s(3) or ldap_search_st(3) and returns a pointer to the first entry in the result.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9765>9765</a></td>\n' +
            '<td>This pointer should be supplied on a subsequent call to ldap_next_entry() to get the next entry, the result of which should be supplied to the next call to ldap_next_entry(), etc. ldap_next_entry() will return NULL when there are no more entries. The entries returned from these calls are used in calls to the routines described in ldap_get_dn(3), ldap_first_attribute(3), ldap_get_values(3), etc.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9766>9766</a></td>\n' +
            '<td>A count of the number of entries in the search result can be obtained by calling ldap_count_entries().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9767>9767</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9768>9768</a></td>\n' +
            '<td>If an error occurs in ldap_first_entry() or ldap_next_entry(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. If an error occurs in ldap_count_entries(), -1 is returned, and ld_errno is set appropriately. See ldap_error(3) for a description of possible error codes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9769>9769</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9770>9770</a></td>\n' +
            '<td>ldap(3), ldap_result(3), ldap_search(3), ldap_first_attribute(3), ldap_get_values(3), ldap_get_dn(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9771>9771</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9772>9772</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9773>9773</a></td>\n' +
            '<td>LDAP_FIRST_MESSAGE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9774>9774</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9775>9775</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9776>9776</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9777>9777</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9778>9778</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9779>9779</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9780>9780</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9781>9781</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9782>9782</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9783>9783</a></td>\n' +
            '<td>ldap_first_message, ldap_next_message, ldap_count_messages − Stepping through messages in a result chain</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9784>9784</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9785>9785</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9786>9786</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9787>9787</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9788>9788</a></td>\n' +
            '<td>int ldap_count_messages( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9789>9789</a></td>\n' +
            '<td>LDAPMessage *ldap_first_message( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9790>9790</a></td>\n' +
            '<td>LDAPMessage *ldap_next_message( LDAP *ld, LDAPMessage *message )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9791>9791</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9792>9792</a></td>\n' +
            '<td>These routines are used to step through the messages in a result chain received from ldap_result(3). For search operations, the result chain can contain referral, entry and result messages. The ldap_msgtype(3) function can be used to distinguish between the different message types.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9793>9793</a></td>\n' +
            '<td>The ldap_first_message() routine is used to retrieve the first message in a result chain. It takes the result as returned by a call to ldap_result(3), ldap_search_s(3) or ldap_search_st(3) and returns a pointer to the first message in the result chain.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9794>9794</a></td>\n' +
            '<td>This pointer should be supplied on a subsequent call to ldap_next_message() to get the next message, the result of which should be supplied to the next call to ldap_next_message(), etc. ldap_next_message() will return NULL when there are no more messages.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9795>9795</a></td>\n' +
            '<td>These functions are useful when using routines like ldap_parse_result(3) that only operate on the first result in the chain.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9796>9796</a></td>\n' +
            '<td>A count of the number of messages in the result chain can be obtained by calling ldap_count_messages(). It can also be used to count the number of remaining messages in a chain if called with a message, entry or reference returned by ldap_first_message() , ldap_next_message() , ldap_first_entry(3), ldap_next_entry(3), ldap_first_reference(3), ldap_next_reference(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9797>9797</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9798>9798</a></td>\n' +
            '<td>If an error occurs in ldap_first_message() or ldap_next_message(), NULL is returned. If an error occurs in ldap_count_messages(), -1 is returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9799>9799</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9800>9800</a></td>\n' +
            '<td>ldap(3), ldap_search(3), ldap_result(3), ldap_parse_result(3), ldap_first_entry(3), ldap_first_reference(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9801>9801</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9802>9802</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9803>9803</a></td>\n' +
            '<td>LDAP_FIRST_REFERENCE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9804>9804</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9805>9805</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9806>9806</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9807>9807</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9808>9808</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9809>9809</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9810>9810</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9811>9811</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9812>9812</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9813>9813</a></td>\n' +
            '<td>ldap_first_reference, ldap_next_reference, ldap_count_references − Stepping through continuation references in a result chain</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9814>9814</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9815>9815</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9816>9816</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9817>9817</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9818>9818</a></td>\n' +
            '<td>int ldap_count_references( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9819>9819</a></td>\n' +
            '<td>LDAPMessage *ldap_first_reference( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9820>9820</a></td>\n' +
            '<td>LDAPMessage *ldap_next_reference( LDAP *ld, LDAPMessage *reference )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9821>9821</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9822>9822</a></td>\n' +
            '<td>These routines are used to step through the continuation references in a result chain received from ldap_result(3) or the synchronous LDAP search operation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9823>9823</a></td>\n' +
            '<td>The ldap_first_reference() routine is used to retrieve the first reference message in a result chain. It takes the result as returned by a call to ldap_result(3), ldap_search_s(3) or ldap_search_st(3) and returns a pointer to the first reference message in the result chain.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9824>9824</a></td>\n' +
            '<td>This pointer should be supplied on a subsequent call to ldap_next_reference() to get the next reference message, the result of which should be supplied to the next call to ldap_next_reference(), etc. ldap_next_reference() will return NULL when there are no more reference messages. The reference messages returned from these calls are used by ldap_parse_reference(3) to extract referrals and controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9825>9825</a></td>\n' +
            '<td>A count of the number of reference messages in the search result can be obtained by calling ldap_count_references(). It can also be used to count the number of reference messages remaining in a result chain.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9826>9826</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9827>9827</a></td>\n' +
            '<td>If an error occurs in ldap_first_reference() or ldap_next_reference(), NULL is returned. If an error occurs in ldap_count_references(), -1 is returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9828>9828</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9829>9829</a></td>\n' +
            '<td>ldap(3), ldap_result(3), ldap_search(3), ldap_parse_reference(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9830>9830</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9831>9831</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9832>9832</a></td>\n' +
            '<td>LDAP_URL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9833>9833</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9834>9834</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9835>9835</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9836>9836</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9837>9837</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9838>9838</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9839>9839</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9840>9840</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9841>9841</a></td>\n' +
            '<td>ldap_is_ldap_url, ldap_url_parse, ldap_free_urldesc − LDAP Uniform Resource Locator routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9842>9842</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9843>9843</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9844>9844</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9845>9845</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9846>9846</a></td>\n' +
            '<td>int ldap_is_ldap_url( const char *url )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9847>9847</a></td>\n' +
            '<td>int ldap_url_parse( const char *url, LDAPURLDesc **ludpp )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9848>9848</a></td>\n' +
            '<td>typedef struct ldap_url_desc {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9849>9849</a></td>\n' +
            '<td>char * lud_scheme; /* URI scheme */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9850>9850</a></td>\n' +
            '<td>char * lud_host; /* LDAP host to contact */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9851>9851</a></td>\n' +
            '<td>int lud_port; /* port on host */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9852>9852</a></td>\n' +
            '<td>char * lud_dn; /* base for search */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9853>9853</a></td>\n' +
            '<td>char ** lud_attrs; /* list of attributes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9854>9854</a></td>\n' +
            '<td>int lud_scope; /* a LDAP_SCOPE_... value */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9855>9855</a></td>\n' +
            '<td>char * lud_filter; /* LDAP search filter */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9856>9856</a></td>\n' +
            '<td>char ** lud_exts; /* LDAP extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9857>9857</a></td>\n' +
            '<td>int lud_crit_exts; /* true if any extension is critical */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9858>9858</a></td>\n' +
            '<td>/* may contain additional fields for internal use */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9859>9859</a></td>\n' +
            '<td>} LDAPURLDesc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9860>9860</a></td>\n' +
            '<td>void ldap_free_urldesc( LDAPURLDesc *ludp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9861>9861</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9862>9862</a></td>\n' +
            '<td>These routines support the use of LDAP URLs (Uniform Resource Locators) as detailed in RFC 4516. LDAP URLs look like this:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9863>9863</a></td>\n' +
            '<td>ldap://hostport/dn[?attrs[?scope[?filter[?exts]]]]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9864>9864</a></td>\n' +
            '<td>where:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9865>9865</a></td>\n' +
            '<td>hostport is a host name with an optional ":portnumber"</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9866>9866</a></td>\n' +
            '<td>dn is the search base</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9867>9867</a></td>\n' +
            '<td>attrs is a comma separated list of attributes to request</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9868>9868</a></td>\n' +
            '<td>scope is one of these three strings:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9869>9869</a></td>\n' +
            '<td>base one sub (default=base)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9870>9870</a></td>\n' +
            '<td>filter is filter</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9871>9871</a></td>\n' +
            '<td>exts are recognized set of LDAP and/or API extensions.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9872>9872</a></td>\n' +
            '<td>Example:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9873>9873</a></td>\n' +
            '<td>ldap://ldap.example.net/dc=example,dc=net?cn,sn?sub?(cn=*)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9874>9874</a></td>\n' +
            '<td>URLs that are wrapped in angle-brackets and/or preceded by "URL:" are also tolerated. Alternative LDAP schemes such as ldaps:// and ldapi:// may be parsed using the below routines as well.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9875>9875</a></td>\n' +
            '<td>ldap_is_ldap_url() returns a non-zero value if url looks like an LDAP URL (as opposed to some other kind of URL). It can be used as a quick check for an LDAP URL; the ldap_url_parse() routine should be used if a more thorough check is needed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9876>9876</a></td>\n' +
            '<td>ldap_url_parse() breaks down an LDAP URL passed in url into its component pieces. If successful, zero is returned, an LDAP URL description is allocated, filled in, and ludpp is set to point to it. If an error occurs, a non-zero URL error code is returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9877>9877</a></td>\n' +
            '<td>ldap_free_urldesc() should be called to free an LDAP URL description that was obtained from a call to ldap_url_parse().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9878>9878</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9879>9879</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9880>9880</a></td>\n' +
            '<td>RFC 4516 &lt;http://www.rfc-editor.org/rfc/rfc4516.txt&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9881>9881</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9882>9882</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9883>9883</a></td>\n' +
            '<td>LDAP_GET_DN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9884>9884</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9885>9885</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9886>9886</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9887>9887</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9888>9888</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9889>9889</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9890>9890</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9891>9891</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9892>9892</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9893>9893</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9894>9894</a></td>\n' +
            '<td>ldap_get_dn, ldap_explode_dn, ldap_explode_rdn, ldap_dn2ufn − LDAP DN handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9895>9895</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9896>9896</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9897>9897</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9898>9898</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9899>9899</a></td>\n' +
            '<td>char *ldap_get_dn( LDAP *ld, LDAPMessage *entry )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9900>9900</a></td>\n' +
            '<td>int ldap_str2dn( const char *str, LDAPDN *dn, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9901>9901</a></td>\n' +
            '<td>void ldap_dnfree( LDAPDN dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9902>9902</a></td>\n' +
            '<td>int ldap_dn2str( LDAPDN dn, char **str, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9903>9903</a></td>\n' +
            '<td>char **ldap_explode_dn( const char *dn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9904>9904</a></td>\n' +
            '<td>char **ldap_explode_rdn( const char *rdn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9905>9905</a></td>\n' +
            '<td>char *ldap_dn2ufn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9906>9906</a></td>\n' +
            '<td>char *ldap_dn2dcedn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9907>9907</a></td>\n' +
            '<td>char *ldap_dcedn2dn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9908>9908</a></td>\n' +
            '<td>char *ldap_dn2ad_canonical( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9909>9909</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9910>9910</a></td>\n' +
            '<td>These routines allow LDAP entry names (Distinguished Names, or DNs) to be obtained, parsed, converted to a user-friendly form, and tested. A DN has the form described in RFC 4414 "Lightweight Directory Access Protocol (LDAP): String Representation of Distinguished Names".</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9911>9911</a></td>\n' +
            '<td>The ldap_get_dn() routine takes an entry as returned by ldap_first_entry(3) or ldap_next_entry(3) and returns a copy of the entry’s DN. Space for the DN will be obtained dynamically and should be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9912>9912</a></td>\n' +
            '<td>ldap_str2dn() parses a string representation of a distinguished name contained in str into its components, which are stored in dn as ldap_ava structures, arranged in LDAPAVA, LDAPRDN, and LDAPDN terms. Space for dn will be obtained dynamically and should be freed by the caller using ldap_dnfree(3). The LDAPDN is defined as:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9913>9913</a></td>\n' +
            '<td>typedef struct ldap_ava {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9914>9914</a></td>\n' +
            '<td>struct berval la_attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9915>9915</a></td>\n' +
            '<td>struct berval la_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9916>9916</a></td>\n' +
            '<td>unsigned la_flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9917>9917</a></td>\n' +
            '<td>} LDAPAVA;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9918>9918</a></td>\n' +
            '<td>typedef LDAPAVA** LDAPRDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9919>9919</a></td>\n' +
            '<td>typedef LDAPRDN* LDAPDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9920>9920</a></td>\n' +
            '<td>The attribute types and the attribute values are not normalized. The la_flags can be either LDAP_AVA_STRING or LDAP_AVA_BINARY, the latter meaning that the value is BER/DER encoded and thus must be represented as, quoting from RFC 4514, " ... an octothorpe character (’#’ ASCII 35) followed by the hexadecimal representation of each of the bytes of the BER encoding of the X.500 AttributeValue." The flags parameter to ldap_str2dn() can be</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9921>9921</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9922>9922</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9923>9923</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 3</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9924>9924</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9925>9925</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9926>9926</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 2</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9927>9927</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9928>9928</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9929>9929</a></td>\n' +
            '<td>LDAP_DN_FORMAT_DCE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9930>9930</a></td>\n' +
            '<td>which defines what DN syntax is expected (according to RFC 4514, RFC 1779 and DCE, respectively). The format can be ORed to the flags</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9931>9931</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9932>9932</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9933>9933</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9934>9934</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9935>9935</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9936>9936</a></td>\n' +
            '<td>...</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9937>9937</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9938>9938</a></td>\n' +
            '<td>LDAP_DN_PEDANTIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9939>9939</a></td>\n' +
            '<td>The latter is a shortcut for all the previous limitations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9940>9940</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES does not allow extra spaces in the dn; the default is to silently eliminate spaces around AVA separators (’=’), RDN component separators (’+’ for LDAPv3/LDAPv2 or ’,’ for DCE) and RDN separators (’,’ LDAPv3/LDAPv2 or ’/’ for DCE).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9941>9941</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN does not allow a single space after RDN separators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9942>9942</a></td>\n' +
            '<td>ldap_dn2str() performs the inverse operation, yielding in str a string representation of dn. It allows the same values for flags as ldap_str2dn(), plus</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9943>9943</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9944>9944</a></td>\n' +
            '<td>LDAP_DN_FORMAT_UFN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9945>9945</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9946>9946</a></td>\n' +
            '<td>LDAP_DN_FORMAT_AD_CANONICAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9947>9947</a></td>\n' +
            '<td>for user-friendly naming (RFC 1781) and AD canonical.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9948>9948</a></td>\n' +
            '<td>The following routines are viewed as deprecated in favor of ldap_str2dn() and ldap_dn2str(). They are provided to support legacy applications.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9949>9949</a></td>\n' +
            '<td>The ldap_explode_dn() routine takes a DN as returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as a Relative Distinguished Name, or RDN. ldap_explode_dn() returns a NULL-terminated array, each component of which contains an RDN from the DN. The notypes parameter is used to request that only the RDN values be returned, not their types. For example, the DN "cn=Bob, c=US" would return as either { "cn=Bob", "c=US", NULL } or { "Bob", "US", NULL }, depending on whether notypes was 0 or 1, respectively. Assertion values in RDN strings may included escaped characters. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9950>9950</a></td>\n' +
            '<td>Similarly, the ldap_explode_rdn() routine takes an RDN as returned by ldap_explode_dn(dn,0) and breaks it up into its "type=value" component parts (or just "value", if the notypes parameter is set). Note the value is not unescaped. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9951>9951</a></td>\n' +
            '<td>ldap_dn2ufn() is used to turn a DN as returned by ldap_get_dn(3) into a more user-friendly form, stripping off all type names. See "Using the Directory to Achieve User Friendly Naming" (RFC 1781) for more details on the UFN format. Due to the ambiguous nature of the format, it is generally only used for display purposes. The space for the UFN returned is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9952>9952</a></td>\n' +
            '<td>ldap_dn2dcedn() is used to turn a DN as returned by ldap_get_dn(3) into a DCE-style DN, e.g. a string with most-significant to least significant rdns separated by slashes (’/’); rdn components are separated by commas (’,’). Only printable chars (e.g. LDAPv2 printable string) are allowed, at least in this implementation. ldap_dcedn2dn() performs the opposite operation. ldap_dn2ad_canonical() turns a DN into a AD canonical name, which is basically a DCE dn with attribute types omitted. The trailing domain, if present, is turned in a DNS-like domain. The space for the returned value is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9953>9953</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9954>9954</a></td>\n' +
            '<td>If an error occurs in ldap_get_dn(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes. ldap_explode_dn(), ldap_explode_rdn(), ldap_dn2ufn(), ldap_dn2dcedn(), ldap_dcedn2dn(), and ldap_dn2ad_canonical() will return NULL with errno(3) set appropriately in case of trouble.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9955>9955</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9956>9956</a></td>\n' +
            '<td>These routines dynamically allocate memory that the caller must free.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9957>9957</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9958>9958</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_first_entry(3), ldap_memfree(3), ldap_value_free(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9959>9959</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9960>9960</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9961>9961</a></td>\n' +
            '<td>LDAP_GET_OPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9962>9962</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9963>9963</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9964>9964</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9965>9965</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9966>9966</a></td>\n' +
            '<td>SASL OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9967>9967</a></td>\n' +
            '<td>TCP OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9968>9968</a></td>\n' +
            '<td>TLS OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9969>9969</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9970>9970</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9971>9971</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9972>9972</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9973>9973</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9974>9974</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9975>9975</a></td>\n' +
            '<td>ldap_get_option, ldap_set_option − LDAP option handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9976>9976</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9977>9977</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9978>9978</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9979>9979</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9980>9980</a></td>\n' +
            '<td>int ldap_get_option(LDAP *ld, int option, void *outvalue);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9981>9981</a></td>\n' +
            '<td>int ldap_set_option(LDAP *ld, int option, const void *invalue);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9982>9982</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9983>9983</a></td>\n' +
            '<td>These routines provide access to options stored either in a LDAP handle or as global options, where applicable. They make use of a neutral interface, where the type of the value either retrieved by ldap_get_option(3) or set by ldap_set_option(3) is cast to void *. The actual type is determined based on the value of the option argument. Global options are set/retrieved by passing a NULL LDAP handle. LDAP handles inherit their default settings from the global options in effect at the time the handle is created.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9984>9984</a></td>\n' +
            '<td>LDAP_OPT_API_FEATURE_INFO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9985>9985</a></td>\n' +
            '<td>Fills-in a LDAPAPIFeatureInfo; outvalue must be a LDAPAPIFeatureInfo *, pointing to an already allocated struct. The ldapaif_info_version field of the struct must be initialized to LDAP_FEATURE_INFO_VERSION before making the call. The ldapaif_name field must be set to the name of a feature to query. This is a read-only option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9986>9986</a></td>\n' +
            '<td>LDAP_OPT_API_INFO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9987>9987</a></td>\n' +
            '<td>Fills-in a LDAPAPIInfo; outvalue must be a LDAPAPIInfo *, pointing to an already allocated struct. The ldapai_info_version field of the struct must be initialized to LDAP_API_INFO_VERSION before making the call. If the version passed in does not match the current library version, the expected version number will be stored in the struct and the call will fail. The caller is responsible for freeing the elements of the ldapai_extensions array and the array itself using ldap_memfree(3). The caller must also free the ldapi_vendor_name. This is a read-only option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9988>9988</a></td>\n' +
            '<td>LDAP_OPT_CLIENT_CONTROLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9989>9989</a></td>\n' +
            '<td>Sets/gets the client-side controls to be used for all operations. This is now deprecated as modern LDAP C API provides replacements for all main operations which accepts client-side controls as explicit arguments; see for example ldap_search_ext(3), ldap_add_ext(3), ldap_modify_ext(3) and so on. outvalue must be LDAPControl ***, and the caller is responsible of freeing the returned controls, if any, by calling ldap_controls_free(3), while invalue must be LDAPControl *const *; the library duplicates the controls passed via invalue.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9990>9990</a></td>\n' +
            '<td>LDAP_OPT_CONNECT_ASYNC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9991>9991</a></td>\n' +
            '<td>Sets/gets the status of the asynchronous connect flag. invalue should either be LDAP_OPT_OFF or LDAP_OPT_ON; outvalue must be int *. When set, the library will call connect(2) and return, without waiting for response. This leaves the handle in a connecting state. Subsequent calls to library routines will poll for completion of the connect before performing further operations. As a consequence, library calls that need to establish a connection with a DSA do not block even for the network timeout (option LDAP_OPT_NETWORK_TIMEOUT). This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9992>9992</a></td>\n' +
            '<td>LDAP_OPT_CONNECT_CB</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9993>9993</a></td>\n' +
            '<td>This option allows to set a connect callback. invalue must be a const struct ldap_conncb *. Callbacks are executed in last in-first served order. Handle-specific callbacks are executed first, followed by global ones. Right before freeing the callback structure, the lc_del callback handler is passed a NULL Sockbuf. Calling ldap_get_option(3) for this option removes the callback whose pointer matches outvalue. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9994>9994</a></td>\n' +
            '<td>LDAP_OPT_DEBUG_LEVEL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9995>9995</a></td>\n' +
            '<td>Sets/gets the debug level of the client library. invalue must be a const int *; outvalue must be a int *. Valid debug levels are LDAP_DEBUG_ANY, LDAP_DEBUG_ARGS, LDAP_DEBUG_BER, LDAP_DEBUG_CONNS, LDAP_DEBUG_NONE, LDAP_DEBUG_PACKETS, LDAP_DEBUG_PARSE, and LDAP_DEBUG_TRACE. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9996>9996</a></td>\n' +
            '<td>LDAP_OPT_DEFBASE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9997>9997</a></td>\n' +
            '<td>Sets/gets a string containing the DN to be used as default base for search operations. outvalue must be a char **, and the caller is responsible of freeing the returned string by calling ldap_memfree(3), while invalue must be a const char *; the library duplicates the corresponding string. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9998>9998</a></td>\n' +
            '<td>LDAP_OPT_DEREF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=9999>9999</a></td>\n' +
            '<td>Sets/gets the value that defines when alias dereferencing must occur. invalue must be const int *; outvalue must be int *. They cannot be NULL. The value of *invalue should be one of LDAP_DEREF_NEVER (the default), LDAP_DEREF_SEARCHING, LDAP_DEREF_FINDING, or LDAP_DEREF_ALWAYS. Note that this has ever been the only means to determine alias dereferencing within search operations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10000>10000</a></td>\n' +
            '<td>LDAP_OPT_DESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10001>10001</a></td>\n' +
            '<td>Returns the file descriptor associated to the socket buffer of the LDAP handle passed in as ld; outvalue must be a int *. This is a read-only, handle-specific option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10002>10002</a></td>\n' +
            '<td>LDAP_OPT_DIAGNOSTIC_MESSAGE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10003>10003</a></td>\n' +
            '<td>Sets/gets a string containing the error string associated to the LDAP handle. This option was formerly known as LDAP_OPT_ERROR_STRING. outvalue must be a char **, and the caller is responsible of freeing the returned string by calling ldap_memfree(3), while invalue must be a char *; the library duplicates the corresponding string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10004>10004</a></td>\n' +
            '<td>LDAP_OPT_HOST_NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10005>10005</a></td>\n' +
            '<td>Sets/gets a space-separated list of hosts to be contacted by the library when trying to establish a connection. This is now deprecated in favor of LDAP_OPT_URI. outvalue must be a char **, and the caller is responsible of freeing the resulting string by calling ldap_memfree(3), while invalue must be a const char *; the library duplicates the corresponding string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10006>10006</a></td>\n' +
            '<td>LDAP_OPT_MATCHED_DN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10007>10007</a></td>\n' +
            '<td>Sets/gets a string containing the matched DN associated to the LDAP handle. outvalue must be a char **, and the caller is responsible of freeing the returned string by calling ldap_memfree(3), while invalue must be a const char *; the library duplicates the corresponding string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10008>10008</a></td>\n' +
            '<td>LDAP_OPT_NETWORK_TIMEOUT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10009>10009</a></td>\n' +
            '<td>Sets/gets the network timeout value after which poll(2)/select(2) following a connect(2) returns in case of no activity. outvalue must be a struct timeval ** (the caller has to free *outvalue), and invalue must be a const struct timeval *. They cannot be NULL. Using a struct with seconds set to −1 results in an infinite timeout, which is the default. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10010>10010</a></td>\n' +
            '<td>LDAP_OPT_PROTOCOL_VERSION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10011>10011</a></td>\n' +
            '<td>Sets/gets the protocol version. outvalue and invalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10012>10012</a></td>\n' +
            '<td>LDAP_OPT_REFERRAL_URLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10013>10013</a></td>\n' +
            '<td>Sets/gets an array containing the referral URIs associated to the LDAP handle. outvalue must be a char ***, and the caller is responsible of freeing the returned string by calling ldap_memvfree(3), while invalue must be a NULL-terminated char *const *; the library duplicates the corresponding string. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10014>10014</a></td>\n' +
            '<td>LDAP_OPT_REFERRALS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10015>10015</a></td>\n' +
            '<td>Determines whether the library should implicitly chase referrals or not. invalue must be const int *; its value should either be LDAP_OPT_OFF or LDAP_OPT_ON. outvalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10016>10016</a></td>\n' +
            '<td>LDAP_OPT_RESTART</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10017>10017</a></td>\n' +
            '<td>Determines whether the library should implicitly restart connections (FIXME). invalue must be const int *; its value should either be LDAP_OPT_OFF or LDAP_OPT_ON. outvalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10018>10018</a></td>\n' +
            '<td>LDAP_OPT_RESULT_CODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10019>10019</a></td>\n' +
            '<td>Sets/gets the LDAP result code associated to the handle. This option was formerly known as LDAP_OPT_ERROR_NUMBER. invalue must be a const int *. outvalue must be a int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10020>10020</a></td>\n' +
            '<td>LDAP_OPT_SERVER_CONTROLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10021>10021</a></td>\n' +
            '<td>Sets/gets the server-side controls to be used for all operations. This is now deprecated as modern LDAP C API provides replacements for all main operations which accepts server-side controls as explicit arguments; see for example ldap_search_ext(3), ldap_add_ext(3), ldap_modify_ext(3) and so on. outvalue must be LDAPControl ***, and the caller is responsible of freeing the returned controls, if any, by calling ldap_controls_free(3), while invalue must be LDAPControl *const *; the library duplicates the controls passed via invalue.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10022>10022</a></td>\n' +
            '<td>LDAP_OPT_SESSION_REFCNT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10023>10023</a></td>\n' +
            '<td>Returns the reference count associated with the LDAP handle passed in as ld; outvalue must be a int *. This is a read-only, handle-specific option. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10024>10024</a></td>\n' +
            '<td>LDAP_OPT_SIZELIMIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10025>10025</a></td>\n' +
            '<td>Sets/gets the value that defines the maximum number of entries to be returned by a search operation. invalue must be const int *, while outvalue must be int *; They cannot be NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10026>10026</a></td>\n' +
            '<td>LDAP_OPT_SOCKBUF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10027>10027</a></td>\n' +
            '<td>Returns a pointer to the socket buffer of the LDAP handle passed in as ld; outvalue must be a Sockbuf **. This is a read-only, handle-specific option. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10028>10028</a></td>\n' +
            '<td>LDAP_OPT_TIMELIMIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10029>10029</a></td>\n' +
            '<td>Sets/gets the value that defines the time limit after which a search operation should be terminated by the server. invalue must be const int *, while outvalue must be int *, and they cannot be NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10030>10030</a></td>\n' +
            '<td>LDAP_OPT_TIMEOUT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10031>10031</a></td>\n' +
            '<td>Sets/gets a timeout value for the synchronous API calls. outvalue must be a struct timeval ** (the caller has to free *outvalue), and invalue must be a struct timeval *, and they cannot be NULL. Using a struct with seconds set to −1 results in an infinite timeout, which is the default. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10032>10032</a></td>\n' +
            '<td>LDAP_OPT_URI</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10033>10033</a></td>\n' +
            '<td>Sets/gets a comma- or space-separated list of URIs to be contacted by the library when trying to establish a connection. outvalue must be a char **, and the caller is responsible of freeing the resulting string by calling ldap_memfree(3), while invalue must be a const char *; the library parses the string into a list of LDAPURLDesc structures, so the invocation of ldap_set_option(3) may fail if URL parsing fails. URIs may only contain the schema, the host, and the port fields. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10034>10034</a></td>\n' +
            '<td>SASL OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10035>10035</a></td>\n' +
            '<td>The SASL options are OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10036>10036</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_AUTHCID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10037>10037</a></td>\n' +
            '<td>Gets the SASL authentication identity; outvalue must be a char **, its content needs to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10038>10038</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_AUTHZID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10039>10039</a></td>\n' +
            '<td>Gets the SASL authorization identity; outvalue must be a char **, its content needs to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10040>10040</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_MAXBUFSIZE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10041>10041</a></td>\n' +
            '<td>Gets/sets SASL maximum buffer size; invalue must be const ber_len_t *, while outvalue must be ber_len_t *. See also LDAP_OPT_X_SASL_SECPROPS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10042>10042</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_MECH</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10043>10043</a></td>\n' +
            '<td>Gets the SASL mechanism; outvalue must be a char **, its content needs to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10044>10044</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_MECHLIST</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10045>10045</a></td>\n' +
            '<td>Gets the list of the available mechanisms, in form of a NULL-terminated array of strings; outvalue must be char ***. The caller must not free or otherwise muck with it.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10046>10046</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_NOCANON</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10047>10047</a></td>\n' +
            '<td>Sets/gets the NOCANON flag. When unset, the hostname is canonicalized. invalue must be const int *; its value should either be LDAP_OPT_OFF or LDAP_OPT_ON. outvalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10048>10048</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_REALM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10049>10049</a></td>\n' +
            '<td>Gets the SASL realm; outvalue must be a char **, its content needs to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10050>10050</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_SECPROPS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10051>10051</a></td>\n' +
            '<td>Sets the SASL secprops; invalue must be a char *, containing a comma-separated list of properties. Legal values are: none, nodict, noplain, noactive, passcred, forwardsec, noanonymous, minssf=&lt;minssf&gt;, maxssf=&lt;maxssf&gt;, maxbufsize=&lt;maxbufsize&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10052>10052</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_SSF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10053>10053</a></td>\n' +
            '<td>Gets the SASL SSF; outvalue must be a ber_len_t *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10054>10054</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_SSF_EXTERNAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10055>10055</a></td>\n' +
            '<td>Sets the SASL SSF value related to an authentication performed using an EXTERNAL mechanism; invalue must be a const ber_len_t *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10056>10056</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_SSF_MAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10057>10057</a></td>\n' +
            '<td>Gets/sets SASL maximum SSF; invalue must be const ber_len_t *, while outvalue must be ber_len_t *. See also LDAP_OPT_X_SASL_SECPROPS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10058>10058</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_SSF_MIN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10059>10059</a></td>\n' +
            '<td>Gets/sets SASL minimum SSF; invalue must be const ber_len_t *, while outvalue must be ber_len_t *. See also LDAP_OPT_X_SASL_SECPROPS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10060>10060</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_USERNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10061>10061</a></td>\n' +
            '<td>Gets the SASL username; outvalue must be a char **. Its content needs to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10062>10062</a></td>\n' +
            '<td>TCP OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10063>10063</a></td>\n' +
            '<td>The TCP options are OpenLDAP specific. Mainly intended for use with Linux, they may not be portable.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10064>10064</a></td>\n' +
            '<td>LDAP_OPT_X_KEEPALIVE_IDLE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10065>10065</a></td>\n' +
            '<td>Sets/gets the number of seconds a connection needs to remain idle before TCP starts sending keepalive probes. invalue must be const int *; outvalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10066>10066</a></td>\n' +
            '<td>LDAP_OPT_X_KEEPALIVE_PROBES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10067>10067</a></td>\n' +
            '<td>Sets/gets the maximum number of keepalive probes TCP should send before dropping the connection. invalue must be const int *; outvalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10068>10068</a></td>\n' +
            '<td>LDAP_OPT_X_KEEPALIVE_INTERVAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10069>10069</a></td>\n' +
            '<td>Sets/gets the interval in seconds between individual keepalive probes. invalue must be const int *; outvalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10070>10070</a></td>\n' +
            '<td>TLS OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10071>10071</a></td>\n' +
            '<td>The TLS options are OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10072>10072</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CACERTDIR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10073>10073</a></td>\n' +
            '<td>Sets/gets the path of the directory containing CA certificates. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10074>10074</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CACERTFILE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10075>10075</a></td>\n' +
            '<td>Sets/gets the full-path of the CA certificate file. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10076>10076</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CERTFILE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10077>10077</a></td>\n' +
            '<td>Sets/gets the full-path of the certificate file. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10078>10078</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CIPHER_SUITE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10079>10079</a></td>\n' +
            '<td>Sets/gets the allowed cipher suite. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10080>10080</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CONNECT_ARG</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10081>10081</a></td>\n' +
            '<td>Sets/gets the connection callback argument. invalue must be const void *; outvalue must be void **.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10082>10082</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CONNECT_CB</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10083>10083</a></td>\n' +
            '<td>Sets/gets the connection callback handle. invalue must be const LDAP_TLS_CONNECT_CB *; outvalue must be LDAP_TLS_CONNECT_CB **.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10084>10084</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CRLCHECK</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10085>10085</a></td>\n' +
            '<td>Sets/gets the CRL evaluation strategy, one of LDAP_OPT_X_TLS_CRL_NONE, LDAP_OPT_X_TLS_CRL_PEER, or LDAP_OPT_X_TLS_CRL_ALL. invalue must be const int *; outvalue must be int *. Requires OpenSSL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10086>10086</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CRLFILE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10087>10087</a></td>\n' +
            '<td>Sets/gets the full-path of the CRL file. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3). This option is only valid for GnuTLS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10088>10088</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CTX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10089>10089</a></td>\n' +
            '<td>Sets/gets the TLS library context. New TLS sessions will inherit their default settings from this library context. invalue must be const void *; outvalue must be void **. When using the OpenSSL library this is an SSL_CTX*. When using other crypto libraries this is a pointer to an OpenLDAP private structure. Applications generally should not use this option or attempt to manipulate this structure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10090>10090</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_DHFILE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10091>10091</a></td>\n' +
            '<td>Gets/sets the full-path of the file containing the parameters for Diffie-Hellman ephemeral key exchange. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3). Ignored by GnuTLS and Mozilla NSS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10092>10092</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_KEYFILE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10093>10093</a></td>\n' +
            '<td>Sets/gets the full-path of the certificate key file. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10094>10094</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_NEWCTX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10095>10095</a></td>\n' +
            '<td>Instructs the library to create a new TLS library context. invalue must be const int *. A non-zero value pointed to by invalue tells the library to create a context for a server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10096>10096</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_PROTOCOL_MIN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10097>10097</a></td>\n' +
            '<td>Sets/gets the minimum protocol version. invalue must be const int *; outvalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10098>10098</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_RANDOM_FILE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10099>10099</a></td>\n' +
            '<td>Sets/gets the random file when /dev/random and /dev/urandom are not available. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3). Ignored by GnuTLS older than version 2.2. Ignored by Mozilla NSS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10100>10100</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_REQUIRE_CERT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10101>10101</a></td>\n' +
            '<td>Sets/gets the peer certificate checking strategy, one of LDAP_OPT_X_TLS_NEVER, LDAP_OPT_X_TLS_HARD, LDAP_OPT_X_TLS_DEMAND, LDAP_OPT_X_TLS_ALLOW, LDAP_OPT_X_TLS_TRY.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10102>10102</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_SSL_CTX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10103>10103</a></td>\n' +
            '<td>Gets the TLS session context associated with this handle. outvalue must be void **. When using the OpenSSL library this is an SSL*. When using other crypto libraries this is a pointer to an OpenLDAP private structure. Applications generally should not use this option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10104>10104</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10105>10105</a></td>\n' +
            '<td>On success, the functions return LDAP_OPT_SUCCESS, while they may return LDAP_OPT_ERROR to indicate a generic option handling error. Occasionally, more specific errors can be returned, like LDAP_NO_MEMORY to indicate a failure in memory allocation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10106>10106</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10107>10107</a></td>\n' +
            '<td>The LDAP libraries with the LDAP_OPT_REFERRALS option set to LDAP_OPT_ON (default value) automatically follow referrals using an anonymous bind. Application developers are encouraged to either implement consistent referral chasing features, or explicitly disable referral chasing by setting that option to LDAP_OPT_OFF.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10108>10108</a></td>\n' +
            '<td>The protocol version used by the library defaults to LDAPv2 (now historic), which corresponds to the LDAP_VERSION2 macro. Application developers are encouraged to explicitly set LDAP_OPT_PROTOCOL_VERSION to LDAPv3, using the LDAP_VERSION3 macro, or to allow users to select the protocol version.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10109>10109</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10110>10110</a></td>\n' +
            '<td>ldap(3), ldap_error(3), RFC 4422 (http://www.rfc-editor.org),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10111>10111</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10112>10112</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10113>10113</a></td>\n' +
            '<td>LDAP_GET_VALUES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10114>10114</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10115>10115</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10116>10116</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10117>10117</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10118>10118</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10119>10119</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10120>10120</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10121>10121</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10122>10122</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10123>10123</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10124>10124</a></td>\n' +
            '<td>ldap_get_values, ldap_get_values_len, ldap_count_values − LDAP attribute value handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10125>10125</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10126>10126</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10127>10127</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10128>10128</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10129>10129</a></td>\n' +
            '<td>char **ldap_get_values(ld, entry, attr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10130>10130</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10131>10131</a></td>\n' +
            '<td>LDAPMessage *entry;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10132>10132</a></td>\n' +
            '<td>char *attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10133>10133</a></td>\n' +
            '<td>struct berval **ldap_get_values_len(ld, entry, attr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10134>10134</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10135>10135</a></td>\n' +
            '<td>LDAPMessage *entry;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10136>10136</a></td>\n' +
            '<td>char *attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10137>10137</a></td>\n' +
            '<td>int ldap_count_values(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10138>10138</a></td>\n' +
            '<td>char **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10139>10139</a></td>\n' +
            '<td>int ldap_count_values_len(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10140>10140</a></td>\n' +
            '<td>struct berval **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10141>10141</a></td>\n' +
            '<td>void ldap_value_free(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10142>10142</a></td>\n' +
            '<td>char **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10143>10143</a></td>\n' +
            '<td>void ldap_value_free_len(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10144>10144</a></td>\n' +
            '<td>struct berval **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10145>10145</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10146>10146</a></td>\n' +
            '<td>These routines are used to retrieve and manipulate attribute values from an LDAP entry as returned by ldap_first_entry(3) or ldap_next_entry(3). ldap_get_values() takes the entry and the attribute attr whose values are desired and returns a NULL-terminated array of the attribute’s values. attr may be an attribute type as returned from ldap_first_attribute(3) or ldap_next_attribute(3), or if the attribute type is known it can simply be given.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10147>10147</a></td>\n' +
            '<td>The number of values in the array can be counted by calling ldap_count_values(). The array of values returned can be freed by calling ldap_value_free().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10148>10148</a></td>\n' +
            '<td>If the attribute values are binary in nature, and thus not suitable to be returned as an array of char *’s, the ldap_get_values_len() routine can be used instead. It takes the same parameters as ldap_get_values(), but returns a NULL-terminated array of pointers to berval structures, each containing the length of and a pointer to a value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10149>10149</a></td>\n' +
            '<td>The number of values in the array can be counted by calling ldap_count_values_len(). The array of values returned can be freed by calling ldap_value_free_len().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10150>10150</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10151>10151</a></td>\n' +
            '<td>If an error occurs in ldap_get_values() or ldap_get_values_len(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10152>10152</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10153>10153</a></td>\n' +
            '<td>These routines dynamically allocate memory which the caller must free using the supplied routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10154>10154</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10155>10155</a></td>\n' +
            '<td>ldap(3), ldap_first_entry(3), ldap_first_attribute(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10156>10156</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10157>10157</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10158>10158</a></td>\n' +
            '<td>LDAP_GET_VALUES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10159>10159</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10160>10160</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10161>10161</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10162>10162</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10163>10163</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10164>10164</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10165>10165</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10166>10166</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10167>10167</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10168>10168</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10169>10169</a></td>\n' +
            '<td>ldap_get_values, ldap_get_values_len, ldap_count_values − LDAP attribute value handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10170>10170</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10171>10171</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10172>10172</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10173>10173</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10174>10174</a></td>\n' +
            '<td>char **ldap_get_values(ld, entry, attr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10175>10175</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10176>10176</a></td>\n' +
            '<td>LDAPMessage *entry;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10177>10177</a></td>\n' +
            '<td>char *attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10178>10178</a></td>\n' +
            '<td>struct berval **ldap_get_values_len(ld, entry, attr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10179>10179</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10180>10180</a></td>\n' +
            '<td>LDAPMessage *entry;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10181>10181</a></td>\n' +
            '<td>char *attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10182>10182</a></td>\n' +
            '<td>int ldap_count_values(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10183>10183</a></td>\n' +
            '<td>char **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10184>10184</a></td>\n' +
            '<td>int ldap_count_values_len(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10185>10185</a></td>\n' +
            '<td>struct berval **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10186>10186</a></td>\n' +
            '<td>void ldap_value_free(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10187>10187</a></td>\n' +
            '<td>char **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10188>10188</a></td>\n' +
            '<td>void ldap_value_free_len(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10189>10189</a></td>\n' +
            '<td>struct berval **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10190>10190</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10191>10191</a></td>\n' +
            '<td>These routines are used to retrieve and manipulate attribute values from an LDAP entry as returned by ldap_first_entry(3) or ldap_next_entry(3). ldap_get_values() takes the entry and the attribute attr whose values are desired and returns a NULL-terminated array of the attribute’s values. attr may be an attribute type as returned from ldap_first_attribute(3) or ldap_next_attribute(3), or if the attribute type is known it can simply be given.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10192>10192</a></td>\n' +
            '<td>The number of values in the array can be counted by calling ldap_count_values(). The array of values returned can be freed by calling ldap_value_free().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10193>10193</a></td>\n' +
            '<td>If the attribute values are binary in nature, and thus not suitable to be returned as an array of char *’s, the ldap_get_values_len() routine can be used instead. It takes the same parameters as ldap_get_values(), but returns a NULL-terminated array of pointers to berval structures, each containing the length of and a pointer to a value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10194>10194</a></td>\n' +
            '<td>The number of values in the array can be counted by calling ldap_count_values_len(). The array of values returned can be freed by calling ldap_value_free_len().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10195>10195</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10196>10196</a></td>\n' +
            '<td>If an error occurs in ldap_get_values() or ldap_get_values_len(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10197>10197</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10198>10198</a></td>\n' +
            '<td>These routines dynamically allocate memory which the caller must free using the supplied routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10199>10199</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10200>10200</a></td>\n' +
            '<td>ldap(3), ldap_first_entry(3), ldap_first_attribute(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10201>10201</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10202>10202</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10203>10203</a></td>\n' +
            '<td>LDAP_OPEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10204>10204</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10205>10205</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10206>10206</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10207>10207</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10208>10208</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10209>10209</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10210>10210</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10211>10211</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10212>10212</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10213>10213</a></td>\n' +
            '<td>ldap_init, ldap_initialize, ldap_open − Initialize the LDAP library and open a connection to an LDAP server</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10214>10214</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10215>10215</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10216>10216</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10217>10217</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10218>10218</a></td>\n' +
            '<td>LDAP *ldap_open(host, port)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10219>10219</a></td>\n' +
            '<td>char *host;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10220>10220</a></td>\n' +
            '<td>int port;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10221>10221</a></td>\n' +
            '<td>LDAP *ldap_init(host, port)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10222>10222</a></td>\n' +
            '<td>char *host;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10223>10223</a></td>\n' +
            '<td>int port;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10224>10224</a></td>\n' +
            '<td>int ldap_initialize(ldp, uri)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10225>10225</a></td>\n' +
            '<td>LDAP **ldp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10226>10226</a></td>\n' +
            '<td>char *uri;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10227>10227</a></td>\n' +
            '<td>int ldap_set_urllist_proc(ld, proc, params)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10228>10228</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10229>10229</a></td>\n' +
            '<td>LDAP_URLLIST_PROC *proc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10230>10230</a></td>\n' +
            '<td>void *params;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10231>10231</a></td>\n' +
            '<td>int (LDAP_URLLIST_PROC)(ld, urllist, url, params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10232>10232</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10233>10233</a></td>\n' +
            '<td>LDAPURLDesc **urllist;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10234>10234</a></td>\n' +
            '<td>LDAPURLDesc **url;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10235>10235</a></td>\n' +
            '<td>void *params;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10236>10236</a></td>\n' +
            '<td>#include &lt;ldap_pvt.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10237>10237</a></td>\n' +
            '<td>int ldap_init_fd(fd, proto, uri, ldp)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10238>10238</a></td>\n' +
            '<td>ber_socket_t fd;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10239>10239</a></td>\n' +
            '<td>int proto;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10240>10240</a></td>\n' +
            '<td>char *uri;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10241>10241</a></td>\n' +
            '<td>LDAP **ldp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10242>10242</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10243>10243</a></td>\n' +
            '<td>ldap_open() opens a connection to an LDAP server and allocates an LDAP structure which is used to identify the connection and to maintain per-connection information. ldap_init() allocates an LDAP structure but does not open an initial connection. ldap_initialize() allocates an LDAP structure but does not open an initial connection. ldap_init_fd() allocates an LDAP structure using an existing connection on the provided socket. One of these routines must be called before any operations are attempted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10244>10244</a></td>\n' +
            '<td>ldap_open() takes host, the hostname on which the LDAP server is running, and port, the port number to which to connect. If the default IANA-assigned port of 389 is desired, LDAP_PORT should be specified for port. The host parameter may contain a blank-separated list of hosts to try to connect to, and each host may optionally by of the form host:port. If present, the :port overrides the port parameter to ldap_open(). Upon successfully making a connection to an LDAP server, ldap_open() returns a pointer to an opaque LDAP structure, which should be passed to subsequent calls to ldap_bind(), ldap_search(), etc. Certain fields in the LDAP structure can be set to indicate size limit, time limit, and how aliases are handled during operations; read and write access to those fields must occur by calling ldap_get_option(3) and ldap_set_option(3) respectively, whenever possible.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10245>10245</a></td>\n' +
            '<td>ldap_init() acts just like ldap_open(), but does not open a connection to the LDAP server. The actual connection open will occur when the first operation is attempted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10246>10246</a></td>\n' +
            '<td>ldap_initialize() acts like ldap_init(), but it returns an integer indicating either success or the failure reason, and it allows to specify details for the connection in the schema portion of the URI. The uri parameter may be a comma- or whitespace-separated list of URIs containing only the schema, the host, and the port fields. Apart from ldap, other (non-standard) recognized values of the schema field are ldaps (LDAP over TLS), ldapi (LDAP over IPC), and cldap (connectionless LDAP). If other fields are present, the behavior is undefined.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10247>10247</a></td>\n' +
            '<td>At this time, ldap_open() and ldap_init() are deprecated in favor of ldap_initialize(), essentially because the latter allows to specify a schema in the URI and it explicitly returns an error code.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10248>10248</a></td>\n' +
            '<td>ldap_init_fd() allows an LDAP structure to be initialized using an already-opened connection. The proto parameter should be one of LDAP_PROTO_TCP, LDAP_PROTO_UDP, or LDAP_PROTO_IPC for a connection using TCP, UDP, or IPC, respectively. The value LDAP_PROTO_EXT may also be specified if user-supplied sockbuf handlers are going to be used. Note that support for UDP is not implemented unless libldap was built with LDAP_CONNECTIONLESS defined. The uri parameter may optionally be provided for informational purposes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10249>10249</a></td>\n' +
            '<td>ldap_set_urllist_proc() allows to set a function proc of type LDAP_URLLIST_PROC that is called when a successful connection can be established. This function receives the list of URIs parsed from the uri string originally passed to ldap_initialize(), and the one that successfully connected. The function may manipulate the URI list; the typical use consists in moving the successful URI to the head of the list, so that subsequent attempts to connect to one of the URIs using the same LDAP handle will try it first. If ld is null, proc is set as a global parameter that is inherited by all handlers within the process that are created after the call to ldap_set_urllist_proc(). By default, no LDAP_URLLIST_PROC is set. In a multithreaded environment, ldap_set_urllist_proc() must be called before any concurrent operation using the LDAP handle is started.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10250>10250</a></td>\n' +
            '<td>Note: the first call into the LDAP library also initializes the global options for the library. As such the first call should be single-threaded or otherwise protected to insure that only one call is active. It is recommended that ldap_get_option() or ldap_set_option() be used in the program’s main thread before any additional threads are created. See ldap_get_option(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10251>10251</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10252>10252</a></td>\n' +
            '<td>If an error occurs, ldap_open() and ldap_init() will return NULL and errno should be set appropriately. ldap_initialize() and ldap_init_fd() will directly return the LDAP code associated to the error (or LDAP_SUCCESS in case of success); errno should be set as well whenever appropriate. ldap_set_urllist_proc() returns LDAP_OPT_ERROR on error, and LDAP_OPT_SUCCESS on success.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10253>10253</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10254>10254</a></td>\n' +
            '<td>ldap(3), ldap_bind(3), ldap_get_option(3), ldap_set_option(3), lber-sockbuf(3), errno(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10255>10255</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10256>10256</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10257>10257</a></td>\n' +
            '<td>LDAP_OPEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10258>10258</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10259>10259</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10260>10260</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10261>10261</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10262>10262</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10263>10263</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10264>10264</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10265>10265</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10266>10266</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10267>10267</a></td>\n' +
            '<td>ldap_init, ldap_initialize, ldap_open − Initialize the LDAP library and open a connection to an LDAP server</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10268>10268</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10269>10269</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10270>10270</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10271>10271</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10272>10272</a></td>\n' +
            '<td>LDAP *ldap_open(host, port)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10273>10273</a></td>\n' +
            '<td>char *host;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10274>10274</a></td>\n' +
            '<td>int port;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10275>10275</a></td>\n' +
            '<td>LDAP *ldap_init(host, port)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10276>10276</a></td>\n' +
            '<td>char *host;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10277>10277</a></td>\n' +
            '<td>int port;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10278>10278</a></td>\n' +
            '<td>int ldap_initialize(ldp, uri)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10279>10279</a></td>\n' +
            '<td>LDAP **ldp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10280>10280</a></td>\n' +
            '<td>char *uri;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10281>10281</a></td>\n' +
            '<td>int ldap_set_urllist_proc(ld, proc, params)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10282>10282</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10283>10283</a></td>\n' +
            '<td>LDAP_URLLIST_PROC *proc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10284>10284</a></td>\n' +
            '<td>void *params;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10285>10285</a></td>\n' +
            '<td>int (LDAP_URLLIST_PROC)(ld, urllist, url, params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10286>10286</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10287>10287</a></td>\n' +
            '<td>LDAPURLDesc **urllist;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10288>10288</a></td>\n' +
            '<td>LDAPURLDesc **url;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10289>10289</a></td>\n' +
            '<td>void *params;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10290>10290</a></td>\n' +
            '<td>#include &lt;ldap_pvt.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10291>10291</a></td>\n' +
            '<td>int ldap_init_fd(fd, proto, uri, ldp)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10292>10292</a></td>\n' +
            '<td>ber_socket_t fd;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10293>10293</a></td>\n' +
            '<td>int proto;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10294>10294</a></td>\n' +
            '<td>char *uri;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10295>10295</a></td>\n' +
            '<td>LDAP **ldp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10296>10296</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10297>10297</a></td>\n' +
            '<td>ldap_open() opens a connection to an LDAP server and allocates an LDAP structure which is used to identify the connection and to maintain per-connection information. ldap_init() allocates an LDAP structure but does not open an initial connection. ldap_initialize() allocates an LDAP structure but does not open an initial connection. ldap_init_fd() allocates an LDAP structure using an existing connection on the provided socket. One of these routines must be called before any operations are attempted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10298>10298</a></td>\n' +
            '<td>ldap_open() takes host, the hostname on which the LDAP server is running, and port, the port number to which to connect. If the default IANA-assigned port of 389 is desired, LDAP_PORT should be specified for port. The host parameter may contain a blank-separated list of hosts to try to connect to, and each host may optionally by of the form host:port. If present, the :port overrides the port parameter to ldap_open(). Upon successfully making a connection to an LDAP server, ldap_open() returns a pointer to an opaque LDAP structure, which should be passed to subsequent calls to ldap_bind(), ldap_search(), etc. Certain fields in the LDAP structure can be set to indicate size limit, time limit, and how aliases are handled during operations; read and write access to those fields must occur by calling ldap_get_option(3) and ldap_set_option(3) respectively, whenever possible.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10299>10299</a></td>\n' +
            '<td>ldap_init() acts just like ldap_open(), but does not open a connection to the LDAP server. The actual connection open will occur when the first operation is attempted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10300>10300</a></td>\n' +
            '<td>ldap_initialize() acts like ldap_init(), but it returns an integer indicating either success or the failure reason, and it allows to specify details for the connection in the schema portion of the URI. The uri parameter may be a comma- or whitespace-separated list of URIs containing only the schema, the host, and the port fields. Apart from ldap, other (non-standard) recognized values of the schema field are ldaps (LDAP over TLS), ldapi (LDAP over IPC), and cldap (connectionless LDAP). If other fields are present, the behavior is undefined.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10301>10301</a></td>\n' +
            '<td>At this time, ldap_open() and ldap_init() are deprecated in favor of ldap_initialize(), essentially because the latter allows to specify a schema in the URI and it explicitly returns an error code.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10302>10302</a></td>\n' +
            '<td>ldap_init_fd() allows an LDAP structure to be initialized using an already-opened connection. The proto parameter should be one of LDAP_PROTO_TCP, LDAP_PROTO_UDP, or LDAP_PROTO_IPC for a connection using TCP, UDP, or IPC, respectively. The value LDAP_PROTO_EXT may also be specified if user-supplied sockbuf handlers are going to be used. Note that support for UDP is not implemented unless libldap was built with LDAP_CONNECTIONLESS defined. The uri parameter may optionally be provided for informational purposes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10303>10303</a></td>\n' +
            '<td>ldap_set_urllist_proc() allows to set a function proc of type LDAP_URLLIST_PROC that is called when a successful connection can be established. This function receives the list of URIs parsed from the uri string originally passed to ldap_initialize(), and the one that successfully connected. The function may manipulate the URI list; the typical use consists in moving the successful URI to the head of the list, so that subsequent attempts to connect to one of the URIs using the same LDAP handle will try it first. If ld is null, proc is set as a global parameter that is inherited by all handlers within the process that are created after the call to ldap_set_urllist_proc(). By default, no LDAP_URLLIST_PROC is set. In a multithreaded environment, ldap_set_urllist_proc() must be called before any concurrent operation using the LDAP handle is started.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10304>10304</a></td>\n' +
            '<td>Note: the first call into the LDAP library also initializes the global options for the library. As such the first call should be single-threaded or otherwise protected to insure that only one call is active. It is recommended that ldap_get_option() or ldap_set_option() be used in the program’s main thread before any additional threads are created. See ldap_get_option(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10305>10305</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10306>10306</a></td>\n' +
            '<td>If an error occurs, ldap_open() and ldap_init() will return NULL and errno should be set appropriately. ldap_initialize() and ldap_init_fd() will directly return the LDAP code associated to the error (or LDAP_SUCCESS in case of success); errno should be set as well whenever appropriate. ldap_set_urllist_proc() returns LDAP_OPT_ERROR on error, and LDAP_OPT_SUCCESS on success.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10307>10307</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10308>10308</a></td>\n' +
            '<td>ldap(3), ldap_bind(3), ldap_get_option(3), ldap_set_option(3), lber-sockbuf(3), errno(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10309>10309</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10310>10310</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10311>10311</a></td>\n' +
            '<td>LDAP_OPEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10312>10312</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10313>10313</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10314>10314</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10315>10315</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10316>10316</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10317>10317</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10318>10318</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10319>10319</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10320>10320</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10321>10321</a></td>\n' +
            '<td>ldap_init, ldap_initialize, ldap_open − Initialize the LDAP library and open a connection to an LDAP server</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10322>10322</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10323>10323</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10324>10324</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10325>10325</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10326>10326</a></td>\n' +
            '<td>LDAP *ldap_open(host, port)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10327>10327</a></td>\n' +
            '<td>char *host;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10328>10328</a></td>\n' +
            '<td>int port;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10329>10329</a></td>\n' +
            '<td>LDAP *ldap_init(host, port)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10330>10330</a></td>\n' +
            '<td>char *host;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10331>10331</a></td>\n' +
            '<td>int port;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10332>10332</a></td>\n' +
            '<td>int ldap_initialize(ldp, uri)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10333>10333</a></td>\n' +
            '<td>LDAP **ldp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10334>10334</a></td>\n' +
            '<td>char *uri;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10335>10335</a></td>\n' +
            '<td>int ldap_set_urllist_proc(ld, proc, params)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10336>10336</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10337>10337</a></td>\n' +
            '<td>LDAP_URLLIST_PROC *proc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10338>10338</a></td>\n' +
            '<td>void *params;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10339>10339</a></td>\n' +
            '<td>int (LDAP_URLLIST_PROC)(ld, urllist, url, params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10340>10340</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10341>10341</a></td>\n' +
            '<td>LDAPURLDesc **urllist;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10342>10342</a></td>\n' +
            '<td>LDAPURLDesc **url;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10343>10343</a></td>\n' +
            '<td>void *params;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10344>10344</a></td>\n' +
            '<td>#include &lt;ldap_pvt.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10345>10345</a></td>\n' +
            '<td>int ldap_init_fd(fd, proto, uri, ldp)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10346>10346</a></td>\n' +
            '<td>ber_socket_t fd;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10347>10347</a></td>\n' +
            '<td>int proto;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10348>10348</a></td>\n' +
            '<td>char *uri;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10349>10349</a></td>\n' +
            '<td>LDAP **ldp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10350>10350</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10351>10351</a></td>\n' +
            '<td>ldap_open() opens a connection to an LDAP server and allocates an LDAP structure which is used to identify the connection and to maintain per-connection information. ldap_init() allocates an LDAP structure but does not open an initial connection. ldap_initialize() allocates an LDAP structure but does not open an initial connection. ldap_init_fd() allocates an LDAP structure using an existing connection on the provided socket. One of these routines must be called before any operations are attempted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10352>10352</a></td>\n' +
            '<td>ldap_open() takes host, the hostname on which the LDAP server is running, and port, the port number to which to connect. If the default IANA-assigned port of 389 is desired, LDAP_PORT should be specified for port. The host parameter may contain a blank-separated list of hosts to try to connect to, and each host may optionally by of the form host:port. If present, the :port overrides the port parameter to ldap_open(). Upon successfully making a connection to an LDAP server, ldap_open() returns a pointer to an opaque LDAP structure, which should be passed to subsequent calls to ldap_bind(), ldap_search(), etc. Certain fields in the LDAP structure can be set to indicate size limit, time limit, and how aliases are handled during operations; read and write access to those fields must occur by calling ldap_get_option(3) and ldap_set_option(3) respectively, whenever possible.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10353>10353</a></td>\n' +
            '<td>ldap_init() acts just like ldap_open(), but does not open a connection to the LDAP server. The actual connection open will occur when the first operation is attempted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10354>10354</a></td>\n' +
            '<td>ldap_initialize() acts like ldap_init(), but it returns an integer indicating either success or the failure reason, and it allows to specify details for the connection in the schema portion of the URI. The uri parameter may be a comma- or whitespace-separated list of URIs containing only the schema, the host, and the port fields. Apart from ldap, other (non-standard) recognized values of the schema field are ldaps (LDAP over TLS), ldapi (LDAP over IPC), and cldap (connectionless LDAP). If other fields are present, the behavior is undefined.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10355>10355</a></td>\n' +
            '<td>At this time, ldap_open() and ldap_init() are deprecated in favor of ldap_initialize(), essentially because the latter allows to specify a schema in the URI and it explicitly returns an error code.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10356>10356</a></td>\n' +
            '<td>ldap_init_fd() allows an LDAP structure to be initialized using an already-opened connection. The proto parameter should be one of LDAP_PROTO_TCP, LDAP_PROTO_UDP, or LDAP_PROTO_IPC for a connection using TCP, UDP, or IPC, respectively. The value LDAP_PROTO_EXT may also be specified if user-supplied sockbuf handlers are going to be used. Note that support for UDP is not implemented unless libldap was built with LDAP_CONNECTIONLESS defined. The uri parameter may optionally be provided for informational purposes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10357>10357</a></td>\n' +
            '<td>ldap_set_urllist_proc() allows to set a function proc of type LDAP_URLLIST_PROC that is called when a successful connection can be established. This function receives the list of URIs parsed from the uri string originally passed to ldap_initialize(), and the one that successfully connected. The function may manipulate the URI list; the typical use consists in moving the successful URI to the head of the list, so that subsequent attempts to connect to one of the URIs using the same LDAP handle will try it first. If ld is null, proc is set as a global parameter that is inherited by all handlers within the process that are created after the call to ldap_set_urllist_proc(). By default, no LDAP_URLLIST_PROC is set. In a multithreaded environment, ldap_set_urllist_proc() must be called before any concurrent operation using the LDAP handle is started.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10358>10358</a></td>\n' +
            '<td>Note: the first call into the LDAP library also initializes the global options for the library. As such the first call should be single-threaded or otherwise protected to insure that only one call is active. It is recommended that ldap_get_option() or ldap_set_option() be used in the program’s main thread before any additional threads are created. See ldap_get_option(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10359>10359</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10360>10360</a></td>\n' +
            '<td>If an error occurs, ldap_open() and ldap_init() will return NULL and errno should be set appropriately. ldap_initialize() and ldap_init_fd() will directly return the LDAP code associated to the error (or LDAP_SUCCESS in case of success); errno should be set as well whenever appropriate. ldap_set_urllist_proc() returns LDAP_OPT_ERROR on error, and LDAP_OPT_SUCCESS on success.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10361>10361</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10362>10362</a></td>\n' +
            '<td>ldap(3), ldap_bind(3), ldap_get_option(3), ldap_set_option(3), lber-sockbuf(3), errno(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10363>10363</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10364>10364</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10365>10365</a></td>\n' +
            '<td>LDAP_TLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10366>10366</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10367>10367</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10368>10368</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10369>10369</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10370>10370</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10371>10371</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10372>10372</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10373>10373</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10374>10374</a></td>\n' +
            '<td>ldap_start_tls, ldap_start_tls_s, ldap_tls_inplace, ldap_install_tls − LDAP TLS initialization routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10375>10375</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10376>10376</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10377>10377</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10378>10378</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10379>10379</a></td>\n' +
            '<td>int ldap_start_tls(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10380>10380</a></td>\n' +
            '<td>int ldap_start_tls_s(LDAP *ld, LDAPControl **serverctrls, LDAPControl **clientctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10381>10381</a></td>\n' +
            '<td>int ldap_tls_inplace(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10382>10382</a></td>\n' +
            '<td>int ldap_install_tls(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10383>10383</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10384>10384</a></td>\n' +
            '<td>These routines are used to initiate TLS processing on an LDAP session. ldap_start_tls_s() sends a StartTLS request to a server, waits for the reply, and then installs TLS handlers on the session if the request succeeded. The routine returns LDAP_SUCCESS if everything succeeded, otherwise it returns an LDAP error code. ldap_start_tls() sends a StartTLS request to a server and does nothing else. It returns LDAP_SUCCESS if the request was sent successfully. ldap_tls_inplace() returns 1 if TLS handlers have been installed on the specified session, 0 otherwise. ldap_install_tls() installs the TLS handlers on the given session. It returns LDAP_LOCAL_ERROR if TLS is already installed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10385>10385</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10386>10386</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10387>10387</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10388>10388</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10389>10389</a></td>\n' +
            '<td>LDAP_URL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10390>10390</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10391>10391</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10392>10392</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10393>10393</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10394>10394</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10395>10395</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10396>10396</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10397>10397</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10398>10398</a></td>\n' +
            '<td>ldap_is_ldap_url, ldap_url_parse, ldap_free_urldesc − LDAP Uniform Resource Locator routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10399>10399</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10400>10400</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10401>10401</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10402>10402</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10403>10403</a></td>\n' +
            '<td>int ldap_is_ldap_url( const char *url )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10404>10404</a></td>\n' +
            '<td>int ldap_url_parse( const char *url, LDAPURLDesc **ludpp )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10405>10405</a></td>\n' +
            '<td>typedef struct ldap_url_desc {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10406>10406</a></td>\n' +
            '<td>char * lud_scheme; /* URI scheme */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10407>10407</a></td>\n' +
            '<td>char * lud_host; /* LDAP host to contact */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10408>10408</a></td>\n' +
            '<td>int lud_port; /* port on host */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10409>10409</a></td>\n' +
            '<td>char * lud_dn; /* base for search */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10410>10410</a></td>\n' +
            '<td>char ** lud_attrs; /* list of attributes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10411>10411</a></td>\n' +
            '<td>int lud_scope; /* a LDAP_SCOPE_... value */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10412>10412</a></td>\n' +
            '<td>char * lud_filter; /* LDAP search filter */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10413>10413</a></td>\n' +
            '<td>char ** lud_exts; /* LDAP extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10414>10414</a></td>\n' +
            '<td>int lud_crit_exts; /* true if any extension is critical */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10415>10415</a></td>\n' +
            '<td>/* may contain additional fields for internal use */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10416>10416</a></td>\n' +
            '<td>} LDAPURLDesc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10417>10417</a></td>\n' +
            '<td>void ldap_free_urldesc( LDAPURLDesc *ludp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10418>10418</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10419>10419</a></td>\n' +
            '<td>These routines support the use of LDAP URLs (Uniform Resource Locators) as detailed in RFC 4516. LDAP URLs look like this:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10420>10420</a></td>\n' +
            '<td>ldap://hostport/dn[?attrs[?scope[?filter[?exts]]]]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10421>10421</a></td>\n' +
            '<td>where:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10422>10422</a></td>\n' +
            '<td>hostport is a host name with an optional ":portnumber"</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10423>10423</a></td>\n' +
            '<td>dn is the search base</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10424>10424</a></td>\n' +
            '<td>attrs is a comma separated list of attributes to request</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10425>10425</a></td>\n' +
            '<td>scope is one of these three strings:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10426>10426</a></td>\n' +
            '<td>base one sub (default=base)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10427>10427</a></td>\n' +
            '<td>filter is filter</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10428>10428</a></td>\n' +
            '<td>exts are recognized set of LDAP and/or API extensions.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10429>10429</a></td>\n' +
            '<td>Example:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10430>10430</a></td>\n' +
            '<td>ldap://ldap.example.net/dc=example,dc=net?cn,sn?sub?(cn=*)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10431>10431</a></td>\n' +
            '<td>URLs that are wrapped in angle-brackets and/or preceded by "URL:" are also tolerated. Alternative LDAP schemes such as ldaps:// and ldapi:// may be parsed using the below routines as well.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10432>10432</a></td>\n' +
            '<td>ldap_is_ldap_url() returns a non-zero value if url looks like an LDAP URL (as opposed to some other kind of URL). It can be used as a quick check for an LDAP URL; the ldap_url_parse() routine should be used if a more thorough check is needed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10433>10433</a></td>\n' +
            '<td>ldap_url_parse() breaks down an LDAP URL passed in url into its component pieces. If successful, zero is returned, an LDAP URL description is allocated, filled in, and ludpp is set to point to it. If an error occurs, a non-zero URL error code is returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10434>10434</a></td>\n' +
            '<td>ldap_free_urldesc() should be called to free an LDAP URL description that was obtained from a call to ldap_url_parse().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10435>10435</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10436>10436</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10437>10437</a></td>\n' +
            '<td>RFC 4516 &lt;http://www.rfc-editor.org/rfc/rfc4516.txt&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10438>10438</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10439>10439</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10440>10440</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10441>10441</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10442>10442</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10443>10443</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10444>10444</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10445>10445</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10446>10446</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10447>10447</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10448>10448</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10449>10449</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10450>10450</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10451>10451</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10452>10452</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10453>10453</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10454>10454</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10455>10455</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10456>10456</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10457>10457</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10458>10458</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10459>10459</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10460>10460</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10461>10461</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10462>10462</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10463>10463</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10464>10464</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10465>10465</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10466>10466</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10467>10467</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10468>10468</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10469>10469</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10470>10470</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10471>10471</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10472>10472</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10473>10473</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10474>10474</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10475>10475</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10476>10476</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10477>10477</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10478>10478</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10479>10479</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10480>10480</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10481>10481</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10482>10482</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10483>10483</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10484>10484</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10485>10485</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10486>10486</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10487>10487</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10488>10488</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10489>10489</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10490>10490</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10491>10491</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10492>10492</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10493>10493</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10494>10494</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10495>10495</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10496>10496</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10497>10497</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10498>10498</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10499>10499</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10500>10500</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10501>10501</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10502>10502</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10503>10503</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10504>10504</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10505>10505</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10506>10506</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10507>10507</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10508>10508</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10509>10509</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10510>10510</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10511>10511</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10512>10512</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10513>10513</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10514>10514</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10515>10515</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10516>10516</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10517>10517</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10518>10518</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10519>10519</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10520>10520</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10521>10521</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10522>10522</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10523>10523</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10524>10524</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10525>10525</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10526>10526</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10527>10527</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10528>10528</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10529>10529</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10530>10530</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10531>10531</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10532>10532</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10533>10533</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10534>10534</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10535>10535</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10536>10536</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10537>10537</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10538>10538</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10539>10539</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10540>10540</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10541>10541</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10542>10542</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10543>10543</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10544>10544</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10545>10545</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10546>10546</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10547>10547</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10548>10548</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10549>10549</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10550>10550</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10551>10551</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10552>10552</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10553>10553</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10554>10554</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10555>10555</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10556>10556</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10557>10557</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10558>10558</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10559>10559</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10560>10560</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10561>10561</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10562>10562</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10563>10563</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10564>10564</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10565>10565</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10566>10566</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10567>10567</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10568>10568</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10569>10569</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10570>10570</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10571>10571</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10572>10572</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10573>10573</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10574>10574</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10575>10575</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10576>10576</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10577>10577</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10578>10578</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10579>10579</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10580>10580</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10581>10581</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10582>10582</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10583>10583</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10584>10584</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10585>10585</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10586>10586</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10587>10587</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10588>10588</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10589>10589</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10590>10590</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10591>10591</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10592>10592</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10593>10593</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10594>10594</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10595>10595</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10596>10596</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10597>10597</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10598>10598</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10599>10599</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10600>10600</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10601>10601</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10602>10602</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10603>10603</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10604>10604</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10605>10605</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10606>10606</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10607>10607</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10608>10608</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10609>10609</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10610>10610</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10611>10611</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10612>10612</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10613>10613</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10614>10614</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10615>10615</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10616>10616</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10617>10617</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10618>10618</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10619>10619</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10620>10620</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10621>10621</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10622>10622</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10623>10623</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10624>10624</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10625>10625</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10626>10626</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10627>10627</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10628>10628</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10629>10629</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10630>10630</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10631>10631</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10632>10632</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10633>10633</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10634>10634</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10635>10635</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10636>10636</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10637>10637</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10638>10638</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10639>10639</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10640>10640</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10641>10641</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10642>10642</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10643>10643</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10644>10644</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10645>10645</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10646>10646</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10647>10647</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10648>10648</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10649>10649</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10650>10650</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10651>10651</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10652>10652</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10653>10653</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10654>10654</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10655>10655</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10656>10656</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10657>10657</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10658>10658</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10659>10659</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10660>10660</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10661>10661</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10662>10662</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10663>10663</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10664>10664</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10665>10665</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10666>10666</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10667>10667</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10668>10668</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10669>10669</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10670>10670</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10671>10671</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10672>10672</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10673>10673</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10674>10674</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10675>10675</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10676>10676</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10677>10677</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10678>10678</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10679>10679</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10680>10680</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10681>10681</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10682>10682</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10683>10683</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10684>10684</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10685>10685</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10686>10686</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10687>10687</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10688>10688</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10689>10689</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10690>10690</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10691>10691</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10692>10692</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10693>10693</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10694>10694</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10695>10695</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10696>10696</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10697>10697</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10698>10698</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10699>10699</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10700>10700</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10701>10701</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10702>10702</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10703>10703</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10704>10704</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10705>10705</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10706>10706</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10707>10707</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10708>10708</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10709>10709</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10710>10710</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10711>10711</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10712>10712</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10713>10713</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10714>10714</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10715>10715</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10716>10716</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10717>10717</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10718>10718</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10719>10719</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10720>10720</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10721>10721</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10722>10722</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10723>10723</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10724>10724</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10725>10725</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10726>10726</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10727>10727</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10728>10728</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10729>10729</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10730>10730</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10731>10731</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10732>10732</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10733>10733</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10734>10734</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10735>10735</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10736>10736</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10737>10737</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10738>10738</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10739>10739</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10740>10740</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10741>10741</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10742>10742</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10743>10743</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10744>10744</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10745>10745</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10746>10746</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10747>10747</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10748>10748</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10749>10749</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10750>10750</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10751>10751</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10752>10752</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10753>10753</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10754>10754</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10755>10755</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10756>10756</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10757>10757</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10758>10758</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10759>10759</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10760>10760</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10761>10761</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10762>10762</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10763>10763</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10764>10764</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10765>10765</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10766>10766</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10767>10767</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10768>10768</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10769>10769</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10770>10770</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10771>10771</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10772>10772</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10773>10773</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10774>10774</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10775>10775</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10776>10776</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10777>10777</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10778>10778</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10779>10779</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10780>10780</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10781>10781</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10782>10782</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10783>10783</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10784>10784</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10785>10785</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10786>10786</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10787>10787</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10788>10788</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10789>10789</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10790>10790</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10791>10791</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10792>10792</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10793>10793</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10794>10794</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10795>10795</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10796>10796</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10797>10797</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10798>10798</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10799>10799</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10800>10800</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10801>10801</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10802>10802</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10803>10803</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10804>10804</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10805>10805</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10806>10806</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10807>10807</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10808>10808</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10809>10809</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10810>10810</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10811>10811</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10812>10812</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10813>10813</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10814>10814</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10815>10815</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10816>10816</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10817>10817</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10818>10818</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10819>10819</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10820>10820</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10821>10821</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10822>10822</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10823>10823</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10824>10824</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10825>10825</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10826>10826</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10827>10827</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10828>10828</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10829>10829</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10830>10830</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10831>10831</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10832>10832</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10833>10833</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10834>10834</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10835>10835</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10836>10836</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10837>10837</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10838>10838</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10839>10839</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10840>10840</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10841>10841</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10842>10842</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10843>10843</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10844>10844</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10845>10845</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10846>10846</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10847>10847</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10848>10848</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10849>10849</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10850>10850</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10851>10851</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10852>10852</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10853>10853</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10854>10854</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10855>10855</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10856>10856</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10857>10857</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10858>10858</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10859>10859</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10860>10860</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10861>10861</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10862>10862</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10863>10863</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10864>10864</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10865>10865</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10866>10866</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10867>10867</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10868>10868</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10869>10869</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10870>10870</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10871>10871</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10872>10872</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10873>10873</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10874>10874</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10875>10875</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10876>10876</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10877>10877</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10878>10878</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10879>10879</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10880>10880</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10881>10881</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10882>10882</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10883>10883</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10884>10884</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10885>10885</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10886>10886</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10887>10887</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10888>10888</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10889>10889</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10890>10890</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10891>10891</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10892>10892</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10893>10893</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10894>10894</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10895>10895</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10896>10896</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10897>10897</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10898>10898</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10899>10899</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10900>10900</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10901>10901</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10902>10902</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10903>10903</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10904>10904</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10905>10905</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10906>10906</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10907>10907</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10908>10908</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10909>10909</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10910>10910</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10911>10911</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10912>10912</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10913>10913</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10914>10914</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10915>10915</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10916>10916</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10917>10917</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10918>10918</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10919>10919</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10920>10920</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10921>10921</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10922>10922</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10923>10923</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10924>10924</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10925>10925</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10926>10926</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10927>10927</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10928>10928</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10929>10929</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10930>10930</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10931>10931</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10932>10932</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10933>10933</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10934>10934</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10935>10935</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10936>10936</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10937>10937</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10938>10938</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10939>10939</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10940>10940</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10941>10941</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10942>10942</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10943>10943</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10944>10944</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10945>10945</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10946>10946</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10947>10947</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10948>10948</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10949>10949</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10950>10950</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10951>10951</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10952>10952</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10953>10953</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10954>10954</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10955>10955</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10956>10956</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10957>10957</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10958>10958</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10959>10959</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10960>10960</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10961>10961</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10962>10962</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10963>10963</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10964>10964</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10965>10965</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10966>10966</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10967>10967</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10968>10968</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10969>10969</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10970>10970</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10971>10971</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10972>10972</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10973>10973</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10974>10974</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10975>10975</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10976>10976</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10977>10977</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10978>10978</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10979>10979</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10980>10980</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10981>10981</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10982>10982</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10983>10983</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10984>10984</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10985>10985</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10986>10986</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10987>10987</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10988>10988</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10989>10989</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10990>10990</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10991>10991</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10992>10992</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10993>10993</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10994>10994</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10995>10995</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10996>10996</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10997>10997</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10998>10998</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=10999>10999</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11000>11000</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11001>11001</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11002>11002</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11003>11003</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11004>11004</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11005>11005</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11006>11006</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11007>11007</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11008>11008</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11009>11009</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11010>11010</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11011>11011</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11012>11012</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11013>11013</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11014>11014</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11015>11015</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11016>11016</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11017>11017</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11018>11018</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11019>11019</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11020>11020</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11021>11021</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11022>11022</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11023>11023</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11024>11024</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11025>11025</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11026>11026</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11027>11027</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11028>11028</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11029>11029</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11030>11030</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11031>11031</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11032>11032</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11033>11033</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11034>11034</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11035>11035</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11036>11036</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11037>11037</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11038>11038</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11039>11039</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11040>11040</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11041>11041</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11042>11042</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11043>11043</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11044>11044</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11045>11045</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11046>11046</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11047>11047</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11048>11048</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11049>11049</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11050>11050</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11051>11051</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11052>11052</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11053>11053</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11054>11054</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11055>11055</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11056>11056</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11057>11057</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11058>11058</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11059>11059</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11060>11060</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11061>11061</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11062>11062</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11063>11063</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11064>11064</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11065>11065</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11066>11066</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11067>11067</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11068>11068</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11069>11069</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11070>11070</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11071>11071</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11072>11072</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11073>11073</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11074>11074</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11075>11075</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11076>11076</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11077>11077</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11078>11078</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11079>11079</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11080>11080</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11081>11081</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11082>11082</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11083>11083</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11084>11084</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11085>11085</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11086>11086</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11087>11087</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11088>11088</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11089>11089</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11090>11090</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11091>11091</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11092>11092</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11093>11093</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11094>11094</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11095>11095</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11096>11096</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11097>11097</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11098>11098</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11099>11099</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11100>11100</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11101>11101</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11102>11102</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11103>11103</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11104>11104</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11105>11105</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11106>11106</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11107>11107</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11108>11108</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11109>11109</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11110>11110</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11111>11111</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11112>11112</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11113>11113</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11114>11114</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11115>11115</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11116>11116</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11117>11117</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11118>11118</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11119>11119</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11120>11120</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11121>11121</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11122>11122</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11123>11123</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11124>11124</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11125>11125</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11126>11126</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11127>11127</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11128>11128</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11129>11129</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11130>11130</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11131>11131</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11132>11132</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11133>11133</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11134>11134</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11135>11135</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11136>11136</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11137>11137</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11138>11138</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11139>11139</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11140>11140</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11141>11141</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11142>11142</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11143>11143</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11144>11144</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11145>11145</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11146>11146</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11147>11147</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11148>11148</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11149>11149</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11150>11150</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11151>11151</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11152>11152</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11153>11153</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11154>11154</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11155>11155</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11156>11156</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11157>11157</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11158>11158</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11159>11159</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11160>11160</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11161>11161</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11162>11162</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11163>11163</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11164>11164</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11165>11165</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11166>11166</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11167>11167</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11168>11168</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11169>11169</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11170>11170</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11171>11171</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11172>11172</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11173>11173</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11174>11174</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11175>11175</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11176>11176</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11177>11177</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11178>11178</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11179>11179</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11180>11180</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11181>11181</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11182>11182</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11183>11183</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11184>11184</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11185>11185</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11186>11186</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11187>11187</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11188>11188</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11189>11189</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11190>11190</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11191>11191</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11192>11192</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11193>11193</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11194>11194</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11195>11195</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11196>11196</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11197>11197</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11198>11198</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11199>11199</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11200>11200</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11201>11201</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11202>11202</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11203>11203</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11204>11204</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11205>11205</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11206>11206</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11207>11207</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11208>11208</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11209>11209</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11210>11210</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11211>11211</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11212>11212</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11213>11213</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11214>11214</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11215>11215</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11216>11216</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11217>11217</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11218>11218</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11219>11219</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11220>11220</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11221>11221</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11222>11222</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11223>11223</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11224>11224</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11225>11225</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11226>11226</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11227>11227</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11228>11228</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11229>11229</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11230>11230</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11231>11231</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11232>11232</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11233>11233</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11234>11234</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11235>11235</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11236>11236</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11237>11237</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11238>11238</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11239>11239</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11240>11240</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11241>11241</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11242>11242</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11243>11243</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11244>11244</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11245>11245</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11246>11246</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11247>11247</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11248>11248</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11249>11249</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11250>11250</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11251>11251</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11252>11252</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11253>11253</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11254>11254</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11255>11255</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11256>11256</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11257>11257</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11258>11258</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11259>11259</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11260>11260</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11261>11261</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11262>11262</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11263>11263</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11264>11264</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11265>11265</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11266>11266</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11267>11267</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11268>11268</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11269>11269</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11270>11270</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11271>11271</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11272>11272</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11273>11273</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11274>11274</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11275>11275</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11276>11276</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11277>11277</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11278>11278</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11279>11279</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11280>11280</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11281>11281</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11282>11282</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11283>11283</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11284>11284</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11285>11285</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11286>11286</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11287>11287</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11288>11288</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11289>11289</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11290>11290</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11291>11291</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11292>11292</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11293>11293</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11294>11294</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11295>11295</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11296>11296</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11297>11297</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11298>11298</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11299>11299</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11300>11300</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11301>11301</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11302>11302</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11303>11303</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11304>11304</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11305>11305</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11306>11306</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11307>11307</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11308>11308</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11309>11309</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11310>11310</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11311>11311</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11312>11312</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11313>11313</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11314>11314</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11315>11315</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11316>11316</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11317>11317</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11318>11318</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11319>11319</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11320>11320</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11321>11321</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11322>11322</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11323>11323</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11324>11324</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11325>11325</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11326>11326</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11327>11327</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11328>11328</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11329>11329</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11330>11330</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11331>11331</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11332>11332</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11333>11333</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11334>11334</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11335>11335</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11336>11336</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11337>11337</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11338>11338</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11339>11339</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11340>11340</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11341>11341</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11342>11342</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11343>11343</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11344>11344</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11345>11345</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11346>11346</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11347>11347</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11348>11348</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11349>11349</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11350>11350</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11351>11351</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11352>11352</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11353>11353</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11354>11354</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11355>11355</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11356>11356</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11357>11357</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11358>11358</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11359>11359</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11360>11360</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11361>11361</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11362>11362</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11363>11363</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11364>11364</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11365>11365</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11366>11366</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11367>11367</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11368>11368</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11369>11369</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11370>11370</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11371>11371</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11372>11372</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11373>11373</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11374>11374</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11375>11375</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11376>11376</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11377>11377</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11378>11378</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11379>11379</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11380>11380</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11381>11381</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11382>11382</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11383>11383</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11384>11384</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11385>11385</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11386>11386</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11387>11387</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11388>11388</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11389>11389</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11390>11390</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11391>11391</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11392>11392</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11393>11393</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11394>11394</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11395>11395</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11396>11396</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11397>11397</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11398>11398</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11399>11399</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11400>11400</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11401>11401</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11402>11402</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11403>11403</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11404>11404</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11405>11405</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11406>11406</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11407>11407</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11408>11408</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11409>11409</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11410>11410</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11411>11411</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11412>11412</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11413>11413</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11414>11414</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11415>11415</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11416>11416</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11417>11417</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11418>11418</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11419>11419</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11420>11420</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11421>11421</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11422>11422</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11423>11423</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11424>11424</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11425>11425</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11426>11426</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11427>11427</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11428>11428</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11429>11429</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11430>11430</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11431>11431</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11432>11432</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11433>11433</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11434>11434</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11435>11435</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11436>11436</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11437>11437</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11438>11438</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11439>11439</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11440>11440</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11441>11441</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11442>11442</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11443>11443</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11444>11444</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11445>11445</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11446>11446</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11447>11447</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11448>11448</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11449>11449</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11450>11450</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11451>11451</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11452>11452</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11453>11453</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11454>11454</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11455>11455</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11456>11456</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11457>11457</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11458>11458</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11459>11459</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11460>11460</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11461>11461</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11462>11462</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11463>11463</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11464>11464</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11465>11465</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11466>11466</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11467>11467</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11468>11468</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11469>11469</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11470>11470</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11471>11471</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11472>11472</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11473>11473</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11474>11474</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11475>11475</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11476>11476</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11477>11477</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11478>11478</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11479>11479</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11480>11480</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11481>11481</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11482>11482</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11483>11483</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11484>11484</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11485>11485</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11486>11486</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11487>11487</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11488>11488</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11489>11489</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11490>11490</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11491>11491</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11492>11492</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11493>11493</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11494>11494</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11495>11495</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11496>11496</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11497>11497</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11498>11498</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11499>11499</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11500>11500</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11501>11501</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11502>11502</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11503>11503</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11504>11504</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11505>11505</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11506>11506</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11507>11507</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11508>11508</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11509>11509</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11510>11510</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11511>11511</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11512>11512</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11513>11513</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11514>11514</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11515>11515</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11516>11516</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11517>11517</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11518>11518</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11519>11519</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11520>11520</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11521>11521</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11522>11522</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11523>11523</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11524>11524</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11525>11525</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11526>11526</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11527>11527</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11528>11528</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11529>11529</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11530>11530</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11531>11531</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11532>11532</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11533>11533</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11534>11534</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11535>11535</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11536>11536</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11537>11537</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11538>11538</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11539>11539</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11540>11540</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11541>11541</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11542>11542</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11543>11543</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11544>11544</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11545>11545</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11546>11546</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11547>11547</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11548>11548</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11549>11549</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11550>11550</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11551>11551</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11552>11552</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11553>11553</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11554>11554</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11555>11555</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11556>11556</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11557>11557</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11558>11558</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11559>11559</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11560>11560</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11561>11561</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11562>11562</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11563>11563</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11564>11564</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11565>11565</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11566>11566</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11567>11567</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11568>11568</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11569>11569</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11570>11570</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11571>11571</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11572>11572</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11573>11573</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11574>11574</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11575>11575</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11576>11576</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11577>11577</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11578>11578</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11579>11579</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11580>11580</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11581>11581</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11582>11582</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11583>11583</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11584>11584</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11585>11585</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11586>11586</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11587>11587</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11588>11588</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11589>11589</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11590>11590</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11591>11591</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11592>11592</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11593>11593</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11594>11594</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11595>11595</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11596>11596</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11597>11597</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11598>11598</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11599>11599</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11600>11600</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11601>11601</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11602>11602</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11603>11603</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11604>11604</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11605>11605</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11606>11606</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11607>11607</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11608>11608</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11609>11609</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11610>11610</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11611>11611</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11612>11612</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11613>11613</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11614>11614</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11615>11615</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11616>11616</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11617>11617</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11618>11618</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11619>11619</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11620>11620</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11621>11621</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11622>11622</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11623>11623</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11624>11624</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11625>11625</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11626>11626</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11627>11627</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11628>11628</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11629>11629</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11630>11630</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11631>11631</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11632>11632</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11633>11633</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11634>11634</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11635>11635</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11636>11636</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11637>11637</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11638>11638</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11639>11639</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11640>11640</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11641>11641</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11642>11642</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11643>11643</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11644>11644</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11645>11645</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11646>11646</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11647>11647</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11648>11648</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11649>11649</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11650>11650</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11651>11651</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11652>11652</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11653>11653</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11654>11654</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11655>11655</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11656>11656</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11657>11657</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11658>11658</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11659>11659</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11660>11660</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11661>11661</a></td>\n' +
            '<td>LDAP_MEMORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11662>11662</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11663>11663</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11664>11664</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11665>11665</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11666>11666</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11667>11667</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11668>11668</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11669>11669</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11670>11670</a></td>\n' +
            '<td>ldap_memfree, ldap_memvfree, ldap_memalloc, ldap_memcalloc, ldap_memrealloc, ldap_strdup − LDAP memory allocation routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11671>11671</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11672>11672</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11673>11673</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11674>11674</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11675>11675</a></td>\n' +
            '<td>void ldap_memfree(void *p);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11676>11676</a></td>\n' +
            '<td>void ldap_memvfree(void **v);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11677>11677</a></td>\n' +
            '<td>void *ldap_memalloc(ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11678>11678</a></td>\n' +
            '<td>void *ldap_memcalloc(ber_len_t n, ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11679>11679</a></td>\n' +
            '<td>void *ldap_memrealloc(void *p, ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11680>11680</a></td>\n' +
            '<td>char *ldap_strdup(LDAP_CONST char *p);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11681>11681</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11682>11682</a></td>\n' +
            '<td>These routines are used to allocate/deallocate memory used/returned by the LDAP library. ldap_memalloc(), ldap_memcalloc(), ldap_memrealloc(), and ldap_memfree() are used exactly like the standard malloc(3), calloc(3), realloc(3), and free(3) routines, respectively. The ldap_memvfree() routine is used to free a dynamically allocated array of pointers to arbitrary dynamically allocated objects. The ldap_strdup() routine is used exactly like the standard strdup(3) routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11683>11683</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11684>11684</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11685>11685</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11686>11686</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11687>11687</a></td>\n' +
            '<td>LDAP_MEMORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11688>11688</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11689>11689</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11690>11690</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11691>11691</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11692>11692</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11693>11693</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11694>11694</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11695>11695</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11696>11696</a></td>\n' +
            '<td>ldap_memfree, ldap_memvfree, ldap_memalloc, ldap_memcalloc, ldap_memrealloc, ldap_strdup − LDAP memory allocation routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11697>11697</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11698>11698</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11699>11699</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11700>11700</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11701>11701</a></td>\n' +
            '<td>void ldap_memfree(void *p);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11702>11702</a></td>\n' +
            '<td>void ldap_memvfree(void **v);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11703>11703</a></td>\n' +
            '<td>void *ldap_memalloc(ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11704>11704</a></td>\n' +
            '<td>void *ldap_memcalloc(ber_len_t n, ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11705>11705</a></td>\n' +
            '<td>void *ldap_memrealloc(void *p, ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11706>11706</a></td>\n' +
            '<td>char *ldap_strdup(LDAP_CONST char *p);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11707>11707</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11708>11708</a></td>\n' +
            '<td>These routines are used to allocate/deallocate memory used/returned by the LDAP library. ldap_memalloc(), ldap_memcalloc(), ldap_memrealloc(), and ldap_memfree() are used exactly like the standard malloc(3), calloc(3), realloc(3), and free(3) routines, respectively. The ldap_memvfree() routine is used to free a dynamically allocated array of pointers to arbitrary dynamically allocated objects. The ldap_strdup() routine is used exactly like the standard strdup(3) routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11709>11709</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11710>11710</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11711>11711</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11712>11712</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11713>11713</a></td>\n' +
            '<td>LDAP_MEMORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11714>11714</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11715>11715</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11716>11716</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11717>11717</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11718>11718</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11719>11719</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11720>11720</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11721>11721</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11722>11722</a></td>\n' +
            '<td>ldap_memfree, ldap_memvfree, ldap_memalloc, ldap_memcalloc, ldap_memrealloc, ldap_strdup − LDAP memory allocation routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11723>11723</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11724>11724</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11725>11725</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11726>11726</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11727>11727</a></td>\n' +
            '<td>void ldap_memfree(void *p);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11728>11728</a></td>\n' +
            '<td>void ldap_memvfree(void **v);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11729>11729</a></td>\n' +
            '<td>void *ldap_memalloc(ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11730>11730</a></td>\n' +
            '<td>void *ldap_memcalloc(ber_len_t n, ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11731>11731</a></td>\n' +
            '<td>void *ldap_memrealloc(void *p, ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11732>11732</a></td>\n' +
            '<td>char *ldap_strdup(LDAP_CONST char *p);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11733>11733</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11734>11734</a></td>\n' +
            '<td>These routines are used to allocate/deallocate memory used/returned by the LDAP library. ldap_memalloc(), ldap_memcalloc(), ldap_memrealloc(), and ldap_memfree() are used exactly like the standard malloc(3), calloc(3), realloc(3), and free(3) routines, respectively. The ldap_memvfree() routine is used to free a dynamically allocated array of pointers to arbitrary dynamically allocated objects. The ldap_strdup() routine is used exactly like the standard strdup(3) routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11735>11735</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11736>11736</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11737>11737</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11738>11738</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11739>11739</a></td>\n' +
            '<td>LDAP_MEMORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11740>11740</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11741>11741</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11742>11742</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11743>11743</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11744>11744</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11745>11745</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11746>11746</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11747>11747</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11748>11748</a></td>\n' +
            '<td>ldap_memfree, ldap_memvfree, ldap_memalloc, ldap_memcalloc, ldap_memrealloc, ldap_strdup − LDAP memory allocation routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11749>11749</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11750>11750</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11751>11751</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11752>11752</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11753>11753</a></td>\n' +
            '<td>void ldap_memfree(void *p);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11754>11754</a></td>\n' +
            '<td>void ldap_memvfree(void **v);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11755>11755</a></td>\n' +
            '<td>void *ldap_memalloc(ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11756>11756</a></td>\n' +
            '<td>void *ldap_memcalloc(ber_len_t n, ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11757>11757</a></td>\n' +
            '<td>void *ldap_memrealloc(void *p, ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11758>11758</a></td>\n' +
            '<td>char *ldap_strdup(LDAP_CONST char *p);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11759>11759</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11760>11760</a></td>\n' +
            '<td>These routines are used to allocate/deallocate memory used/returned by the LDAP library. ldap_memalloc(), ldap_memcalloc(), ldap_memrealloc(), and ldap_memfree() are used exactly like the standard malloc(3), calloc(3), realloc(3), and free(3) routines, respectively. The ldap_memvfree() routine is used to free a dynamically allocated array of pointers to arbitrary dynamically allocated objects. The ldap_strdup() routine is used exactly like the standard strdup(3) routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11761>11761</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11762>11762</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11763>11763</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11764>11764</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11765>11765</a></td>\n' +
            '<td>LDAP_MEMORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11766>11766</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11767>11767</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11768>11768</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11769>11769</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11770>11770</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11771>11771</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11772>11772</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11773>11773</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11774>11774</a></td>\n' +
            '<td>ldap_memfree, ldap_memvfree, ldap_memalloc, ldap_memcalloc, ldap_memrealloc, ldap_strdup − LDAP memory allocation routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11775>11775</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11776>11776</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11777>11777</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11778>11778</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11779>11779</a></td>\n' +
            '<td>void ldap_memfree(void *p);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11780>11780</a></td>\n' +
            '<td>void ldap_memvfree(void **v);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11781>11781</a></td>\n' +
            '<td>void *ldap_memalloc(ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11782>11782</a></td>\n' +
            '<td>void *ldap_memcalloc(ber_len_t n, ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11783>11783</a></td>\n' +
            '<td>void *ldap_memrealloc(void *p, ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11784>11784</a></td>\n' +
            '<td>char *ldap_strdup(LDAP_CONST char *p);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11785>11785</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11786>11786</a></td>\n' +
            '<td>These routines are used to allocate/deallocate memory used/returned by the LDAP library. ldap_memalloc(), ldap_memcalloc(), ldap_memrealloc(), and ldap_memfree() are used exactly like the standard malloc(3), calloc(3), realloc(3), and free(3) routines, respectively. The ldap_memvfree() routine is used to free a dynamically allocated array of pointers to arbitrary dynamically allocated objects. The ldap_strdup() routine is used exactly like the standard strdup(3) routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11787>11787</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11788>11788</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11789>11789</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11790>11790</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11791>11791</a></td>\n' +
            '<td>LDAP_MEMORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11792>11792</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11793>11793</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11794>11794</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11795>11795</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11796>11796</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11797>11797</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11798>11798</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11799>11799</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11800>11800</a></td>\n' +
            '<td>ldap_memfree, ldap_memvfree, ldap_memalloc, ldap_memcalloc, ldap_memrealloc, ldap_strdup − LDAP memory allocation routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11801>11801</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11802>11802</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11803>11803</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11804>11804</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11805>11805</a></td>\n' +
            '<td>void ldap_memfree(void *p);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11806>11806</a></td>\n' +
            '<td>void ldap_memvfree(void **v);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11807>11807</a></td>\n' +
            '<td>void *ldap_memalloc(ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11808>11808</a></td>\n' +
            '<td>void *ldap_memcalloc(ber_len_t n, ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11809>11809</a></td>\n' +
            '<td>void *ldap_memrealloc(void *p, ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11810>11810</a></td>\n' +
            '<td>char *ldap_strdup(LDAP_CONST char *p);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11811>11811</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11812>11812</a></td>\n' +
            '<td>These routines are used to allocate/deallocate memory used/returned by the LDAP library. ldap_memalloc(), ldap_memcalloc(), ldap_memrealloc(), and ldap_memfree() are used exactly like the standard malloc(3), calloc(3), realloc(3), and free(3) routines, respectively. The ldap_memvfree() routine is used to free a dynamically allocated array of pointers to arbitrary dynamically allocated objects. The ldap_strdup() routine is used exactly like the standard strdup(3) routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11813>11813</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11814>11814</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11815>11815</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11816>11816</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11817>11817</a></td>\n' +
            '<td>LDAP_MODIFY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11818>11818</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11819>11819</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11820>11820</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11821>11821</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11822>11822</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11823>11823</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11824>11824</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11825>11825</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11826>11826</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11827>11827</a></td>\n' +
            '<td>ldap_modify_ext, ldap_modify_ext_s − Perform an LDAP modify operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11828>11828</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11829>11829</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11830>11830</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11831>11831</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11832>11832</a></td>\n' +
            '<td>int ldap_modify_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11833>11833</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11834>11834</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11835>11835</a></td>\n' +
            '<td>LDAPMod *mods[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11836>11836</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11837>11837</a></td>\n' +
            '<td>LDAPControl **cctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11838>11838</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11839>11839</a></td>\n' +
            '<td>int ldap_modify_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11840>11840</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11841>11841</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11842>11842</a></td>\n' +
            '<td>LDAPMod *mods[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11843>11843</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11844>11844</a></td>\n' +
            '<td>LDAPControl **cctrls );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11845>11845</a></td>\n' +
            '<td>void ldap_mods_free(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11846>11846</a></td>\n' +
            '<td>LDAPMod **mods,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11847>11847</a></td>\n' +
            '<td>int freemods );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11848>11848</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11849>11849</a></td>\n' +
            '<td>The routine ldap_modify_ext_s() is used to perform an LDAP modify operation. dn is the DN of the entry to modify, and mods is a null-terminated array of modifications to make to the entry. Each element of the mods array is a pointer to an LDAPMod structure, which is defined below.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11850>11850</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11851>11851</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11852>11852</a></td>\n' +
            '<td>typedef struct ldapmod {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11853>11853</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11854>11854</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11855>11855</a></td>\n' +
            '<td>int mod_op;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11856>11856</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11857>11857</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11858>11858</a></td>\n' +
            '<td>char *mod_type;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11859>11859</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11860>11860</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11861>11861</a></td>\n' +
            '<td>union {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11862>11862</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11863>11863</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11864>11864</a></td>\n' +
            '<td>char **modv_strvals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11865>11865</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11866>11866</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11867>11867</a></td>\n' +
            '<td>struct berval **modv_bvals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11868>11868</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11869>11869</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11870>11870</a></td>\n' +
            '<td>} mod_vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11871>11871</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11872>11872</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11873>11873</a></td>\n' +
            '<td>struct ldapmod *mod_next;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11874>11874</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11875>11875</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11876>11876</a></td>\n' +
            '<td>} LDAPMod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11877>11877</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11878>11878</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11879>11879</a></td>\n' +
            '<td>#define mod_values mod_vals.modv_strvals</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11880>11880</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11881>11881</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11882>11882</a></td>\n' +
            '<td>#define mod_bvalues mod_vals.modv_bvals</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11883>11883</a></td>\n' +
            '<td>The mod_op field is used to specify the type of modification to perform and should be one of LDAP_MOD_ADD, LDAP_MOD_DELETE, or LDAP_MOD_REPLACE. The mod_type and mod_values fields specify the attribute type to modify and a null-terminated array of values to add, delete, or replace respectively. The mod_next field is used only by the LDAP server and may be ignored by the client.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11884>11884</a></td>\n' +
            '<td>If you need to specify a non-string value (e.g., to add a photo or audio attribute value), you should set mod_op to the logical OR of the operation as above (e.g., LDAP_MOD_REPLACE) and the constant LDAP_MOD_BVALUES. In this case, mod_bvalues should be used instead of mod_values, and it should point to a null-terminated array of struct bervals, as defined in &lt;lber.h&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11885>11885</a></td>\n' +
            '<td>For LDAP_MOD_ADD modifications, the given values are added to the entry, creating the attribute if necessary. For LDAP_MOD_DELETE modifications, the given values are deleted from the entry, removing the attribute if no values remain. If the entire attribute is to be deleted, the mod_values field should be set to NULL. For LDAP_MOD_REPLACE modifications, the attribute will have the listed values after the modification, having been created if necessary. All modifications are performed in the order in which they are listed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11886>11886</a></td>\n' +
            '<td>ldap_mods_free() can be used to free each element of a NULL-terminated array of mod structures. If freemods is non-zero, the mods pointer itself is freed as well.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11887>11887</a></td>\n' +
            '<td>ldap_modify_ext_s() returns a code indicating success or, in the case of failure, indicating the nature of the failure. See ldap_error(3) for details</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11888>11888</a></td>\n' +
            '<td>The ldap_modify_ext() operation works the same way as ldap_modify_ext_s(), except that it is asynchronous. The integer that msgidp points to is set to the message id of the modify request. The result of the operation can be obtained by calling ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11889>11889</a></td>\n' +
            '<td>Both ldap_modify_ext() and ldap_modify_ext_s() allows server and client controls to be passed in via the sctrls and cctrls parameters, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11890>11890</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11891>11891</a></td>\n' +
            '<td>The ldap_modify() and ldap_modify_s() routines are deprecated in favor of the ldap_modify_ext() and ldap_modify_ext_s() routines, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11892>11892</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11893>11893</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11894>11894</a></td>\n' +
            '<td>ldap(3), ldap_error(3),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11895>11895</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11896>11896</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11897>11897</a></td>\n' +
            '<td>LDAP_MODIFY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11898>11898</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11899>11899</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11900>11900</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11901>11901</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11902>11902</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11903>11903</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11904>11904</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11905>11905</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11906>11906</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11907>11907</a></td>\n' +
            '<td>ldap_modify_ext, ldap_modify_ext_s − Perform an LDAP modify operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11908>11908</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11909>11909</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11910>11910</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11911>11911</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11912>11912</a></td>\n' +
            '<td>int ldap_modify_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11913>11913</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11914>11914</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11915>11915</a></td>\n' +
            '<td>LDAPMod *mods[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11916>11916</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11917>11917</a></td>\n' +
            '<td>LDAPControl **cctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11918>11918</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11919>11919</a></td>\n' +
            '<td>int ldap_modify_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11920>11920</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11921>11921</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11922>11922</a></td>\n' +
            '<td>LDAPMod *mods[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11923>11923</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11924>11924</a></td>\n' +
            '<td>LDAPControl **cctrls );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11925>11925</a></td>\n' +
            '<td>void ldap_mods_free(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11926>11926</a></td>\n' +
            '<td>LDAPMod **mods,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11927>11927</a></td>\n' +
            '<td>int freemods );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11928>11928</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11929>11929</a></td>\n' +
            '<td>The routine ldap_modify_ext_s() is used to perform an LDAP modify operation. dn is the DN of the entry to modify, and mods is a null-terminated array of modifications to make to the entry. Each element of the mods array is a pointer to an LDAPMod structure, which is defined below.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11930>11930</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11931>11931</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11932>11932</a></td>\n' +
            '<td>typedef struct ldapmod {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11933>11933</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11934>11934</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11935>11935</a></td>\n' +
            '<td>int mod_op;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11936>11936</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11937>11937</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11938>11938</a></td>\n' +
            '<td>char *mod_type;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11939>11939</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11940>11940</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11941>11941</a></td>\n' +
            '<td>union {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11942>11942</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11943>11943</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11944>11944</a></td>\n' +
            '<td>char **modv_strvals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11945>11945</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11946>11946</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11947>11947</a></td>\n' +
            '<td>struct berval **modv_bvals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11948>11948</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11949>11949</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11950>11950</a></td>\n' +
            '<td>} mod_vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11951>11951</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11952>11952</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11953>11953</a></td>\n' +
            '<td>struct ldapmod *mod_next;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11954>11954</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11955>11955</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11956>11956</a></td>\n' +
            '<td>} LDAPMod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11957>11957</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11958>11958</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11959>11959</a></td>\n' +
            '<td>#define mod_values mod_vals.modv_strvals</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11960>11960</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11961>11961</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11962>11962</a></td>\n' +
            '<td>#define mod_bvalues mod_vals.modv_bvals</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11963>11963</a></td>\n' +
            '<td>The mod_op field is used to specify the type of modification to perform and should be one of LDAP_MOD_ADD, LDAP_MOD_DELETE, or LDAP_MOD_REPLACE. The mod_type and mod_values fields specify the attribute type to modify and a null-terminated array of values to add, delete, or replace respectively. The mod_next field is used only by the LDAP server and may be ignored by the client.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11964>11964</a></td>\n' +
            '<td>If you need to specify a non-string value (e.g., to add a photo or audio attribute value), you should set mod_op to the logical OR of the operation as above (e.g., LDAP_MOD_REPLACE) and the constant LDAP_MOD_BVALUES. In this case, mod_bvalues should be used instead of mod_values, and it should point to a null-terminated array of struct bervals, as defined in &lt;lber.h&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11965>11965</a></td>\n' +
            '<td>For LDAP_MOD_ADD modifications, the given values are added to the entry, creating the attribute if necessary. For LDAP_MOD_DELETE modifications, the given values are deleted from the entry, removing the attribute if no values remain. If the entire attribute is to be deleted, the mod_values field should be set to NULL. For LDAP_MOD_REPLACE modifications, the attribute will have the listed values after the modification, having been created if necessary. All modifications are performed in the order in which they are listed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11966>11966</a></td>\n' +
            '<td>ldap_mods_free() can be used to free each element of a NULL-terminated array of mod structures. If freemods is non-zero, the mods pointer itself is freed as well.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11967>11967</a></td>\n' +
            '<td>ldap_modify_ext_s() returns a code indicating success or, in the case of failure, indicating the nature of the failure. See ldap_error(3) for details</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11968>11968</a></td>\n' +
            '<td>The ldap_modify_ext() operation works the same way as ldap_modify_ext_s(), except that it is asynchronous. The integer that msgidp points to is set to the message id of the modify request. The result of the operation can be obtained by calling ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11969>11969</a></td>\n' +
            '<td>Both ldap_modify_ext() and ldap_modify_ext_s() allows server and client controls to be passed in via the sctrls and cctrls parameters, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11970>11970</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11971>11971</a></td>\n' +
            '<td>The ldap_modify() and ldap_modify_s() routines are deprecated in favor of the ldap_modify_ext() and ldap_modify_ext_s() routines, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11972>11972</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11973>11973</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11974>11974</a></td>\n' +
            '<td>ldap(3), ldap_error(3),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11975>11975</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11976>11976</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11977>11977</a></td>\n' +
            '<td>LDAP_MODIFY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11978>11978</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11979>11979</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11980>11980</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11981>11981</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11982>11982</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11983>11983</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11984>11984</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11985>11985</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11986>11986</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11987>11987</a></td>\n' +
            '<td>ldap_modify_ext, ldap_modify_ext_s − Perform an LDAP modify operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11988>11988</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11989>11989</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11990>11990</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11991>11991</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11992>11992</a></td>\n' +
            '<td>int ldap_modify_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11993>11993</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11994>11994</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11995>11995</a></td>\n' +
            '<td>LDAPMod *mods[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11996>11996</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11997>11997</a></td>\n' +
            '<td>LDAPControl **cctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11998>11998</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=11999>11999</a></td>\n' +
            '<td>int ldap_modify_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12000>12000</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12001>12001</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12002>12002</a></td>\n' +
            '<td>LDAPMod *mods[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12003>12003</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12004>12004</a></td>\n' +
            '<td>LDAPControl **cctrls );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12005>12005</a></td>\n' +
            '<td>void ldap_mods_free(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12006>12006</a></td>\n' +
            '<td>LDAPMod **mods,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12007>12007</a></td>\n' +
            '<td>int freemods );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12008>12008</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12009>12009</a></td>\n' +
            '<td>The routine ldap_modify_ext_s() is used to perform an LDAP modify operation. dn is the DN of the entry to modify, and mods is a null-terminated array of modifications to make to the entry. Each element of the mods array is a pointer to an LDAPMod structure, which is defined below.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12010>12010</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12011>12011</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12012>12012</a></td>\n' +
            '<td>typedef struct ldapmod {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12013>12013</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12014>12014</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12015>12015</a></td>\n' +
            '<td>int mod_op;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12016>12016</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12017>12017</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12018>12018</a></td>\n' +
            '<td>char *mod_type;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12019>12019</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12020>12020</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12021>12021</a></td>\n' +
            '<td>union {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12022>12022</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12023>12023</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12024>12024</a></td>\n' +
            '<td>char **modv_strvals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12025>12025</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12026>12026</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12027>12027</a></td>\n' +
            '<td>struct berval **modv_bvals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12028>12028</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12029>12029</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12030>12030</a></td>\n' +
            '<td>} mod_vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12031>12031</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12032>12032</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12033>12033</a></td>\n' +
            '<td>struct ldapmod *mod_next;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12034>12034</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12035>12035</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12036>12036</a></td>\n' +
            '<td>} LDAPMod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12037>12037</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12038>12038</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12039>12039</a></td>\n' +
            '<td>#define mod_values mod_vals.modv_strvals</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12040>12040</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12041>12041</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12042>12042</a></td>\n' +
            '<td>#define mod_bvalues mod_vals.modv_bvals</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12043>12043</a></td>\n' +
            '<td>The mod_op field is used to specify the type of modification to perform and should be one of LDAP_MOD_ADD, LDAP_MOD_DELETE, or LDAP_MOD_REPLACE. The mod_type and mod_values fields specify the attribute type to modify and a null-terminated array of values to add, delete, or replace respectively. The mod_next field is used only by the LDAP server and may be ignored by the client.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12044>12044</a></td>\n' +
            '<td>If you need to specify a non-string value (e.g., to add a photo or audio attribute value), you should set mod_op to the logical OR of the operation as above (e.g., LDAP_MOD_REPLACE) and the constant LDAP_MOD_BVALUES. In this case, mod_bvalues should be used instead of mod_values, and it should point to a null-terminated array of struct bervals, as defined in &lt;lber.h&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12045>12045</a></td>\n' +
            '<td>For LDAP_MOD_ADD modifications, the given values are added to the entry, creating the attribute if necessary. For LDAP_MOD_DELETE modifications, the given values are deleted from the entry, removing the attribute if no values remain. If the entire attribute is to be deleted, the mod_values field should be set to NULL. For LDAP_MOD_REPLACE modifications, the attribute will have the listed values after the modification, having been created if necessary. All modifications are performed in the order in which they are listed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12046>12046</a></td>\n' +
            '<td>ldap_mods_free() can be used to free each element of a NULL-terminated array of mod structures. If freemods is non-zero, the mods pointer itself is freed as well.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12047>12047</a></td>\n' +
            '<td>ldap_modify_ext_s() returns a code indicating success or, in the case of failure, indicating the nature of the failure. See ldap_error(3) for details</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12048>12048</a></td>\n' +
            '<td>The ldap_modify_ext() operation works the same way as ldap_modify_ext_s(), except that it is asynchronous. The integer that msgidp points to is set to the message id of the modify request. The result of the operation can be obtained by calling ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12049>12049</a></td>\n' +
            '<td>Both ldap_modify_ext() and ldap_modify_ext_s() allows server and client controls to be passed in via the sctrls and cctrls parameters, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12050>12050</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12051>12051</a></td>\n' +
            '<td>The ldap_modify() and ldap_modify_s() routines are deprecated in favor of the ldap_modify_ext() and ldap_modify_ext_s() routines, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12052>12052</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12053>12053</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12054>12054</a></td>\n' +
            '<td>ldap(3), ldap_error(3),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12055>12055</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12056>12056</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12057>12057</a></td>\n' +
            '<td>LDAP_MODIFY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12058>12058</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12059>12059</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12060>12060</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12061>12061</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12062>12062</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12063>12063</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12064>12064</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12065>12065</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12066>12066</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12067>12067</a></td>\n' +
            '<td>ldap_modify_ext, ldap_modify_ext_s − Perform an LDAP modify operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12068>12068</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12069>12069</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12070>12070</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12071>12071</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12072>12072</a></td>\n' +
            '<td>int ldap_modify_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12073>12073</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12074>12074</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12075>12075</a></td>\n' +
            '<td>LDAPMod *mods[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12076>12076</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12077>12077</a></td>\n' +
            '<td>LDAPControl **cctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12078>12078</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12079>12079</a></td>\n' +
            '<td>int ldap_modify_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12080>12080</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12081>12081</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12082>12082</a></td>\n' +
            '<td>LDAPMod *mods[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12083>12083</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12084>12084</a></td>\n' +
            '<td>LDAPControl **cctrls );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12085>12085</a></td>\n' +
            '<td>void ldap_mods_free(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12086>12086</a></td>\n' +
            '<td>LDAPMod **mods,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12087>12087</a></td>\n' +
            '<td>int freemods );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12088>12088</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12089>12089</a></td>\n' +
            '<td>The routine ldap_modify_ext_s() is used to perform an LDAP modify operation. dn is the DN of the entry to modify, and mods is a null-terminated array of modifications to make to the entry. Each element of the mods array is a pointer to an LDAPMod structure, which is defined below.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12090>12090</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12091>12091</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12092>12092</a></td>\n' +
            '<td>typedef struct ldapmod {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12093>12093</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12094>12094</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12095>12095</a></td>\n' +
            '<td>int mod_op;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12096>12096</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12097>12097</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12098>12098</a></td>\n' +
            '<td>char *mod_type;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12099>12099</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12100>12100</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12101>12101</a></td>\n' +
            '<td>union {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12102>12102</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12103>12103</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12104>12104</a></td>\n' +
            '<td>char **modv_strvals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12105>12105</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12106>12106</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12107>12107</a></td>\n' +
            '<td>struct berval **modv_bvals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12108>12108</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12109>12109</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12110>12110</a></td>\n' +
            '<td>} mod_vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12111>12111</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12112>12112</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12113>12113</a></td>\n' +
            '<td>struct ldapmod *mod_next;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12114>12114</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12115>12115</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12116>12116</a></td>\n' +
            '<td>} LDAPMod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12117>12117</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12118>12118</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12119>12119</a></td>\n' +
            '<td>#define mod_values mod_vals.modv_strvals</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12120>12120</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12121>12121</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12122>12122</a></td>\n' +
            '<td>#define mod_bvalues mod_vals.modv_bvals</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12123>12123</a></td>\n' +
            '<td>The mod_op field is used to specify the type of modification to perform and should be one of LDAP_MOD_ADD, LDAP_MOD_DELETE, or LDAP_MOD_REPLACE. The mod_type and mod_values fields specify the attribute type to modify and a null-terminated array of values to add, delete, or replace respectively. The mod_next field is used only by the LDAP server and may be ignored by the client.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12124>12124</a></td>\n' +
            '<td>If you need to specify a non-string value (e.g., to add a photo or audio attribute value), you should set mod_op to the logical OR of the operation as above (e.g., LDAP_MOD_REPLACE) and the constant LDAP_MOD_BVALUES. In this case, mod_bvalues should be used instead of mod_values, and it should point to a null-terminated array of struct bervals, as defined in &lt;lber.h&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12125>12125</a></td>\n' +
            '<td>For LDAP_MOD_ADD modifications, the given values are added to the entry, creating the attribute if necessary. For LDAP_MOD_DELETE modifications, the given values are deleted from the entry, removing the attribute if no values remain. If the entire attribute is to be deleted, the mod_values field should be set to NULL. For LDAP_MOD_REPLACE modifications, the attribute will have the listed values after the modification, having been created if necessary. All modifications are performed in the order in which they are listed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12126>12126</a></td>\n' +
            '<td>ldap_mods_free() can be used to free each element of a NULL-terminated array of mod structures. If freemods is non-zero, the mods pointer itself is freed as well.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12127>12127</a></td>\n' +
            '<td>ldap_modify_ext_s() returns a code indicating success or, in the case of failure, indicating the nature of the failure. See ldap_error(3) for details</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12128>12128</a></td>\n' +
            '<td>The ldap_modify_ext() operation works the same way as ldap_modify_ext_s(), except that it is asynchronous. The integer that msgidp points to is set to the message id of the modify request. The result of the operation can be obtained by calling ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12129>12129</a></td>\n' +
            '<td>Both ldap_modify_ext() and ldap_modify_ext_s() allows server and client controls to be passed in via the sctrls and cctrls parameters, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12130>12130</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12131>12131</a></td>\n' +
            '<td>The ldap_modify() and ldap_modify_s() routines are deprecated in favor of the ldap_modify_ext() and ldap_modify_ext_s() routines, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12132>12132</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12133>12133</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12134>12134</a></td>\n' +
            '<td>ldap(3), ldap_error(3),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12135>12135</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12136>12136</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12137>12137</a></td>\n' +
            '<td>LDAP_MODRDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12138>12138</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12139>12139</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12140>12140</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12141>12141</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12142>12142</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12143>12143</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12144>12144</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12145>12145</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12146>12146</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12147>12147</a></td>\n' +
            '<td>ldap_modrdn, ldap_modrdn_s, ldap_modrdn2, ldap_modrdn2_s − Perform an LDAP modify RDN operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12148>12148</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12149>12149</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12150>12150</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12151>12151</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12152>12152</a></td>\n' +
            '<td>int ldap_modrdn(ld, dn, newrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12153>12153</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12154>12154</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12155>12155</a></td>\n' +
            '<td>int ldap_modrdn_s(ld, dn, newrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12156>12156</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12157>12157</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12158>12158</a></td>\n' +
            '<td>int ldap_modrdn2(ld, dn, newrdn, deleteoldrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12159>12159</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12160>12160</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12161>12161</a></td>\n' +
            '<td>int deleteoldrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12162>12162</a></td>\n' +
            '<td>int ldap_modrdn2_s(ld, dn, newrdn, deleteoldrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12163>12163</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12164>12164</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12165>12165</a></td>\n' +
            '<td>int deleteoldrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12166>12166</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12167>12167</a></td>\n' +
            '<td>The ldap_modrdn() and ldap_modrdn_s() routines perform an LDAP modify RDN operation. They both take dn, the DN of the entry whose RDN is to be changed, and newrdn, the new RDN to give the entry. The old RDN of the entry is never kept as an attribute of the entry. ldap_modrdn() is asynchronous, returning the message id of the operation it initiates. ldap_modrdn_s() is synchronous, returning the LDAP error code indicating the success or failure of the operation. Use of these routines is deprecated. Use the versions described below instead.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12168>12168</a></td>\n' +
            '<td>The ldap_modrdn2() and ldap_modrdn2_s() routines also perform an LDAP modify RDN operation, taking the same parameters as above. In addition, they both take the deleteoldrdn parameter which is used as a boolean value to indicate whether the old RDN values should be deleted from the entry or not.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12169>12169</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12170>12170</a></td>\n' +
            '<td>The synchronous (_s) versions of these routines return an LDAP error code, either LDAP_SUCCESS or an error if there was trouble. The asynchronous versions return −1 in case of trouble, setting the ld_errno field of ld. See ldap_error(3) for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12171>12171</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12172>12172</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12173>12173</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12174>12174</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12175>12175</a></td>\n' +
            '<td>LDAP_MODRDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12176>12176</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12177>12177</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12178>12178</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12179>12179</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12180>12180</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12181>12181</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12182>12182</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12183>12183</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12184>12184</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12185>12185</a></td>\n' +
            '<td>ldap_modrdn, ldap_modrdn_s, ldap_modrdn2, ldap_modrdn2_s − Perform an LDAP modify RDN operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12186>12186</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12187>12187</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12188>12188</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12189>12189</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12190>12190</a></td>\n' +
            '<td>int ldap_modrdn(ld, dn, newrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12191>12191</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12192>12192</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12193>12193</a></td>\n' +
            '<td>int ldap_modrdn_s(ld, dn, newrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12194>12194</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12195>12195</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12196>12196</a></td>\n' +
            '<td>int ldap_modrdn2(ld, dn, newrdn, deleteoldrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12197>12197</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12198>12198</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12199>12199</a></td>\n' +
            '<td>int deleteoldrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12200>12200</a></td>\n' +
            '<td>int ldap_modrdn2_s(ld, dn, newrdn, deleteoldrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12201>12201</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12202>12202</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12203>12203</a></td>\n' +
            '<td>int deleteoldrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12204>12204</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12205>12205</a></td>\n' +
            '<td>The ldap_modrdn() and ldap_modrdn_s() routines perform an LDAP modify RDN operation. They both take dn, the DN of the entry whose RDN is to be changed, and newrdn, the new RDN to give the entry. The old RDN of the entry is never kept as an attribute of the entry. ldap_modrdn() is asynchronous, returning the message id of the operation it initiates. ldap_modrdn_s() is synchronous, returning the LDAP error code indicating the success or failure of the operation. Use of these routines is deprecated. Use the versions described below instead.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12206>12206</a></td>\n' +
            '<td>The ldap_modrdn2() and ldap_modrdn2_s() routines also perform an LDAP modify RDN operation, taking the same parameters as above. In addition, they both take the deleteoldrdn parameter which is used as a boolean value to indicate whether the old RDN values should be deleted from the entry or not.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12207>12207</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12208>12208</a></td>\n' +
            '<td>The synchronous (_s) versions of these routines return an LDAP error code, either LDAP_SUCCESS or an error if there was trouble. The asynchronous versions return −1 in case of trouble, setting the ld_errno field of ld. See ldap_error(3) for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12209>12209</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12210>12210</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12211>12211</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12212>12212</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12213>12213</a></td>\n' +
            '<td>LDAP_MODRDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12214>12214</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12215>12215</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12216>12216</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12217>12217</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12218>12218</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12219>12219</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12220>12220</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12221>12221</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12222>12222</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12223>12223</a></td>\n' +
            '<td>ldap_modrdn, ldap_modrdn_s, ldap_modrdn2, ldap_modrdn2_s − Perform an LDAP modify RDN operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12224>12224</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12225>12225</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12226>12226</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12227>12227</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12228>12228</a></td>\n' +
            '<td>int ldap_modrdn(ld, dn, newrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12229>12229</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12230>12230</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12231>12231</a></td>\n' +
            '<td>int ldap_modrdn_s(ld, dn, newrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12232>12232</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12233>12233</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12234>12234</a></td>\n' +
            '<td>int ldap_modrdn2(ld, dn, newrdn, deleteoldrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12235>12235</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12236>12236</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12237>12237</a></td>\n' +
            '<td>int deleteoldrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12238>12238</a></td>\n' +
            '<td>int ldap_modrdn2_s(ld, dn, newrdn, deleteoldrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12239>12239</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12240>12240</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12241>12241</a></td>\n' +
            '<td>int deleteoldrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12242>12242</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12243>12243</a></td>\n' +
            '<td>The ldap_modrdn() and ldap_modrdn_s() routines perform an LDAP modify RDN operation. They both take dn, the DN of the entry whose RDN is to be changed, and newrdn, the new RDN to give the entry. The old RDN of the entry is never kept as an attribute of the entry. ldap_modrdn() is asynchronous, returning the message id of the operation it initiates. ldap_modrdn_s() is synchronous, returning the LDAP error code indicating the success or failure of the operation. Use of these routines is deprecated. Use the versions described below instead.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12244>12244</a></td>\n' +
            '<td>The ldap_modrdn2() and ldap_modrdn2_s() routines also perform an LDAP modify RDN operation, taking the same parameters as above. In addition, they both take the deleteoldrdn parameter which is used as a boolean value to indicate whether the old RDN values should be deleted from the entry or not.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12245>12245</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12246>12246</a></td>\n' +
            '<td>The synchronous (_s) versions of these routines return an LDAP error code, either LDAP_SUCCESS or an error if there was trouble. The asynchronous versions return −1 in case of trouble, setting the ld_errno field of ld. See ldap_error(3) for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12247>12247</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12248>12248</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12249>12249</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12250>12250</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12251>12251</a></td>\n' +
            '<td>LDAP_MODRDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12252>12252</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12253>12253</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12254>12254</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12255>12255</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12256>12256</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12257>12257</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12258>12258</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12259>12259</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12260>12260</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12261>12261</a></td>\n' +
            '<td>ldap_modrdn, ldap_modrdn_s, ldap_modrdn2, ldap_modrdn2_s − Perform an LDAP modify RDN operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12262>12262</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12263>12263</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12264>12264</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12265>12265</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12266>12266</a></td>\n' +
            '<td>int ldap_modrdn(ld, dn, newrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12267>12267</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12268>12268</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12269>12269</a></td>\n' +
            '<td>int ldap_modrdn_s(ld, dn, newrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12270>12270</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12271>12271</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12272>12272</a></td>\n' +
            '<td>int ldap_modrdn2(ld, dn, newrdn, deleteoldrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12273>12273</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12274>12274</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12275>12275</a></td>\n' +
            '<td>int deleteoldrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12276>12276</a></td>\n' +
            '<td>int ldap_modrdn2_s(ld, dn, newrdn, deleteoldrdn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12277>12277</a></td>\n' +
            '<td>LDAP ∗ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12278>12278</a></td>\n' +
            '<td>char ∗dn, ∗newrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12279>12279</a></td>\n' +
            '<td>int deleteoldrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12280>12280</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12281>12281</a></td>\n' +
            '<td>The ldap_modrdn() and ldap_modrdn_s() routines perform an LDAP modify RDN operation. They both take dn, the DN of the entry whose RDN is to be changed, and newrdn, the new RDN to give the entry. The old RDN of the entry is never kept as an attribute of the entry. ldap_modrdn() is asynchronous, returning the message id of the operation it initiates. ldap_modrdn_s() is synchronous, returning the LDAP error code indicating the success or failure of the operation. Use of these routines is deprecated. Use the versions described below instead.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12282>12282</a></td>\n' +
            '<td>The ldap_modrdn2() and ldap_modrdn2_s() routines also perform an LDAP modify RDN operation, taking the same parameters as above. In addition, they both take the deleteoldrdn parameter which is used as a boolean value to indicate whether the old RDN values should be deleted from the entry or not.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12283>12283</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12284>12284</a></td>\n' +
            '<td>The synchronous (_s) versions of these routines return an LDAP error code, either LDAP_SUCCESS or an error if there was trouble. The asynchronous versions return −1 in case of trouble, setting the ld_errno field of ld. See ldap_error(3) for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12285>12285</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12286>12286</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12287>12287</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12288>12288</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12289>12289</a></td>\n' +
            '<td>LDAP_MODIFY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12290>12290</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12291>12291</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12292>12292</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12293>12293</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12294>12294</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12295>12295</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12296>12296</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12297>12297</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12298>12298</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12299>12299</a></td>\n' +
            '<td>ldap_modify_ext, ldap_modify_ext_s − Perform an LDAP modify operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12300>12300</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12301>12301</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12302>12302</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12303>12303</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12304>12304</a></td>\n' +
            '<td>int ldap_modify_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12305>12305</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12306>12306</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12307>12307</a></td>\n' +
            '<td>LDAPMod *mods[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12308>12308</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12309>12309</a></td>\n' +
            '<td>LDAPControl **cctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12310>12310</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12311>12311</a></td>\n' +
            '<td>int ldap_modify_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12312>12312</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12313>12313</a></td>\n' +
            '<td>char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12314>12314</a></td>\n' +
            '<td>LDAPMod *mods[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12315>12315</a></td>\n' +
            '<td>LDAPControl **sctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12316>12316</a></td>\n' +
            '<td>LDAPControl **cctrls );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12317>12317</a></td>\n' +
            '<td>void ldap_mods_free(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12318>12318</a></td>\n' +
            '<td>LDAPMod **mods,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12319>12319</a></td>\n' +
            '<td>int freemods );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12320>12320</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12321>12321</a></td>\n' +
            '<td>The routine ldap_modify_ext_s() is used to perform an LDAP modify operation. dn is the DN of the entry to modify, and mods is a null-terminated array of modifications to make to the entry. Each element of the mods array is a pointer to an LDAPMod structure, which is defined below.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12322>12322</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12323>12323</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12324>12324</a></td>\n' +
            '<td>typedef struct ldapmod {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12325>12325</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12326>12326</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12327>12327</a></td>\n' +
            '<td>int mod_op;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12328>12328</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12329>12329</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12330>12330</a></td>\n' +
            '<td>char *mod_type;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12331>12331</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12332>12332</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12333>12333</a></td>\n' +
            '<td>union {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12334>12334</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12335>12335</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12336>12336</a></td>\n' +
            '<td>char **modv_strvals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12337>12337</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12338>12338</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12339>12339</a></td>\n' +
            '<td>struct berval **modv_bvals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12340>12340</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12341>12341</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12342>12342</a></td>\n' +
            '<td>} mod_vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12343>12343</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12344>12344</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12345>12345</a></td>\n' +
            '<td>struct ldapmod *mod_next;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12346>12346</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12347>12347</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12348>12348</a></td>\n' +
            '<td>} LDAPMod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12349>12349</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12350>12350</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12351>12351</a></td>\n' +
            '<td>#define mod_values mod_vals.modv_strvals</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12352>12352</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12353>12353</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12354>12354</a></td>\n' +
            '<td>#define mod_bvalues mod_vals.modv_bvals</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12355>12355</a></td>\n' +
            '<td>The mod_op field is used to specify the type of modification to perform and should be one of LDAP_MOD_ADD, LDAP_MOD_DELETE, or LDAP_MOD_REPLACE. The mod_type and mod_values fields specify the attribute type to modify and a null-terminated array of values to add, delete, or replace respectively. The mod_next field is used only by the LDAP server and may be ignored by the client.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12356>12356</a></td>\n' +
            '<td>If you need to specify a non-string value (e.g., to add a photo or audio attribute value), you should set mod_op to the logical OR of the operation as above (e.g., LDAP_MOD_REPLACE) and the constant LDAP_MOD_BVALUES. In this case, mod_bvalues should be used instead of mod_values, and it should point to a null-terminated array of struct bervals, as defined in &lt;lber.h&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12357>12357</a></td>\n' +
            '<td>For LDAP_MOD_ADD modifications, the given values are added to the entry, creating the attribute if necessary. For LDAP_MOD_DELETE modifications, the given values are deleted from the entry, removing the attribute if no values remain. If the entire attribute is to be deleted, the mod_values field should be set to NULL. For LDAP_MOD_REPLACE modifications, the attribute will have the listed values after the modification, having been created if necessary. All modifications are performed in the order in which they are listed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12358>12358</a></td>\n' +
            '<td>ldap_mods_free() can be used to free each element of a NULL-terminated array of mod structures. If freemods is non-zero, the mods pointer itself is freed as well.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12359>12359</a></td>\n' +
            '<td>ldap_modify_ext_s() returns a code indicating success or, in the case of failure, indicating the nature of the failure. See ldap_error(3) for details</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12360>12360</a></td>\n' +
            '<td>The ldap_modify_ext() operation works the same way as ldap_modify_ext_s(), except that it is asynchronous. The integer that msgidp points to is set to the message id of the modify request. The result of the operation can be obtained by calling ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12361>12361</a></td>\n' +
            '<td>Both ldap_modify_ext() and ldap_modify_ext_s() allows server and client controls to be passed in via the sctrls and cctrls parameters, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12362>12362</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12363>12363</a></td>\n' +
            '<td>The ldap_modify() and ldap_modify_s() routines are deprecated in favor of the ldap_modify_ext() and ldap_modify_ext_s() routines, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12364>12364</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12365>12365</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12366>12366</a></td>\n' +
            '<td>ldap(3), ldap_error(3),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12367>12367</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12368>12368</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12369>12369</a></td>\n' +
            '<td>LDAP_RESULT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12370>12370</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12371>12371</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12372>12372</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12373>12373</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12374>12374</a></td>\n' +
            '<td>RETURN VALUE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12375>12375</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12376>12376</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12377>12377</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12378>12378</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12379>12379</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12380>12380</a></td>\n' +
            '<td>ldap_result − Wait for the result of an LDAP operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12381>12381</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12382>12382</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12383>12383</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12384>12384</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12385>12385</a></td>\n' +
            '<td>int ldap_result( LDAP *ld, int msgid, int all,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12386>12386</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12387>12387</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12388>12388</a></td>\n' +
            '<td>struct timeval *timeout, LDAPMessage **result );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12389>12389</a></td>\n' +
            '<td>int ldap_msgfree( LDAPMessage *msg );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12390>12390</a></td>\n' +
            '<td>int ldap_msgtype( LDAPMessage *msg );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12391>12391</a></td>\n' +
            '<td>int ldap_msgid( LDAPMessage *msg );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12392>12392</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12393>12393</a></td>\n' +
            '<td>The ldap_result() routine is used to wait for and return the result of an operation previously initiated by one of the LDAP asynchronous operation routines (e.g., ldap_search_ext(3), ldap_modify_ext(3), etc.). Those routines all return −1 in case of error, and an invocation identifier upon successful initiation of the operation. The invocation identifier is picked by the library and is guaranteed to be unique across the LDAP session. It can be used to request the result of a specific operation from ldap_result() through the msgid parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12394>12394</a></td>\n' +
            '<td>The ldap_result() routine will block or not, depending upon the setting of the timeout parameter. If timeout is not a NULL pointer, it specifies a maximum interval to wait for the selection to complete. If timeout is a NULL pointer, the LDAP_OPT_TIMEOUT value set by ldap_set_option(3) is used. With the default setting, the select blocks indefinitely. To effect a poll, the timeout argument should be a non-NULL pointer, pointing to a zero-valued timeval structure. To obtain the behavior of the default setting, bypassing any value set by ldap_set_option(3), set to -1 the tv_sec field of the timeout parameter. See select(2) for further details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12395>12395</a></td>\n' +
            '<td>If the result of a specific operation is required, msgid should be set to the invocation identifier returned when the operation was initiated, otherwise LDAP_RES_ANY or LDAP_RES_UNSOLICITED should be supplied to wait for any or unsolicited response.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12396>12396</a></td>\n' +
            '<td>The all parameter, if non-zero, causes ldap_result() to return all responses with msgid, otherwise only the next response is returned. This is commonly used to obtain all the responses of a search operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12397>12397</a></td>\n' +
            '<td>A search response is made up of zero or more search entries, zero or more search references, and zero or more extended partial responses followed by a search result. If all is set to 0, search entries will be returned one at a time as they come in, via separate calls to ldap_result(). If it’s set to 1, the search response will only be returned in its entirety, i.e., after all entries, all references, all extended partial responses, and the final search result have been received.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12398>12398</a></td>\n' +
            '<td>RETURN VALUE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12399>12399</a></td>\n' +
            '<td>Upon success, the type of the result received is returned and the result parameter will contain the result of the operation; otherwise, the result parameter is undefined. This result should be passed to the LDAP parsing routines, ldap_first_message(3) and friends, for interpretation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12400>12400</a></td>\n' +
            '<td>The possible result types returned are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12401>12401</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12402>12402</a></td>\n' +
            '<td>LDAP_RES_BIND (0x61)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12403>12403</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12404>12404</a></td>\n' +
            '<td>LDAP_RES_SEARCH_ENTRY (0x64)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12405>12405</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12406>12406</a></td>\n' +
            '<td>LDAP_RES_SEARCH_REFERENCE (0x73)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12407>12407</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12408>12408</a></td>\n' +
            '<td>LDAP_RES_SEARCH_RESULT (0x65)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12409>12409</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12410>12410</a></td>\n' +
            '<td>LDAP_RES_MODIFY (0x67)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12411>12411</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12412>12412</a></td>\n' +
            '<td>LDAP_RES_ADD (0x69)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12413>12413</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12414>12414</a></td>\n' +
            '<td>LDAP_RES_DELETE (0x6b)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12415>12415</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12416>12416</a></td>\n' +
            '<td>LDAP_RES_MODDN (0x6d)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12417>12417</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12418>12418</a></td>\n' +
            '<td>LDAP_RES_COMPARE (0x6f)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12419>12419</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12420>12420</a></td>\n' +
            '<td>LDAP_RES_EXTENDED (0x78)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12421>12421</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12422>12422</a></td>\n' +
            '<td>LDAP_RES_INTERMEDIATE (0x79)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12423>12423</a></td>\n' +
            '<td>The ldap_msgfree() routine is used to free the memory allocated for result(s) by ldap_result() or ldap_search_ext_s(3) and friends. It takes a pointer to the result or result chain to be freed and returns the type of the last message in the chain. If the parameter is NULL, the function does nothing and returns zero.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12424>12424</a></td>\n' +
            '<td>The ldap_msgtype() routine returns the type of a message.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12425>12425</a></td>\n' +
            '<td>The ldap_msgid() routine returns the message id of a message.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12426>12426</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12427>12427</a></td>\n' +
            '<td>ldap_result() returns −1 if something bad happens, and zero if the timeout specified was exceeded. ldap_msgtype() and ldap_msgid() return −1 on error.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12428>12428</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12429>12429</a></td>\n' +
            '<td>ldap(3), ldap_first_message(3), select(2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12430>12430</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12431>12431</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12432>12432</a></td>\n' +
            '<td>LDAP_RESULT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12433>12433</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12434>12434</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12435>12435</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12436>12436</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12437>12437</a></td>\n' +
            '<td>RETURN VALUE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12438>12438</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12439>12439</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12440>12440</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12441>12441</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12442>12442</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12443>12443</a></td>\n' +
            '<td>ldap_result − Wait for the result of an LDAP operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12444>12444</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12445>12445</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12446>12446</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12447>12447</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12448>12448</a></td>\n' +
            '<td>int ldap_result( LDAP *ld, int msgid, int all,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12449>12449</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12450>12450</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12451>12451</a></td>\n' +
            '<td>struct timeval *timeout, LDAPMessage **result );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12452>12452</a></td>\n' +
            '<td>int ldap_msgfree( LDAPMessage *msg );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12453>12453</a></td>\n' +
            '<td>int ldap_msgtype( LDAPMessage *msg );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12454>12454</a></td>\n' +
            '<td>int ldap_msgid( LDAPMessage *msg );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12455>12455</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12456>12456</a></td>\n' +
            '<td>The ldap_result() routine is used to wait for and return the result of an operation previously initiated by one of the LDAP asynchronous operation routines (e.g., ldap_search_ext(3), ldap_modify_ext(3), etc.). Those routines all return −1 in case of error, and an invocation identifier upon successful initiation of the operation. The invocation identifier is picked by the library and is guaranteed to be unique across the LDAP session. It can be used to request the result of a specific operation from ldap_result() through the msgid parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12457>12457</a></td>\n' +
            '<td>The ldap_result() routine will block or not, depending upon the setting of the timeout parameter. If timeout is not a NULL pointer, it specifies a maximum interval to wait for the selection to complete. If timeout is a NULL pointer, the LDAP_OPT_TIMEOUT value set by ldap_set_option(3) is used. With the default setting, the select blocks indefinitely. To effect a poll, the timeout argument should be a non-NULL pointer, pointing to a zero-valued timeval structure. To obtain the behavior of the default setting, bypassing any value set by ldap_set_option(3), set to -1 the tv_sec field of the timeout parameter. See select(2) for further details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12458>12458</a></td>\n' +
            '<td>If the result of a specific operation is required, msgid should be set to the invocation identifier returned when the operation was initiated, otherwise LDAP_RES_ANY or LDAP_RES_UNSOLICITED should be supplied to wait for any or unsolicited response.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12459>12459</a></td>\n' +
            '<td>The all parameter, if non-zero, causes ldap_result() to return all responses with msgid, otherwise only the next response is returned. This is commonly used to obtain all the responses of a search operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12460>12460</a></td>\n' +
            '<td>A search response is made up of zero or more search entries, zero or more search references, and zero or more extended partial responses followed by a search result. If all is set to 0, search entries will be returned one at a time as they come in, via separate calls to ldap_result(). If it’s set to 1, the search response will only be returned in its entirety, i.e., after all entries, all references, all extended partial responses, and the final search result have been received.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12461>12461</a></td>\n' +
            '<td>RETURN VALUE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12462>12462</a></td>\n' +
            '<td>Upon success, the type of the result received is returned and the result parameter will contain the result of the operation; otherwise, the result parameter is undefined. This result should be passed to the LDAP parsing routines, ldap_first_message(3) and friends, for interpretation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12463>12463</a></td>\n' +
            '<td>The possible result types returned are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12464>12464</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12465>12465</a></td>\n' +
            '<td>LDAP_RES_BIND (0x61)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12466>12466</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12467>12467</a></td>\n' +
            '<td>LDAP_RES_SEARCH_ENTRY (0x64)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12468>12468</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12469>12469</a></td>\n' +
            '<td>LDAP_RES_SEARCH_REFERENCE (0x73)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12470>12470</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12471>12471</a></td>\n' +
            '<td>LDAP_RES_SEARCH_RESULT (0x65)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12472>12472</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12473>12473</a></td>\n' +
            '<td>LDAP_RES_MODIFY (0x67)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12474>12474</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12475>12475</a></td>\n' +
            '<td>LDAP_RES_ADD (0x69)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12476>12476</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12477>12477</a></td>\n' +
            '<td>LDAP_RES_DELETE (0x6b)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12478>12478</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12479>12479</a></td>\n' +
            '<td>LDAP_RES_MODDN (0x6d)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12480>12480</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12481>12481</a></td>\n' +
            '<td>LDAP_RES_COMPARE (0x6f)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12482>12482</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12483>12483</a></td>\n' +
            '<td>LDAP_RES_EXTENDED (0x78)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12484>12484</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12485>12485</a></td>\n' +
            '<td>LDAP_RES_INTERMEDIATE (0x79)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12486>12486</a></td>\n' +
            '<td>The ldap_msgfree() routine is used to free the memory allocated for result(s) by ldap_result() or ldap_search_ext_s(3) and friends. It takes a pointer to the result or result chain to be freed and returns the type of the last message in the chain. If the parameter is NULL, the function does nothing and returns zero.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12487>12487</a></td>\n' +
            '<td>The ldap_msgtype() routine returns the type of a message.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12488>12488</a></td>\n' +
            '<td>The ldap_msgid() routine returns the message id of a message.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12489>12489</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12490>12490</a></td>\n' +
            '<td>ldap_result() returns −1 if something bad happens, and zero if the timeout specified was exceeded. ldap_msgtype() and ldap_msgid() return −1 on error.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12491>12491</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12492>12492</a></td>\n' +
            '<td>ldap(3), ldap_first_message(3), select(2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12493>12493</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12494>12494</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12495>12495</a></td>\n' +
            '<td>LDAP_RESULT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12496>12496</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12497>12497</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12498>12498</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12499>12499</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12500>12500</a></td>\n' +
            '<td>RETURN VALUE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12501>12501</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12502>12502</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12503>12503</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12504>12504</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12505>12505</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12506>12506</a></td>\n' +
            '<td>ldap_result − Wait for the result of an LDAP operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12507>12507</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12508>12508</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12509>12509</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12510>12510</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12511>12511</a></td>\n' +
            '<td>int ldap_result( LDAP *ld, int msgid, int all,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12512>12512</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12513>12513</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12514>12514</a></td>\n' +
            '<td>struct timeval *timeout, LDAPMessage **result );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12515>12515</a></td>\n' +
            '<td>int ldap_msgfree( LDAPMessage *msg );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12516>12516</a></td>\n' +
            '<td>int ldap_msgtype( LDAPMessage *msg );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12517>12517</a></td>\n' +
            '<td>int ldap_msgid( LDAPMessage *msg );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12518>12518</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12519>12519</a></td>\n' +
            '<td>The ldap_result() routine is used to wait for and return the result of an operation previously initiated by one of the LDAP asynchronous operation routines (e.g., ldap_search_ext(3), ldap_modify_ext(3), etc.). Those routines all return −1 in case of error, and an invocation identifier upon successful initiation of the operation. The invocation identifier is picked by the library and is guaranteed to be unique across the LDAP session. It can be used to request the result of a specific operation from ldap_result() through the msgid parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12520>12520</a></td>\n' +
            '<td>The ldap_result() routine will block or not, depending upon the setting of the timeout parameter. If timeout is not a NULL pointer, it specifies a maximum interval to wait for the selection to complete. If timeout is a NULL pointer, the LDAP_OPT_TIMEOUT value set by ldap_set_option(3) is used. With the default setting, the select blocks indefinitely. To effect a poll, the timeout argument should be a non-NULL pointer, pointing to a zero-valued timeval structure. To obtain the behavior of the default setting, bypassing any value set by ldap_set_option(3), set to -1 the tv_sec field of the timeout parameter. See select(2) for further details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12521>12521</a></td>\n' +
            '<td>If the result of a specific operation is required, msgid should be set to the invocation identifier returned when the operation was initiated, otherwise LDAP_RES_ANY or LDAP_RES_UNSOLICITED should be supplied to wait for any or unsolicited response.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12522>12522</a></td>\n' +
            '<td>The all parameter, if non-zero, causes ldap_result() to return all responses with msgid, otherwise only the next response is returned. This is commonly used to obtain all the responses of a search operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12523>12523</a></td>\n' +
            '<td>A search response is made up of zero or more search entries, zero or more search references, and zero or more extended partial responses followed by a search result. If all is set to 0, search entries will be returned one at a time as they come in, via separate calls to ldap_result(). If it’s set to 1, the search response will only be returned in its entirety, i.e., after all entries, all references, all extended partial responses, and the final search result have been received.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12524>12524</a></td>\n' +
            '<td>RETURN VALUE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12525>12525</a></td>\n' +
            '<td>Upon success, the type of the result received is returned and the result parameter will contain the result of the operation; otherwise, the result parameter is undefined. This result should be passed to the LDAP parsing routines, ldap_first_message(3) and friends, for interpretation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12526>12526</a></td>\n' +
            '<td>The possible result types returned are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12527>12527</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12528>12528</a></td>\n' +
            '<td>LDAP_RES_BIND (0x61)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12529>12529</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12530>12530</a></td>\n' +
            '<td>LDAP_RES_SEARCH_ENTRY (0x64)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12531>12531</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12532>12532</a></td>\n' +
            '<td>LDAP_RES_SEARCH_REFERENCE (0x73)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12533>12533</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12534>12534</a></td>\n' +
            '<td>LDAP_RES_SEARCH_RESULT (0x65)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12535>12535</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12536>12536</a></td>\n' +
            '<td>LDAP_RES_MODIFY (0x67)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12537>12537</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12538>12538</a></td>\n' +
            '<td>LDAP_RES_ADD (0x69)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12539>12539</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12540>12540</a></td>\n' +
            '<td>LDAP_RES_DELETE (0x6b)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12541>12541</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12542>12542</a></td>\n' +
            '<td>LDAP_RES_MODDN (0x6d)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12543>12543</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12544>12544</a></td>\n' +
            '<td>LDAP_RES_COMPARE (0x6f)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12545>12545</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12546>12546</a></td>\n' +
            '<td>LDAP_RES_EXTENDED (0x78)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12547>12547</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12548>12548</a></td>\n' +
            '<td>LDAP_RES_INTERMEDIATE (0x79)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12549>12549</a></td>\n' +
            '<td>The ldap_msgfree() routine is used to free the memory allocated for result(s) by ldap_result() or ldap_search_ext_s(3) and friends. It takes a pointer to the result or result chain to be freed and returns the type of the last message in the chain. If the parameter is NULL, the function does nothing and returns zero.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12550>12550</a></td>\n' +
            '<td>The ldap_msgtype() routine returns the type of a message.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12551>12551</a></td>\n' +
            '<td>The ldap_msgid() routine returns the message id of a message.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12552>12552</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12553>12553</a></td>\n' +
            '<td>ldap_result() returns −1 if something bad happens, and zero if the timeout specified was exceeded. ldap_msgtype() and ldap_msgid() return −1 on error.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12554>12554</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12555>12555</a></td>\n' +
            '<td>ldap(3), ldap_first_message(3), select(2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12556>12556</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12557>12557</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12558>12558</a></td>\n' +
            '<td>LDAP_FIRST_ATTRIBUTE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12559>12559</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12560>12560</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12561>12561</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12562>12562</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12563>12563</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12564>12564</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12565>12565</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12566>12566</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12567>12567</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12568>12568</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12569>12569</a></td>\n' +
            '<td>ldap_first_attribute, ldap_next_attribute − step through LDAP entry attributes</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12570>12570</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12571>12571</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12572>12572</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12573>12573</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12574>12574</a></td>\n' +
            '<td>char *ldap_first_attribute(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12575>12575</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12576>12576</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12577>12577</a></td>\n' +
            '<td>LDAP *ld, LDAPMessage *entry, BerElement **berptr )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12578>12578</a></td>\n' +
            '<td>char *ldap_next_attribute(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12579>12579</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12580>12580</a></td>\n' +
            '<td>LDAP *ld, LDAPMessage *entry, BerElement *ber )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12581>12581</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12582>12582</a></td>\n' +
            '<td>The ldap_first_attribute() and ldap_next_attribute() routines are used to step through the attributes in an LDAP entry. ldap_first_attribute() takes an entry as returned by ldap_first_entry(3) or ldap_next_entry(3) and returns a pointer to character string containing the first attribute description in the entry. ldap_next_attribute() returns the next attribute description in the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12583>12583</a></td>\n' +
            '<td>It also returns, in berptr, a pointer to a BerElement it has allocated to keep track of its current position. This pointer should be passed to subsequent calls to ldap_next_attribute() and is used to effectively step through the entry’s attributes. The caller is solely responsible for freeing the BerElement pointed to by berptr when it is no longer needed by calling ber_free(3). When calling ber_free(3) in this instance, be sure the second argument is 0.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12584>12584</a></td>\n' +
            '<td>The attribute names returned are suitable for inclusion in a call to ldap_get_values(3) to retrieve the attribute’s values.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12585>12585</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12586>12586</a></td>\n' +
            '<td>If an error occurs, NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12587>12587</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12588>12588</a></td>\n' +
            '<td>The ldap_first_attribute() and ldap_next_attribute() return dynamically allocated memory that must be freed by the caller via ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12589>12589</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12590>12590</a></td>\n' +
            '<td>ldap(3), ldap_first_entry(3), ldap_get_values(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12591>12591</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12592>12592</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12593>12593</a></td>\n' +
            '<td>LDAP_FIRST_ENTRY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12594>12594</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12595>12595</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12596>12596</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12597>12597</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12598>12598</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12599>12599</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12600>12600</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12601>12601</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12602>12602</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12603>12603</a></td>\n' +
            '<td>ldap_first_entry, ldap_next_entry, ldap_count_entries − LDAP result entry parsing and counting routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12604>12604</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12605>12605</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12606>12606</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12607>12607</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12608>12608</a></td>\n' +
            '<td>int ldap_count_entries( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12609>12609</a></td>\n' +
            '<td>LDAPMessage *ldap_first_entry( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12610>12610</a></td>\n' +
            '<td>LDAPMessage *ldap_next_entry( LDAP *ld, LDAPMessage *entry )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12611>12611</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12612>12612</a></td>\n' +
            '<td>These routines are used to parse results received from ldap_result(3) or the synchronous LDAP search operation routines ldap_search_s(3) and ldap_search_st(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12613>12613</a></td>\n' +
            '<td>The ldap_first_entry() routine is used to retrieve the first entry in a chain of search results. It takes the result as returned by a call to ldap_result(3) or ldap_search_s(3) or ldap_search_st(3) and returns a pointer to the first entry in the result.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12614>12614</a></td>\n' +
            '<td>This pointer should be supplied on a subsequent call to ldap_next_entry() to get the next entry, the result of which should be supplied to the next call to ldap_next_entry(), etc. ldap_next_entry() will return NULL when there are no more entries. The entries returned from these calls are used in calls to the routines described in ldap_get_dn(3), ldap_first_attribute(3), ldap_get_values(3), etc.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12615>12615</a></td>\n' +
            '<td>A count of the number of entries in the search result can be obtained by calling ldap_count_entries().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12616>12616</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12617>12617</a></td>\n' +
            '<td>If an error occurs in ldap_first_entry() or ldap_next_entry(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. If an error occurs in ldap_count_entries(), -1 is returned, and ld_errno is set appropriately. See ldap_error(3) for a description of possible error codes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12618>12618</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12619>12619</a></td>\n' +
            '<td>ldap(3), ldap_result(3), ldap_search(3), ldap_first_attribute(3), ldap_get_values(3), ldap_get_dn(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12620>12620</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12621>12621</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12622>12622</a></td>\n' +
            '<td>LDAP_FIRST_MESSAGE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12623>12623</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12624>12624</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12625>12625</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12626>12626</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12627>12627</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12628>12628</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12629>12629</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12630>12630</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12631>12631</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12632>12632</a></td>\n' +
            '<td>ldap_first_message, ldap_next_message, ldap_count_messages − Stepping through messages in a result chain</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12633>12633</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12634>12634</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12635>12635</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12636>12636</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12637>12637</a></td>\n' +
            '<td>int ldap_count_messages( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12638>12638</a></td>\n' +
            '<td>LDAPMessage *ldap_first_message( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12639>12639</a></td>\n' +
            '<td>LDAPMessage *ldap_next_message( LDAP *ld, LDAPMessage *message )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12640>12640</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12641>12641</a></td>\n' +
            '<td>These routines are used to step through the messages in a result chain received from ldap_result(3). For search operations, the result chain can contain referral, entry and result messages. The ldap_msgtype(3) function can be used to distinguish between the different message types.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12642>12642</a></td>\n' +
            '<td>The ldap_first_message() routine is used to retrieve the first message in a result chain. It takes the result as returned by a call to ldap_result(3), ldap_search_s(3) or ldap_search_st(3) and returns a pointer to the first message in the result chain.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12643>12643</a></td>\n' +
            '<td>This pointer should be supplied on a subsequent call to ldap_next_message() to get the next message, the result of which should be supplied to the next call to ldap_next_message(), etc. ldap_next_message() will return NULL when there are no more messages.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12644>12644</a></td>\n' +
            '<td>These functions are useful when using routines like ldap_parse_result(3) that only operate on the first result in the chain.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12645>12645</a></td>\n' +
            '<td>A count of the number of messages in the result chain can be obtained by calling ldap_count_messages(). It can also be used to count the number of remaining messages in a chain if called with a message, entry or reference returned by ldap_first_message() , ldap_next_message() , ldap_first_entry(3), ldap_next_entry(3), ldap_first_reference(3), ldap_next_reference(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12646>12646</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12647>12647</a></td>\n' +
            '<td>If an error occurs in ldap_first_message() or ldap_next_message(), NULL is returned. If an error occurs in ldap_count_messages(), -1 is returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12648>12648</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12649>12649</a></td>\n' +
            '<td>ldap(3), ldap_search(3), ldap_result(3), ldap_parse_result(3), ldap_first_entry(3), ldap_first_reference(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12650>12650</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12651>12651</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12652>12652</a></td>\n' +
            '<td>LDAP_FIRST_REFERENCE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12653>12653</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12654>12654</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12655>12655</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12656>12656</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12657>12657</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12658>12658</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12659>12659</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12660>12660</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12661>12661</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12662>12662</a></td>\n' +
            '<td>ldap_first_reference, ldap_next_reference, ldap_count_references − Stepping through continuation references in a result chain</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12663>12663</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12664>12664</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12665>12665</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12666>12666</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12667>12667</a></td>\n' +
            '<td>int ldap_count_references( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12668>12668</a></td>\n' +
            '<td>LDAPMessage *ldap_first_reference( LDAP *ld, LDAPMessage *result )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12669>12669</a></td>\n' +
            '<td>LDAPMessage *ldap_next_reference( LDAP *ld, LDAPMessage *reference )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12670>12670</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12671>12671</a></td>\n' +
            '<td>These routines are used to step through the continuation references in a result chain received from ldap_result(3) or the synchronous LDAP search operation routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12672>12672</a></td>\n' +
            '<td>The ldap_first_reference() routine is used to retrieve the first reference message in a result chain. It takes the result as returned by a call to ldap_result(3), ldap_search_s(3) or ldap_search_st(3) and returns a pointer to the first reference message in the result chain.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12673>12673</a></td>\n' +
            '<td>This pointer should be supplied on a subsequent call to ldap_next_reference() to get the next reference message, the result of which should be supplied to the next call to ldap_next_reference(), etc. ldap_next_reference() will return NULL when there are no more reference messages. The reference messages returned from these calls are used by ldap_parse_reference(3) to extract referrals and controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12674>12674</a></td>\n' +
            '<td>A count of the number of reference messages in the search result can be obtained by calling ldap_count_references(). It can also be used to count the number of reference messages remaining in a result chain.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12675>12675</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12676>12676</a></td>\n' +
            '<td>If an error occurs in ldap_first_reference() or ldap_next_reference(), NULL is returned. If an error occurs in ldap_count_references(), -1 is returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12677>12677</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12678>12678</a></td>\n' +
            '<td>ldap(3), ldap_result(3), ldap_search(3), ldap_parse_reference(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12679>12679</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12680>12680</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12681>12681</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12682>12682</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12683>12683</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12684>12684</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12685>12685</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12686>12686</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12687>12687</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12688>12688</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12689>12689</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12690>12690</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12691>12691</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12692>12692</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12693>12693</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12694>12694</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12695>12695</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12696>12696</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12697>12697</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12698>12698</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12699>12699</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12700>12700</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12701>12701</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12702>12702</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12703>12703</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12704>12704</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12705>12705</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12706>12706</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12707>12707</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12708>12708</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12709>12709</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12710>12710</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12711>12711</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12712>12712</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12713>12713</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12714>12714</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12715>12715</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12716>12716</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12717>12717</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12718>12718</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12719>12719</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12720>12720</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12721>12721</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12722>12722</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12723>12723</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12724>12724</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12725>12725</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12726>12726</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12727>12727</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12728>12728</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12729>12729</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12730>12730</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12731>12731</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12732>12732</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12733>12733</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12734>12734</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12735>12735</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12736>12736</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12737>12737</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12738>12738</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12739>12739</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12740>12740</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12741>12741</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12742>12742</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12743>12743</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12744>12744</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12745>12745</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12746>12746</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12747>12747</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12748>12748</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12749>12749</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12750>12750</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12751>12751</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12752>12752</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12753>12753</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12754>12754</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12755>12755</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12756>12756</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12757>12757</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12758>12758</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12759>12759</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12760>12760</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12761>12761</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12762>12762</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12763>12763</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12764>12764</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12765>12765</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12766>12766</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12767>12767</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12768>12768</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12769>12769</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12770>12770</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12771>12771</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12772>12772</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12773>12773</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12774>12774</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12775>12775</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12776>12776</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12777>12777</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12778>12778</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12779>12779</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12780>12780</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12781>12781</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12782>12782</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12783>12783</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12784>12784</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12785>12785</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12786>12786</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12787>12787</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12788>12788</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12789>12789</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12790>12790</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12791>12791</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12792>12792</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12793>12793</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12794>12794</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12795>12795</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12796>12796</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12797>12797</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12798>12798</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12799>12799</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12800>12800</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12801>12801</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12802>12802</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12803>12803</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12804>12804</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12805>12805</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12806>12806</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12807>12807</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12808>12808</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12809>12809</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12810>12810</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12811>12811</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12812>12812</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12813>12813</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12814>12814</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12815>12815</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12816>12816</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12817>12817</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12818>12818</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12819>12819</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12820>12820</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12821>12821</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12822>12822</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12823>12823</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12824>12824</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12825>12825</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12826>12826</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12827>12827</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12828>12828</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12829>12829</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12830>12830</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12831>12831</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12832>12832</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12833>12833</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12834>12834</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12835>12835</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12836>12836</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12837>12837</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12838>12838</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12839>12839</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12840>12840</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12841>12841</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12842>12842</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12843>12843</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12844>12844</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12845>12845</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12846>12846</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12847>12847</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12848>12848</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12849>12849</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12850>12850</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12851>12851</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12852>12852</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12853>12853</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12854>12854</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12855>12855</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12856>12856</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12857>12857</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12858>12858</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12859>12859</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12860>12860</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12861>12861</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12862>12862</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12863>12863</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12864>12864</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12865>12865</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12866>12866</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12867>12867</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12868>12868</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12869>12869</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12870>12870</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12871>12871</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12872>12872</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12873>12873</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12874>12874</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12875>12875</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12876>12876</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12877>12877</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12878>12878</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12879>12879</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12880>12880</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12881>12881</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12882>12882</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12883>12883</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12884>12884</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12885>12885</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12886>12886</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12887>12887</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12888>12888</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12889>12889</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12890>12890</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12891>12891</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12892>12892</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12893>12893</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12894>12894</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12895>12895</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12896>12896</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12897>12897</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12898>12898</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12899>12899</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12900>12900</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12901>12901</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12902>12902</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12903>12903</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12904>12904</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12905>12905</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12906>12906</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12907>12907</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12908>12908</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12909>12909</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12910>12910</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12911>12911</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12912>12912</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12913>12913</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12914>12914</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12915>12915</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12916>12916</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12917>12917</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12918>12918</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12919>12919</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12920>12920</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12921>12921</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12922>12922</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12923>12923</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12924>12924</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12925>12925</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12926>12926</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12927>12927</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12928>12928</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12929>12929</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12930>12930</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12931>12931</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12932>12932</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12933>12933</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12934>12934</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12935>12935</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12936>12936</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12937>12937</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12938>12938</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12939>12939</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12940>12940</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12941>12941</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12942>12942</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12943>12943</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12944>12944</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12945>12945</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12946>12946</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12947>12947</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12948>12948</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12949>12949</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12950>12950</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12951>12951</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12952>12952</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12953>12953</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12954>12954</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12955>12955</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12956>12956</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12957>12957</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12958>12958</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12959>12959</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12960>12960</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12961>12961</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12962>12962</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12963>12963</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12964>12964</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12965>12965</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12966>12966</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12967>12967</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12968>12968</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12969>12969</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12970>12970</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12971>12971</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12972>12972</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12973>12973</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12974>12974</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12975>12975</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12976>12976</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12977>12977</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12978>12978</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12979>12979</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12980>12980</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12981>12981</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12982>12982</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12983>12983</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12984>12984</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12985>12985</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12986>12986</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12987>12987</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12988>12988</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12989>12989</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12990>12990</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12991>12991</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12992>12992</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12993>12993</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12994>12994</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12995>12995</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12996>12996</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12997>12997</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12998>12998</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=12999>12999</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13000>13000</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13001>13001</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13002>13002</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13003>13003</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13004>13004</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13005>13005</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13006>13006</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13007>13007</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13008>13008</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13009>13009</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13010>13010</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13011>13011</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13012>13012</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13013>13013</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13014>13014</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13015>13015</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13016>13016</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13017>13017</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13018>13018</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13019>13019</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13020>13020</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13021>13021</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13022>13022</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13023>13023</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13024>13024</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13025>13025</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13026>13026</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13027>13027</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13028>13028</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13029>13029</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13030>13030</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13031>13031</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13032>13032</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13033>13033</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13034>13034</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13035>13035</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13036>13036</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13037>13037</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13038>13038</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13039>13039</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13040>13040</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13041>13041</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13042>13042</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13043>13043</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13044>13044</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13045>13045</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13046>13046</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13047>13047</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13048>13048</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13049>13049</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13050>13050</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13051>13051</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13052>13052</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13053>13053</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13054>13054</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13055>13055</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13056>13056</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13057>13057</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13058>13058</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13059>13059</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13060>13060</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13061>13061</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13062>13062</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13063>13063</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13064>13064</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13065>13065</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13066>13066</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13067>13067</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13068>13068</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13069>13069</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13070>13070</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13071>13071</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13072>13072</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13073>13073</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13074>13074</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13075>13075</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13076>13076</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13077>13077</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13078>13078</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13079>13079</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13080>13080</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13081>13081</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13082>13082</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13083>13083</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13084>13084</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13085>13085</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13086>13086</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13087>13087</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13088>13088</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13089>13089</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13090>13090</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13091>13091</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13092>13092</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13093>13093</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13094>13094</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13095>13095</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13096>13096</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13097>13097</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13098>13098</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13099>13099</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13100>13100</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13101>13101</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13102>13102</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13103>13103</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13104>13104</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13105>13105</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13106>13106</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13107>13107</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13108>13108</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13109>13109</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13110>13110</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13111>13111</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13112>13112</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13113>13113</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13114>13114</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13115>13115</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13116>13116</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13117>13117</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13118>13118</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13119>13119</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13120>13120</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13121>13121</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13122>13122</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13123>13123</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13124>13124</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13125>13125</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13126>13126</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13127>13127</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13128>13128</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13129>13129</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13130>13130</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13131>13131</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13132>13132</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13133>13133</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13134>13134</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13135>13135</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13136>13136</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13137>13137</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13138>13138</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13139>13139</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13140>13140</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13141>13141</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13142>13142</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13143>13143</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13144>13144</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13145>13145</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13146>13146</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13147>13147</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13148>13148</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13149>13149</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13150>13150</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13151>13151</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13152>13152</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13153>13153</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13154>13154</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13155>13155</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13156>13156</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13157>13157</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13158>13158</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13159>13159</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13160>13160</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13161>13161</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13162>13162</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13163>13163</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13164>13164</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13165>13165</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13166>13166</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13167>13167</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13168>13168</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13169>13169</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13170>13170</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13171>13171</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13172>13172</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13173>13173</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13174>13174</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13175>13175</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13176>13176</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13177>13177</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13178>13178</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13179>13179</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13180>13180</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13181>13181</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13182>13182</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13183>13183</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13184>13184</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13185>13185</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13186>13186</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13187>13187</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13188>13188</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13189>13189</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13190>13190</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13191>13191</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13192>13192</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13193>13193</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13194>13194</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13195>13195</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13196>13196</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13197>13197</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13198>13198</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13199>13199</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13200>13200</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13201>13201</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13202>13202</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13203>13203</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13204>13204</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13205>13205</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13206>13206</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13207>13207</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13208>13208</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13209>13209</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13210>13210</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13211>13211</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13212>13212</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13213>13213</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13214>13214</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13215>13215</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13216>13216</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13217>13217</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13218>13218</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13219>13219</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13220>13220</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13221>13221</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13222>13222</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13223>13223</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13224>13224</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13225>13225</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13226>13226</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13227>13227</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13228>13228</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13229>13229</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13230>13230</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13231>13231</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13232>13232</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13233>13233</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13234>13234</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13235>13235</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13236>13236</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13237>13237</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13238>13238</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13239>13239</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13240>13240</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13241>13241</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13242>13242</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13243>13243</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13244>13244</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13245>13245</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13246>13246</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13247>13247</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13248>13248</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13249>13249</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13250>13250</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13251>13251</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13252>13252</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13253>13253</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13254>13254</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13255>13255</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13256>13256</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13257>13257</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13258>13258</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13259>13259</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13260>13260</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13261>13261</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13262>13262</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13263>13263</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13264>13264</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13265>13265</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13266>13266</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13267>13267</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13268>13268</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13269>13269</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13270>13270</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13271>13271</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13272>13272</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13273>13273</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13274>13274</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13275>13275</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13276>13276</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13277>13277</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13278>13278</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13279>13279</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13280>13280</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13281>13281</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13282>13282</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13283>13283</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13284>13284</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13285>13285</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13286>13286</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13287>13287</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13288>13288</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13289>13289</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13290>13290</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13291>13291</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13292>13292</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13293>13293</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13294>13294</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13295>13295</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13296>13296</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13297>13297</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13298>13298</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13299>13299</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13300>13300</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13301>13301</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13302>13302</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13303>13303</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13304>13304</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13305>13305</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13306>13306</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13307>13307</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13308>13308</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13309>13309</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13310>13310</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13311>13311</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13312>13312</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13313>13313</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13314>13314</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13315>13315</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13316>13316</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13317>13317</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13318>13318</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13319>13319</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13320>13320</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13321>13321</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13322>13322</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13323>13323</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13324>13324</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13325>13325</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13326>13326</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13327>13327</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13328>13328</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13329>13329</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13330>13330</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13331>13331</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13332>13332</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13333>13333</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13334>13334</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13335>13335</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13336>13336</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13337>13337</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13338>13338</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13339>13339</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13340>13340</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13341>13341</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13342>13342</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13343>13343</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13344>13344</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13345>13345</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13346>13346</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13347>13347</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13348>13348</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13349>13349</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13350>13350</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13351>13351</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13352>13352</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13353>13353</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13354>13354</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13355>13355</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13356>13356</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13357>13357</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13358>13358</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13359>13359</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13360>13360</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13361>13361</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13362>13362</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13363>13363</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13364>13364</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13365>13365</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13366>13366</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13367>13367</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13368>13368</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13369>13369</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13370>13370</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13371>13371</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13372>13372</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13373>13373</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13374>13374</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13375>13375</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13376>13376</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13377>13377</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13378>13378</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13379>13379</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13380>13380</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13381>13381</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13382>13382</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13383>13383</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13384>13384</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13385>13385</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13386>13386</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13387>13387</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13388>13388</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13389>13389</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13390>13390</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13391>13391</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13392>13392</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13393>13393</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13394>13394</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13395>13395</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13396>13396</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13397>13397</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13398>13398</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13399>13399</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13400>13400</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13401>13401</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13402>13402</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13403>13403</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13404>13404</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13405>13405</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13406>13406</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13407>13407</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13408>13408</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13409>13409</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13410>13410</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13411>13411</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13412>13412</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13413>13413</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13414>13414</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13415>13415</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13416>13416</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13417>13417</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13418>13418</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13419>13419</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13420>13420</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13421>13421</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13422>13422</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13423>13423</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13424>13424</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13425>13425</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13426>13426</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13427>13427</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13428>13428</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13429>13429</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13430>13430</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13431>13431</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13432>13432</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13433>13433</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13434>13434</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13435>13435</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13436>13436</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13437>13437</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13438>13438</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13439>13439</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13440>13440</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13441>13441</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13442>13442</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13443>13443</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13444>13444</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13445>13445</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13446>13446</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13447>13447</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13448>13448</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13449>13449</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13450>13450</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13451>13451</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13452>13452</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13453>13453</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13454>13454</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13455>13455</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13456>13456</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13457>13457</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13458>13458</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13459>13459</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13460>13460</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13461>13461</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13462>13462</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13463>13463</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13464>13464</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13465>13465</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13466>13466</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13467>13467</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13468>13468</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13469>13469</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13470>13470</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13471>13471</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13472>13472</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13473>13473</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13474>13474</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13475>13475</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13476>13476</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13477>13477</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13478>13478</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13479>13479</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13480>13480</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13481>13481</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13482>13482</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13483>13483</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13484>13484</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13485>13485</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13486>13486</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13487>13487</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13488>13488</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13489>13489</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13490>13490</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13491>13491</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13492>13492</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13493>13493</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13494>13494</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13495>13495</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13496>13496</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13497>13497</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13498>13498</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13499>13499</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13500>13500</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13501>13501</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13502>13502</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13503>13503</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13504>13504</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13505>13505</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13506>13506</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13507>13507</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13508>13508</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13509>13509</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13510>13510</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13511>13511</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13512>13512</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13513>13513</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13514>13514</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13515>13515</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13516>13516</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13517>13517</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13518>13518</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13519>13519</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13520>13520</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13521>13521</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13522>13522</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13523>13523</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13524>13524</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13525>13525</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13526>13526</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13527>13527</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13528>13528</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13529>13529</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13530>13530</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13531>13531</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13532>13532</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13533>13533</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13534>13534</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13535>13535</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13536>13536</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13537>13537</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13538>13538</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13539>13539</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13540>13540</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13541>13541</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13542>13542</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13543>13543</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13544>13544</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13545>13545</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13546>13546</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13547>13547</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13548>13548</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13549>13549</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13550>13550</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13551>13551</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13552>13552</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13553>13553</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13554>13554</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13555>13555</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13556>13556</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13557>13557</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13558>13558</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13559>13559</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13560>13560</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13561>13561</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13562>13562</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13563>13563</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13564>13564</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13565>13565</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13566>13566</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13567>13567</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13568>13568</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13569>13569</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13570>13570</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13571>13571</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13572>13572</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13573>13573</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13574>13574</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13575>13575</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13576>13576</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13577>13577</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13578>13578</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13579>13579</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13580>13580</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13581>13581</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13582>13582</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13583>13583</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13584>13584</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13585>13585</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13586>13586</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13587>13587</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13588>13588</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13589>13589</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13590>13590</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13591>13591</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13592>13592</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13593>13593</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13594>13594</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13595>13595</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13596>13596</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13597>13597</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13598>13598</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13599>13599</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13600>13600</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13601>13601</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13602>13602</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13603>13603</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13604>13604</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13605>13605</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13606>13606</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13607>13607</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13608>13608</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13609>13609</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13610>13610</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13611>13611</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13612>13612</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13613>13613</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13614>13614</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13615>13615</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13616>13616</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13617>13617</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13618>13618</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13619>13619</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13620>13620</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13621>13621</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13622>13622</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13623>13623</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13624>13624</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13625>13625</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13626>13626</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13627>13627</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13628>13628</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13629>13629</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13630>13630</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13631>13631</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13632>13632</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13633>13633</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13634>13634</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13635>13635</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13636>13636</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13637>13637</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13638>13638</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13639>13639</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13640>13640</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13641>13641</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13642>13642</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13643>13643</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13644>13644</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13645>13645</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13646>13646</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13647>13647</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13648>13648</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13649>13649</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13650>13650</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13651>13651</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13652>13652</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13653>13653</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13654>13654</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13655>13655</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13656>13656</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13657>13657</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13658>13658</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13659>13659</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13660>13660</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13661>13661</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13662>13662</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13663>13663</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13664>13664</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13665>13665</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13666>13666</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13667>13667</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13668>13668</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13669>13669</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13670>13670</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13671>13671</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13672>13672</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13673>13673</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13674>13674</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13675>13675</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13676>13676</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13677>13677</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13678>13678</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13679>13679</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13680>13680</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13681>13681</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13682>13682</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13683>13683</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13684>13684</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13685>13685</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13686>13686</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13687>13687</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13688>13688</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13689>13689</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13690>13690</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13691>13691</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13692>13692</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13693>13693</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13694>13694</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13695>13695</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13696>13696</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13697>13697</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13698>13698</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13699>13699</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13700>13700</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13701>13701</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13702>13702</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13703>13703</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13704>13704</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13705>13705</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13706>13706</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13707>13707</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13708>13708</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13709>13709</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13710>13710</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13711>13711</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13712>13712</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13713>13713</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13714>13714</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13715>13715</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13716>13716</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13717>13717</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13718>13718</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13719>13719</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13720>13720</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13721>13721</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13722>13722</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13723>13723</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13724>13724</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13725>13725</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13726>13726</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13727>13727</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13728>13728</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13729>13729</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13730>13730</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13731>13731</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13732>13732</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13733>13733</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13734>13734</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13735>13735</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13736>13736</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13737>13737</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13738>13738</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13739>13739</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13740>13740</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13741>13741</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13742>13742</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13743>13743</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13744>13744</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13745>13745</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13746>13746</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13747>13747</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13748>13748</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13749>13749</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13750>13750</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13751>13751</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13752>13752</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13753>13753</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13754>13754</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13755>13755</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13756>13756</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13757>13757</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13758>13758</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13759>13759</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13760>13760</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13761>13761</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13762>13762</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13763>13763</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13764>13764</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13765>13765</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13766>13766</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13767>13767</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13768>13768</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13769>13769</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13770>13770</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13771>13771</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13772>13772</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13773>13773</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13774>13774</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13775>13775</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13776>13776</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13777>13777</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13778>13778</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13779>13779</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13780>13780</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13781>13781</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13782>13782</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13783>13783</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13784>13784</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13785>13785</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13786>13786</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13787>13787</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13788>13788</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13789>13789</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13790>13790</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13791>13791</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13792>13792</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13793>13793</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13794>13794</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13795>13795</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13796>13796</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13797>13797</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13798>13798</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13799>13799</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13800>13800</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13801>13801</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13802>13802</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13803>13803</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13804>13804</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13805>13805</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13806>13806</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13807>13807</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13808>13808</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13809>13809</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13810>13810</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13811>13811</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13812>13812</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13813>13813</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13814>13814</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13815>13815</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13816>13816</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13817>13817</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13818>13818</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13819>13819</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13820>13820</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13821>13821</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13822>13822</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13823>13823</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13824>13824</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13825>13825</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13826>13826</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13827>13827</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13828>13828</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13829>13829</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13830>13830</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13831>13831</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13832>13832</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13833>13833</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13834>13834</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13835>13835</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13836>13836</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13837>13837</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13838>13838</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13839>13839</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13840>13840</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13841>13841</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13842>13842</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13843>13843</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13844>13844</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13845>13845</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13846>13846</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13847>13847</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13848>13848</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13849>13849</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13850>13850</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13851>13851</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13852>13852</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13853>13853</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13854>13854</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13855>13855</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13856>13856</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13857>13857</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13858>13858</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13859>13859</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13860>13860</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13861>13861</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13862>13862</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13863>13863</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13864>13864</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13865>13865</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13866>13866</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13867>13867</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13868>13868</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13869>13869</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13870>13870</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13871>13871</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13872>13872</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13873>13873</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13874>13874</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13875>13875</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13876>13876</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13877>13877</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13878>13878</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13879>13879</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13880>13880</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13881>13881</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13882>13882</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13883>13883</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13884>13884</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13885>13885</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13886>13886</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13887>13887</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13888>13888</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13889>13889</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13890>13890</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13891>13891</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13892>13892</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13893>13893</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13894>13894</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13895>13895</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13896>13896</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13897>13897</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13898>13898</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13899>13899</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13900>13900</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13901>13901</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13902>13902</a></td>\n' +
            '<td>LDAP_OPEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13903>13903</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13904>13904</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13905>13905</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13906>13906</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13907>13907</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13908>13908</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13909>13909</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13910>13910</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13911>13911</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13912>13912</a></td>\n' +
            '<td>ldap_init, ldap_initialize, ldap_open − Initialize the LDAP library and open a connection to an LDAP server</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13913>13913</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13914>13914</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13915>13915</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13916>13916</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13917>13917</a></td>\n' +
            '<td>LDAP *ldap_open(host, port)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13918>13918</a></td>\n' +
            '<td>char *host;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13919>13919</a></td>\n' +
            '<td>int port;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13920>13920</a></td>\n' +
            '<td>LDAP *ldap_init(host, port)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13921>13921</a></td>\n' +
            '<td>char *host;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13922>13922</a></td>\n' +
            '<td>int port;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13923>13923</a></td>\n' +
            '<td>int ldap_initialize(ldp, uri)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13924>13924</a></td>\n' +
            '<td>LDAP **ldp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13925>13925</a></td>\n' +
            '<td>char *uri;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13926>13926</a></td>\n' +
            '<td>int ldap_set_urllist_proc(ld, proc, params)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13927>13927</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13928>13928</a></td>\n' +
            '<td>LDAP_URLLIST_PROC *proc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13929>13929</a></td>\n' +
            '<td>void *params;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13930>13930</a></td>\n' +
            '<td>int (LDAP_URLLIST_PROC)(ld, urllist, url, params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13931>13931</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13932>13932</a></td>\n' +
            '<td>LDAPURLDesc **urllist;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13933>13933</a></td>\n' +
            '<td>LDAPURLDesc **url;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13934>13934</a></td>\n' +
            '<td>void *params;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13935>13935</a></td>\n' +
            '<td>#include &lt;ldap_pvt.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13936>13936</a></td>\n' +
            '<td>int ldap_init_fd(fd, proto, uri, ldp)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13937>13937</a></td>\n' +
            '<td>ber_socket_t fd;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13938>13938</a></td>\n' +
            '<td>int proto;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13939>13939</a></td>\n' +
            '<td>char *uri;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13940>13940</a></td>\n' +
            '<td>LDAP **ldp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13941>13941</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13942>13942</a></td>\n' +
            '<td>ldap_open() opens a connection to an LDAP server and allocates an LDAP structure which is used to identify the connection and to maintain per-connection information. ldap_init() allocates an LDAP structure but does not open an initial connection. ldap_initialize() allocates an LDAP structure but does not open an initial connection. ldap_init_fd() allocates an LDAP structure using an existing connection on the provided socket. One of these routines must be called before any operations are attempted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13943>13943</a></td>\n' +
            '<td>ldap_open() takes host, the hostname on which the LDAP server is running, and port, the port number to which to connect. If the default IANA-assigned port of 389 is desired, LDAP_PORT should be specified for port. The host parameter may contain a blank-separated list of hosts to try to connect to, and each host may optionally by of the form host:port. If present, the :port overrides the port parameter to ldap_open(). Upon successfully making a connection to an LDAP server, ldap_open() returns a pointer to an opaque LDAP structure, which should be passed to subsequent calls to ldap_bind(), ldap_search(), etc. Certain fields in the LDAP structure can be set to indicate size limit, time limit, and how aliases are handled during operations; read and write access to those fields must occur by calling ldap_get_option(3) and ldap_set_option(3) respectively, whenever possible.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13944>13944</a></td>\n' +
            '<td>ldap_init() acts just like ldap_open(), but does not open a connection to the LDAP server. The actual connection open will occur when the first operation is attempted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13945>13945</a></td>\n' +
            '<td>ldap_initialize() acts like ldap_init(), but it returns an integer indicating either success or the failure reason, and it allows to specify details for the connection in the schema portion of the URI. The uri parameter may be a comma- or whitespace-separated list of URIs containing only the schema, the host, and the port fields. Apart from ldap, other (non-standard) recognized values of the schema field are ldaps (LDAP over TLS), ldapi (LDAP over IPC), and cldap (connectionless LDAP). If other fields are present, the behavior is undefined.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13946>13946</a></td>\n' +
            '<td>At this time, ldap_open() and ldap_init() are deprecated in favor of ldap_initialize(), essentially because the latter allows to specify a schema in the URI and it explicitly returns an error code.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13947>13947</a></td>\n' +
            '<td>ldap_init_fd() allows an LDAP structure to be initialized using an already-opened connection. The proto parameter should be one of LDAP_PROTO_TCP, LDAP_PROTO_UDP, or LDAP_PROTO_IPC for a connection using TCP, UDP, or IPC, respectively. The value LDAP_PROTO_EXT may also be specified if user-supplied sockbuf handlers are going to be used. Note that support for UDP is not implemented unless libldap was built with LDAP_CONNECTIONLESS defined. The uri parameter may optionally be provided for informational purposes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13948>13948</a></td>\n' +
            '<td>ldap_set_urllist_proc() allows to set a function proc of type LDAP_URLLIST_PROC that is called when a successful connection can be established. This function receives the list of URIs parsed from the uri string originally passed to ldap_initialize(), and the one that successfully connected. The function may manipulate the URI list; the typical use consists in moving the successful URI to the head of the list, so that subsequent attempts to connect to one of the URIs using the same LDAP handle will try it first. If ld is null, proc is set as a global parameter that is inherited by all handlers within the process that are created after the call to ldap_set_urllist_proc(). By default, no LDAP_URLLIST_PROC is set. In a multithreaded environment, ldap_set_urllist_proc() must be called before any concurrent operation using the LDAP handle is started.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13949>13949</a></td>\n' +
            '<td>Note: the first call into the LDAP library also initializes the global options for the library. As such the first call should be single-threaded or otherwise protected to insure that only one call is active. It is recommended that ldap_get_option() or ldap_set_option() be used in the program’s main thread before any additional threads are created. See ldap_get_option(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13950>13950</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13951>13951</a></td>\n' +
            '<td>If an error occurs, ldap_open() and ldap_init() will return NULL and errno should be set appropriately. ldap_initialize() and ldap_init_fd() will directly return the LDAP code associated to the error (or LDAP_SUCCESS in case of success); errno should be set as well whenever appropriate. ldap_set_urllist_proc() returns LDAP_OPT_ERROR on error, and LDAP_OPT_SUCCESS on success.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13952>13952</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13953>13953</a></td>\n' +
            '<td>ldap(3), ldap_bind(3), ldap_get_option(3), ldap_set_option(3), lber-sockbuf(3), errno(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13954>13954</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13955>13955</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13956>13956</a></td>\n' +
            '<td>LDAP_PARSE_RESULT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13957>13957</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13958>13958</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13959>13959</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13960>13960</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13961>13961</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13962>13962</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13963>13963</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13964>13964</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13965>13965</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13966>13966</a></td>\n' +
            '<td>ldap_parse_result − Parsing results</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13967>13967</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13968>13968</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13969>13969</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13970>13970</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13971>13971</a></td>\n' +
            '<td>int ldap_parse_result( LDAP *ld, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13972>13972</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13973>13973</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13974>13974</a></td>\n' +
            '<td>int *errcodep, char **matcheddnp, char **errmsgp,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13975>13975</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13976>13976</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13977>13977</a></td>\n' +
            '<td>char ***referralsp, LDAPControl ***serverctrlsp,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13978>13978</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13979>13979</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13980>13980</a></td>\n' +
            '<td>int freeit )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13981>13981</a></td>\n' +
            '<td>int ldap_parse_sasl_bind_result( LDAP *ld, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13982>13982</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13983>13983</a></td>\n' +
            '<td>struct berval **servercredp, int freeit )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13984>13984</a></td>\n' +
            '<td>int ldap_parse_extended_result( LDAP *ld, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13985>13985</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13986>13986</a></td>\n' +
            '<td>char **retoidp, struct berval **retdatap, int freeit )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13987>13987</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13988>13988</a></td>\n' +
            '<td>These routines are used to extract information from a result message. They will operate on the first result message in a chain of search results (skipping past other message types). They take the result as returned by a call to ldap_result(3), ldap_search_s(3) or ldap_search_st(3). In addition to ldap_parse_result(), the routines ldap_parse_sasl_bind_result() and ldap_parse_extended_result() are used to get all the result information from SASL bind and extended operations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13989>13989</a></td>\n' +
            '<td>The errcodep parameter will be filled in with the result code from the result message.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13990>13990</a></td>\n' +
            '<td>The server might supply a matched DN string in the message indicating how much of a name in a request was recognized. The matcheddnp parameter will be filled in with this string if supplied, else it will be NULL. If a string is returned, it should be freed using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13991>13991</a></td>\n' +
            '<td>The errmsgp parameter will be filled in with the error message field from the parsed message. This string should be freed using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13992>13992</a></td>\n' +
            '<td>The referralsp parameter will be filled in with an allocated array of referral strings from the parsed message. This array should be freed using ldap_memvfree(3). If no referrals were returned, *referralsp is set to NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13993>13993</a></td>\n' +
            '<td>The serverctrlsp parameter will be filled in with an allocated array of controls copied from the parsed message. The array should be freed using ldap_controls_free(3). If no controls were returned, *serverctrlsp is set to NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13994>13994</a></td>\n' +
            '<td>The freeit parameter determines whether the parsed message is freed or not after the extraction. Any non-zero value will make it free the message. The ldap_msgfree(3) routine can also be used to free the message later.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13995>13995</a></td>\n' +
            '<td>For SASL bind results, the servercredp parameter will be filled in with an allocated berval structure containing the credentials from the server if present. The structure should be freed using ber_bvfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13996>13996</a></td>\n' +
            '<td>For extended results, the retoidp parameter will be filled in with the dotted-OID text representation of the name of the extended operation response. The string should be freed using ldap_memfree(3). If no OID was returned, *retoidp is set to NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13997>13997</a></td>\n' +
            '<td>For extended results, the retdatap parameter will be filled in with a pointer to a berval structure containing the data from the extended operation response. The structure should be freed using ber_bvfree(3). If no data were returned, *retdatap is set to NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13998>13998</a></td>\n' +
            '<td>For all the above result parameters, NULL values can be used in calls in order to ignore certain fields.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=13999>13999</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14000>14000</a></td>\n' +
            '<td>Upon success LDAP_SUCCESS is returned. Otherwise the values of the result parameters are undefined.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14001>14001</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14002>14002</a></td>\n' +
            '<td>ldap(3), ldap_result(3), ldap_search(3), ldap_memfree(3), ldap_memvfree(3), ldap_get_values(3), ldap_controls_free(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14003>14003</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14004>14004</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14005>14005</a></td>\n' +
            '<td>LDAP_PARSE_REFERENCE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14006>14006</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14007>14007</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14008>14008</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14009>14009</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14010>14010</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14011>14011</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14012>14012</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14013>14013</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14014>14014</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14015>14015</a></td>\n' +
            '<td>ldap_parse_reference − Extract referrals and controls from a reference message</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14016>14016</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14017>14017</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14018>14018</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14019>14019</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14020>14020</a></td>\n' +
            '<td>int ldap_parse_reference( LDAP *ld, LDAPMessage *reference,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14021>14021</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14022>14022</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14023>14023</a></td>\n' +
            '<td>char ***referralsp, LDAPControl ***serverctrlsp,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14024>14024</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14025>14025</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14026>14026</a></td>\n' +
            '<td>int freeit )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14027>14027</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14028>14028</a></td>\n' +
            '<td>The ldap_parse_reference() routine is used to extract referrals and controls from a reference message. The reference parameter is a reference message as returned by a call to ldap_first_reference(3), ldap_next_reference(3), ldap_first_message(3), ldap_next_message(3), or ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14029>14029</a></td>\n' +
            '<td>The referralsp parameter will be filled in with an allocated array of character strings. The strings are copies of the referrals contained in the parsed message. The array should be freed by calling ldap_value_free(3). If referralsp is NULL, no referrals are returned. If no referrals were returned, *referralsp is set to NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14030>14030</a></td>\n' +
            '<td>The serverctrlsp parameter will be filled in with an allocated array of controls copied from the parsed message. The array should be freed by calling ldap_controls_free(3). If serverctrlsp is NULL, no controls are returned. If no controls were returned, *serverctrlsp is set to NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14031>14031</a></td>\n' +
            '<td>The freeit parameter determines whether the parsed message is freed or not after the extraction. Any non-zero value will make it free the message. The ldap_msgfree(3) routine can also be used to free the message later.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14032>14032</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14033>14033</a></td>\n' +
            '<td>Upon success LDAP_SUCCESS is returned. Otherwise the values of the referralsp and serverctrlsp parameters are undefined.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14034>14034</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14035>14035</a></td>\n' +
            '<td>ldap(3), ldap_first_reference(3), ldap_first_message(3), ldap_result(3), ldap_get_values(3), ldap_controls_free(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14036>14036</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14037>14037</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14038>14038</a></td>\n' +
            '<td>LDAP_PARSE_RESULT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14039>14039</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14040>14040</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14041>14041</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14042>14042</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14043>14043</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14044>14044</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14045>14045</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14046>14046</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14047>14047</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14048>14048</a></td>\n' +
            '<td>ldap_parse_result − Parsing results</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14049>14049</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14050>14050</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14051>14051</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14052>14052</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14053>14053</a></td>\n' +
            '<td>int ldap_parse_result( LDAP *ld, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14054>14054</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14055>14055</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14056>14056</a></td>\n' +
            '<td>int *errcodep, char **matcheddnp, char **errmsgp,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14057>14057</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14058>14058</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14059>14059</a></td>\n' +
            '<td>char ***referralsp, LDAPControl ***serverctrlsp,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14060>14060</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14061>14061</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14062>14062</a></td>\n' +
            '<td>int freeit )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14063>14063</a></td>\n' +
            '<td>int ldap_parse_sasl_bind_result( LDAP *ld, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14064>14064</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14065>14065</a></td>\n' +
            '<td>struct berval **servercredp, int freeit )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14066>14066</a></td>\n' +
            '<td>int ldap_parse_extended_result( LDAP *ld, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14067>14067</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14068>14068</a></td>\n' +
            '<td>char **retoidp, struct berval **retdatap, int freeit )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14069>14069</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14070>14070</a></td>\n' +
            '<td>These routines are used to extract information from a result message. They will operate on the first result message in a chain of search results (skipping past other message types). They take the result as returned by a call to ldap_result(3), ldap_search_s(3) or ldap_search_st(3). In addition to ldap_parse_result(), the routines ldap_parse_sasl_bind_result() and ldap_parse_extended_result() are used to get all the result information from SASL bind and extended operations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14071>14071</a></td>\n' +
            '<td>The errcodep parameter will be filled in with the result code from the result message.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14072>14072</a></td>\n' +
            '<td>The server might supply a matched DN string in the message indicating how much of a name in a request was recognized. The matcheddnp parameter will be filled in with this string if supplied, else it will be NULL. If a string is returned, it should be freed using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14073>14073</a></td>\n' +
            '<td>The errmsgp parameter will be filled in with the error message field from the parsed message. This string should be freed using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14074>14074</a></td>\n' +
            '<td>The referralsp parameter will be filled in with an allocated array of referral strings from the parsed message. This array should be freed using ldap_memvfree(3). If no referrals were returned, *referralsp is set to NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14075>14075</a></td>\n' +
            '<td>The serverctrlsp parameter will be filled in with an allocated array of controls copied from the parsed message. The array should be freed using ldap_controls_free(3). If no controls were returned, *serverctrlsp is set to NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14076>14076</a></td>\n' +
            '<td>The freeit parameter determines whether the parsed message is freed or not after the extraction. Any non-zero value will make it free the message. The ldap_msgfree(3) routine can also be used to free the message later.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14077>14077</a></td>\n' +
            '<td>For SASL bind results, the servercredp parameter will be filled in with an allocated berval structure containing the credentials from the server if present. The structure should be freed using ber_bvfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14078>14078</a></td>\n' +
            '<td>For extended results, the retoidp parameter will be filled in with the dotted-OID text representation of the name of the extended operation response. The string should be freed using ldap_memfree(3). If no OID was returned, *retoidp is set to NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14079>14079</a></td>\n' +
            '<td>For extended results, the retdatap parameter will be filled in with a pointer to a berval structure containing the data from the extended operation response. The structure should be freed using ber_bvfree(3). If no data were returned, *retdatap is set to NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14080>14080</a></td>\n' +
            '<td>For all the above result parameters, NULL values can be used in calls in order to ignore certain fields.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14081>14081</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14082>14082</a></td>\n' +
            '<td>Upon success LDAP_SUCCESS is returned. Otherwise the values of the result parameters are undefined.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14083>14083</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14084>14084</a></td>\n' +
            '<td>ldap(3), ldap_result(3), ldap_search(3), ldap_memfree(3), ldap_memvfree(3), ldap_get_values(3), ldap_controls_free(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14085>14085</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14086>14086</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14087>14087</a></td>\n' +
            '<td>LDAP_PARSE_RESULT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14088>14088</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14089>14089</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14090>14090</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14091>14091</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14092>14092</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14093>14093</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14094>14094</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14095>14095</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14096>14096</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14097>14097</a></td>\n' +
            '<td>ldap_parse_result − Parsing results</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14098>14098</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14099>14099</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14100>14100</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14101>14101</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14102>14102</a></td>\n' +
            '<td>int ldap_parse_result( LDAP *ld, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14103>14103</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14104>14104</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14105>14105</a></td>\n' +
            '<td>int *errcodep, char **matcheddnp, char **errmsgp,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14106>14106</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14107>14107</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14108>14108</a></td>\n' +
            '<td>char ***referralsp, LDAPControl ***serverctrlsp,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14109>14109</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14110>14110</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14111>14111</a></td>\n' +
            '<td>int freeit )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14112>14112</a></td>\n' +
            '<td>int ldap_parse_sasl_bind_result( LDAP *ld, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14113>14113</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14114>14114</a></td>\n' +
            '<td>struct berval **servercredp, int freeit )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14115>14115</a></td>\n' +
            '<td>int ldap_parse_extended_result( LDAP *ld, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14116>14116</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14117>14117</a></td>\n' +
            '<td>char **retoidp, struct berval **retdatap, int freeit )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14118>14118</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14119>14119</a></td>\n' +
            '<td>These routines are used to extract information from a result message. They will operate on the first result message in a chain of search results (skipping past other message types). They take the result as returned by a call to ldap_result(3), ldap_search_s(3) or ldap_search_st(3). In addition to ldap_parse_result(), the routines ldap_parse_sasl_bind_result() and ldap_parse_extended_result() are used to get all the result information from SASL bind and extended operations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14120>14120</a></td>\n' +
            '<td>The errcodep parameter will be filled in with the result code from the result message.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14121>14121</a></td>\n' +
            '<td>The server might supply a matched DN string in the message indicating how much of a name in a request was recognized. The matcheddnp parameter will be filled in with this string if supplied, else it will be NULL. If a string is returned, it should be freed using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14122>14122</a></td>\n' +
            '<td>The errmsgp parameter will be filled in with the error message field from the parsed message. This string should be freed using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14123>14123</a></td>\n' +
            '<td>The referralsp parameter will be filled in with an allocated array of referral strings from the parsed message. This array should be freed using ldap_memvfree(3). If no referrals were returned, *referralsp is set to NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14124>14124</a></td>\n' +
            '<td>The serverctrlsp parameter will be filled in with an allocated array of controls copied from the parsed message. The array should be freed using ldap_controls_free(3). If no controls were returned, *serverctrlsp is set to NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14125>14125</a></td>\n' +
            '<td>The freeit parameter determines whether the parsed message is freed or not after the extraction. Any non-zero value will make it free the message. The ldap_msgfree(3) routine can also be used to free the message later.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14126>14126</a></td>\n' +
            '<td>For SASL bind results, the servercredp parameter will be filled in with an allocated berval structure containing the credentials from the server if present. The structure should be freed using ber_bvfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14127>14127</a></td>\n' +
            '<td>For extended results, the retoidp parameter will be filled in with the dotted-OID text representation of the name of the extended operation response. The string should be freed using ldap_memfree(3). If no OID was returned, *retoidp is set to NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14128>14128</a></td>\n' +
            '<td>For extended results, the retdatap parameter will be filled in with a pointer to a berval structure containing the data from the extended operation response. The structure should be freed using ber_bvfree(3). If no data were returned, *retdatap is set to NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14129>14129</a></td>\n' +
            '<td>For all the above result parameters, NULL values can be used in calls in order to ignore certain fields.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14130>14130</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14131>14131</a></td>\n' +
            '<td>Upon success LDAP_SUCCESS is returned. Otherwise the values of the result parameters are undefined.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14132>14132</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14133>14133</a></td>\n' +
            '<td>ldap(3), ldap_result(3), ldap_search(3), ldap_memfree(3), ldap_memvfree(3), ldap_get_values(3), ldap_controls_free(3), lber-types(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14134>14134</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14135>14135</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14136>14136</a></td>\n' +
            '<td>LDAP_PARSE_SORT-CONTROL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14137>14137</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14138>14138</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14139>14139</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14140>14140</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14141>14141</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14142>14142</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14143>14143</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14144>14144</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14145>14145</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14146>14146</a></td>\n' +
            '<td>ldap_parse_sort_control − Decode the information returned from a search operation that used a server-side sort control</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14147>14147</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14148>14148</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14149>14149</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14150>14150</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14151>14151</a></td>\n' +
            '<td>int ldap_parse_sort_control(ld, ctrls, returnCode, attribute)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14152>14152</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14153>14153</a></td>\n' +
            '<td>LDAPControl **ctrls;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14154>14154</a></td>\n' +
            '<td>unsigned long *returnCode;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14155>14155</a></td>\n' +
            '<td>char **attribute;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14156>14156</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14157>14157</a></td>\n' +
            '<td>This function is used to parse the results returned in a search operation that uses a server-side sort control.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14158>14158</a></td>\n' +
            '<td>It takes a null terminated array of LDAPControl structures usually obtained by a call to the ldap_parse_result function. A returncode which points to the sort control result code,and an array of LDAPControl structures that list the client controls to use with the search. The function also takes an out parameter attribute and if the sort operation fails, the server may return a string that indicates the first attribute in the sortKey list that caused the failure. If this parameter is NULL, no string is returned. If a string is returned, the memory should be freed by calling the ldap_memfree function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14159>14159</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14160>14160</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14161>14161</a></td>\n' +
            '<td>ldap_result(3), ldap_controls_free(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14162>14162</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14163>14163</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14164>14164</a></td>\n' +
            '<td>LDAP_PARSE_VLV_CONTROL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14165>14165</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14166>14166</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14167>14167</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14168>14168</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14169>14169</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14170>14170</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14171>14171</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14172>14172</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14173>14173</a></td>\n' +
            '<td>ldap_parse_vlv_control − Decode the information returned from a search operation that used a VLV (virtual list view) control</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14174>14174</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14175>14175</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14176>14176</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14177>14177</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14178>14178</a></td>\n' +
            '<td>int ldap_parse_vlv_control( ld, ctrlp, target_posp, list_countp, contextp, errcodep )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14179>14179</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14180>14180</a></td>\n' +
            '<td>LDAPControl **ctrlp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14181>14181</a></td>\n' +
            '<td>unsigned long *target_posp, *list_countp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14182>14182</a></td>\n' +
            '<td>struct berval **contextp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14183>14183</a></td>\n' +
            '<td>int *errcodep;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14184>14184</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14185>14185</a></td>\n' +
            '<td>The ldap_parse_vlv_control is used to decode the information returned from a search operation that used a VLV (virtual list view)control. It takes a null terminated array of LDAPControl structures, usually obtained by a call to the ldap_parse_resultfunction, a target_pos which points to the list index of the target entry. If this parameter is NULL, the target position is not returned. The index returned is an approximation of the position of the target entry. It is not guaranteed to be exact. The parameter list_countp points to the server’s estimate of the size of the list. If this parameter is NULL, the size is not returned. contextp is a pointer to the address of a berval structure that contains a server-generated context identifier if server returns one. If server does not return a context identifier, the server returns a NULL in this parameter. If this parameter is set to NULL, the context identifier is not returned. You should use this returned context in the next call to create a VLV control. When the berval structure is no longer needed, you should free the memory by calling the ber_bvfree function.e errcodep is an output parameter, which points to the result code returned by the server. If this parameter is NULL, the result code is not returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14186>14186</a></td>\n' +
            '<td>See ldap.h for a list of possible return codes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14187>14187</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14188>14188</a></td>\n' +
            '<td>ldap_search(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14189>14189</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14190>14190</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14191>14191</a></td>\n' +
            '<td>LDAP_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14192>14192</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14193>14193</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14194>14194</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14195>14195</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14196>14196</a></td>\n' +
            '<td>PROTOCOL RESULT CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14197>14197</a></td>\n' +
            '<td>API ERROR CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14198>14198</a></td>\n' +
            '<td>DEPRECATED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14199>14199</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14200>14200</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14201>14201</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14202>14202</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14203>14203</a></td>\n' +
            '<td>ldap_perror, ld_errno, ldap_result2error, ldap_errlist, ldap_err2string − LDAP protocol error handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14204>14204</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14205>14205</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14206>14206</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14207>14207</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14208>14208</a></td>\n' +
            '<td>char *ldap_err2string( int err );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14209>14209</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14210>14210</a></td>\n' +
            '<td>The ldap_err2string() routine provides short description of the various codes returned by routines in this library. The returned string is a pointer to a static area that should not be modified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14211>14211</a></td>\n' +
            '<td>These codes are either negative, indicating an API error code; positive, indicating an LDAP resultCode other than ´success’ (0), or - zero, indicating both successful use of the API and the LDAP resultCode ´success’ (0).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14212>14212</a></td>\n' +
            '<td>The code associated with an LDAP session is accessible using ldap_get_option(3) and ldap_set_option(3) with the LDAP_OPT_RESULT_CODE option (previously called LDAP_OPT_ERROR_NUMBER).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14213>14213</a></td>\n' +
            '<td>PROTOCOL RESULT CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14214>14214</a></td>\n' +
            '<td>This section provides a partial list of protocol codes recognized by the library. As LDAP is extensible, additional values may be returned. A complete listing of registered LDAP result codes can be obtained from the Internet Assigned Numbers Authority &lt;http://www.iana.org&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14215>14215</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14216>14216</a></td>\n' +
            '<td>LDAP_SUCCESS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14217>14217</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14218>14218</a></td>\n' +
            '<td>The request was successful.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14219>14219</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14220>14220</a></td>\n' +
            '<td>LDAP_OPERATIONS_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14221>14221</a></td>\n' +
            '<td>An operations error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14222>14222</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14223>14223</a></td>\n' +
            '<td>LDAP_PROTOCOL _ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14224>14224</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14225>14225</a></td>\n' +
            '<td>A protocol violation was detected.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14226>14226</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14227>14227</a></td>\n' +
            '<td>LDAP_TIMELIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14228>14228</a></td>\n' +
            '<td>An LDAP time limit was exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14229>14229</a></td>\n' +
            '<td>LDAP_SIZELIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14230>14230</a></td>\n' +
            '<td>An LDAP size limit was exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14231>14231</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14232>14232</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14233>14233</a></td>\n' +
            '<td>_FALSE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14234>14234</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14235>14235</a></td>\n' +
            '<td>A compare operation returned false.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14236>14236</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14237>14237</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14238>14238</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14239>14239</a></td>\n' +
            '<td>_TRUE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14240>14240</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14241>14241</a></td>\n' +
            '<td>A compare operation returned true.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14242>14242</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14243>14243</a></td>\n' +
            '<td>LDAP_STRONG_AUTH_NOT_SUPPORTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14244>14244</a></td>\n' +
            '<td>The LDAP server does not support strong authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14245>14245</a></td>\n' +
            '<td>LDAP_STRONG_AUTH_REQUIRED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14246>14246</a></td>\n' +
            '<td>Strong authentication is required for the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14247>14247</a></td>\n' +
            '<td>LDAP_PARTIAL_RESULTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14248>14248</a></td>\n' +
            '<td>Partial results only returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14249>14249</a></td>\n' +
            '<td>LDAP_NO_SUCH_ATTRIBUTE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14250>14250</a></td>\n' +
            '<td>The attribute type specified does not exist in the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14251>14251</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14252>14252</a></td>\n' +
            '<td>LDAP_UNDEFINED_T YPE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14253>14253</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14254>14254</a></td>\n' +
            '<td>The attribute type specified is invalid.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14255>14255</a></td>\n' +
            '<td>LDAP_INAPPROPRIATE_MATCHING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14256>14256</a></td>\n' +
            '<td>Filter type not supported for the specified attribute.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14257>14257</a></td>\n' +
            '<td>LDAP_CONSTRAINT_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14258>14258</a></td>\n' +
            '<td>An attribute value specified violates some constraint (e.g., a postalAddress has too many lines, or a line that is too long).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14259>14259</a></td>\n' +
            '<td>LDAP_TYPE_OR_VALUE_EXISTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14260>14260</a></td>\n' +
            '<td>An attribute type or attribute value specified already exists in the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14261>14261</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14262>14262</a></td>\n' +
            '<td>LDAP_INVALID_SYN TAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14263>14263</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14264>14264</a></td>\n' +
            '<td>An invalid attribute value was specified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14265>14265</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14266>14266</a></td>\n' +
            '<td>LDAP_NO_SUCH_OB JECT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14267>14267</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14268>14268</a></td>\n' +
            '<td>The specified object does not exist in The Directory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14269>14269</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14270>14270</a></td>\n' +
            '<td>LDAP_ALIAS_PROBL EM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14271>14271</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14272>14272</a></td>\n' +
            '<td>An alias in The Directory points to a nonexistent entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14273>14273</a></td>\n' +
            '<td>LDAP_INVALID_DN_SYNTAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14274>14274</a></td>\n' +
            '<td>A syntactically invalid DN was specified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14275>14275</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14276>14276</a></td>\n' +
            '<td>LDAP_IS_LEAF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14277>14277</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14278>14278</a></td>\n' +
            '<td>The object specified is a leaf.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14279>14279</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14280>14280</a></td>\n' +
            '<td>LDAP_ALIAS_DEREF_PROBLEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14281>14281</a></td>\n' +
            '<td>A problem was encountered when dereferencing an alias.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14282>14282</a></td>\n' +
            '<td>LDAP_INAPPROPRIATE_AUTH</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14283>14283</a></td>\n' +
            '<td>Inappropriate authentication was specified (e.g., LDAP_AUTH_SIMPLE was specified and the entry does not have a userPassword attribute).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14284>14284</a></td>\n' +
            '<td>LDAP_INVALID_CREDENTIALS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14285>14285</a></td>\n' +
            '<td>Invalid credentials were presented (e.g., the wrong password).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14286>14286</a></td>\n' +
            '<td>LDAP_INSUFFICIENT_ACCESS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14287>14287</a></td>\n' +
            '<td>The user has insufficient access to perform the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14288>14288</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14289>14289</a></td>\n' +
            '<td>LDAP_BUSY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14290>14290</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14291>14291</a></td>\n' +
            '<td>The DSA is busy.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14292>14292</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14293>14293</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14294>14294</a></td>\n' +
            '<td>LDAP_UNAVAILA BLE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14295>14295</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14296>14296</a></td>\n' +
            '<td>The DSA is unavailable.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14297>14297</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14298>14298</a></td>\n' +
            '<td>LDAP_UNWILLING_TO_PERFORM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14299>14299</a></td>\n' +
            '<td>The DSA is unwilling to perform the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14300>14300</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14301>14301</a></td>\n' +
            '<td>LDAP_LOOP_DE TECT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14302>14302</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14303>14303</a></td>\n' +
            '<td>A loop was detected.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14304>14304</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14305>14305</a></td>\n' +
            '<td>LDAP_NAMING_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14306>14306</a></td>\n' +
            '<td>A naming violation occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14307>14307</a></td>\n' +
            '<td>LDAP_OBJECT_CLASS_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14308>14308</a></td>\n' +
            '<td>An object class violation occurred (e.g., a "must" attribute was missing from the entry).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14309>14309</a></td>\n' +
            '<td>LDAP_NOT_ALLOWED_ON_NONLEAF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14310>14310</a></td>\n' +
            '<td>The operation is not allowed on a nonleaf object.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14311>14311</a></td>\n' +
            '<td>LDAP_NOT_ALLOWED_ON_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14312>14312</a></td>\n' +
            '<td>The operation is not allowed on an RDN.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14313>14313</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14314>14314</a></td>\n' +
            '<td>LDAP_ALREADY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14315>14315</a></td>\n' +
            '<td>_EXISTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14316>14316</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14317>14317</a></td>\n' +
            '<td>The entry already exists.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14318>14318</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14319>14319</a></td>\n' +
            '<td>LDAP_NO_OBJECT_CLASS_MODS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14320>14320</a></td>\n' +
            '<td>Object class modifications are not allowed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14321>14321</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14322>14322</a></td>\n' +
            '<td>LDAP_OTHER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14323>14323</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14324>14324</a></td>\n' +
            '<td>An unknown error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14325>14325</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14326>14326</a></td>\n' +
            '<td>API ERROR CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14327>14327</a></td>\n' +
            '<td>This section provides a complete list of API error codes recognized by the library. Note that LDAP_SUCCESS indicates success of an API call in addition to representing the return of the LDAP ´success’ resultCode.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14328>14328</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14329>14329</a></td>\n' +
            '<td>LDAP_SERVER_DOWN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14330>14330</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14331>14331</a></td>\n' +
            '<td>The LDAP library can’t contact the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14332>14332</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14333>14333</a></td>\n' +
            '<td>LDAP_LOCAL_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14334>14334</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14335>14335</a></td>\n' +
            '<td>Some local error occurred. This is usually a failed dynamic memory allocation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14336>14336</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14337>14337</a></td>\n' +
            '<td>LDAP_ENCODING_ER ROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14338>14338</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14339>14339</a></td>\n' +
            '<td>An error was encountered encoding parameters to send to the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14340>14340</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14341>14341</a></td>\n' +
            '<td>LDAP_DECODING_ER ROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14342>14342</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14343>14343</a></td>\n' +
            '<td>An error was encountered decoding a result from the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14344>14344</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14345>14345</a></td>\n' +
            '<td>LDAP_TIMEOUT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14346>14346</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14347>14347</a></td>\n' +
            '<td>A timelimit was exceeded while waiting for a result.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14348>14348</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14349>14349</a></td>\n' +
            '<td>LDAP_AUTH_UNKNOW N</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14350>14350</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14351>14351</a></td>\n' +
            '<td>The authentication method specified to ldap_bind() is not known.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14352>14352</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14353>14353</a></td>\n' +
            '<td>LDAP_FILTER_ERRO R</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14354>14354</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14355>14355</a></td>\n' +
            '<td>An invalid filter was supplied to ldap_search() (e.g., unbalanced parentheses).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14356>14356</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14357>14357</a></td>\n' +
            '<td>LDAP_PARAM_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14358>14358</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14359>14359</a></td>\n' +
            '<td>An ldap routine was called with a bad parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14360>14360</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14361>14361</a></td>\n' +
            '<td>LDAP_NO_MEMORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14362>14362</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14363>14363</a></td>\n' +
            '<td>An memory allocation (e.g., malloc(3) or other dynamic memory allocator) call failed in an ldap library routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14364>14364</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14365>14365</a></td>\n' +
            '<td>LDAP_USER_CANCEL ED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14366>14366</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14367>14367</a></td>\n' +
            '<td>Indicates the user cancelled the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14368>14368</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14369>14369</a></td>\n' +
            '<td>LDAP_CONNECT_ERR OR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14370>14370</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14371>14371</a></td>\n' +
            '<td>Indicates a connection problem.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14372>14372</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14373>14373</a></td>\n' +
            '<td>LDAP_NOT_SUPPORT ED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14374>14374</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14375>14375</a></td>\n' +
            '<td>Indicates the routine was called in a manner not supported by the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14376>14376</a></td>\n' +
            '<td>LDAP_CONTROL_NOT_FOUND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14377>14377</a></td>\n' +
            '<td>Indicates the control provided is unknown to the client library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14378>14378</a></td>\n' +
            '<td>LDAP_NO_RESULTS_RETURNED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14379>14379</a></td>\n' +
            '<td>Indicates no results returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14380>14380</a></td>\n' +
            '<td>LDAP_MORE_RESULTS_TO_RETURN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14381>14381</a></td>\n' +
            '<td>Indicates more results could be returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14382>14382</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14383>14383</a></td>\n' +
            '<td>LDAP_CLIENT_LOOP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14384>14384</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14385>14385</a></td>\n' +
            '<td>Indicates the library has detected a loop in its processing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14386>14386</a></td>\n' +
            '<td>LDAP_REFERRAL_LIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14387>14387</a></td>\n' +
            '<td>Indicates the referral limit has been exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14388>14388</a></td>\n' +
            '<td>DEPRECATED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14389>14389</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14390>14390</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14391>14391</a></td>\n' +
            '<td>ldap(3),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14392>14392</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14393>14393</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14394>14394</a></td>\n' +
            '<td>LDAP_RENAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14395>14395</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14396>14396</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14397>14397</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14398>14398</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14399>14399</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14400>14400</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14401>14401</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14402>14402</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14403>14403</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14404>14404</a></td>\n' +
            '<td>ldap_rename, ldap_rename_s − Renames the specified entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14405>14405</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14406>14406</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14407>14407</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14408>14408</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14409>14409</a></td>\n' +
            '<td>int ldap_rename( ld, dn, newrdn, newparent, deleteoldrdn, sctrls[], cctrls[], msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14410>14410</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14411>14411</a></td>\n' +
            '<td>const char *dn, *newrdn, *newparent;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14412>14412</a></td>\n' +
            '<td>int deleteoldrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14413>14413</a></td>\n' +
            '<td>LDAPControl *sctrls[], *cctrls[];</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14414>14414</a></td>\n' +
            '<td>int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14415>14415</a></td>\n' +
            '<td>int ldap_rename_s( ld, dn, newrdn, newparent, deleteoldrdn, sctrls[], cctrls[] );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14416>14416</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14417>14417</a></td>\n' +
            '<td>const char *dn, *newrdn, *newparent;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14418>14418</a></td>\n' +
            '<td>int deleteoldrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14419>14419</a></td>\n' +
            '<td>LDAPControl *sctrls[], *cctrls[];</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14420>14420</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14421>14421</a></td>\n' +
            '<td>These routines are used to perform a LDAP rename operation. The function changes the leaf component of an entry’s distinguished name and optionally moves the entry to a new parent container. The ldap_rename_s performs a rename operation synchronously. The method takes dn, which points to the distinguished name of the entry whose attribute is being compared, newparent,the distinguished name of the entry’s new parent. If this parameter is NULL, only the RDN is changed. The root DN is specified by passing a zero length string, "". deleteoldrdn specifies whether the old RDN should be retained or deleted. Zero indicates that the old RDN should be retained. If you choose this option, the attribute will contain both names (the old and the new). Non-zero indicates that the old RDN should be deleted. serverctrls points to an array of LDAPControl structures that list the client controls to use with this extended operation. Use NULL to specify no client controls. clientctrls points to an array of LDAPControl structures that list the client controls to use with the search.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14422>14422</a></td>\n' +
            '<td>ldap_rename works just like ldap_rename_s, but the operation is asynchronous. It returns the message id of the request it initiated. The result of this operation can be obtained by calling ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14423>14423</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14424>14424</a></td>\n' +
            '<td>ldap_rename() returns −1 in case of error initiating the request, and will set the ld_errno field in the ld parameter to indicate the error. ldap_rename_s() returns the LDAP error code resulting from the rename operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14425>14425</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14426>14426</a></td>\n' +
            '<td>ldap(3), ldap_modify(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14427>14427</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14428>14428</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14429>14429</a></td>\n' +
            '<td>LDAP_RENAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14430>14430</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14431>14431</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14432>14432</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14433>14433</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14434>14434</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14435>14435</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14436>14436</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14437>14437</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14438>14438</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14439>14439</a></td>\n' +
            '<td>ldap_rename, ldap_rename_s − Renames the specified entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14440>14440</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14441>14441</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14442>14442</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14443>14443</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14444>14444</a></td>\n' +
            '<td>int ldap_rename( ld, dn, newrdn, newparent, deleteoldrdn, sctrls[], cctrls[], msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14445>14445</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14446>14446</a></td>\n' +
            '<td>const char *dn, *newrdn, *newparent;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14447>14447</a></td>\n' +
            '<td>int deleteoldrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14448>14448</a></td>\n' +
            '<td>LDAPControl *sctrls[], *cctrls[];</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14449>14449</a></td>\n' +
            '<td>int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14450>14450</a></td>\n' +
            '<td>int ldap_rename_s( ld, dn, newrdn, newparent, deleteoldrdn, sctrls[], cctrls[] );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14451>14451</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14452>14452</a></td>\n' +
            '<td>const char *dn, *newrdn, *newparent;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14453>14453</a></td>\n' +
            '<td>int deleteoldrdn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14454>14454</a></td>\n' +
            '<td>LDAPControl *sctrls[], *cctrls[];</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14455>14455</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14456>14456</a></td>\n' +
            '<td>These routines are used to perform a LDAP rename operation. The function changes the leaf component of an entry’s distinguished name and optionally moves the entry to a new parent container. The ldap_rename_s performs a rename operation synchronously. The method takes dn, which points to the distinguished name of the entry whose attribute is being compared, newparent,the distinguished name of the entry’s new parent. If this parameter is NULL, only the RDN is changed. The root DN is specified by passing a zero length string, "". deleteoldrdn specifies whether the old RDN should be retained or deleted. Zero indicates that the old RDN should be retained. If you choose this option, the attribute will contain both names (the old and the new). Non-zero indicates that the old RDN should be deleted. serverctrls points to an array of LDAPControl structures that list the client controls to use with this extended operation. Use NULL to specify no client controls. clientctrls points to an array of LDAPControl structures that list the client controls to use with the search.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14457>14457</a></td>\n' +
            '<td>ldap_rename works just like ldap_rename_s, but the operation is asynchronous. It returns the message id of the request it initiated. The result of this operation can be obtained by calling ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14458>14458</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14459>14459</a></td>\n' +
            '<td>ldap_rename() returns −1 in case of error initiating the request, and will set the ld_errno field in the ld parameter to indicate the error. ldap_rename_s() returns the LDAP error code resulting from the rename operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14460>14460</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14461>14461</a></td>\n' +
            '<td>ldap(3), ldap_modify(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14462>14462</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14463>14463</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14464>14464</a></td>\n' +
            '<td>LDAP_RESULT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14465>14465</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14466>14466</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14467>14467</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14468>14468</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14469>14469</a></td>\n' +
            '<td>RETURN VALUE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14470>14470</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14471>14471</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14472>14472</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14473>14473</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14474>14474</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14475>14475</a></td>\n' +
            '<td>ldap_result − Wait for the result of an LDAP operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14476>14476</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14477>14477</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14478>14478</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14479>14479</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14480>14480</a></td>\n' +
            '<td>int ldap_result( LDAP *ld, int msgid, int all,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14481>14481</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14482>14482</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14483>14483</a></td>\n' +
            '<td>struct timeval *timeout, LDAPMessage **result );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14484>14484</a></td>\n' +
            '<td>int ldap_msgfree( LDAPMessage *msg );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14485>14485</a></td>\n' +
            '<td>int ldap_msgtype( LDAPMessage *msg );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14486>14486</a></td>\n' +
            '<td>int ldap_msgid( LDAPMessage *msg );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14487>14487</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14488>14488</a></td>\n' +
            '<td>The ldap_result() routine is used to wait for and return the result of an operation previously initiated by one of the LDAP asynchronous operation routines (e.g., ldap_search_ext(3), ldap_modify_ext(3), etc.). Those routines all return −1 in case of error, and an invocation identifier upon successful initiation of the operation. The invocation identifier is picked by the library and is guaranteed to be unique across the LDAP session. It can be used to request the result of a specific operation from ldap_result() through the msgid parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14489>14489</a></td>\n' +
            '<td>The ldap_result() routine will block or not, depending upon the setting of the timeout parameter. If timeout is not a NULL pointer, it specifies a maximum interval to wait for the selection to complete. If timeout is a NULL pointer, the LDAP_OPT_TIMEOUT value set by ldap_set_option(3) is used. With the default setting, the select blocks indefinitely. To effect a poll, the timeout argument should be a non-NULL pointer, pointing to a zero-valued timeval structure. To obtain the behavior of the default setting, bypassing any value set by ldap_set_option(3), set to -1 the tv_sec field of the timeout parameter. See select(2) for further details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14490>14490</a></td>\n' +
            '<td>If the result of a specific operation is required, msgid should be set to the invocation identifier returned when the operation was initiated, otherwise LDAP_RES_ANY or LDAP_RES_UNSOLICITED should be supplied to wait for any or unsolicited response.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14491>14491</a></td>\n' +
            '<td>The all parameter, if non-zero, causes ldap_result() to return all responses with msgid, otherwise only the next response is returned. This is commonly used to obtain all the responses of a search operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14492>14492</a></td>\n' +
            '<td>A search response is made up of zero or more search entries, zero or more search references, and zero or more extended partial responses followed by a search result. If all is set to 0, search entries will be returned one at a time as they come in, via separate calls to ldap_result(). If it’s set to 1, the search response will only be returned in its entirety, i.e., after all entries, all references, all extended partial responses, and the final search result have been received.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14493>14493</a></td>\n' +
            '<td>RETURN VALUE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14494>14494</a></td>\n' +
            '<td>Upon success, the type of the result received is returned and the result parameter will contain the result of the operation; otherwise, the result parameter is undefined. This result should be passed to the LDAP parsing routines, ldap_first_message(3) and friends, for interpretation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14495>14495</a></td>\n' +
            '<td>The possible result types returned are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14496>14496</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14497>14497</a></td>\n' +
            '<td>LDAP_RES_BIND (0x61)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14498>14498</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14499>14499</a></td>\n' +
            '<td>LDAP_RES_SEARCH_ENTRY (0x64)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14500>14500</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14501>14501</a></td>\n' +
            '<td>LDAP_RES_SEARCH_REFERENCE (0x73)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14502>14502</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14503>14503</a></td>\n' +
            '<td>LDAP_RES_SEARCH_RESULT (0x65)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14504>14504</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14505>14505</a></td>\n' +
            '<td>LDAP_RES_MODIFY (0x67)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14506>14506</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14507>14507</a></td>\n' +
            '<td>LDAP_RES_ADD (0x69)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14508>14508</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14509>14509</a></td>\n' +
            '<td>LDAP_RES_DELETE (0x6b)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14510>14510</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14511>14511</a></td>\n' +
            '<td>LDAP_RES_MODDN (0x6d)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14512>14512</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14513>14513</a></td>\n' +
            '<td>LDAP_RES_COMPARE (0x6f)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14514>14514</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14515>14515</a></td>\n' +
            '<td>LDAP_RES_EXTENDED (0x78)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14516>14516</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14517>14517</a></td>\n' +
            '<td>LDAP_RES_INTERMEDIATE (0x79)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14518>14518</a></td>\n' +
            '<td>The ldap_msgfree() routine is used to free the memory allocated for result(s) by ldap_result() or ldap_search_ext_s(3) and friends. It takes a pointer to the result or result chain to be freed and returns the type of the last message in the chain. If the parameter is NULL, the function does nothing and returns zero.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14519>14519</a></td>\n' +
            '<td>The ldap_msgtype() routine returns the type of a message.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14520>14520</a></td>\n' +
            '<td>The ldap_msgid() routine returns the message id of a message.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14521>14521</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14522>14522</a></td>\n' +
            '<td>ldap_result() returns −1 if something bad happens, and zero if the timeout specified was exceeded. ldap_msgtype() and ldap_msgid() return −1 on error.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14523>14523</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14524>14524</a></td>\n' +
            '<td>ldap(3), ldap_first_message(3), select(2)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14525>14525</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14526>14526</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14527>14527</a></td>\n' +
            '<td>LDAP_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14528>14528</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14529>14529</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14530>14530</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14531>14531</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14532>14532</a></td>\n' +
            '<td>PROTOCOL RESULT CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14533>14533</a></td>\n' +
            '<td>API ERROR CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14534>14534</a></td>\n' +
            '<td>DEPRECATED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14535>14535</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14536>14536</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14537>14537</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14538>14538</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14539>14539</a></td>\n' +
            '<td>ldap_perror, ld_errno, ldap_result2error, ldap_errlist, ldap_err2string − LDAP protocol error handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14540>14540</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14541>14541</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14542>14542</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14543>14543</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14544>14544</a></td>\n' +
            '<td>char *ldap_err2string( int err );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14545>14545</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14546>14546</a></td>\n' +
            '<td>The ldap_err2string() routine provides short description of the various codes returned by routines in this library. The returned string is a pointer to a static area that should not be modified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14547>14547</a></td>\n' +
            '<td>These codes are either negative, indicating an API error code; positive, indicating an LDAP resultCode other than ´success’ (0), or - zero, indicating both successful use of the API and the LDAP resultCode ´success’ (0).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14548>14548</a></td>\n' +
            '<td>The code associated with an LDAP session is accessible using ldap_get_option(3) and ldap_set_option(3) with the LDAP_OPT_RESULT_CODE option (previously called LDAP_OPT_ERROR_NUMBER).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14549>14549</a></td>\n' +
            '<td>PROTOCOL RESULT CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14550>14550</a></td>\n' +
            '<td>This section provides a partial list of protocol codes recognized by the library. As LDAP is extensible, additional values may be returned. A complete listing of registered LDAP result codes can be obtained from the Internet Assigned Numbers Authority &lt;http://www.iana.org&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14551>14551</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14552>14552</a></td>\n' +
            '<td>LDAP_SUCCESS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14553>14553</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14554>14554</a></td>\n' +
            '<td>The request was successful.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14555>14555</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14556>14556</a></td>\n' +
            '<td>LDAP_OPERATIONS_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14557>14557</a></td>\n' +
            '<td>An operations error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14558>14558</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14559>14559</a></td>\n' +
            '<td>LDAP_PROTOCOL _ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14560>14560</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14561>14561</a></td>\n' +
            '<td>A protocol violation was detected.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14562>14562</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14563>14563</a></td>\n' +
            '<td>LDAP_TIMELIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14564>14564</a></td>\n' +
            '<td>An LDAP time limit was exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14565>14565</a></td>\n' +
            '<td>LDAP_SIZELIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14566>14566</a></td>\n' +
            '<td>An LDAP size limit was exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14567>14567</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14568>14568</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14569>14569</a></td>\n' +
            '<td>_FALSE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14570>14570</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14571>14571</a></td>\n' +
            '<td>A compare operation returned false.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14572>14572</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14573>14573</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14574>14574</a></td>\n' +
            '<td>LDAP_COMPARE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14575>14575</a></td>\n' +
            '<td>_TRUE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14576>14576</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14577>14577</a></td>\n' +
            '<td>A compare operation returned true.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14578>14578</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14579>14579</a></td>\n' +
            '<td>LDAP_STRONG_AUTH_NOT_SUPPORTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14580>14580</a></td>\n' +
            '<td>The LDAP server does not support strong authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14581>14581</a></td>\n' +
            '<td>LDAP_STRONG_AUTH_REQUIRED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14582>14582</a></td>\n' +
            '<td>Strong authentication is required for the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14583>14583</a></td>\n' +
            '<td>LDAP_PARTIAL_RESULTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14584>14584</a></td>\n' +
            '<td>Partial results only returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14585>14585</a></td>\n' +
            '<td>LDAP_NO_SUCH_ATTRIBUTE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14586>14586</a></td>\n' +
            '<td>The attribute type specified does not exist in the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14587>14587</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14588>14588</a></td>\n' +
            '<td>LDAP_UNDEFINED_T YPE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14589>14589</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14590>14590</a></td>\n' +
            '<td>The attribute type specified is invalid.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14591>14591</a></td>\n' +
            '<td>LDAP_INAPPROPRIATE_MATCHING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14592>14592</a></td>\n' +
            '<td>Filter type not supported for the specified attribute.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14593>14593</a></td>\n' +
            '<td>LDAP_CONSTRAINT_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14594>14594</a></td>\n' +
            '<td>An attribute value specified violates some constraint (e.g., a postalAddress has too many lines, or a line that is too long).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14595>14595</a></td>\n' +
            '<td>LDAP_TYPE_OR_VALUE_EXISTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14596>14596</a></td>\n' +
            '<td>An attribute type or attribute value specified already exists in the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14597>14597</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14598>14598</a></td>\n' +
            '<td>LDAP_INVALID_SYN TAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14599>14599</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14600>14600</a></td>\n' +
            '<td>An invalid attribute value was specified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14601>14601</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14602>14602</a></td>\n' +
            '<td>LDAP_NO_SUCH_OB JECT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14603>14603</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14604>14604</a></td>\n' +
            '<td>The specified object does not exist in The Directory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14605>14605</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14606>14606</a></td>\n' +
            '<td>LDAP_ALIAS_PROBL EM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14607>14607</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14608>14608</a></td>\n' +
            '<td>An alias in The Directory points to a nonexistent entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14609>14609</a></td>\n' +
            '<td>LDAP_INVALID_DN_SYNTAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14610>14610</a></td>\n' +
            '<td>A syntactically invalid DN was specified.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14611>14611</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14612>14612</a></td>\n' +
            '<td>LDAP_IS_LEAF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14613>14613</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14614>14614</a></td>\n' +
            '<td>The object specified is a leaf.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14615>14615</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14616>14616</a></td>\n' +
            '<td>LDAP_ALIAS_DEREF_PROBLEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14617>14617</a></td>\n' +
            '<td>A problem was encountered when dereferencing an alias.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14618>14618</a></td>\n' +
            '<td>LDAP_INAPPROPRIATE_AUTH</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14619>14619</a></td>\n' +
            '<td>Inappropriate authentication was specified (e.g., LDAP_AUTH_SIMPLE was specified and the entry does not have a userPassword attribute).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14620>14620</a></td>\n' +
            '<td>LDAP_INVALID_CREDENTIALS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14621>14621</a></td>\n' +
            '<td>Invalid credentials were presented (e.g., the wrong password).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14622>14622</a></td>\n' +
            '<td>LDAP_INSUFFICIENT_ACCESS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14623>14623</a></td>\n' +
            '<td>The user has insufficient access to perform the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14624>14624</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14625>14625</a></td>\n' +
            '<td>LDAP_BUSY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14626>14626</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14627>14627</a></td>\n' +
            '<td>The DSA is busy.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14628>14628</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14629>14629</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14630>14630</a></td>\n' +
            '<td>LDAP_UNAVAILA BLE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14631>14631</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14632>14632</a></td>\n' +
            '<td>The DSA is unavailable.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14633>14633</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14634>14634</a></td>\n' +
            '<td>LDAP_UNWILLING_TO_PERFORM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14635>14635</a></td>\n' +
            '<td>The DSA is unwilling to perform the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14636>14636</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14637>14637</a></td>\n' +
            '<td>LDAP_LOOP_DE TECT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14638>14638</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14639>14639</a></td>\n' +
            '<td>A loop was detected.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14640>14640</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14641>14641</a></td>\n' +
            '<td>LDAP_NAMING_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14642>14642</a></td>\n' +
            '<td>A naming violation occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14643>14643</a></td>\n' +
            '<td>LDAP_OBJECT_CLASS_VIOLATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14644>14644</a></td>\n' +
            '<td>An object class violation occurred (e.g., a "must" attribute was missing from the entry).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14645>14645</a></td>\n' +
            '<td>LDAP_NOT_ALLOWED_ON_NONLEAF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14646>14646</a></td>\n' +
            '<td>The operation is not allowed on a nonleaf object.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14647>14647</a></td>\n' +
            '<td>LDAP_NOT_ALLOWED_ON_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14648>14648</a></td>\n' +
            '<td>The operation is not allowed on an RDN.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14649>14649</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14650>14650</a></td>\n' +
            '<td>LDAP_ALREADY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14651>14651</a></td>\n' +
            '<td>_EXISTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14652>14652</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14653>14653</a></td>\n' +
            '<td>The entry already exists.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14654>14654</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14655>14655</a></td>\n' +
            '<td>LDAP_NO_OBJECT_CLASS_MODS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14656>14656</a></td>\n' +
            '<td>Object class modifications are not allowed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14657>14657</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14658>14658</a></td>\n' +
            '<td>LDAP_OTHER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14659>14659</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14660>14660</a></td>\n' +
            '<td>An unknown error occurred.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14661>14661</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14662>14662</a></td>\n' +
            '<td>API ERROR CODES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14663>14663</a></td>\n' +
            '<td>This section provides a complete list of API error codes recognized by the library. Note that LDAP_SUCCESS indicates success of an API call in addition to representing the return of the LDAP ´success’ resultCode.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14664>14664</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14665>14665</a></td>\n' +
            '<td>LDAP_SERVER_DOWN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14666>14666</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14667>14667</a></td>\n' +
            '<td>The LDAP library can’t contact the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14668>14668</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14669>14669</a></td>\n' +
            '<td>LDAP_LOCAL_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14670>14670</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14671>14671</a></td>\n' +
            '<td>Some local error occurred. This is usually a failed dynamic memory allocation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14672>14672</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14673>14673</a></td>\n' +
            '<td>LDAP_ENCODING_ER ROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14674>14674</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14675>14675</a></td>\n' +
            '<td>An error was encountered encoding parameters to send to the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14676>14676</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14677>14677</a></td>\n' +
            '<td>LDAP_DECODING_ER ROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14678>14678</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14679>14679</a></td>\n' +
            '<td>An error was encountered decoding a result from the LDAP server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14680>14680</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14681>14681</a></td>\n' +
            '<td>LDAP_TIMEOUT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14682>14682</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14683>14683</a></td>\n' +
            '<td>A timelimit was exceeded while waiting for a result.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14684>14684</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14685>14685</a></td>\n' +
            '<td>LDAP_AUTH_UNKNOW N</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14686>14686</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14687>14687</a></td>\n' +
            '<td>The authentication method specified to ldap_bind() is not known.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14688>14688</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14689>14689</a></td>\n' +
            '<td>LDAP_FILTER_ERRO R</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14690>14690</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14691>14691</a></td>\n' +
            '<td>An invalid filter was supplied to ldap_search() (e.g., unbalanced parentheses).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14692>14692</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14693>14693</a></td>\n' +
            '<td>LDAP_PARAM_ERROR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14694>14694</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14695>14695</a></td>\n' +
            '<td>An ldap routine was called with a bad parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14696>14696</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14697>14697</a></td>\n' +
            '<td>LDAP_NO_MEMORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14698>14698</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14699>14699</a></td>\n' +
            '<td>An memory allocation (e.g., malloc(3) or other dynamic memory allocator) call failed in an ldap library routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14700>14700</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14701>14701</a></td>\n' +
            '<td>LDAP_USER_CANCEL ED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14702>14702</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14703>14703</a></td>\n' +
            '<td>Indicates the user cancelled the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14704>14704</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14705>14705</a></td>\n' +
            '<td>LDAP_CONNECT_ERR OR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14706>14706</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14707>14707</a></td>\n' +
            '<td>Indicates a connection problem.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14708>14708</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14709>14709</a></td>\n' +
            '<td>LDAP_NOT_SUPPORT ED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14710>14710</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14711>14711</a></td>\n' +
            '<td>Indicates the routine was called in a manner not supported by the library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14712>14712</a></td>\n' +
            '<td>LDAP_CONTROL_NOT_FOUND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14713>14713</a></td>\n' +
            '<td>Indicates the control provided is unknown to the client library.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14714>14714</a></td>\n' +
            '<td>LDAP_NO_RESULTS_RETURNED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14715>14715</a></td>\n' +
            '<td>Indicates no results returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14716>14716</a></td>\n' +
            '<td>LDAP_MORE_RESULTS_TO_RETURN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14717>14717</a></td>\n' +
            '<td>Indicates more results could be returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14718>14718</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14719>14719</a></td>\n' +
            '<td>LDAP_CLIENT_LOOP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14720>14720</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14721>14721</a></td>\n' +
            '<td>Indicates the library has detected a loop in its processing.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14722>14722</a></td>\n' +
            '<td>LDAP_REFERRAL_LIMIT_EXCEEDED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14723>14723</a></td>\n' +
            '<td>Indicates the referral limit has been exceeded.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14724>14724</a></td>\n' +
            '<td>DEPRECATED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14725>14725</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14726>14726</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14727>14727</a></td>\n' +
            '<td>ldap(3),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14728>14728</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14729>14729</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14730>14730</a></td>\n' +
            '<td>LDAP_BIND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14731>14731</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14732>14732</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14733>14733</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14734>14734</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14735>14735</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14736>14736</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14737>14737</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14738>14738</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14739>14739</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14740>14740</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14741>14741</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14742>14742</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14743>14743</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14744>14744</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14745>14745</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14746>14746</a></td>\n' +
            '<td>ldap_bind, ldap_bind_s, ldap_simple_bind, ldap_simple_bind_s, ldap_sasl_bind, ldap_sasl_bind_s, ldap_sasl_interactive_bind_s, ldap_parse_sasl_bind_result, ldap_unbind, ldap_unbind_s, ldap_unbind_ext, ldap_unbind_ext_s, ldap_set_rebind_proc − LDAP bind routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14747>14747</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14748>14748</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14749>14749</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14750>14750</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14751>14751</a></td>\n' +
            '<td>int ldap_bind(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14752>14752</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14753>14753</a></td>\n' +
            '<td>int ldap_bind_s(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14754>14754</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14755>14755</a></td>\n' +
            '<td>int ldap_simple_bind(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14756>14756</a></td>\n' +
            '<td>int ldap_simple_bind_s(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14757>14757</a></td>\n' +
            '<td>int ldap_sasl_bind(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14758>14758</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14759>14759</a></td>\n' +
            '<td>LDAPControl *cctrls[], int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14760>14760</a></td>\n' +
            '<td>int ldap_sasl_bind_s(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14761>14761</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14762>14762</a></td>\n' +
            '<td>LDAPControl *cctrls[], struct berval **servercredp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14763>14763</a></td>\n' +
            '<td>int ldap_parse_sasl_bind_result(LDAP *ld, LDAPMessage *res,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14764>14764</a></td>\n' +
            '<td>struct berval **servercredp, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14765>14765</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind_s(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14766>14766</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14767>14767</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14768>14768</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14769>14769</a></td>\n' +
            '<td>void *defaults);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14770>14770</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14771>14771</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14772>14772</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14773>14773</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14774>14774</a></td>\n' +
            '<td>void *defaults, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14775>14775</a></td>\n' +
            '<td>const char **rmechp, int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14776>14776</a></td>\n' +
            '<td>int (LDAP_SASL_INTERACT_PROC)(LDAP *ld, unsigned flags, void *defaults, void *sasl_interact);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14777>14777</a></td>\n' +
            '<td>int ldap_unbind(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14778>14778</a></td>\n' +
            '<td>int ldap_unbind_s(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14779>14779</a></td>\n' +
            '<td>int ldap_unbind_ext(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14780>14780</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14781>14781</a></td>\n' +
            '<td>int ldap_unbind_ext_s(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14782>14782</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14783>14783</a></td>\n' +
            '<td>int ldap_set_rebind_proc (LDAP *ld, LDAP_REBIND_PROC *ldap_proc, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14784>14784</a></td>\n' +
            '<td>int (LDAP_REBIND_PROC)(LDAP *ld, LDAP_CONST char *url, ber_tag_t request, ber_int_t msgid, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14785>14785</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14786>14786</a></td>\n' +
            '<td>These routines provide various interfaces to the LDAP bind operation. After an association with an LDAP server is made using ldap_init(3), an LDAP bind operation should be performed before other operations are attempted over the connection. An LDAP bind is required when using Version 2 of the LDAP protocol; it is optional for Version 3 but is usually needed due to security considerations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14787>14787</a></td>\n' +
            '<td>There are three types of bind calls, ones providing simple authentication, ones providing SASL authentication, and general routines capable of doing either simple or SASL authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14788>14788</a></td>\n' +
            '<td>SASL (Simple Authentication and Security Layer) can negotiate one of many different kinds of authentication. Both synchronous and asynchronous versions of each variant of the bind call are provided. All routines take ld as their first parameter, as returned from ldap_init(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14789>14789</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14790>14790</a></td>\n' +
            '<td>The simplest form of the bind call is ldap_simple_bind_s(). It takes the DN to bind as in who, and the userPassword associated with the entry in passwd. It returns an LDAP error indication (see ldap_error(3)). The ldap_simple_bind() call is asynchronous, taking the same parameters but only initiating the bind operation and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14791>14791</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14792>14792</a></td>\n' +
            '<td>The ldap_bind() and ldap_bind_s() routines can be used when the authentication method to use needs to be selected at runtime. They both take an extra method parameter selecting the authentication method to use. It should be set to LDAP_AUTH_SIMPLE to select simple authentication. ldap_bind() returns the message id of the request it initiates. ldap_bind_s() returns an LDAP error indication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14793>14793</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14794>14794</a></td>\n' +
            '<td>For SASL binds the server always ignores any provided DN, so the dn parameter should always be NULL. ldap_sasl_bind_s() sends a single SASL bind request with the given SASL mechanism and credentials in the cred parameter. The format of the credentials depends on the particular SASL mechanism in use. For mechanisms that provide mutual authentication the server’s credentials will be returned in the servercredp parameter. The routine returns an LDAP error indication (see ldap_error(3)). The ldap_sasl_bind() call is asynchronous, taking the same parameters but only sending the request and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3). The result must be additionally parsed by ldap_parse_sasl_bind_result() to obtain any server credentials sent from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14795>14795</a></td>\n' +
            '<td>Many SASL mechanisms require multiple message exchanges to perform a complete authentication. Applications should generally use ldap_sasl_interactive_bind_s() rather than calling the basic ldap_sasl_bind() functions directly. The mechs parameter should contain a space-separated list of candidate mechanisms to use. If this parameter is NULL or empty the library will query the supportedSASLMechanisms attribute from the server’s rootDSE for the list of SASL mechanisms the server supports. The flags parameter controls the interaction used to retrieve any necessary SASL authentication parameters and should be one of:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14796>14796</a></td>\n' +
            '<td>LDAP_SASL_AUTOMATIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14797>14797</a></td>\n' +
            '<td>use defaults if available, prompt otherwise</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14798>14798</a></td>\n' +
            '<td>LDAP_SASL_INTERACTIVE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14799>14799</a></td>\n' +
            '<td>always prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14800>14800</a></td>\n' +
            '<td>LDAP_SASL_QUIET</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14801>14801</a></td>\n' +
            '<td>never prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14802>14802</a></td>\n' +
            '<td>The interact function uses the provided defaults to handle requests from the SASL library for particular authentication parameters. There is no defined format for the defaults information; it is up to the caller to use whatever format is appropriate for the supplied interact function. The sasl_interact parameter comes from the underlying SASL library. When used with Cyrus SASL this is an array of sasl_interact_t structures. The Cyrus SASL library will prompt for a variety of inputs, including:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14803>14803</a></td>\n' +
            '<td>SASL_CB_GETREALM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14804>14804</a></td>\n' +
            '<td>the realm for the authentication attempt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14805>14805</a></td>\n' +
            '<td>SASL_CB_AUTHNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14806>14806</a></td>\n' +
            '<td>the username to authenticate</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14807>14807</a></td>\n' +
            '<td>SASL_CB_PASS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14808>14808</a></td>\n' +
            '<td>the password for the provided username</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14809>14809</a></td>\n' +
            '<td>SASL_CB_USER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14810>14810</a></td>\n' +
            '<td>the username to use for proxy authorization</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14811>14811</a></td>\n' +
            '<td>SASL_CB_NOECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14812>14812</a></td>\n' +
            '<td>generic prompt for input with input echoing disabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14813>14813</a></td>\n' +
            '<td>SASL_CB_ECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14814>14814</a></td>\n' +
            '<td>generic prompt for input with input echoing enabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14815>14815</a></td>\n' +
            '<td>SASL_CB_LIST_END</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14816>14816</a></td>\n' +
            '<td>indicates the end of the array of prompts</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14817>14817</a></td>\n' +
            '<td>See the Cyrus SASL documentation for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14818>14818</a></td>\n' +
            '<td>Applications which need to manage connections asynchronously may use ldap_sasl_interactive_bind() instead of the synchronous version. A valid mechs parameter must be supplied, otherwise the library will be forced to query the server for a list of supported mechanisms, and this query will be performed synchronously. The other parameters are the same as for the synchronous function, with three additional parameters. The actual SASL mechanism that was used, and the message ID for use with ldap_result() will be returned in rmechp and msgidp, respectively. The value in rmechp must not be modified by the caller and must be passed back on each subsequent call. The message obtained from ldap_result() must be passed in the result parameter. This parameter must be NULL when initiating a new Bind. The caller must free the result message after each call using ldap_msgfree(). The ldap_sasl_interactive_bind() function returns an LDAP result code. If the code is LDAP_SASL_BIND_IN_PROGRESS then the Bind is not complete yet, and this function must be called again with the next result from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14819>14819</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14820>14820</a></td>\n' +
            '<td>The ldap_set_rebind_proc function() sets the process to use for binding when an operation returns a referral. This function is used when an application needs to bind to another server in order to follow a referral or search continuation reference.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14821>14821</a></td>\n' +
            '<td>The function takes ld, the rebind function, and the params, the arbitrary data like state information which the client might need to properly rebind. The LDAP_OPT_REFERRALS option in the ld must be set to ON for the libraries to use the rebind function. Use the ldap_set_option function to set the value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14822>14822</a></td>\n' +
            '<td>The rebind function parameters are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14823>14823</a></td>\n' +
            '<td>The ld parameter must be used by the application when binding to the referred server if the application wants the libraries to follow the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14824>14824</a></td>\n' +
            '<td>The url parameter points to the URL referral string received from the LDAP server. The LDAP application can use the ldap_url_parse(3) function to parse the string into its components.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14825>14825</a></td>\n' +
            '<td>The request parameter specifies the type of request that generated the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14826>14826</a></td>\n' +
            '<td>The msgid parameter specifies the message ID of the request generating the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14827>14827</a></td>\n' +
            '<td>The params parameter is the same value as passed originally to the ldap_set_rebind_proc() function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14828>14828</a></td>\n' +
            '<td>The LDAP libraries set all the parameters when they call the rebind function. The application should not attempt to free either the ld or the url structures in the rebind function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14829>14829</a></td>\n' +
            '<td>The application must supply to the rebind function the required authentication information such as, user name, password, and certificates. The rebind function must use a synchronous bind method.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14830>14830</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14831>14831</a></td>\n' +
            '<td>The ldap_unbind() call is used to unbind from the directory, terminate the current association, and free the resources contained in the ld structure. Once it is called, the connection to the LDAP server is closed, and the ld structure is invalid. The ldap_unbind_s() call is just another name for ldap_unbind(); both of these calls are synchronous in nature.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14832>14832</a></td>\n' +
            '<td>The ldap_unbind_ext() and ldap_unbind_ext_s() allows the operations to specify controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14833>14833</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14834>14834</a></td>\n' +
            '<td>Asynchronous routines will return −1 in case of error, setting the ld_errno parameter of the ld structure. Synchronous routines return whatever ld_errno is set to. See ldap_error(3) for more information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14835>14835</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14836>14836</a></td>\n' +
            '<td>If an anonymous bind is sufficient for the application, the rebind process need not be provided. The LDAP libraries with the LDAP_OPT_REFERRALS option set to ON (default value) will automatically follow referrals using an anonymous bind.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14837>14837</a></td>\n' +
            '<td>If the application needs stronger authentication than an anonymous bind, you need to provide a rebind process for that authentication method. The bind method must be synchronous.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14838>14838</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14839>14839</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_open(3), ldap_set_option(3), ldap_url_parse(3) RFC 4422 (http://www.rfc-editor.org), Cyrus SASL (http://asg.web.cmu.edu/sasl/)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14840>14840</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14841>14841</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14842>14842</a></td>\n' +
            '<td>LDAP_BIND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14843>14843</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14844>14844</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14845>14845</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14846>14846</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14847>14847</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14848>14848</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14849>14849</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14850>14850</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14851>14851</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14852>14852</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14853>14853</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14854>14854</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14855>14855</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14856>14856</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14857>14857</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14858>14858</a></td>\n' +
            '<td>ldap_bind, ldap_bind_s, ldap_simple_bind, ldap_simple_bind_s, ldap_sasl_bind, ldap_sasl_bind_s, ldap_sasl_interactive_bind_s, ldap_parse_sasl_bind_result, ldap_unbind, ldap_unbind_s, ldap_unbind_ext, ldap_unbind_ext_s, ldap_set_rebind_proc − LDAP bind routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14859>14859</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14860>14860</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14861>14861</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14862>14862</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14863>14863</a></td>\n' +
            '<td>int ldap_bind(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14864>14864</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14865>14865</a></td>\n' +
            '<td>int ldap_bind_s(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14866>14866</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14867>14867</a></td>\n' +
            '<td>int ldap_simple_bind(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14868>14868</a></td>\n' +
            '<td>int ldap_simple_bind_s(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14869>14869</a></td>\n' +
            '<td>int ldap_sasl_bind(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14870>14870</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14871>14871</a></td>\n' +
            '<td>LDAPControl *cctrls[], int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14872>14872</a></td>\n' +
            '<td>int ldap_sasl_bind_s(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14873>14873</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14874>14874</a></td>\n' +
            '<td>LDAPControl *cctrls[], struct berval **servercredp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14875>14875</a></td>\n' +
            '<td>int ldap_parse_sasl_bind_result(LDAP *ld, LDAPMessage *res,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14876>14876</a></td>\n' +
            '<td>struct berval **servercredp, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14877>14877</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind_s(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14878>14878</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14879>14879</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14880>14880</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14881>14881</a></td>\n' +
            '<td>void *defaults);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14882>14882</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14883>14883</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14884>14884</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14885>14885</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14886>14886</a></td>\n' +
            '<td>void *defaults, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14887>14887</a></td>\n' +
            '<td>const char **rmechp, int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14888>14888</a></td>\n' +
            '<td>int (LDAP_SASL_INTERACT_PROC)(LDAP *ld, unsigned flags, void *defaults, void *sasl_interact);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14889>14889</a></td>\n' +
            '<td>int ldap_unbind(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14890>14890</a></td>\n' +
            '<td>int ldap_unbind_s(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14891>14891</a></td>\n' +
            '<td>int ldap_unbind_ext(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14892>14892</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14893>14893</a></td>\n' +
            '<td>int ldap_unbind_ext_s(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14894>14894</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14895>14895</a></td>\n' +
            '<td>int ldap_set_rebind_proc (LDAP *ld, LDAP_REBIND_PROC *ldap_proc, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14896>14896</a></td>\n' +
            '<td>int (LDAP_REBIND_PROC)(LDAP *ld, LDAP_CONST char *url, ber_tag_t request, ber_int_t msgid, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14897>14897</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14898>14898</a></td>\n' +
            '<td>These routines provide various interfaces to the LDAP bind operation. After an association with an LDAP server is made using ldap_init(3), an LDAP bind operation should be performed before other operations are attempted over the connection. An LDAP bind is required when using Version 2 of the LDAP protocol; it is optional for Version 3 but is usually needed due to security considerations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14899>14899</a></td>\n' +
            '<td>There are three types of bind calls, ones providing simple authentication, ones providing SASL authentication, and general routines capable of doing either simple or SASL authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14900>14900</a></td>\n' +
            '<td>SASL (Simple Authentication and Security Layer) can negotiate one of many different kinds of authentication. Both synchronous and asynchronous versions of each variant of the bind call are provided. All routines take ld as their first parameter, as returned from ldap_init(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14901>14901</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14902>14902</a></td>\n' +
            '<td>The simplest form of the bind call is ldap_simple_bind_s(). It takes the DN to bind as in who, and the userPassword associated with the entry in passwd. It returns an LDAP error indication (see ldap_error(3)). The ldap_simple_bind() call is asynchronous, taking the same parameters but only initiating the bind operation and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14903>14903</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14904>14904</a></td>\n' +
            '<td>The ldap_bind() and ldap_bind_s() routines can be used when the authentication method to use needs to be selected at runtime. They both take an extra method parameter selecting the authentication method to use. It should be set to LDAP_AUTH_SIMPLE to select simple authentication. ldap_bind() returns the message id of the request it initiates. ldap_bind_s() returns an LDAP error indication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14905>14905</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14906>14906</a></td>\n' +
            '<td>For SASL binds the server always ignores any provided DN, so the dn parameter should always be NULL. ldap_sasl_bind_s() sends a single SASL bind request with the given SASL mechanism and credentials in the cred parameter. The format of the credentials depends on the particular SASL mechanism in use. For mechanisms that provide mutual authentication the server’s credentials will be returned in the servercredp parameter. The routine returns an LDAP error indication (see ldap_error(3)). The ldap_sasl_bind() call is asynchronous, taking the same parameters but only sending the request and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3). The result must be additionally parsed by ldap_parse_sasl_bind_result() to obtain any server credentials sent from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14907>14907</a></td>\n' +
            '<td>Many SASL mechanisms require multiple message exchanges to perform a complete authentication. Applications should generally use ldap_sasl_interactive_bind_s() rather than calling the basic ldap_sasl_bind() functions directly. The mechs parameter should contain a space-separated list of candidate mechanisms to use. If this parameter is NULL or empty the library will query the supportedSASLMechanisms attribute from the server’s rootDSE for the list of SASL mechanisms the server supports. The flags parameter controls the interaction used to retrieve any necessary SASL authentication parameters and should be one of:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14908>14908</a></td>\n' +
            '<td>LDAP_SASL_AUTOMATIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14909>14909</a></td>\n' +
            '<td>use defaults if available, prompt otherwise</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14910>14910</a></td>\n' +
            '<td>LDAP_SASL_INTERACTIVE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14911>14911</a></td>\n' +
            '<td>always prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14912>14912</a></td>\n' +
            '<td>LDAP_SASL_QUIET</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14913>14913</a></td>\n' +
            '<td>never prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14914>14914</a></td>\n' +
            '<td>The interact function uses the provided defaults to handle requests from the SASL library for particular authentication parameters. There is no defined format for the defaults information; it is up to the caller to use whatever format is appropriate for the supplied interact function. The sasl_interact parameter comes from the underlying SASL library. When used with Cyrus SASL this is an array of sasl_interact_t structures. The Cyrus SASL library will prompt for a variety of inputs, including:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14915>14915</a></td>\n' +
            '<td>SASL_CB_GETREALM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14916>14916</a></td>\n' +
            '<td>the realm for the authentication attempt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14917>14917</a></td>\n' +
            '<td>SASL_CB_AUTHNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14918>14918</a></td>\n' +
            '<td>the username to authenticate</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14919>14919</a></td>\n' +
            '<td>SASL_CB_PASS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14920>14920</a></td>\n' +
            '<td>the password for the provided username</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14921>14921</a></td>\n' +
            '<td>SASL_CB_USER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14922>14922</a></td>\n' +
            '<td>the username to use for proxy authorization</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14923>14923</a></td>\n' +
            '<td>SASL_CB_NOECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14924>14924</a></td>\n' +
            '<td>generic prompt for input with input echoing disabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14925>14925</a></td>\n' +
            '<td>SASL_CB_ECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14926>14926</a></td>\n' +
            '<td>generic prompt for input with input echoing enabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14927>14927</a></td>\n' +
            '<td>SASL_CB_LIST_END</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14928>14928</a></td>\n' +
            '<td>indicates the end of the array of prompts</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14929>14929</a></td>\n' +
            '<td>See the Cyrus SASL documentation for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14930>14930</a></td>\n' +
            '<td>Applications which need to manage connections asynchronously may use ldap_sasl_interactive_bind() instead of the synchronous version. A valid mechs parameter must be supplied, otherwise the library will be forced to query the server for a list of supported mechanisms, and this query will be performed synchronously. The other parameters are the same as for the synchronous function, with three additional parameters. The actual SASL mechanism that was used, and the message ID for use with ldap_result() will be returned in rmechp and msgidp, respectively. The value in rmechp must not be modified by the caller and must be passed back on each subsequent call. The message obtained from ldap_result() must be passed in the result parameter. This parameter must be NULL when initiating a new Bind. The caller must free the result message after each call using ldap_msgfree(). The ldap_sasl_interactive_bind() function returns an LDAP result code. If the code is LDAP_SASL_BIND_IN_PROGRESS then the Bind is not complete yet, and this function must be called again with the next result from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14931>14931</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14932>14932</a></td>\n' +
            '<td>The ldap_set_rebind_proc function() sets the process to use for binding when an operation returns a referral. This function is used when an application needs to bind to another server in order to follow a referral or search continuation reference.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14933>14933</a></td>\n' +
            '<td>The function takes ld, the rebind function, and the params, the arbitrary data like state information which the client might need to properly rebind. The LDAP_OPT_REFERRALS option in the ld must be set to ON for the libraries to use the rebind function. Use the ldap_set_option function to set the value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14934>14934</a></td>\n' +
            '<td>The rebind function parameters are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14935>14935</a></td>\n' +
            '<td>The ld parameter must be used by the application when binding to the referred server if the application wants the libraries to follow the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14936>14936</a></td>\n' +
            '<td>The url parameter points to the URL referral string received from the LDAP server. The LDAP application can use the ldap_url_parse(3) function to parse the string into its components.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14937>14937</a></td>\n' +
            '<td>The request parameter specifies the type of request that generated the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14938>14938</a></td>\n' +
            '<td>The msgid parameter specifies the message ID of the request generating the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14939>14939</a></td>\n' +
            '<td>The params parameter is the same value as passed originally to the ldap_set_rebind_proc() function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14940>14940</a></td>\n' +
            '<td>The LDAP libraries set all the parameters when they call the rebind function. The application should not attempt to free either the ld or the url structures in the rebind function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14941>14941</a></td>\n' +
            '<td>The application must supply to the rebind function the required authentication information such as, user name, password, and certificates. The rebind function must use a synchronous bind method.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14942>14942</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14943>14943</a></td>\n' +
            '<td>The ldap_unbind() call is used to unbind from the directory, terminate the current association, and free the resources contained in the ld structure. Once it is called, the connection to the LDAP server is closed, and the ld structure is invalid. The ldap_unbind_s() call is just another name for ldap_unbind(); both of these calls are synchronous in nature.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14944>14944</a></td>\n' +
            '<td>The ldap_unbind_ext() and ldap_unbind_ext_s() allows the operations to specify controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14945>14945</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14946>14946</a></td>\n' +
            '<td>Asynchronous routines will return −1 in case of error, setting the ld_errno parameter of the ld structure. Synchronous routines return whatever ld_errno is set to. See ldap_error(3) for more information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14947>14947</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14948>14948</a></td>\n' +
            '<td>If an anonymous bind is sufficient for the application, the rebind process need not be provided. The LDAP libraries with the LDAP_OPT_REFERRALS option set to ON (default value) will automatically follow referrals using an anonymous bind.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14949>14949</a></td>\n' +
            '<td>If the application needs stronger authentication than an anonymous bind, you need to provide a rebind process for that authentication method. The bind method must be synchronous.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14950>14950</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14951>14951</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_open(3), ldap_set_option(3), ldap_url_parse(3) RFC 4422 (http://www.rfc-editor.org), Cyrus SASL (http://asg.web.cmu.edu/sasl/)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14952>14952</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14953>14953</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14954>14954</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14955>14955</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14956>14956</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14957>14957</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14958>14958</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14959>14959</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14960>14960</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14961>14961</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14962>14962</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14963>14963</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14964>14964</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14965>14965</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14966>14966</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14967>14967</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14968>14968</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14969>14969</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14970>14970</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14971>14971</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14972>14972</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14973>14973</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14974>14974</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14975>14975</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14976>14976</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14977>14977</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14978>14978</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14979>14979</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14980>14980</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14981>14981</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14982>14982</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14983>14983</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14984>14984</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14985>14985</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14986>14986</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14987>14987</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14988>14988</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14989>14989</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14990>14990</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14991>14991</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14992>14992</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14993>14993</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14994>14994</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14995>14995</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14996>14996</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14997>14997</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14998>14998</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=14999>14999</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15000>15000</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15001>15001</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15002>15002</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15003>15003</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15004>15004</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15005>15005</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15006>15006</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15007>15007</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15008>15008</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15009>15009</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15010>15010</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15011>15011</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15012>15012</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15013>15013</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15014>15014</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15015>15015</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15016>15016</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15017>15017</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15018>15018</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15019>15019</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15020>15020</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15021>15021</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15022>15022</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15023>15023</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15024>15024</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15025>15025</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15026>15026</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15027>15027</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15028>15028</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15029>15029</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15030>15030</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15031>15031</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15032>15032</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15033>15033</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15034>15034</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15035>15035</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15036>15036</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15037>15037</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15038>15038</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15039>15039</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15040>15040</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15041>15041</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15042>15042</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15043>15043</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15044>15044</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15045>15045</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15046>15046</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15047>15047</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15048>15048</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15049>15049</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15050>15050</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15051>15051</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15052>15052</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15053>15053</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15054>15054</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15055>15055</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15056>15056</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15057>15057</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15058>15058</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15059>15059</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15060>15060</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15061>15061</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15062>15062</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15063>15063</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15064>15064</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15065>15065</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15066>15066</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15067>15067</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15068>15068</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15069>15069</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15070>15070</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15071>15071</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15072>15072</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15073>15073</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15074>15074</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15075>15075</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15076>15076</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15077>15077</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15078>15078</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15079>15079</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15080>15080</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15081>15081</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15082>15082</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15083>15083</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15084>15084</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15085>15085</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15086>15086</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15087>15087</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15088>15088</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15089>15089</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15090>15090</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15091>15091</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15092>15092</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15093>15093</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15094>15094</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15095>15095</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15096>15096</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15097>15097</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15098>15098</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15099>15099</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15100>15100</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15101>15101</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15102>15102</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15103>15103</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15104>15104</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15105>15105</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15106>15106</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15107>15107</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15108>15108</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15109>15109</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15110>15110</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15111>15111</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15112>15112</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15113>15113</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15114>15114</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15115>15115</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15116>15116</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15117>15117</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15118>15118</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15119>15119</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15120>15120</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15121>15121</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15122>15122</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15123>15123</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15124>15124</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15125>15125</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15126>15126</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15127>15127</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15128>15128</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15129>15129</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15130>15130</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15131>15131</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15132>15132</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15133>15133</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15134>15134</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15135>15135</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15136>15136</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15137>15137</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15138>15138</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15139>15139</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15140>15140</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15141>15141</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15142>15142</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15143>15143</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15144>15144</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15145>15145</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15146>15146</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15147>15147</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15148>15148</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15149>15149</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15150>15150</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15151>15151</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15152>15152</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15153>15153</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15154>15154</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15155>15155</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15156>15156</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15157>15157</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15158>15158</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15159>15159</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15160>15160</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15161>15161</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15162>15162</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15163>15163</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15164>15164</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15165>15165</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15166>15166</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15167>15167</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15168>15168</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15169>15169</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15170>15170</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15171>15171</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15172>15172</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15173>15173</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15174>15174</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15175>15175</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15176>15176</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15177>15177</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15178>15178</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15179>15179</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15180>15180</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15181>15181</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15182>15182</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15183>15183</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15184>15184</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15185>15185</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15186>15186</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15187>15187</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15188>15188</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15189>15189</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15190>15190</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15191>15191</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15192>15192</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15193>15193</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15194>15194</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15195>15195</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15196>15196</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15197>15197</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15198>15198</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15199>15199</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15200>15200</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15201>15201</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15202>15202</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15203>15203</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15204>15204</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15205>15205</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15206>15206</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15207>15207</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15208>15208</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15209>15209</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15210>15210</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15211>15211</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15212>15212</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15213>15213</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15214>15214</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15215>15215</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15216>15216</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15217>15217</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15218>15218</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15219>15219</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15220>15220</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15221>15221</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15222>15222</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15223>15223</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15224>15224</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15225>15225</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15226>15226</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15227>15227</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15228>15228</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15229>15229</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15230>15230</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15231>15231</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15232>15232</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15233>15233</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15234>15234</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15235>15235</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15236>15236</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15237>15237</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15238>15238</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15239>15239</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15240>15240</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15241>15241</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15242>15242</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15243>15243</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15244>15244</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15245>15245</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15246>15246</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15247>15247</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15248>15248</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15249>15249</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15250>15250</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15251>15251</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15252>15252</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15253>15253</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15254>15254</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15255>15255</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15256>15256</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15257>15257</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15258>15258</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15259>15259</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15260>15260</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15261>15261</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15262>15262</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15263>15263</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15264>15264</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15265>15265</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15266>15266</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15267>15267</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15268>15268</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15269>15269</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15270>15270</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15271>15271</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15272>15272</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15273>15273</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15274>15274</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15275>15275</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15276>15276</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15277>15277</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15278>15278</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15279>15279</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15280>15280</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15281>15281</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15282>15282</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15283>15283</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15284>15284</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15285>15285</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15286>15286</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15287>15287</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15288>15288</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15289>15289</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15290>15290</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15291>15291</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15292>15292</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15293>15293</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15294>15294</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15295>15295</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15296>15296</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15297>15297</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15298>15298</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15299>15299</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15300>15300</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15301>15301</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15302>15302</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15303>15303</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15304>15304</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15305>15305</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15306>15306</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15307>15307</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15308>15308</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15309>15309</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15310>15310</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15311>15311</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15312>15312</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15313>15313</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15314>15314</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15315>15315</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15316>15316</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15317>15317</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15318>15318</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15319>15319</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15320>15320</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15321>15321</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15322>15322</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15323>15323</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15324>15324</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15325>15325</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15326>15326</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15327>15327</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15328>15328</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15329>15329</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15330>15330</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15331>15331</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15332>15332</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15333>15333</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15334>15334</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15335>15335</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15336>15336</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15337>15337</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15338>15338</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15339>15339</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15340>15340</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15341>15341</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15342>15342</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15343>15343</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15344>15344</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15345>15345</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15346>15346</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15347>15347</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15348>15348</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15349>15349</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15350>15350</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15351>15351</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15352>15352</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15353>15353</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15354>15354</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15355>15355</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15356>15356</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15357>15357</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15358>15358</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15359>15359</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15360>15360</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15361>15361</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15362>15362</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15363>15363</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15364>15364</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15365>15365</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15366>15366</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15367>15367</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15368>15368</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15369>15369</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15370>15370</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15371>15371</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15372>15372</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15373>15373</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15374>15374</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15375>15375</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15376>15376</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15377>15377</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15378>15378</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15379>15379</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15380>15380</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15381>15381</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15382>15382</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15383>15383</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15384>15384</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15385>15385</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15386>15386</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15387>15387</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15388>15388</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15389>15389</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15390>15390</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15391>15391</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15392>15392</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15393>15393</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15394>15394</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15395>15395</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15396>15396</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15397>15397</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15398>15398</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15399>15399</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15400>15400</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15401>15401</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15402>15402</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15403>15403</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15404>15404</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15405>15405</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15406>15406</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15407>15407</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15408>15408</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15409>15409</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15410>15410</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15411>15411</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15412>15412</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15413>15413</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15414>15414</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15415>15415</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15416>15416</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15417>15417</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15418>15418</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15419>15419</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15420>15420</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15421>15421</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15422>15422</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15423>15423</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15424>15424</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15425>15425</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15426>15426</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15427>15427</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15428>15428</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15429>15429</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15430>15430</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15431>15431</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15432>15432</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15433>15433</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15434>15434</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15435>15435</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15436>15436</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15437>15437</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15438>15438</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15439>15439</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15440>15440</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15441>15441</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15442>15442</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15443>15443</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15444>15444</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15445>15445</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15446>15446</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15447>15447</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15448>15448</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15449>15449</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15450>15450</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15451>15451</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15452>15452</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15453>15453</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15454>15454</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15455>15455</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15456>15456</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15457>15457</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15458>15458</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15459>15459</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15460>15460</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15461>15461</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15462>15462</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15463>15463</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15464>15464</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15465>15465</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15466>15466</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15467>15467</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15468>15468</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15469>15469</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15470>15470</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15471>15471</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15472>15472</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15473>15473</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15474>15474</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15475>15475</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15476>15476</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15477>15477</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15478>15478</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15479>15479</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15480>15480</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15481>15481</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15482>15482</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15483>15483</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15484>15484</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15485>15485</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15486>15486</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15487>15487</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15488>15488</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15489>15489</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15490>15490</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15491>15491</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15492>15492</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15493>15493</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15494>15494</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15495>15495</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15496>15496</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15497>15497</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15498>15498</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15499>15499</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15500>15500</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15501>15501</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15502>15502</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15503>15503</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15504>15504</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15505>15505</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15506>15506</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15507>15507</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15508>15508</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15509>15509</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15510>15510</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15511>15511</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15512>15512</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15513>15513</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15514>15514</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15515>15515</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15516>15516</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15517>15517</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15518>15518</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15519>15519</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15520>15520</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15521>15521</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15522>15522</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15523>15523</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15524>15524</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15525>15525</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15526>15526</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15527>15527</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15528>15528</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15529>15529</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15530>15530</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15531>15531</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15532>15532</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15533>15533</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15534>15534</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15535>15535</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15536>15536</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15537>15537</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15538>15538</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15539>15539</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15540>15540</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15541>15541</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15542>15542</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15543>15543</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15544>15544</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15545>15545</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15546>15546</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15547>15547</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15548>15548</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15549>15549</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15550>15550</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15551>15551</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15552>15552</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15553>15553</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15554>15554</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15555>15555</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15556>15556</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15557>15557</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15558>15558</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15559>15559</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15560>15560</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15561>15561</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15562>15562</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15563>15563</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15564>15564</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15565>15565</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15566>15566</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15567>15567</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15568>15568</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15569>15569</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15570>15570</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15571>15571</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15572>15572</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15573>15573</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15574>15574</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15575>15575</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15576>15576</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15577>15577</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15578>15578</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15579>15579</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15580>15580</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15581>15581</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15582>15582</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15583>15583</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15584>15584</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15585>15585</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15586>15586</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15587>15587</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15588>15588</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15589>15589</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15590>15590</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15591>15591</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15592>15592</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15593>15593</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15594>15594</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15595>15595</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15596>15596</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15597>15597</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15598>15598</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15599>15599</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15600>15600</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15601>15601</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15602>15602</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15603>15603</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15604>15604</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15605>15605</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15606>15606</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15607>15607</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15608>15608</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15609>15609</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15610>15610</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15611>15611</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15612>15612</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15613>15613</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15614>15614</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15615>15615</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15616>15616</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15617>15617</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15618>15618</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15619>15619</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15620>15620</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15621>15621</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15622>15622</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15623>15623</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15624>15624</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15625>15625</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15626>15626</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15627>15627</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15628>15628</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15629>15629</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15630>15630</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15631>15631</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15632>15632</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15633>15633</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15634>15634</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15635>15635</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15636>15636</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15637>15637</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15638>15638</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15639>15639</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15640>15640</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15641>15641</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15642>15642</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15643>15643</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15644>15644</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15645>15645</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15646>15646</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15647>15647</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15648>15648</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15649>15649</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15650>15650</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15651>15651</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15652>15652</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15653>15653</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15654>15654</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15655>15655</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15656>15656</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15657>15657</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15658>15658</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15659>15659</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15660>15660</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15661>15661</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15662>15662</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15663>15663</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15664>15664</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15665>15665</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15666>15666</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15667>15667</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15668>15668</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15669>15669</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15670>15670</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15671>15671</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15672>15672</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15673>15673</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15674>15674</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15675>15675</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15676>15676</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15677>15677</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15678>15678</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15679>15679</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15680>15680</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15681>15681</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15682>15682</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15683>15683</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15684>15684</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15685>15685</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15686>15686</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15687>15687</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15688>15688</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15689>15689</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15690>15690</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15691>15691</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15692>15692</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15693>15693</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15694>15694</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15695>15695</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15696>15696</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15697>15697</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15698>15698</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15699>15699</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15700>15700</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15701>15701</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15702>15702</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15703>15703</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15704>15704</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15705>15705</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15706>15706</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15707>15707</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15708>15708</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15709>15709</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15710>15710</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15711>15711</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15712>15712</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15713>15713</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15714>15714</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15715>15715</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15716>15716</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15717>15717</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15718>15718</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15719>15719</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15720>15720</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15721>15721</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15722>15722</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15723>15723</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15724>15724</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15725>15725</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15726>15726</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15727>15727</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15728>15728</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15729>15729</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15730>15730</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15731>15731</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15732>15732</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15733>15733</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15734>15734</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15735>15735</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15736>15736</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15737>15737</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15738>15738</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15739>15739</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15740>15740</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15741>15741</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15742>15742</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15743>15743</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15744>15744</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15745>15745</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15746>15746</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15747>15747</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15748>15748</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15749>15749</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15750>15750</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15751>15751</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15752>15752</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15753>15753</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15754>15754</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15755>15755</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15756>15756</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15757>15757</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15758>15758</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15759>15759</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15760>15760</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15761>15761</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15762>15762</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15763>15763</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15764>15764</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15765>15765</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15766>15766</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15767>15767</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15768>15768</a></td>\n' +
            '<td>LDAP_SEARCH</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15769>15769</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15770>15770</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15771>15771</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15772>15772</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15773>15773</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15774>15774</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15775>15775</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15776>15776</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15777>15777</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15778>15778</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15779>15779</a></td>\n' +
            '<td>ldap_search, ldap_search_s, ldap_search_st, ldap_search_ext, ldap_search_ext_s − Perform an LDAP search operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15780>15780</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15781>15781</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15782>15782</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15783>15783</a></td>\n' +
            '<td>#include &lt;sys/types.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15784>15784</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15785>15785</a></td>\n' +
            '<td>int ldap_search_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15786>15786</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15787>15787</a></td>\n' +
            '<td>char *base,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15788>15788</a></td>\n' +
            '<td>int scope,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15789>15789</a></td>\n' +
            '<td>char *filter,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15790>15790</a></td>\n' +
            '<td>char *attrs[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15791>15791</a></td>\n' +
            '<td>int attrsonly,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15792>15792</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15793>15793</a></td>\n' +
            '<td>LDAPControl **clientctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15794>15794</a></td>\n' +
            '<td>struct timeval *timeout,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15795>15795</a></td>\n' +
            '<td>int sizelimit,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15796>15796</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15797>15797</a></td>\n' +
            '<td>int ldap_search_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15798>15798</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15799>15799</a></td>\n' +
            '<td>char *base,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15800>15800</a></td>\n' +
            '<td>int scope,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15801>15801</a></td>\n' +
            '<td>char *filter,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15802>15802</a></td>\n' +
            '<td>char *attrs[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15803>15803</a></td>\n' +
            '<td>int attrsonly,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15804>15804</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15805>15805</a></td>\n' +
            '<td>LDAPControl **clientctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15806>15806</a></td>\n' +
            '<td>struct timeval *timeout,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15807>15807</a></td>\n' +
            '<td>int sizelimit,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15808>15808</a></td>\n' +
            '<td>LDAPMessage **res );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15809>15809</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15810>15810</a></td>\n' +
            '<td>These routines are used to perform LDAP search operations. The ldap_search_ext_s() routine does the search synchronously (i.e., not returning until the operation completes), providing a pointer to the resulting LDAP messages at the location pointed to by the res parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15811>15811</a></td>\n' +
            '<td>The ldap_search_ext() routine is the asynchronous version, initiating the search and returning the message id of the operation it initiated in the integer pointed to by the msgidp parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15812>15812</a></td>\n' +
            '<td>The base parameter is the DN of the entry at which to start the search.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15813>15813</a></td>\n' +
            '<td>The scope parameter is the scope of the search and should be one of LDAP_SCOPE_BASE, to search the object itself, LDAP_SCOPE_ONELEVEL, to search the object’s immediate children, LDAP_SCOPE_SUBTREE, to search the object and all its descendants, or LDAP_SCOPE_CHILDREN, to search all of the descendants. Note that the latter requires the server support the LDAP Subordinates Search Scope extension.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15814>15814</a></td>\n' +
            '<td>The filter is a string representation of the filter to apply in the search. The string should conform to the format specified in RFC 4515 as extended by RFC 4526. For instance, "(cn=Jane Doe)". Note that use of the extension requires the server to support the LDAP Absolute True/False Filter extension. NULL may be specified to indicate the library should send the filter (objectClass=*).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15815>15815</a></td>\n' +
            '<td>The attrs parameter is a null-terminated array of attribute descriptions to return from matching entries. If NULL is specified, the return of all user attributes is requested. The description "*" (LDAP_ALL_USER_ATTRIBUTES) may be used to request all user attributes to be returned. The description "+"(LDAP_ALL_OPERATIONAL_ATTRIBUTES) may be used to request all operational attributes to be returned. Note that this requires the server to support the LDAP All Operational Attribute extension. To request no attributes, the description "1.1" (LDAP_NO_ATTRS) should be listed by itself.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15816>15816</a></td>\n' +
            '<td>The attrsonly parameter should be set to a non-zero value if only attribute descriptions are wanted. It should be set to zero (0) if both attributes descriptions and attribute values are wanted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15817>15817</a></td>\n' +
            '<td>The serverctrls and clientctrls parameters may be used to specify server and client controls, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15818>15818</a></td>\n' +
            '<td>The ldap_search_ext_s() routine is the synchronous version of ldap_search_ext().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15819>15819</a></td>\n' +
            '<td>It also returns a code indicating success or, in the case of failure, indicating the nature of the failure of the operation. See ldap_error(3) for details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15820>15820</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15821>15821</a></td>\n' +
            '<td>Note that both read and list functionality are subsumed by these routines, by using a filter like "(objectclass=*)" and a scope of LDAP_SCOPE_BASE (to emulate read) or LDAP_SCOPE_ONELEVEL (to emulate list).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15822>15822</a></td>\n' +
            '<td>These routines may dynamically allocate memory. The caller is responsible for freeing such memory using supplied deallocation routines. Return values are contained in &lt;ldap.h&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15823>15823</a></td>\n' +
            '<td>Note that res parameter of ldap_search_ext_s() and ldap_search_s() should be freed with ldap_msgfree() regardless of return value of these functions.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15824>15824</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15825>15825</a></td>\n' +
            '<td>The ldap_search() routine is deprecated in favor of the ldap_search_ext() routine. The ldap_search_s() and ldap_search_st() routines are deprecated in favor of the ldap_search_ext_s() routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15826>15826</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15827>15827</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15828>15828</a></td>\n' +
            '<td>ldap(3), ldap_result(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15829>15829</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15830>15830</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15831>15831</a></td>\n' +
            '<td>LDAP_SEARCH</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15832>15832</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15833>15833</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15834>15834</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15835>15835</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15836>15836</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15837>15837</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15838>15838</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15839>15839</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15840>15840</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15841>15841</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15842>15842</a></td>\n' +
            '<td>ldap_search, ldap_search_s, ldap_search_st, ldap_search_ext, ldap_search_ext_s − Perform an LDAP search operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15843>15843</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15844>15844</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15845>15845</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15846>15846</a></td>\n' +
            '<td>#include &lt;sys/types.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15847>15847</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15848>15848</a></td>\n' +
            '<td>int ldap_search_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15849>15849</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15850>15850</a></td>\n' +
            '<td>char *base,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15851>15851</a></td>\n' +
            '<td>int scope,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15852>15852</a></td>\n' +
            '<td>char *filter,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15853>15853</a></td>\n' +
            '<td>char *attrs[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15854>15854</a></td>\n' +
            '<td>int attrsonly,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15855>15855</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15856>15856</a></td>\n' +
            '<td>LDAPControl **clientctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15857>15857</a></td>\n' +
            '<td>struct timeval *timeout,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15858>15858</a></td>\n' +
            '<td>int sizelimit,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15859>15859</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15860>15860</a></td>\n' +
            '<td>int ldap_search_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15861>15861</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15862>15862</a></td>\n' +
            '<td>char *base,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15863>15863</a></td>\n' +
            '<td>int scope,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15864>15864</a></td>\n' +
            '<td>char *filter,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15865>15865</a></td>\n' +
            '<td>char *attrs[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15866>15866</a></td>\n' +
            '<td>int attrsonly,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15867>15867</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15868>15868</a></td>\n' +
            '<td>LDAPControl **clientctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15869>15869</a></td>\n' +
            '<td>struct timeval *timeout,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15870>15870</a></td>\n' +
            '<td>int sizelimit,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15871>15871</a></td>\n' +
            '<td>LDAPMessage **res );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15872>15872</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15873>15873</a></td>\n' +
            '<td>These routines are used to perform LDAP search operations. The ldap_search_ext_s() routine does the search synchronously (i.e., not returning until the operation completes), providing a pointer to the resulting LDAP messages at the location pointed to by the res parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15874>15874</a></td>\n' +
            '<td>The ldap_search_ext() routine is the asynchronous version, initiating the search and returning the message id of the operation it initiated in the integer pointed to by the msgidp parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15875>15875</a></td>\n' +
            '<td>The base parameter is the DN of the entry at which to start the search.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15876>15876</a></td>\n' +
            '<td>The scope parameter is the scope of the search and should be one of LDAP_SCOPE_BASE, to search the object itself, LDAP_SCOPE_ONELEVEL, to search the object’s immediate children, LDAP_SCOPE_SUBTREE, to search the object and all its descendants, or LDAP_SCOPE_CHILDREN, to search all of the descendants. Note that the latter requires the server support the LDAP Subordinates Search Scope extension.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15877>15877</a></td>\n' +
            '<td>The filter is a string representation of the filter to apply in the search. The string should conform to the format specified in RFC 4515 as extended by RFC 4526. For instance, "(cn=Jane Doe)". Note that use of the extension requires the server to support the LDAP Absolute True/False Filter extension. NULL may be specified to indicate the library should send the filter (objectClass=*).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15878>15878</a></td>\n' +
            '<td>The attrs parameter is a null-terminated array of attribute descriptions to return from matching entries. If NULL is specified, the return of all user attributes is requested. The description "*" (LDAP_ALL_USER_ATTRIBUTES) may be used to request all user attributes to be returned. The description "+"(LDAP_ALL_OPERATIONAL_ATTRIBUTES) may be used to request all operational attributes to be returned. Note that this requires the server to support the LDAP All Operational Attribute extension. To request no attributes, the description "1.1" (LDAP_NO_ATTRS) should be listed by itself.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15879>15879</a></td>\n' +
            '<td>The attrsonly parameter should be set to a non-zero value if only attribute descriptions are wanted. It should be set to zero (0) if both attributes descriptions and attribute values are wanted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15880>15880</a></td>\n' +
            '<td>The serverctrls and clientctrls parameters may be used to specify server and client controls, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15881>15881</a></td>\n' +
            '<td>The ldap_search_ext_s() routine is the synchronous version of ldap_search_ext().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15882>15882</a></td>\n' +
            '<td>It also returns a code indicating success or, in the case of failure, indicating the nature of the failure of the operation. See ldap_error(3) for details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15883>15883</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15884>15884</a></td>\n' +
            '<td>Note that both read and list functionality are subsumed by these routines, by using a filter like "(objectclass=*)" and a scope of LDAP_SCOPE_BASE (to emulate read) or LDAP_SCOPE_ONELEVEL (to emulate list).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15885>15885</a></td>\n' +
            '<td>These routines may dynamically allocate memory. The caller is responsible for freeing such memory using supplied deallocation routines. Return values are contained in &lt;ldap.h&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15886>15886</a></td>\n' +
            '<td>Note that res parameter of ldap_search_ext_s() and ldap_search_s() should be freed with ldap_msgfree() regardless of return value of these functions.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15887>15887</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15888>15888</a></td>\n' +
            '<td>The ldap_search() routine is deprecated in favor of the ldap_search_ext() routine. The ldap_search_s() and ldap_search_st() routines are deprecated in favor of the ldap_search_ext_s() routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15889>15889</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15890>15890</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15891>15891</a></td>\n' +
            '<td>ldap(3), ldap_result(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15892>15892</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15893>15893</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15894>15894</a></td>\n' +
            '<td>LDAP_SEARCH</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15895>15895</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15896>15896</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15897>15897</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15898>15898</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15899>15899</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15900>15900</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15901>15901</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15902>15902</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15903>15903</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15904>15904</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15905>15905</a></td>\n' +
            '<td>ldap_search, ldap_search_s, ldap_search_st, ldap_search_ext, ldap_search_ext_s − Perform an LDAP search operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15906>15906</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15907>15907</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15908>15908</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15909>15909</a></td>\n' +
            '<td>#include &lt;sys/types.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15910>15910</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15911>15911</a></td>\n' +
            '<td>int ldap_search_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15912>15912</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15913>15913</a></td>\n' +
            '<td>char *base,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15914>15914</a></td>\n' +
            '<td>int scope,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15915>15915</a></td>\n' +
            '<td>char *filter,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15916>15916</a></td>\n' +
            '<td>char *attrs[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15917>15917</a></td>\n' +
            '<td>int attrsonly,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15918>15918</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15919>15919</a></td>\n' +
            '<td>LDAPControl **clientctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15920>15920</a></td>\n' +
            '<td>struct timeval *timeout,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15921>15921</a></td>\n' +
            '<td>int sizelimit,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15922>15922</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15923>15923</a></td>\n' +
            '<td>int ldap_search_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15924>15924</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15925>15925</a></td>\n' +
            '<td>char *base,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15926>15926</a></td>\n' +
            '<td>int scope,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15927>15927</a></td>\n' +
            '<td>char *filter,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15928>15928</a></td>\n' +
            '<td>char *attrs[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15929>15929</a></td>\n' +
            '<td>int attrsonly,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15930>15930</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15931>15931</a></td>\n' +
            '<td>LDAPControl **clientctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15932>15932</a></td>\n' +
            '<td>struct timeval *timeout,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15933>15933</a></td>\n' +
            '<td>int sizelimit,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15934>15934</a></td>\n' +
            '<td>LDAPMessage **res );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15935>15935</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15936>15936</a></td>\n' +
            '<td>These routines are used to perform LDAP search operations. The ldap_search_ext_s() routine does the search synchronously (i.e., not returning until the operation completes), providing a pointer to the resulting LDAP messages at the location pointed to by the res parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15937>15937</a></td>\n' +
            '<td>The ldap_search_ext() routine is the asynchronous version, initiating the search and returning the message id of the operation it initiated in the integer pointed to by the msgidp parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15938>15938</a></td>\n' +
            '<td>The base parameter is the DN of the entry at which to start the search.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15939>15939</a></td>\n' +
            '<td>The scope parameter is the scope of the search and should be one of LDAP_SCOPE_BASE, to search the object itself, LDAP_SCOPE_ONELEVEL, to search the object’s immediate children, LDAP_SCOPE_SUBTREE, to search the object and all its descendants, or LDAP_SCOPE_CHILDREN, to search all of the descendants. Note that the latter requires the server support the LDAP Subordinates Search Scope extension.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15940>15940</a></td>\n' +
            '<td>The filter is a string representation of the filter to apply in the search. The string should conform to the format specified in RFC 4515 as extended by RFC 4526. For instance, "(cn=Jane Doe)". Note that use of the extension requires the server to support the LDAP Absolute True/False Filter extension. NULL may be specified to indicate the library should send the filter (objectClass=*).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15941>15941</a></td>\n' +
            '<td>The attrs parameter is a null-terminated array of attribute descriptions to return from matching entries. If NULL is specified, the return of all user attributes is requested. The description "*" (LDAP_ALL_USER_ATTRIBUTES) may be used to request all user attributes to be returned. The description "+"(LDAP_ALL_OPERATIONAL_ATTRIBUTES) may be used to request all operational attributes to be returned. Note that this requires the server to support the LDAP All Operational Attribute extension. To request no attributes, the description "1.1" (LDAP_NO_ATTRS) should be listed by itself.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15942>15942</a></td>\n' +
            '<td>The attrsonly parameter should be set to a non-zero value if only attribute descriptions are wanted. It should be set to zero (0) if both attributes descriptions and attribute values are wanted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15943>15943</a></td>\n' +
            '<td>The serverctrls and clientctrls parameters may be used to specify server and client controls, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15944>15944</a></td>\n' +
            '<td>The ldap_search_ext_s() routine is the synchronous version of ldap_search_ext().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15945>15945</a></td>\n' +
            '<td>It also returns a code indicating success or, in the case of failure, indicating the nature of the failure of the operation. See ldap_error(3) for details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15946>15946</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15947>15947</a></td>\n' +
            '<td>Note that both read and list functionality are subsumed by these routines, by using a filter like "(objectclass=*)" and a scope of LDAP_SCOPE_BASE (to emulate read) or LDAP_SCOPE_ONELEVEL (to emulate list).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15948>15948</a></td>\n' +
            '<td>These routines may dynamically allocate memory. The caller is responsible for freeing such memory using supplied deallocation routines. Return values are contained in &lt;ldap.h&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15949>15949</a></td>\n' +
            '<td>Note that res parameter of ldap_search_ext_s() and ldap_search_s() should be freed with ldap_msgfree() regardless of return value of these functions.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15950>15950</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15951>15951</a></td>\n' +
            '<td>The ldap_search() routine is deprecated in favor of the ldap_search_ext() routine. The ldap_search_s() and ldap_search_st() routines are deprecated in favor of the ldap_search_ext_s() routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15952>15952</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15953>15953</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15954>15954</a></td>\n' +
            '<td>ldap(3), ldap_result(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15955>15955</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15956>15956</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15957>15957</a></td>\n' +
            '<td>LDAP_SEARCH</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15958>15958</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15959>15959</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15960>15960</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15961>15961</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15962>15962</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15963>15963</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15964>15964</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15965>15965</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15966>15966</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15967>15967</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15968>15968</a></td>\n' +
            '<td>ldap_search, ldap_search_s, ldap_search_st, ldap_search_ext, ldap_search_ext_s − Perform an LDAP search operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15969>15969</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15970>15970</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15971>15971</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15972>15972</a></td>\n' +
            '<td>#include &lt;sys/types.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15973>15973</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15974>15974</a></td>\n' +
            '<td>int ldap_search_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15975>15975</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15976>15976</a></td>\n' +
            '<td>char *base,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15977>15977</a></td>\n' +
            '<td>int scope,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15978>15978</a></td>\n' +
            '<td>char *filter,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15979>15979</a></td>\n' +
            '<td>char *attrs[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15980>15980</a></td>\n' +
            '<td>int attrsonly,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15981>15981</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15982>15982</a></td>\n' +
            '<td>LDAPControl **clientctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15983>15983</a></td>\n' +
            '<td>struct timeval *timeout,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15984>15984</a></td>\n' +
            '<td>int sizelimit,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15985>15985</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15986>15986</a></td>\n' +
            '<td>int ldap_search_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15987>15987</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15988>15988</a></td>\n' +
            '<td>char *base,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15989>15989</a></td>\n' +
            '<td>int scope,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15990>15990</a></td>\n' +
            '<td>char *filter,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15991>15991</a></td>\n' +
            '<td>char *attrs[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15992>15992</a></td>\n' +
            '<td>int attrsonly,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15993>15993</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15994>15994</a></td>\n' +
            '<td>LDAPControl **clientctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15995>15995</a></td>\n' +
            '<td>struct timeval *timeout,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15996>15996</a></td>\n' +
            '<td>int sizelimit,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15997>15997</a></td>\n' +
            '<td>LDAPMessage **res );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15998>15998</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=15999>15999</a></td>\n' +
            '<td>These routines are used to perform LDAP search operations. The ldap_search_ext_s() routine does the search synchronously (i.e., not returning until the operation completes), providing a pointer to the resulting LDAP messages at the location pointed to by the res parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16000>16000</a></td>\n' +
            '<td>The ldap_search_ext() routine is the asynchronous version, initiating the search and returning the message id of the operation it initiated in the integer pointed to by the msgidp parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16001>16001</a></td>\n' +
            '<td>The base parameter is the DN of the entry at which to start the search.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16002>16002</a></td>\n' +
            '<td>The scope parameter is the scope of the search and should be one of LDAP_SCOPE_BASE, to search the object itself, LDAP_SCOPE_ONELEVEL, to search the object’s immediate children, LDAP_SCOPE_SUBTREE, to search the object and all its descendants, or LDAP_SCOPE_CHILDREN, to search all of the descendants. Note that the latter requires the server support the LDAP Subordinates Search Scope extension.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16003>16003</a></td>\n' +
            '<td>The filter is a string representation of the filter to apply in the search. The string should conform to the format specified in RFC 4515 as extended by RFC 4526. For instance, "(cn=Jane Doe)". Note that use of the extension requires the server to support the LDAP Absolute True/False Filter extension. NULL may be specified to indicate the library should send the filter (objectClass=*).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16004>16004</a></td>\n' +
            '<td>The attrs parameter is a null-terminated array of attribute descriptions to return from matching entries. If NULL is specified, the return of all user attributes is requested. The description "*" (LDAP_ALL_USER_ATTRIBUTES) may be used to request all user attributes to be returned. The description "+"(LDAP_ALL_OPERATIONAL_ATTRIBUTES) may be used to request all operational attributes to be returned. Note that this requires the server to support the LDAP All Operational Attribute extension. To request no attributes, the description "1.1" (LDAP_NO_ATTRS) should be listed by itself.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16005>16005</a></td>\n' +
            '<td>The attrsonly parameter should be set to a non-zero value if only attribute descriptions are wanted. It should be set to zero (0) if both attributes descriptions and attribute values are wanted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16006>16006</a></td>\n' +
            '<td>The serverctrls and clientctrls parameters may be used to specify server and client controls, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16007>16007</a></td>\n' +
            '<td>The ldap_search_ext_s() routine is the synchronous version of ldap_search_ext().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16008>16008</a></td>\n' +
            '<td>It also returns a code indicating success or, in the case of failure, indicating the nature of the failure of the operation. See ldap_error(3) for details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16009>16009</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16010>16010</a></td>\n' +
            '<td>Note that both read and list functionality are subsumed by these routines, by using a filter like "(objectclass=*)" and a scope of LDAP_SCOPE_BASE (to emulate read) or LDAP_SCOPE_ONELEVEL (to emulate list).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16011>16011</a></td>\n' +
            '<td>These routines may dynamically allocate memory. The caller is responsible for freeing such memory using supplied deallocation routines. Return values are contained in &lt;ldap.h&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16012>16012</a></td>\n' +
            '<td>Note that res parameter of ldap_search_ext_s() and ldap_search_s() should be freed with ldap_msgfree() regardless of return value of these functions.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16013>16013</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16014>16014</a></td>\n' +
            '<td>The ldap_search() routine is deprecated in favor of the ldap_search_ext() routine. The ldap_search_s() and ldap_search_st() routines are deprecated in favor of the ldap_search_ext_s() routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16015>16015</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16016>16016</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16017>16017</a></td>\n' +
            '<td>ldap(3), ldap_result(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16018>16018</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16019>16019</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16020>16020</a></td>\n' +
            '<td>LDAP_SEARCH</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16021>16021</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16022>16022</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16023>16023</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16024>16024</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16025>16025</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16026>16026</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16027>16027</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16028>16028</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16029>16029</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16030>16030</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16031>16031</a></td>\n' +
            '<td>ldap_search, ldap_search_s, ldap_search_st, ldap_search_ext, ldap_search_ext_s − Perform an LDAP search operation</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16032>16032</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16033>16033</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16034>16034</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16035>16035</a></td>\n' +
            '<td>#include &lt;sys/types.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16036>16036</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16037>16037</a></td>\n' +
            '<td>int ldap_search_ext(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16038>16038</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16039>16039</a></td>\n' +
            '<td>char *base,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16040>16040</a></td>\n' +
            '<td>int scope,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16041>16041</a></td>\n' +
            '<td>char *filter,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16042>16042</a></td>\n' +
            '<td>char *attrs[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16043>16043</a></td>\n' +
            '<td>int attrsonly,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16044>16044</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16045>16045</a></td>\n' +
            '<td>LDAPControl **clientctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16046>16046</a></td>\n' +
            '<td>struct timeval *timeout,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16047>16047</a></td>\n' +
            '<td>int sizelimit,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16048>16048</a></td>\n' +
            '<td>int *msgidp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16049>16049</a></td>\n' +
            '<td>int ldap_search_ext_s(</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16050>16050</a></td>\n' +
            '<td>LDAP *ld,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16051>16051</a></td>\n' +
            '<td>char *base,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16052>16052</a></td>\n' +
            '<td>int scope,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16053>16053</a></td>\n' +
            '<td>char *filter,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16054>16054</a></td>\n' +
            '<td>char *attrs[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16055>16055</a></td>\n' +
            '<td>int attrsonly,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16056>16056</a></td>\n' +
            '<td>LDAPControl **serverctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16057>16057</a></td>\n' +
            '<td>LDAPControl **clientctrls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16058>16058</a></td>\n' +
            '<td>struct timeval *timeout,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16059>16059</a></td>\n' +
            '<td>int sizelimit,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16060>16060</a></td>\n' +
            '<td>LDAPMessage **res );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16061>16061</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16062>16062</a></td>\n' +
            '<td>These routines are used to perform LDAP search operations. The ldap_search_ext_s() routine does the search synchronously (i.e., not returning until the operation completes), providing a pointer to the resulting LDAP messages at the location pointed to by the res parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16063>16063</a></td>\n' +
            '<td>The ldap_search_ext() routine is the asynchronous version, initiating the search and returning the message id of the operation it initiated in the integer pointed to by the msgidp parameter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16064>16064</a></td>\n' +
            '<td>The base parameter is the DN of the entry at which to start the search.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16065>16065</a></td>\n' +
            '<td>The scope parameter is the scope of the search and should be one of LDAP_SCOPE_BASE, to search the object itself, LDAP_SCOPE_ONELEVEL, to search the object’s immediate children, LDAP_SCOPE_SUBTREE, to search the object and all its descendants, or LDAP_SCOPE_CHILDREN, to search all of the descendants. Note that the latter requires the server support the LDAP Subordinates Search Scope extension.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16066>16066</a></td>\n' +
            '<td>The filter is a string representation of the filter to apply in the search. The string should conform to the format specified in RFC 4515 as extended by RFC 4526. For instance, "(cn=Jane Doe)". Note that use of the extension requires the server to support the LDAP Absolute True/False Filter extension. NULL may be specified to indicate the library should send the filter (objectClass=*).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16067>16067</a></td>\n' +
            '<td>The attrs parameter is a null-terminated array of attribute descriptions to return from matching entries. If NULL is specified, the return of all user attributes is requested. The description "*" (LDAP_ALL_USER_ATTRIBUTES) may be used to request all user attributes to be returned. The description "+"(LDAP_ALL_OPERATIONAL_ATTRIBUTES) may be used to request all operational attributes to be returned. Note that this requires the server to support the LDAP All Operational Attribute extension. To request no attributes, the description "1.1" (LDAP_NO_ATTRS) should be listed by itself.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16068>16068</a></td>\n' +
            '<td>The attrsonly parameter should be set to a non-zero value if only attribute descriptions are wanted. It should be set to zero (0) if both attributes descriptions and attribute values are wanted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16069>16069</a></td>\n' +
            '<td>The serverctrls and clientctrls parameters may be used to specify server and client controls, respectively.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16070>16070</a></td>\n' +
            '<td>The ldap_search_ext_s() routine is the synchronous version of ldap_search_ext().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16071>16071</a></td>\n' +
            '<td>It also returns a code indicating success or, in the case of failure, indicating the nature of the failure of the operation. See ldap_error(3) for details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16072>16072</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16073>16073</a></td>\n' +
            '<td>Note that both read and list functionality are subsumed by these routines, by using a filter like "(objectclass=*)" and a scope of LDAP_SCOPE_BASE (to emulate read) or LDAP_SCOPE_ONELEVEL (to emulate list).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16074>16074</a></td>\n' +
            '<td>These routines may dynamically allocate memory. The caller is responsible for freeing such memory using supplied deallocation routines. Return values are contained in &lt;ldap.h&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16075>16075</a></td>\n' +
            '<td>Note that res parameter of ldap_search_ext_s() and ldap_search_s() should be freed with ldap_msgfree() regardless of return value of these functions.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16076>16076</a></td>\n' +
            '<td>DEPRECATED INTERFACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16077>16077</a></td>\n' +
            '<td>The ldap_search() routine is deprecated in favor of the ldap_search_ext() routine. The ldap_search_s() and ldap_search_st() routines are deprecated in favor of the ldap_search_ext_s() routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16078>16078</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16079>16079</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16080>16080</a></td>\n' +
            '<td>ldap(3), ldap_result(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16081>16081</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16082>16082</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16083>16083</a></td>\n' +
            '<td>LDAP_GET_OPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16084>16084</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16085>16085</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16086>16086</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16087>16087</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16088>16088</a></td>\n' +
            '<td>SASL OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16089>16089</a></td>\n' +
            '<td>TCP OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16090>16090</a></td>\n' +
            '<td>TLS OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16091>16091</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16092>16092</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16093>16093</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16094>16094</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16095>16095</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16096>16096</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16097>16097</a></td>\n' +
            '<td>ldap_get_option, ldap_set_option − LDAP option handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16098>16098</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16099>16099</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16100>16100</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16101>16101</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16102>16102</a></td>\n' +
            '<td>int ldap_get_option(LDAP *ld, int option, void *outvalue);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16103>16103</a></td>\n' +
            '<td>int ldap_set_option(LDAP *ld, int option, const void *invalue);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16104>16104</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16105>16105</a></td>\n' +
            '<td>These routines provide access to options stored either in a LDAP handle or as global options, where applicable. They make use of a neutral interface, where the type of the value either retrieved by ldap_get_option(3) or set by ldap_set_option(3) is cast to void *. The actual type is determined based on the value of the option argument. Global options are set/retrieved by passing a NULL LDAP handle. LDAP handles inherit their default settings from the global options in effect at the time the handle is created.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16106>16106</a></td>\n' +
            '<td>LDAP_OPT_API_FEATURE_INFO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16107>16107</a></td>\n' +
            '<td>Fills-in a LDAPAPIFeatureInfo; outvalue must be a LDAPAPIFeatureInfo *, pointing to an already allocated struct. The ldapaif_info_version field of the struct must be initialized to LDAP_FEATURE_INFO_VERSION before making the call. The ldapaif_name field must be set to the name of a feature to query. This is a read-only option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16108>16108</a></td>\n' +
            '<td>LDAP_OPT_API_INFO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16109>16109</a></td>\n' +
            '<td>Fills-in a LDAPAPIInfo; outvalue must be a LDAPAPIInfo *, pointing to an already allocated struct. The ldapai_info_version field of the struct must be initialized to LDAP_API_INFO_VERSION before making the call. If the version passed in does not match the current library version, the expected version number will be stored in the struct and the call will fail. The caller is responsible for freeing the elements of the ldapai_extensions array and the array itself using ldap_memfree(3). The caller must also free the ldapi_vendor_name. This is a read-only option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16110>16110</a></td>\n' +
            '<td>LDAP_OPT_CLIENT_CONTROLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16111>16111</a></td>\n' +
            '<td>Sets/gets the client-side controls to be used for all operations. This is now deprecated as modern LDAP C API provides replacements for all main operations which accepts client-side controls as explicit arguments; see for example ldap_search_ext(3), ldap_add_ext(3), ldap_modify_ext(3) and so on. outvalue must be LDAPControl ***, and the caller is responsible of freeing the returned controls, if any, by calling ldap_controls_free(3), while invalue must be LDAPControl *const *; the library duplicates the controls passed via invalue.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16112>16112</a></td>\n' +
            '<td>LDAP_OPT_CONNECT_ASYNC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16113>16113</a></td>\n' +
            '<td>Sets/gets the status of the asynchronous connect flag. invalue should either be LDAP_OPT_OFF or LDAP_OPT_ON; outvalue must be int *. When set, the library will call connect(2) and return, without waiting for response. This leaves the handle in a connecting state. Subsequent calls to library routines will poll for completion of the connect before performing further operations. As a consequence, library calls that need to establish a connection with a DSA do not block even for the network timeout (option LDAP_OPT_NETWORK_TIMEOUT). This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16114>16114</a></td>\n' +
            '<td>LDAP_OPT_CONNECT_CB</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16115>16115</a></td>\n' +
            '<td>This option allows to set a connect callback. invalue must be a const struct ldap_conncb *. Callbacks are executed in last in-first served order. Handle-specific callbacks are executed first, followed by global ones. Right before freeing the callback structure, the lc_del callback handler is passed a NULL Sockbuf. Calling ldap_get_option(3) for this option removes the callback whose pointer matches outvalue. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16116>16116</a></td>\n' +
            '<td>LDAP_OPT_DEBUG_LEVEL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16117>16117</a></td>\n' +
            '<td>Sets/gets the debug level of the client library. invalue must be a const int *; outvalue must be a int *. Valid debug levels are LDAP_DEBUG_ANY, LDAP_DEBUG_ARGS, LDAP_DEBUG_BER, LDAP_DEBUG_CONNS, LDAP_DEBUG_NONE, LDAP_DEBUG_PACKETS, LDAP_DEBUG_PARSE, and LDAP_DEBUG_TRACE. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16118>16118</a></td>\n' +
            '<td>LDAP_OPT_DEFBASE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16119>16119</a></td>\n' +
            '<td>Sets/gets a string containing the DN to be used as default base for search operations. outvalue must be a char **, and the caller is responsible of freeing the returned string by calling ldap_memfree(3), while invalue must be a const char *; the library duplicates the corresponding string. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16120>16120</a></td>\n' +
            '<td>LDAP_OPT_DEREF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16121>16121</a></td>\n' +
            '<td>Sets/gets the value that defines when alias dereferencing must occur. invalue must be const int *; outvalue must be int *. They cannot be NULL. The value of *invalue should be one of LDAP_DEREF_NEVER (the default), LDAP_DEREF_SEARCHING, LDAP_DEREF_FINDING, or LDAP_DEREF_ALWAYS. Note that this has ever been the only means to determine alias dereferencing within search operations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16122>16122</a></td>\n' +
            '<td>LDAP_OPT_DESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16123>16123</a></td>\n' +
            '<td>Returns the file descriptor associated to the socket buffer of the LDAP handle passed in as ld; outvalue must be a int *. This is a read-only, handle-specific option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16124>16124</a></td>\n' +
            '<td>LDAP_OPT_DIAGNOSTIC_MESSAGE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16125>16125</a></td>\n' +
            '<td>Sets/gets a string containing the error string associated to the LDAP handle. This option was formerly known as LDAP_OPT_ERROR_STRING. outvalue must be a char **, and the caller is responsible of freeing the returned string by calling ldap_memfree(3), while invalue must be a char *; the library duplicates the corresponding string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16126>16126</a></td>\n' +
            '<td>LDAP_OPT_HOST_NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16127>16127</a></td>\n' +
            '<td>Sets/gets a space-separated list of hosts to be contacted by the library when trying to establish a connection. This is now deprecated in favor of LDAP_OPT_URI. outvalue must be a char **, and the caller is responsible of freeing the resulting string by calling ldap_memfree(3), while invalue must be a const char *; the library duplicates the corresponding string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16128>16128</a></td>\n' +
            '<td>LDAP_OPT_MATCHED_DN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16129>16129</a></td>\n' +
            '<td>Sets/gets a string containing the matched DN associated to the LDAP handle. outvalue must be a char **, and the caller is responsible of freeing the returned string by calling ldap_memfree(3), while invalue must be a const char *; the library duplicates the corresponding string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16130>16130</a></td>\n' +
            '<td>LDAP_OPT_NETWORK_TIMEOUT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16131>16131</a></td>\n' +
            '<td>Sets/gets the network timeout value after which poll(2)/select(2) following a connect(2) returns in case of no activity. outvalue must be a struct timeval ** (the caller has to free *outvalue), and invalue must be a const struct timeval *. They cannot be NULL. Using a struct with seconds set to −1 results in an infinite timeout, which is the default. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16132>16132</a></td>\n' +
            '<td>LDAP_OPT_PROTOCOL_VERSION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16133>16133</a></td>\n' +
            '<td>Sets/gets the protocol version. outvalue and invalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16134>16134</a></td>\n' +
            '<td>LDAP_OPT_REFERRAL_URLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16135>16135</a></td>\n' +
            '<td>Sets/gets an array containing the referral URIs associated to the LDAP handle. outvalue must be a char ***, and the caller is responsible of freeing the returned string by calling ldap_memvfree(3), while invalue must be a NULL-terminated char *const *; the library duplicates the corresponding string. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16136>16136</a></td>\n' +
            '<td>LDAP_OPT_REFERRALS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16137>16137</a></td>\n' +
            '<td>Determines whether the library should implicitly chase referrals or not. invalue must be const int *; its value should either be LDAP_OPT_OFF or LDAP_OPT_ON. outvalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16138>16138</a></td>\n' +
            '<td>LDAP_OPT_RESTART</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16139>16139</a></td>\n' +
            '<td>Determines whether the library should implicitly restart connections (FIXME). invalue must be const int *; its value should either be LDAP_OPT_OFF or LDAP_OPT_ON. outvalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16140>16140</a></td>\n' +
            '<td>LDAP_OPT_RESULT_CODE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16141>16141</a></td>\n' +
            '<td>Sets/gets the LDAP result code associated to the handle. This option was formerly known as LDAP_OPT_ERROR_NUMBER. invalue must be a const int *. outvalue must be a int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16142>16142</a></td>\n' +
            '<td>LDAP_OPT_SERVER_CONTROLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16143>16143</a></td>\n' +
            '<td>Sets/gets the server-side controls to be used for all operations. This is now deprecated as modern LDAP C API provides replacements for all main operations which accepts server-side controls as explicit arguments; see for example ldap_search_ext(3), ldap_add_ext(3), ldap_modify_ext(3) and so on. outvalue must be LDAPControl ***, and the caller is responsible of freeing the returned controls, if any, by calling ldap_controls_free(3), while invalue must be LDAPControl *const *; the library duplicates the controls passed via invalue.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16144>16144</a></td>\n' +
            '<td>LDAP_OPT_SESSION_REFCNT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16145>16145</a></td>\n' +
            '<td>Returns the reference count associated with the LDAP handle passed in as ld; outvalue must be a int *. This is a read-only, handle-specific option. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16146>16146</a></td>\n' +
            '<td>LDAP_OPT_SIZELIMIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16147>16147</a></td>\n' +
            '<td>Sets/gets the value that defines the maximum number of entries to be returned by a search operation. invalue must be const int *, while outvalue must be int *; They cannot be NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16148>16148</a></td>\n' +
            '<td>LDAP_OPT_SOCKBUF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16149>16149</a></td>\n' +
            '<td>Returns a pointer to the socket buffer of the LDAP handle passed in as ld; outvalue must be a Sockbuf **. This is a read-only, handle-specific option. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16150>16150</a></td>\n' +
            '<td>LDAP_OPT_TIMELIMIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16151>16151</a></td>\n' +
            '<td>Sets/gets the value that defines the time limit after which a search operation should be terminated by the server. invalue must be const int *, while outvalue must be int *, and they cannot be NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16152>16152</a></td>\n' +
            '<td>LDAP_OPT_TIMEOUT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16153>16153</a></td>\n' +
            '<td>Sets/gets a timeout value for the synchronous API calls. outvalue must be a struct timeval ** (the caller has to free *outvalue), and invalue must be a struct timeval *, and they cannot be NULL. Using a struct with seconds set to −1 results in an infinite timeout, which is the default. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16154>16154</a></td>\n' +
            '<td>LDAP_OPT_URI</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16155>16155</a></td>\n' +
            '<td>Sets/gets a comma- or space-separated list of URIs to be contacted by the library when trying to establish a connection. outvalue must be a char **, and the caller is responsible of freeing the resulting string by calling ldap_memfree(3), while invalue must be a const char *; the library parses the string into a list of LDAPURLDesc structures, so the invocation of ldap_set_option(3) may fail if URL parsing fails. URIs may only contain the schema, the host, and the port fields. This option is OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16156>16156</a></td>\n' +
            '<td>SASL OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16157>16157</a></td>\n' +
            '<td>The SASL options are OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16158>16158</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_AUTHCID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16159>16159</a></td>\n' +
            '<td>Gets the SASL authentication identity; outvalue must be a char **, its content needs to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16160>16160</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_AUTHZID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16161>16161</a></td>\n' +
            '<td>Gets the SASL authorization identity; outvalue must be a char **, its content needs to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16162>16162</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_MAXBUFSIZE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16163>16163</a></td>\n' +
            '<td>Gets/sets SASL maximum buffer size; invalue must be const ber_len_t *, while outvalue must be ber_len_t *. See also LDAP_OPT_X_SASL_SECPROPS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16164>16164</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_MECH</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16165>16165</a></td>\n' +
            '<td>Gets the SASL mechanism; outvalue must be a char **, its content needs to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16166>16166</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_MECHLIST</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16167>16167</a></td>\n' +
            '<td>Gets the list of the available mechanisms, in form of a NULL-terminated array of strings; outvalue must be char ***. The caller must not free or otherwise muck with it.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16168>16168</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_NOCANON</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16169>16169</a></td>\n' +
            '<td>Sets/gets the NOCANON flag. When unset, the hostname is canonicalized. invalue must be const int *; its value should either be LDAP_OPT_OFF or LDAP_OPT_ON. outvalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16170>16170</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_REALM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16171>16171</a></td>\n' +
            '<td>Gets the SASL realm; outvalue must be a char **, its content needs to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16172>16172</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_SECPROPS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16173>16173</a></td>\n' +
            '<td>Sets the SASL secprops; invalue must be a char *, containing a comma-separated list of properties. Legal values are: none, nodict, noplain, noactive, passcred, forwardsec, noanonymous, minssf=&lt;minssf&gt;, maxssf=&lt;maxssf&gt;, maxbufsize=&lt;maxbufsize&gt;.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16174>16174</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_SSF</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16175>16175</a></td>\n' +
            '<td>Gets the SASL SSF; outvalue must be a ber_len_t *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16176>16176</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_SSF_EXTERNAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16177>16177</a></td>\n' +
            '<td>Sets the SASL SSF value related to an authentication performed using an EXTERNAL mechanism; invalue must be a const ber_len_t *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16178>16178</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_SSF_MAX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16179>16179</a></td>\n' +
            '<td>Gets/sets SASL maximum SSF; invalue must be const ber_len_t *, while outvalue must be ber_len_t *. See also LDAP_OPT_X_SASL_SECPROPS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16180>16180</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_SSF_MIN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16181>16181</a></td>\n' +
            '<td>Gets/sets SASL minimum SSF; invalue must be const ber_len_t *, while outvalue must be ber_len_t *. See also LDAP_OPT_X_SASL_SECPROPS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16182>16182</a></td>\n' +
            '<td>LDAP_OPT_X_SASL_USERNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16183>16183</a></td>\n' +
            '<td>Gets the SASL username; outvalue must be a char **. Its content needs to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16184>16184</a></td>\n' +
            '<td>TCP OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16185>16185</a></td>\n' +
            '<td>The TCP options are OpenLDAP specific. Mainly intended for use with Linux, they may not be portable.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16186>16186</a></td>\n' +
            '<td>LDAP_OPT_X_KEEPALIVE_IDLE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16187>16187</a></td>\n' +
            '<td>Sets/gets the number of seconds a connection needs to remain idle before TCP starts sending keepalive probes. invalue must be const int *; outvalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16188>16188</a></td>\n' +
            '<td>LDAP_OPT_X_KEEPALIVE_PROBES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16189>16189</a></td>\n' +
            '<td>Sets/gets the maximum number of keepalive probes TCP should send before dropping the connection. invalue must be const int *; outvalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16190>16190</a></td>\n' +
            '<td>LDAP_OPT_X_KEEPALIVE_INTERVAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16191>16191</a></td>\n' +
            '<td>Sets/gets the interval in seconds between individual keepalive probes. invalue must be const int *; outvalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16192>16192</a></td>\n' +
            '<td>TLS OPTIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16193>16193</a></td>\n' +
            '<td>The TLS options are OpenLDAP specific.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16194>16194</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CACERTDIR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16195>16195</a></td>\n' +
            '<td>Sets/gets the path of the directory containing CA certificates. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16196>16196</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CACERTFILE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16197>16197</a></td>\n' +
            '<td>Sets/gets the full-path of the CA certificate file. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16198>16198</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CERTFILE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16199>16199</a></td>\n' +
            '<td>Sets/gets the full-path of the certificate file. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16200>16200</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CIPHER_SUITE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16201>16201</a></td>\n' +
            '<td>Sets/gets the allowed cipher suite. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16202>16202</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CONNECT_ARG</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16203>16203</a></td>\n' +
            '<td>Sets/gets the connection callback argument. invalue must be const void *; outvalue must be void **.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16204>16204</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CONNECT_CB</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16205>16205</a></td>\n' +
            '<td>Sets/gets the connection callback handle. invalue must be const LDAP_TLS_CONNECT_CB *; outvalue must be LDAP_TLS_CONNECT_CB **.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16206>16206</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CRLCHECK</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16207>16207</a></td>\n' +
            '<td>Sets/gets the CRL evaluation strategy, one of LDAP_OPT_X_TLS_CRL_NONE, LDAP_OPT_X_TLS_CRL_PEER, or LDAP_OPT_X_TLS_CRL_ALL. invalue must be const int *; outvalue must be int *. Requires OpenSSL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16208>16208</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CRLFILE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16209>16209</a></td>\n' +
            '<td>Sets/gets the full-path of the CRL file. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3). This option is only valid for GnuTLS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16210>16210</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_CTX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16211>16211</a></td>\n' +
            '<td>Sets/gets the TLS library context. New TLS sessions will inherit their default settings from this library context. invalue must be const void *; outvalue must be void **. When using the OpenSSL library this is an SSL_CTX*. When using other crypto libraries this is a pointer to an OpenLDAP private structure. Applications generally should not use this option or attempt to manipulate this structure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16212>16212</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_DHFILE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16213>16213</a></td>\n' +
            '<td>Gets/sets the full-path of the file containing the parameters for Diffie-Hellman ephemeral key exchange. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3). Ignored by GnuTLS and Mozilla NSS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16214>16214</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_KEYFILE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16215>16215</a></td>\n' +
            '<td>Sets/gets the full-path of the certificate key file. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16216>16216</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_NEWCTX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16217>16217</a></td>\n' +
            '<td>Instructs the library to create a new TLS library context. invalue must be const int *. A non-zero value pointed to by invalue tells the library to create a context for a server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16218>16218</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_PROTOCOL_MIN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16219>16219</a></td>\n' +
            '<td>Sets/gets the minimum protocol version. invalue must be const int *; outvalue must be int *.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16220>16220</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_RANDOM_FILE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16221>16221</a></td>\n' +
            '<td>Sets/gets the random file when /dev/random and /dev/urandom are not available. invalue must be const char *; outvalue must be char **, and its contents need to be freed by the caller using ldap_memfree(3). Ignored by GnuTLS older than version 2.2. Ignored by Mozilla NSS.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16222>16222</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_REQUIRE_CERT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16223>16223</a></td>\n' +
            '<td>Sets/gets the peer certificate checking strategy, one of LDAP_OPT_X_TLS_NEVER, LDAP_OPT_X_TLS_HARD, LDAP_OPT_X_TLS_DEMAND, LDAP_OPT_X_TLS_ALLOW, LDAP_OPT_X_TLS_TRY.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16224>16224</a></td>\n' +
            '<td>LDAP_OPT_X_TLS_SSL_CTX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16225>16225</a></td>\n' +
            '<td>Gets the TLS session context associated with this handle. outvalue must be void **. When using the OpenSSL library this is an SSL*. When using other crypto libraries this is a pointer to an OpenLDAP private structure. Applications generally should not use this option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16226>16226</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16227>16227</a></td>\n' +
            '<td>On success, the functions return LDAP_OPT_SUCCESS, while they may return LDAP_OPT_ERROR to indicate a generic option handling error. Occasionally, more specific errors can be returned, like LDAP_NO_MEMORY to indicate a failure in memory allocation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16228>16228</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16229>16229</a></td>\n' +
            '<td>The LDAP libraries with the LDAP_OPT_REFERRALS option set to LDAP_OPT_ON (default value) automatically follow referrals using an anonymous bind. Application developers are encouraged to either implement consistent referral chasing features, or explicitly disable referral chasing by setting that option to LDAP_OPT_OFF.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16230>16230</a></td>\n' +
            '<td>The protocol version used by the library defaults to LDAPv2 (now historic), which corresponds to the LDAP_VERSION2 macro. Application developers are encouraged to explicitly set LDAP_OPT_PROTOCOL_VERSION to LDAPv3, using the LDAP_VERSION3 macro, or to allow users to select the protocol version.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16231>16231</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16232>16232</a></td>\n' +
            '<td>ldap(3), ldap_error(3), RFC 4422 (http://www.rfc-editor.org),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16233>16233</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16234>16234</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16235>16235</a></td>\n' +
            '<td>LDAP_BIND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16236>16236</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16237>16237</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16238>16238</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16239>16239</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16240>16240</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16241>16241</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16242>16242</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16243>16243</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16244>16244</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16245>16245</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16246>16246</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16247>16247</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16248>16248</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16249>16249</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16250>16250</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16251>16251</a></td>\n' +
            '<td>ldap_bind, ldap_bind_s, ldap_simple_bind, ldap_simple_bind_s, ldap_sasl_bind, ldap_sasl_bind_s, ldap_sasl_interactive_bind_s, ldap_parse_sasl_bind_result, ldap_unbind, ldap_unbind_s, ldap_unbind_ext, ldap_unbind_ext_s, ldap_set_rebind_proc − LDAP bind routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16252>16252</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16253>16253</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16254>16254</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16255>16255</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16256>16256</a></td>\n' +
            '<td>int ldap_bind(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16257>16257</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16258>16258</a></td>\n' +
            '<td>int ldap_bind_s(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16259>16259</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16260>16260</a></td>\n' +
            '<td>int ldap_simple_bind(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16261>16261</a></td>\n' +
            '<td>int ldap_simple_bind_s(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16262>16262</a></td>\n' +
            '<td>int ldap_sasl_bind(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16263>16263</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16264>16264</a></td>\n' +
            '<td>LDAPControl *cctrls[], int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16265>16265</a></td>\n' +
            '<td>int ldap_sasl_bind_s(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16266>16266</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16267>16267</a></td>\n' +
            '<td>LDAPControl *cctrls[], struct berval **servercredp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16268>16268</a></td>\n' +
            '<td>int ldap_parse_sasl_bind_result(LDAP *ld, LDAPMessage *res,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16269>16269</a></td>\n' +
            '<td>struct berval **servercredp, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16270>16270</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind_s(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16271>16271</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16272>16272</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16273>16273</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16274>16274</a></td>\n' +
            '<td>void *defaults);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16275>16275</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16276>16276</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16277>16277</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16278>16278</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16279>16279</a></td>\n' +
            '<td>void *defaults, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16280>16280</a></td>\n' +
            '<td>const char **rmechp, int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16281>16281</a></td>\n' +
            '<td>int (LDAP_SASL_INTERACT_PROC)(LDAP *ld, unsigned flags, void *defaults, void *sasl_interact);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16282>16282</a></td>\n' +
            '<td>int ldap_unbind(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16283>16283</a></td>\n' +
            '<td>int ldap_unbind_s(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16284>16284</a></td>\n' +
            '<td>int ldap_unbind_ext(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16285>16285</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16286>16286</a></td>\n' +
            '<td>int ldap_unbind_ext_s(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16287>16287</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16288>16288</a></td>\n' +
            '<td>int ldap_set_rebind_proc (LDAP *ld, LDAP_REBIND_PROC *ldap_proc, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16289>16289</a></td>\n' +
            '<td>int (LDAP_REBIND_PROC)(LDAP *ld, LDAP_CONST char *url, ber_tag_t request, ber_int_t msgid, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16290>16290</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16291>16291</a></td>\n' +
            '<td>These routines provide various interfaces to the LDAP bind operation. After an association with an LDAP server is made using ldap_init(3), an LDAP bind operation should be performed before other operations are attempted over the connection. An LDAP bind is required when using Version 2 of the LDAP protocol; it is optional for Version 3 but is usually needed due to security considerations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16292>16292</a></td>\n' +
            '<td>There are three types of bind calls, ones providing simple authentication, ones providing SASL authentication, and general routines capable of doing either simple or SASL authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16293>16293</a></td>\n' +
            '<td>SASL (Simple Authentication and Security Layer) can negotiate one of many different kinds of authentication. Both synchronous and asynchronous versions of each variant of the bind call are provided. All routines take ld as their first parameter, as returned from ldap_init(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16294>16294</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16295>16295</a></td>\n' +
            '<td>The simplest form of the bind call is ldap_simple_bind_s(). It takes the DN to bind as in who, and the userPassword associated with the entry in passwd. It returns an LDAP error indication (see ldap_error(3)). The ldap_simple_bind() call is asynchronous, taking the same parameters but only initiating the bind operation and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16296>16296</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16297>16297</a></td>\n' +
            '<td>The ldap_bind() and ldap_bind_s() routines can be used when the authentication method to use needs to be selected at runtime. They both take an extra method parameter selecting the authentication method to use. It should be set to LDAP_AUTH_SIMPLE to select simple authentication. ldap_bind() returns the message id of the request it initiates. ldap_bind_s() returns an LDAP error indication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16298>16298</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16299>16299</a></td>\n' +
            '<td>For SASL binds the server always ignores any provided DN, so the dn parameter should always be NULL. ldap_sasl_bind_s() sends a single SASL bind request with the given SASL mechanism and credentials in the cred parameter. The format of the credentials depends on the particular SASL mechanism in use. For mechanisms that provide mutual authentication the server’s credentials will be returned in the servercredp parameter. The routine returns an LDAP error indication (see ldap_error(3)). The ldap_sasl_bind() call is asynchronous, taking the same parameters but only sending the request and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3). The result must be additionally parsed by ldap_parse_sasl_bind_result() to obtain any server credentials sent from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16300>16300</a></td>\n' +
            '<td>Many SASL mechanisms require multiple message exchanges to perform a complete authentication. Applications should generally use ldap_sasl_interactive_bind_s() rather than calling the basic ldap_sasl_bind() functions directly. The mechs parameter should contain a space-separated list of candidate mechanisms to use. If this parameter is NULL or empty the library will query the supportedSASLMechanisms attribute from the server’s rootDSE for the list of SASL mechanisms the server supports. The flags parameter controls the interaction used to retrieve any necessary SASL authentication parameters and should be one of:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16301>16301</a></td>\n' +
            '<td>LDAP_SASL_AUTOMATIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16302>16302</a></td>\n' +
            '<td>use defaults if available, prompt otherwise</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16303>16303</a></td>\n' +
            '<td>LDAP_SASL_INTERACTIVE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16304>16304</a></td>\n' +
            '<td>always prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16305>16305</a></td>\n' +
            '<td>LDAP_SASL_QUIET</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16306>16306</a></td>\n' +
            '<td>never prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16307>16307</a></td>\n' +
            '<td>The interact function uses the provided defaults to handle requests from the SASL library for particular authentication parameters. There is no defined format for the defaults information; it is up to the caller to use whatever format is appropriate for the supplied interact function. The sasl_interact parameter comes from the underlying SASL library. When used with Cyrus SASL this is an array of sasl_interact_t structures. The Cyrus SASL library will prompt for a variety of inputs, including:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16308>16308</a></td>\n' +
            '<td>SASL_CB_GETREALM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16309>16309</a></td>\n' +
            '<td>the realm for the authentication attempt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16310>16310</a></td>\n' +
            '<td>SASL_CB_AUTHNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16311>16311</a></td>\n' +
            '<td>the username to authenticate</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16312>16312</a></td>\n' +
            '<td>SASL_CB_PASS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16313>16313</a></td>\n' +
            '<td>the password for the provided username</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16314>16314</a></td>\n' +
            '<td>SASL_CB_USER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16315>16315</a></td>\n' +
            '<td>the username to use for proxy authorization</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16316>16316</a></td>\n' +
            '<td>SASL_CB_NOECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16317>16317</a></td>\n' +
            '<td>generic prompt for input with input echoing disabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16318>16318</a></td>\n' +
            '<td>SASL_CB_ECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16319>16319</a></td>\n' +
            '<td>generic prompt for input with input echoing enabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16320>16320</a></td>\n' +
            '<td>SASL_CB_LIST_END</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16321>16321</a></td>\n' +
            '<td>indicates the end of the array of prompts</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16322>16322</a></td>\n' +
            '<td>See the Cyrus SASL documentation for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16323>16323</a></td>\n' +
            '<td>Applications which need to manage connections asynchronously may use ldap_sasl_interactive_bind() instead of the synchronous version. A valid mechs parameter must be supplied, otherwise the library will be forced to query the server for a list of supported mechanisms, and this query will be performed synchronously. The other parameters are the same as for the synchronous function, with three additional parameters. The actual SASL mechanism that was used, and the message ID for use with ldap_result() will be returned in rmechp and msgidp, respectively. The value in rmechp must not be modified by the caller and must be passed back on each subsequent call. The message obtained from ldap_result() must be passed in the result parameter. This parameter must be NULL when initiating a new Bind. The caller must free the result message after each call using ldap_msgfree(). The ldap_sasl_interactive_bind() function returns an LDAP result code. If the code is LDAP_SASL_BIND_IN_PROGRESS then the Bind is not complete yet, and this function must be called again with the next result from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16324>16324</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16325>16325</a></td>\n' +
            '<td>The ldap_set_rebind_proc function() sets the process to use for binding when an operation returns a referral. This function is used when an application needs to bind to another server in order to follow a referral or search continuation reference.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16326>16326</a></td>\n' +
            '<td>The function takes ld, the rebind function, and the params, the arbitrary data like state information which the client might need to properly rebind. The LDAP_OPT_REFERRALS option in the ld must be set to ON for the libraries to use the rebind function. Use the ldap_set_option function to set the value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16327>16327</a></td>\n' +
            '<td>The rebind function parameters are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16328>16328</a></td>\n' +
            '<td>The ld parameter must be used by the application when binding to the referred server if the application wants the libraries to follow the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16329>16329</a></td>\n' +
            '<td>The url parameter points to the URL referral string received from the LDAP server. The LDAP application can use the ldap_url_parse(3) function to parse the string into its components.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16330>16330</a></td>\n' +
            '<td>The request parameter specifies the type of request that generated the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16331>16331</a></td>\n' +
            '<td>The msgid parameter specifies the message ID of the request generating the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16332>16332</a></td>\n' +
            '<td>The params parameter is the same value as passed originally to the ldap_set_rebind_proc() function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16333>16333</a></td>\n' +
            '<td>The LDAP libraries set all the parameters when they call the rebind function. The application should not attempt to free either the ld or the url structures in the rebind function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16334>16334</a></td>\n' +
            '<td>The application must supply to the rebind function the required authentication information such as, user name, password, and certificates. The rebind function must use a synchronous bind method.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16335>16335</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16336>16336</a></td>\n' +
            '<td>The ldap_unbind() call is used to unbind from the directory, terminate the current association, and free the resources contained in the ld structure. Once it is called, the connection to the LDAP server is closed, and the ld structure is invalid. The ldap_unbind_s() call is just another name for ldap_unbind(); both of these calls are synchronous in nature.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16337>16337</a></td>\n' +
            '<td>The ldap_unbind_ext() and ldap_unbind_ext_s() allows the operations to specify controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16338>16338</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16339>16339</a></td>\n' +
            '<td>Asynchronous routines will return −1 in case of error, setting the ld_errno parameter of the ld structure. Synchronous routines return whatever ld_errno is set to. See ldap_error(3) for more information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16340>16340</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16341>16341</a></td>\n' +
            '<td>If an anonymous bind is sufficient for the application, the rebind process need not be provided. The LDAP libraries with the LDAP_OPT_REFERRALS option set to ON (default value) will automatically follow referrals using an anonymous bind.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16342>16342</a></td>\n' +
            '<td>If the application needs stronger authentication than an anonymous bind, you need to provide a rebind process for that authentication method. The bind method must be synchronous.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16343>16343</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16344>16344</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_open(3), ldap_set_option(3), ldap_url_parse(3) RFC 4422 (http://www.rfc-editor.org), Cyrus SASL (http://asg.web.cmu.edu/sasl/)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16345>16345</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16346>16346</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16347>16347</a></td>\n' +
            '<td>LDAP_OPEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16348>16348</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16349>16349</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16350>16350</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16351>16351</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16352>16352</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16353>16353</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16354>16354</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16355>16355</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16356>16356</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16357>16357</a></td>\n' +
            '<td>ldap_init, ldap_initialize, ldap_open − Initialize the LDAP library and open a connection to an LDAP server</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16358>16358</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16359>16359</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16360>16360</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16361>16361</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16362>16362</a></td>\n' +
            '<td>LDAP *ldap_open(host, port)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16363>16363</a></td>\n' +
            '<td>char *host;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16364>16364</a></td>\n' +
            '<td>int port;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16365>16365</a></td>\n' +
            '<td>LDAP *ldap_init(host, port)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16366>16366</a></td>\n' +
            '<td>char *host;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16367>16367</a></td>\n' +
            '<td>int port;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16368>16368</a></td>\n' +
            '<td>int ldap_initialize(ldp, uri)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16369>16369</a></td>\n' +
            '<td>LDAP **ldp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16370>16370</a></td>\n' +
            '<td>char *uri;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16371>16371</a></td>\n' +
            '<td>int ldap_set_urllist_proc(ld, proc, params)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16372>16372</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16373>16373</a></td>\n' +
            '<td>LDAP_URLLIST_PROC *proc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16374>16374</a></td>\n' +
            '<td>void *params;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16375>16375</a></td>\n' +
            '<td>int (LDAP_URLLIST_PROC)(ld, urllist, url, params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16376>16376</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16377>16377</a></td>\n' +
            '<td>LDAPURLDesc **urllist;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16378>16378</a></td>\n' +
            '<td>LDAPURLDesc **url;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16379>16379</a></td>\n' +
            '<td>void *params;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16380>16380</a></td>\n' +
            '<td>#include &lt;ldap_pvt.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16381>16381</a></td>\n' +
            '<td>int ldap_init_fd(fd, proto, uri, ldp)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16382>16382</a></td>\n' +
            '<td>ber_socket_t fd;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16383>16383</a></td>\n' +
            '<td>int proto;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16384>16384</a></td>\n' +
            '<td>char *uri;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16385>16385</a></td>\n' +
            '<td>LDAP **ldp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16386>16386</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16387>16387</a></td>\n' +
            '<td>ldap_open() opens a connection to an LDAP server and allocates an LDAP structure which is used to identify the connection and to maintain per-connection information. ldap_init() allocates an LDAP structure but does not open an initial connection. ldap_initialize() allocates an LDAP structure but does not open an initial connection. ldap_init_fd() allocates an LDAP structure using an existing connection on the provided socket. One of these routines must be called before any operations are attempted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16388>16388</a></td>\n' +
            '<td>ldap_open() takes host, the hostname on which the LDAP server is running, and port, the port number to which to connect. If the default IANA-assigned port of 389 is desired, LDAP_PORT should be specified for port. The host parameter may contain a blank-separated list of hosts to try to connect to, and each host may optionally by of the form host:port. If present, the :port overrides the port parameter to ldap_open(). Upon successfully making a connection to an LDAP server, ldap_open() returns a pointer to an opaque LDAP structure, which should be passed to subsequent calls to ldap_bind(), ldap_search(), etc. Certain fields in the LDAP structure can be set to indicate size limit, time limit, and how aliases are handled during operations; read and write access to those fields must occur by calling ldap_get_option(3) and ldap_set_option(3) respectively, whenever possible.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16389>16389</a></td>\n' +
            '<td>ldap_init() acts just like ldap_open(), but does not open a connection to the LDAP server. The actual connection open will occur when the first operation is attempted.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16390>16390</a></td>\n' +
            '<td>ldap_initialize() acts like ldap_init(), but it returns an integer indicating either success or the failure reason, and it allows to specify details for the connection in the schema portion of the URI. The uri parameter may be a comma- or whitespace-separated list of URIs containing only the schema, the host, and the port fields. Apart from ldap, other (non-standard) recognized values of the schema field are ldaps (LDAP over TLS), ldapi (LDAP over IPC), and cldap (connectionless LDAP). If other fields are present, the behavior is undefined.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16391>16391</a></td>\n' +
            '<td>At this time, ldap_open() and ldap_init() are deprecated in favor of ldap_initialize(), essentially because the latter allows to specify a schema in the URI and it explicitly returns an error code.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16392>16392</a></td>\n' +
            '<td>ldap_init_fd() allows an LDAP structure to be initialized using an already-opened connection. The proto parameter should be one of LDAP_PROTO_TCP, LDAP_PROTO_UDP, or LDAP_PROTO_IPC for a connection using TCP, UDP, or IPC, respectively. The value LDAP_PROTO_EXT may also be specified if user-supplied sockbuf handlers are going to be used. Note that support for UDP is not implemented unless libldap was built with LDAP_CONNECTIONLESS defined. The uri parameter may optionally be provided for informational purposes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16393>16393</a></td>\n' +
            '<td>ldap_set_urllist_proc() allows to set a function proc of type LDAP_URLLIST_PROC that is called when a successful connection can be established. This function receives the list of URIs parsed from the uri string originally passed to ldap_initialize(), and the one that successfully connected. The function may manipulate the URI list; the typical use consists in moving the successful URI to the head of the list, so that subsequent attempts to connect to one of the URIs using the same LDAP handle will try it first. If ld is null, proc is set as a global parameter that is inherited by all handlers within the process that are created after the call to ldap_set_urllist_proc(). By default, no LDAP_URLLIST_PROC is set. In a multithreaded environment, ldap_set_urllist_proc() must be called before any concurrent operation using the LDAP handle is started.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16394>16394</a></td>\n' +
            '<td>Note: the first call into the LDAP library also initializes the global options for the library. As such the first call should be single-threaded or otherwise protected to insure that only one call is active. It is recommended that ldap_get_option() or ldap_set_option() be used in the program’s main thread before any additional threads are created. See ldap_get_option(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16395>16395</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16396>16396</a></td>\n' +
            '<td>If an error occurs, ldap_open() and ldap_init() will return NULL and errno should be set appropriately. ldap_initialize() and ldap_init_fd() will directly return the LDAP code associated to the error (or LDAP_SUCCESS in case of success); errno should be set as well whenever appropriate. ldap_set_urllist_proc() returns LDAP_OPT_ERROR on error, and LDAP_OPT_SUCCESS on success.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16397>16397</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16398>16398</a></td>\n' +
            '<td>ldap(3), ldap_bind(3), ldap_get_option(3), ldap_set_option(3), lber-sockbuf(3), errno(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16399>16399</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16400>16400</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16401>16401</a></td>\n' +
            '<td>LDAP_BIND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16402>16402</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16403>16403</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16404>16404</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16405>16405</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16406>16406</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16407>16407</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16408>16408</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16409>16409</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16410>16410</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16411>16411</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16412>16412</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16413>16413</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16414>16414</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16415>16415</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16416>16416</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16417>16417</a></td>\n' +
            '<td>ldap_bind, ldap_bind_s, ldap_simple_bind, ldap_simple_bind_s, ldap_sasl_bind, ldap_sasl_bind_s, ldap_sasl_interactive_bind_s, ldap_parse_sasl_bind_result, ldap_unbind, ldap_unbind_s, ldap_unbind_ext, ldap_unbind_ext_s, ldap_set_rebind_proc − LDAP bind routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16418>16418</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16419>16419</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16420>16420</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16421>16421</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16422>16422</a></td>\n' +
            '<td>int ldap_bind(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16423>16423</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16424>16424</a></td>\n' +
            '<td>int ldap_bind_s(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16425>16425</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16426>16426</a></td>\n' +
            '<td>int ldap_simple_bind(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16427>16427</a></td>\n' +
            '<td>int ldap_simple_bind_s(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16428>16428</a></td>\n' +
            '<td>int ldap_sasl_bind(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16429>16429</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16430>16430</a></td>\n' +
            '<td>LDAPControl *cctrls[], int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16431>16431</a></td>\n' +
            '<td>int ldap_sasl_bind_s(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16432>16432</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16433>16433</a></td>\n' +
            '<td>LDAPControl *cctrls[], struct berval **servercredp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16434>16434</a></td>\n' +
            '<td>int ldap_parse_sasl_bind_result(LDAP *ld, LDAPMessage *res,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16435>16435</a></td>\n' +
            '<td>struct berval **servercredp, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16436>16436</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind_s(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16437>16437</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16438>16438</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16439>16439</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16440>16440</a></td>\n' +
            '<td>void *defaults);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16441>16441</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16442>16442</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16443>16443</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16444>16444</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16445>16445</a></td>\n' +
            '<td>void *defaults, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16446>16446</a></td>\n' +
            '<td>const char **rmechp, int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16447>16447</a></td>\n' +
            '<td>int (LDAP_SASL_INTERACT_PROC)(LDAP *ld, unsigned flags, void *defaults, void *sasl_interact);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16448>16448</a></td>\n' +
            '<td>int ldap_unbind(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16449>16449</a></td>\n' +
            '<td>int ldap_unbind_s(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16450>16450</a></td>\n' +
            '<td>int ldap_unbind_ext(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16451>16451</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16452>16452</a></td>\n' +
            '<td>int ldap_unbind_ext_s(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16453>16453</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16454>16454</a></td>\n' +
            '<td>int ldap_set_rebind_proc (LDAP *ld, LDAP_REBIND_PROC *ldap_proc, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16455>16455</a></td>\n' +
            '<td>int (LDAP_REBIND_PROC)(LDAP *ld, LDAP_CONST char *url, ber_tag_t request, ber_int_t msgid, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16456>16456</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16457>16457</a></td>\n' +
            '<td>These routines provide various interfaces to the LDAP bind operation. After an association with an LDAP server is made using ldap_init(3), an LDAP bind operation should be performed before other operations are attempted over the connection. An LDAP bind is required when using Version 2 of the LDAP protocol; it is optional for Version 3 but is usually needed due to security considerations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16458>16458</a></td>\n' +
            '<td>There are three types of bind calls, ones providing simple authentication, ones providing SASL authentication, and general routines capable of doing either simple or SASL authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16459>16459</a></td>\n' +
            '<td>SASL (Simple Authentication and Security Layer) can negotiate one of many different kinds of authentication. Both synchronous and asynchronous versions of each variant of the bind call are provided. All routines take ld as their first parameter, as returned from ldap_init(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16460>16460</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16461>16461</a></td>\n' +
            '<td>The simplest form of the bind call is ldap_simple_bind_s(). It takes the DN to bind as in who, and the userPassword associated with the entry in passwd. It returns an LDAP error indication (see ldap_error(3)). The ldap_simple_bind() call is asynchronous, taking the same parameters but only initiating the bind operation and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16462>16462</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16463>16463</a></td>\n' +
            '<td>The ldap_bind() and ldap_bind_s() routines can be used when the authentication method to use needs to be selected at runtime. They both take an extra method parameter selecting the authentication method to use. It should be set to LDAP_AUTH_SIMPLE to select simple authentication. ldap_bind() returns the message id of the request it initiates. ldap_bind_s() returns an LDAP error indication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16464>16464</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16465>16465</a></td>\n' +
            '<td>For SASL binds the server always ignores any provided DN, so the dn parameter should always be NULL. ldap_sasl_bind_s() sends a single SASL bind request with the given SASL mechanism and credentials in the cred parameter. The format of the credentials depends on the particular SASL mechanism in use. For mechanisms that provide mutual authentication the server’s credentials will be returned in the servercredp parameter. The routine returns an LDAP error indication (see ldap_error(3)). The ldap_sasl_bind() call is asynchronous, taking the same parameters but only sending the request and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3). The result must be additionally parsed by ldap_parse_sasl_bind_result() to obtain any server credentials sent from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16466>16466</a></td>\n' +
            '<td>Many SASL mechanisms require multiple message exchanges to perform a complete authentication. Applications should generally use ldap_sasl_interactive_bind_s() rather than calling the basic ldap_sasl_bind() functions directly. The mechs parameter should contain a space-separated list of candidate mechanisms to use. If this parameter is NULL or empty the library will query the supportedSASLMechanisms attribute from the server’s rootDSE for the list of SASL mechanisms the server supports. The flags parameter controls the interaction used to retrieve any necessary SASL authentication parameters and should be one of:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16467>16467</a></td>\n' +
            '<td>LDAP_SASL_AUTOMATIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16468>16468</a></td>\n' +
            '<td>use defaults if available, prompt otherwise</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16469>16469</a></td>\n' +
            '<td>LDAP_SASL_INTERACTIVE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16470>16470</a></td>\n' +
            '<td>always prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16471>16471</a></td>\n' +
            '<td>LDAP_SASL_QUIET</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16472>16472</a></td>\n' +
            '<td>never prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16473>16473</a></td>\n' +
            '<td>The interact function uses the provided defaults to handle requests from the SASL library for particular authentication parameters. There is no defined format for the defaults information; it is up to the caller to use whatever format is appropriate for the supplied interact function. The sasl_interact parameter comes from the underlying SASL library. When used with Cyrus SASL this is an array of sasl_interact_t structures. The Cyrus SASL library will prompt for a variety of inputs, including:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16474>16474</a></td>\n' +
            '<td>SASL_CB_GETREALM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16475>16475</a></td>\n' +
            '<td>the realm for the authentication attempt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16476>16476</a></td>\n' +
            '<td>SASL_CB_AUTHNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16477>16477</a></td>\n' +
            '<td>the username to authenticate</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16478>16478</a></td>\n' +
            '<td>SASL_CB_PASS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16479>16479</a></td>\n' +
            '<td>the password for the provided username</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16480>16480</a></td>\n' +
            '<td>SASL_CB_USER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16481>16481</a></td>\n' +
            '<td>the username to use for proxy authorization</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16482>16482</a></td>\n' +
            '<td>SASL_CB_NOECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16483>16483</a></td>\n' +
            '<td>generic prompt for input with input echoing disabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16484>16484</a></td>\n' +
            '<td>SASL_CB_ECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16485>16485</a></td>\n' +
            '<td>generic prompt for input with input echoing enabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16486>16486</a></td>\n' +
            '<td>SASL_CB_LIST_END</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16487>16487</a></td>\n' +
            '<td>indicates the end of the array of prompts</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16488>16488</a></td>\n' +
            '<td>See the Cyrus SASL documentation for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16489>16489</a></td>\n' +
            '<td>Applications which need to manage connections asynchronously may use ldap_sasl_interactive_bind() instead of the synchronous version. A valid mechs parameter must be supplied, otherwise the library will be forced to query the server for a list of supported mechanisms, and this query will be performed synchronously. The other parameters are the same as for the synchronous function, with three additional parameters. The actual SASL mechanism that was used, and the message ID for use with ldap_result() will be returned in rmechp and msgidp, respectively. The value in rmechp must not be modified by the caller and must be passed back on each subsequent call. The message obtained from ldap_result() must be passed in the result parameter. This parameter must be NULL when initiating a new Bind. The caller must free the result message after each call using ldap_msgfree(). The ldap_sasl_interactive_bind() function returns an LDAP result code. If the code is LDAP_SASL_BIND_IN_PROGRESS then the Bind is not complete yet, and this function must be called again with the next result from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16490>16490</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16491>16491</a></td>\n' +
            '<td>The ldap_set_rebind_proc function() sets the process to use for binding when an operation returns a referral. This function is used when an application needs to bind to another server in order to follow a referral or search continuation reference.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16492>16492</a></td>\n' +
            '<td>The function takes ld, the rebind function, and the params, the arbitrary data like state information which the client might need to properly rebind. The LDAP_OPT_REFERRALS option in the ld must be set to ON for the libraries to use the rebind function. Use the ldap_set_option function to set the value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16493>16493</a></td>\n' +
            '<td>The rebind function parameters are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16494>16494</a></td>\n' +
            '<td>The ld parameter must be used by the application when binding to the referred server if the application wants the libraries to follow the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16495>16495</a></td>\n' +
            '<td>The url parameter points to the URL referral string received from the LDAP server. The LDAP application can use the ldap_url_parse(3) function to parse the string into its components.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16496>16496</a></td>\n' +
            '<td>The request parameter specifies the type of request that generated the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16497>16497</a></td>\n' +
            '<td>The msgid parameter specifies the message ID of the request generating the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16498>16498</a></td>\n' +
            '<td>The params parameter is the same value as passed originally to the ldap_set_rebind_proc() function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16499>16499</a></td>\n' +
            '<td>The LDAP libraries set all the parameters when they call the rebind function. The application should not attempt to free either the ld or the url structures in the rebind function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16500>16500</a></td>\n' +
            '<td>The application must supply to the rebind function the required authentication information such as, user name, password, and certificates. The rebind function must use a synchronous bind method.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16501>16501</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16502>16502</a></td>\n' +
            '<td>The ldap_unbind() call is used to unbind from the directory, terminate the current association, and free the resources contained in the ld structure. Once it is called, the connection to the LDAP server is closed, and the ld structure is invalid. The ldap_unbind_s() call is just another name for ldap_unbind(); both of these calls are synchronous in nature.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16503>16503</a></td>\n' +
            '<td>The ldap_unbind_ext() and ldap_unbind_ext_s() allows the operations to specify controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16504>16504</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16505>16505</a></td>\n' +
            '<td>Asynchronous routines will return −1 in case of error, setting the ld_errno parameter of the ld structure. Synchronous routines return whatever ld_errno is set to. See ldap_error(3) for more information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16506>16506</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16507>16507</a></td>\n' +
            '<td>If an anonymous bind is sufficient for the application, the rebind process need not be provided. The LDAP libraries with the LDAP_OPT_REFERRALS option set to ON (default value) will automatically follow referrals using an anonymous bind.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16508>16508</a></td>\n' +
            '<td>If the application needs stronger authentication than an anonymous bind, you need to provide a rebind process for that authentication method. The bind method must be synchronous.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16509>16509</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16510>16510</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_open(3), ldap_set_option(3), ldap_url_parse(3) RFC 4422 (http://www.rfc-editor.org), Cyrus SASL (http://asg.web.cmu.edu/sasl/)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16511>16511</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16512>16512</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16513>16513</a></td>\n' +
            '<td>LDAP_BIND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16514>16514</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16515>16515</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16516>16516</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16517>16517</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16518>16518</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16519>16519</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16520>16520</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16521>16521</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16522>16522</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16523>16523</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16524>16524</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16525>16525</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16526>16526</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16527>16527</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16528>16528</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16529>16529</a></td>\n' +
            '<td>ldap_bind, ldap_bind_s, ldap_simple_bind, ldap_simple_bind_s, ldap_sasl_bind, ldap_sasl_bind_s, ldap_sasl_interactive_bind_s, ldap_parse_sasl_bind_result, ldap_unbind, ldap_unbind_s, ldap_unbind_ext, ldap_unbind_ext_s, ldap_set_rebind_proc − LDAP bind routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16530>16530</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16531>16531</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16532>16532</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16533>16533</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16534>16534</a></td>\n' +
            '<td>int ldap_bind(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16535>16535</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16536>16536</a></td>\n' +
            '<td>int ldap_bind_s(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16537>16537</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16538>16538</a></td>\n' +
            '<td>int ldap_simple_bind(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16539>16539</a></td>\n' +
            '<td>int ldap_simple_bind_s(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16540>16540</a></td>\n' +
            '<td>int ldap_sasl_bind(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16541>16541</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16542>16542</a></td>\n' +
            '<td>LDAPControl *cctrls[], int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16543>16543</a></td>\n' +
            '<td>int ldap_sasl_bind_s(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16544>16544</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16545>16545</a></td>\n' +
            '<td>LDAPControl *cctrls[], struct berval **servercredp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16546>16546</a></td>\n' +
            '<td>int ldap_parse_sasl_bind_result(LDAP *ld, LDAPMessage *res,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16547>16547</a></td>\n' +
            '<td>struct berval **servercredp, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16548>16548</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind_s(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16549>16549</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16550>16550</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16551>16551</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16552>16552</a></td>\n' +
            '<td>void *defaults);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16553>16553</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16554>16554</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16555>16555</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16556>16556</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16557>16557</a></td>\n' +
            '<td>void *defaults, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16558>16558</a></td>\n' +
            '<td>const char **rmechp, int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16559>16559</a></td>\n' +
            '<td>int (LDAP_SASL_INTERACT_PROC)(LDAP *ld, unsigned flags, void *defaults, void *sasl_interact);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16560>16560</a></td>\n' +
            '<td>int ldap_unbind(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16561>16561</a></td>\n' +
            '<td>int ldap_unbind_s(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16562>16562</a></td>\n' +
            '<td>int ldap_unbind_ext(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16563>16563</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16564>16564</a></td>\n' +
            '<td>int ldap_unbind_ext_s(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16565>16565</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16566>16566</a></td>\n' +
            '<td>int ldap_set_rebind_proc (LDAP *ld, LDAP_REBIND_PROC *ldap_proc, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16567>16567</a></td>\n' +
            '<td>int (LDAP_REBIND_PROC)(LDAP *ld, LDAP_CONST char *url, ber_tag_t request, ber_int_t msgid, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16568>16568</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16569>16569</a></td>\n' +
            '<td>These routines provide various interfaces to the LDAP bind operation. After an association with an LDAP server is made using ldap_init(3), an LDAP bind operation should be performed before other operations are attempted over the connection. An LDAP bind is required when using Version 2 of the LDAP protocol; it is optional for Version 3 but is usually needed due to security considerations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16570>16570</a></td>\n' +
            '<td>There are three types of bind calls, ones providing simple authentication, ones providing SASL authentication, and general routines capable of doing either simple or SASL authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16571>16571</a></td>\n' +
            '<td>SASL (Simple Authentication and Security Layer) can negotiate one of many different kinds of authentication. Both synchronous and asynchronous versions of each variant of the bind call are provided. All routines take ld as their first parameter, as returned from ldap_init(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16572>16572</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16573>16573</a></td>\n' +
            '<td>The simplest form of the bind call is ldap_simple_bind_s(). It takes the DN to bind as in who, and the userPassword associated with the entry in passwd. It returns an LDAP error indication (see ldap_error(3)). The ldap_simple_bind() call is asynchronous, taking the same parameters but only initiating the bind operation and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16574>16574</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16575>16575</a></td>\n' +
            '<td>The ldap_bind() and ldap_bind_s() routines can be used when the authentication method to use needs to be selected at runtime. They both take an extra method parameter selecting the authentication method to use. It should be set to LDAP_AUTH_SIMPLE to select simple authentication. ldap_bind() returns the message id of the request it initiates. ldap_bind_s() returns an LDAP error indication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16576>16576</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16577>16577</a></td>\n' +
            '<td>For SASL binds the server always ignores any provided DN, so the dn parameter should always be NULL. ldap_sasl_bind_s() sends a single SASL bind request with the given SASL mechanism and credentials in the cred parameter. The format of the credentials depends on the particular SASL mechanism in use. For mechanisms that provide mutual authentication the server’s credentials will be returned in the servercredp parameter. The routine returns an LDAP error indication (see ldap_error(3)). The ldap_sasl_bind() call is asynchronous, taking the same parameters but only sending the request and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3). The result must be additionally parsed by ldap_parse_sasl_bind_result() to obtain any server credentials sent from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16578>16578</a></td>\n' +
            '<td>Many SASL mechanisms require multiple message exchanges to perform a complete authentication. Applications should generally use ldap_sasl_interactive_bind_s() rather than calling the basic ldap_sasl_bind() functions directly. The mechs parameter should contain a space-separated list of candidate mechanisms to use. If this parameter is NULL or empty the library will query the supportedSASLMechanisms attribute from the server’s rootDSE for the list of SASL mechanisms the server supports. The flags parameter controls the interaction used to retrieve any necessary SASL authentication parameters and should be one of:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16579>16579</a></td>\n' +
            '<td>LDAP_SASL_AUTOMATIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16580>16580</a></td>\n' +
            '<td>use defaults if available, prompt otherwise</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16581>16581</a></td>\n' +
            '<td>LDAP_SASL_INTERACTIVE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16582>16582</a></td>\n' +
            '<td>always prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16583>16583</a></td>\n' +
            '<td>LDAP_SASL_QUIET</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16584>16584</a></td>\n' +
            '<td>never prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16585>16585</a></td>\n' +
            '<td>The interact function uses the provided defaults to handle requests from the SASL library for particular authentication parameters. There is no defined format for the defaults information; it is up to the caller to use whatever format is appropriate for the supplied interact function. The sasl_interact parameter comes from the underlying SASL library. When used with Cyrus SASL this is an array of sasl_interact_t structures. The Cyrus SASL library will prompt for a variety of inputs, including:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16586>16586</a></td>\n' +
            '<td>SASL_CB_GETREALM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16587>16587</a></td>\n' +
            '<td>the realm for the authentication attempt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16588>16588</a></td>\n' +
            '<td>SASL_CB_AUTHNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16589>16589</a></td>\n' +
            '<td>the username to authenticate</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16590>16590</a></td>\n' +
            '<td>SASL_CB_PASS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16591>16591</a></td>\n' +
            '<td>the password for the provided username</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16592>16592</a></td>\n' +
            '<td>SASL_CB_USER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16593>16593</a></td>\n' +
            '<td>the username to use for proxy authorization</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16594>16594</a></td>\n' +
            '<td>SASL_CB_NOECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16595>16595</a></td>\n' +
            '<td>generic prompt for input with input echoing disabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16596>16596</a></td>\n' +
            '<td>SASL_CB_ECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16597>16597</a></td>\n' +
            '<td>generic prompt for input with input echoing enabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16598>16598</a></td>\n' +
            '<td>SASL_CB_LIST_END</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16599>16599</a></td>\n' +
            '<td>indicates the end of the array of prompts</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16600>16600</a></td>\n' +
            '<td>See the Cyrus SASL documentation for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16601>16601</a></td>\n' +
            '<td>Applications which need to manage connections asynchronously may use ldap_sasl_interactive_bind() instead of the synchronous version. A valid mechs parameter must be supplied, otherwise the library will be forced to query the server for a list of supported mechanisms, and this query will be performed synchronously. The other parameters are the same as for the synchronous function, with three additional parameters. The actual SASL mechanism that was used, and the message ID for use with ldap_result() will be returned in rmechp and msgidp, respectively. The value in rmechp must not be modified by the caller and must be passed back on each subsequent call. The message obtained from ldap_result() must be passed in the result parameter. This parameter must be NULL when initiating a new Bind. The caller must free the result message after each call using ldap_msgfree(). The ldap_sasl_interactive_bind() function returns an LDAP result code. If the code is LDAP_SASL_BIND_IN_PROGRESS then the Bind is not complete yet, and this function must be called again with the next result from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16602>16602</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16603>16603</a></td>\n' +
            '<td>The ldap_set_rebind_proc function() sets the process to use for binding when an operation returns a referral. This function is used when an application needs to bind to another server in order to follow a referral or search continuation reference.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16604>16604</a></td>\n' +
            '<td>The function takes ld, the rebind function, and the params, the arbitrary data like state information which the client might need to properly rebind. The LDAP_OPT_REFERRALS option in the ld must be set to ON for the libraries to use the rebind function. Use the ldap_set_option function to set the value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16605>16605</a></td>\n' +
            '<td>The rebind function parameters are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16606>16606</a></td>\n' +
            '<td>The ld parameter must be used by the application when binding to the referred server if the application wants the libraries to follow the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16607>16607</a></td>\n' +
            '<td>The url parameter points to the URL referral string received from the LDAP server. The LDAP application can use the ldap_url_parse(3) function to parse the string into its components.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16608>16608</a></td>\n' +
            '<td>The request parameter specifies the type of request that generated the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16609>16609</a></td>\n' +
            '<td>The msgid parameter specifies the message ID of the request generating the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16610>16610</a></td>\n' +
            '<td>The params parameter is the same value as passed originally to the ldap_set_rebind_proc() function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16611>16611</a></td>\n' +
            '<td>The LDAP libraries set all the parameters when they call the rebind function. The application should not attempt to free either the ld or the url structures in the rebind function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16612>16612</a></td>\n' +
            '<td>The application must supply to the rebind function the required authentication information such as, user name, password, and certificates. The rebind function must use a synchronous bind method.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16613>16613</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16614>16614</a></td>\n' +
            '<td>The ldap_unbind() call is used to unbind from the directory, terminate the current association, and free the resources contained in the ld structure. Once it is called, the connection to the LDAP server is closed, and the ld structure is invalid. The ldap_unbind_s() call is just another name for ldap_unbind(); both of these calls are synchronous in nature.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16615>16615</a></td>\n' +
            '<td>The ldap_unbind_ext() and ldap_unbind_ext_s() allows the operations to specify controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16616>16616</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16617>16617</a></td>\n' +
            '<td>Asynchronous routines will return −1 in case of error, setting the ld_errno parameter of the ld structure. Synchronous routines return whatever ld_errno is set to. See ldap_error(3) for more information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16618>16618</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16619>16619</a></td>\n' +
            '<td>If an anonymous bind is sufficient for the application, the rebind process need not be provided. The LDAP libraries with the LDAP_OPT_REFERRALS option set to ON (default value) will automatically follow referrals using an anonymous bind.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16620>16620</a></td>\n' +
            '<td>If the application needs stronger authentication than an anonymous bind, you need to provide a rebind process for that authentication method. The bind method must be synchronous.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16621>16621</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16622>16622</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_open(3), ldap_set_option(3), ldap_url_parse(3) RFC 4422 (http://www.rfc-editor.org), Cyrus SASL (http://asg.web.cmu.edu/sasl/)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16623>16623</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16624>16624</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16625>16625</a></td>\n' +
            '<td>LDAP_SORT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16626>16626</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16627>16627</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16628>16628</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16629>16629</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16630>16630</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16631>16631</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16632>16632</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16633>16633</a></td>\n' +
            '<td>ldap_sort_entries, ldap_sort_values, ldap_sort_strcasecmp − LDAP sorting routines (deprecated)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16634>16634</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16635>16635</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16636>16636</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16637>16637</a></td>\n' +
            '<td>The ldap_sort_entries(), ldap_sort_values(), and ldap_sort_strcasecmp() are deprecated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16638>16638</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16639>16639</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16640>16640</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16641>16641</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16642>16642</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16643>16643</a></td>\n' +
            '<td>LDAP_SORT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16644>16644</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16645>16645</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16646>16646</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16647>16647</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16648>16648</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16649>16649</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16650>16650</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16651>16651</a></td>\n' +
            '<td>ldap_sort_entries, ldap_sort_values, ldap_sort_strcasecmp − LDAP sorting routines (deprecated)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16652>16652</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16653>16653</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16654>16654</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16655>16655</a></td>\n' +
            '<td>The ldap_sort_entries(), ldap_sort_values(), and ldap_sort_strcasecmp() are deprecated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16656>16656</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16657>16657</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16658>16658</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16659>16659</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16660>16660</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16661>16661</a></td>\n' +
            '<td>LDAP_SORT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16662>16662</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16663>16663</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16664>16664</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16665>16665</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16666>16666</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16667>16667</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16668>16668</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16669>16669</a></td>\n' +
            '<td>ldap_sort_entries, ldap_sort_values, ldap_sort_strcasecmp − LDAP sorting routines (deprecated)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16670>16670</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16671>16671</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16672>16672</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16673>16673</a></td>\n' +
            '<td>The ldap_sort_entries(), ldap_sort_values(), and ldap_sort_strcasecmp() are deprecated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16674>16674</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16675>16675</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16676>16676</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16677>16677</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16678>16678</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16679>16679</a></td>\n' +
            '<td>LDAP_SORT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16680>16680</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16681>16681</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16682>16682</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16683>16683</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16684>16684</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16685>16685</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16686>16686</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16687>16687</a></td>\n' +
            '<td>ldap_sort_entries, ldap_sort_values, ldap_sort_strcasecmp − LDAP sorting routines (deprecated)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16688>16688</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16689>16689</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16690>16690</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16691>16691</a></td>\n' +
            '<td>The ldap_sort_entries(), ldap_sort_values(), and ldap_sort_strcasecmp() are deprecated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16692>16692</a></td>\n' +
            '<td>Deprecated interfaces generally remain in the library. The macro LDAP_DEPRECATED can be defined to a non-zero value (e.g., -DLDAP_DEPRECATED=1) when compiling program designed to use deprecated interfaces. It is recommended that developers writing new programs, or updating old programs, avoid use of deprecated interfaces. Over time, it is expected that documentation (and, eventually, support) for deprecated interfaces to be eliminated.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16693>16693</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16694>16694</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16695>16695</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16696>16696</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16697>16697</a></td>\n' +
            '<td>LDAP_TLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16698>16698</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16699>16699</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16700>16700</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16701>16701</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16702>16702</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16703>16703</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16704>16704</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16705>16705</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16706>16706</a></td>\n' +
            '<td>ldap_start_tls, ldap_start_tls_s, ldap_tls_inplace, ldap_install_tls − LDAP TLS initialization routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16707>16707</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16708>16708</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16709>16709</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16710>16710</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16711>16711</a></td>\n' +
            '<td>int ldap_start_tls(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16712>16712</a></td>\n' +
            '<td>int ldap_start_tls_s(LDAP *ld, LDAPControl **serverctrls, LDAPControl **clientctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16713>16713</a></td>\n' +
            '<td>int ldap_tls_inplace(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16714>16714</a></td>\n' +
            '<td>int ldap_install_tls(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16715>16715</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16716>16716</a></td>\n' +
            '<td>These routines are used to initiate TLS processing on an LDAP session. ldap_start_tls_s() sends a StartTLS request to a server, waits for the reply, and then installs TLS handlers on the session if the request succeeded. The routine returns LDAP_SUCCESS if everything succeeded, otherwise it returns an LDAP error code. ldap_start_tls() sends a StartTLS request to a server and does nothing else. It returns LDAP_SUCCESS if the request was sent successfully. ldap_tls_inplace() returns 1 if TLS handlers have been installed on the specified session, 0 otherwise. ldap_install_tls() installs the TLS handlers on the given session. It returns LDAP_LOCAL_ERROR if TLS is already installed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16717>16717</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16718>16718</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16719>16719</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16720>16720</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16721>16721</a></td>\n' +
            '<td>LDAP_TLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16722>16722</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16723>16723</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16724>16724</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16725>16725</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16726>16726</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16727>16727</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16728>16728</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16729>16729</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16730>16730</a></td>\n' +
            '<td>ldap_start_tls, ldap_start_tls_s, ldap_tls_inplace, ldap_install_tls − LDAP TLS initialization routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16731>16731</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16732>16732</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16733>16733</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16734>16734</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16735>16735</a></td>\n' +
            '<td>int ldap_start_tls(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16736>16736</a></td>\n' +
            '<td>int ldap_start_tls_s(LDAP *ld, LDAPControl **serverctrls, LDAPControl **clientctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16737>16737</a></td>\n' +
            '<td>int ldap_tls_inplace(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16738>16738</a></td>\n' +
            '<td>int ldap_install_tls(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16739>16739</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16740>16740</a></td>\n' +
            '<td>These routines are used to initiate TLS processing on an LDAP session. ldap_start_tls_s() sends a StartTLS request to a server, waits for the reply, and then installs TLS handlers on the session if the request succeeded. The routine returns LDAP_SUCCESS if everything succeeded, otherwise it returns an LDAP error code. ldap_start_tls() sends a StartTLS request to a server and does nothing else. It returns LDAP_SUCCESS if the request was sent successfully. ldap_tls_inplace() returns 1 if TLS handlers have been installed on the specified session, 0 otherwise. ldap_install_tls() installs the TLS handlers on the given session. It returns LDAP_LOCAL_ERROR if TLS is already installed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16741>16741</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16742>16742</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16743>16743</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16744>16744</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16745>16745</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16746>16746</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16747>16747</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16748>16748</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16749>16749</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16750>16750</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16751>16751</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16752>16752</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16753>16753</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16754>16754</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16755>16755</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16756>16756</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16757>16757</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16758>16758</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16759>16759</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16760>16760</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16761>16761</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16762>16762</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16763>16763</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16764>16764</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16765>16765</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16766>16766</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16767>16767</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16768>16768</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16769>16769</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16770>16770</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16771>16771</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16772>16772</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16773>16773</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16774>16774</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16775>16775</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16776>16776</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16777>16777</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16778>16778</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16779>16779</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16780>16780</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16781>16781</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16782>16782</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16783>16783</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16784>16784</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16785>16785</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16786>16786</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16787>16787</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16788>16788</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16789>16789</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16790>16790</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16791>16791</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16792>16792</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16793>16793</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16794>16794</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16795>16795</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16796>16796</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16797>16797</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16798>16798</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16799>16799</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16800>16800</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16801>16801</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16802>16802</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16803>16803</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16804>16804</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16805>16805</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16806>16806</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16807>16807</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16808>16808</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16809>16809</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16810>16810</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16811>16811</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16812>16812</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16813>16813</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16814>16814</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16815>16815</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16816>16816</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16817>16817</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16818>16818</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16819>16819</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16820>16820</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16821>16821</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16822>16822</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16823>16823</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16824>16824</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16825>16825</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16826>16826</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16827>16827</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16828>16828</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16829>16829</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16830>16830</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16831>16831</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16832>16832</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16833>16833</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16834>16834</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16835>16835</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16836>16836</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16837>16837</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16838>16838</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16839>16839</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16840>16840</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16841>16841</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16842>16842</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16843>16843</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16844>16844</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16845>16845</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16846>16846</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16847>16847</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16848>16848</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16849>16849</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16850>16850</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16851>16851</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16852>16852</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16853>16853</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16854>16854</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16855>16855</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16856>16856</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16857>16857</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16858>16858</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16859>16859</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16860>16860</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16861>16861</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16862>16862</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16863>16863</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16864>16864</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16865>16865</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16866>16866</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16867>16867</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16868>16868</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16869>16869</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16870>16870</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16871>16871</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16872>16872</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16873>16873</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16874>16874</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16875>16875</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16876>16876</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16877>16877</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16878>16878</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16879>16879</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16880>16880</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16881>16881</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16882>16882</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16883>16883</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16884>16884</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16885>16885</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16886>16886</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16887>16887</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16888>16888</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16889>16889</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16890>16890</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16891>16891</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16892>16892</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16893>16893</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16894>16894</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16895>16895</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16896>16896</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16897>16897</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16898>16898</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16899>16899</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16900>16900</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16901>16901</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16902>16902</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16903>16903</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16904>16904</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16905>16905</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16906>16906</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16907>16907</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16908>16908</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16909>16909</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16910>16910</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16911>16911</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16912>16912</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16913>16913</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16914>16914</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16915>16915</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16916>16916</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16917>16917</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16918>16918</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16919>16919</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16920>16920</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16921>16921</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16922>16922</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16923>16923</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16924>16924</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16925>16925</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16926>16926</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16927>16927</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16928>16928</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16929>16929</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16930>16930</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16931>16931</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16932>16932</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16933>16933</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16934>16934</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16935>16935</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16936>16936</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16937>16937</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16938>16938</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16939>16939</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16940>16940</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16941>16941</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16942>16942</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16943>16943</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16944>16944</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16945>16945</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16946>16946</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16947>16947</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16948>16948</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16949>16949</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16950>16950</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16951>16951</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16952>16952</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16953>16953</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16954>16954</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16955>16955</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16956>16956</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16957>16957</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16958>16958</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16959>16959</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16960>16960</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16961>16961</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16962>16962</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16963>16963</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16964>16964</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16965>16965</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16966>16966</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16967>16967</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16968>16968</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16969>16969</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16970>16970</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16971>16971</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16972>16972</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16973>16973</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16974>16974</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16975>16975</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16976>16976</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16977>16977</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16978>16978</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16979>16979</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16980>16980</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16981>16981</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16982>16982</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16983>16983</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16984>16984</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16985>16985</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16986>16986</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16987>16987</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16988>16988</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16989>16989</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16990>16990</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16991>16991</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16992>16992</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16993>16993</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16994>16994</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16995>16995</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16996>16996</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16997>16997</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16998>16998</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=16999>16999</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17000>17000</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17001>17001</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17002>17002</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17003>17003</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17004>17004</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17005>17005</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17006>17006</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17007>17007</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17008>17008</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17009>17009</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17010>17010</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17011>17011</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17012>17012</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17013>17013</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17014>17014</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17015>17015</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17016>17016</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17017>17017</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17018>17018</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17019>17019</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17020>17020</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17021>17021</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17022>17022</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17023>17023</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17024>17024</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17025>17025</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17026>17026</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17027>17027</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17028>17028</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17029>17029</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17030>17030</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17031>17031</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17032>17032</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17033>17033</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17034>17034</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17035>17035</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17036>17036</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17037>17037</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17038>17038</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17039>17039</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17040>17040</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17041>17041</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17042>17042</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17043>17043</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17044>17044</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17045>17045</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17046>17046</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17047>17047</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17048>17048</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17049>17049</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17050>17050</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17051>17051</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17052>17052</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17053>17053</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17054>17054</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17055>17055</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17056>17056</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17057>17057</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17058>17058</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17059>17059</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17060>17060</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17061>17061</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17062>17062</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17063>17063</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17064>17064</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17065>17065</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17066>17066</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17067>17067</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17068>17068</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17069>17069</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17070>17070</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17071>17071</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17072>17072</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17073>17073</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17074>17074</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17075>17075</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17076>17076</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17077>17077</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17078>17078</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17079>17079</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17080>17080</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17081>17081</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17082>17082</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17083>17083</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17084>17084</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17085>17085</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17086>17086</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17087>17087</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17088>17088</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17089>17089</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17090>17090</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17091>17091</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17092>17092</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17093>17093</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17094>17094</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17095>17095</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17096>17096</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17097>17097</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17098>17098</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17099>17099</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17100>17100</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17101>17101</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17102>17102</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17103>17103</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17104>17104</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17105>17105</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17106>17106</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17107>17107</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17108>17108</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17109>17109</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17110>17110</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17111>17111</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17112>17112</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17113>17113</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17114>17114</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17115>17115</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17116>17116</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17117>17117</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17118>17118</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17119>17119</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17120>17120</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17121>17121</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17122>17122</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17123>17123</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17124>17124</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17125>17125</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17126>17126</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17127>17127</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17128>17128</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17129>17129</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17130>17130</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17131>17131</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17132>17132</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17133>17133</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17134>17134</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17135>17135</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17136>17136</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17137>17137</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17138>17138</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17139>17139</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17140>17140</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17141>17141</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17142>17142</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17143>17143</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17144>17144</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17145>17145</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17146>17146</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17147>17147</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17148>17148</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17149>17149</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17150>17150</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17151>17151</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17152>17152</a></td>\n' +
            '<td>LDAP_GET_DN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17153>17153</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17154>17154</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17155>17155</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17156>17156</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17157>17157</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17158>17158</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17159>17159</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17160>17160</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17161>17161</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17162>17162</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17163>17163</a></td>\n' +
            '<td>ldap_get_dn, ldap_explode_dn, ldap_explode_rdn, ldap_dn2ufn − LDAP DN handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17164>17164</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17165>17165</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17166>17166</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17167>17167</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17168>17168</a></td>\n' +
            '<td>char *ldap_get_dn( LDAP *ld, LDAPMessage *entry )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17169>17169</a></td>\n' +
            '<td>int ldap_str2dn( const char *str, LDAPDN *dn, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17170>17170</a></td>\n' +
            '<td>void ldap_dnfree( LDAPDN dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17171>17171</a></td>\n' +
            '<td>int ldap_dn2str( LDAPDN dn, char **str, unsigned flags )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17172>17172</a></td>\n' +
            '<td>char **ldap_explode_dn( const char *dn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17173>17173</a></td>\n' +
            '<td>char **ldap_explode_rdn( const char *rdn, int notypes )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17174>17174</a></td>\n' +
            '<td>char *ldap_dn2ufn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17175>17175</a></td>\n' +
            '<td>char *ldap_dn2dcedn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17176>17176</a></td>\n' +
            '<td>char *ldap_dcedn2dn( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17177>17177</a></td>\n' +
            '<td>char *ldap_dn2ad_canonical( const char * dn )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17178>17178</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17179>17179</a></td>\n' +
            '<td>These routines allow LDAP entry names (Distinguished Names, or DNs) to be obtained, parsed, converted to a user-friendly form, and tested. A DN has the form described in RFC 4414 "Lightweight Directory Access Protocol (LDAP): String Representation of Distinguished Names".</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17180>17180</a></td>\n' +
            '<td>The ldap_get_dn() routine takes an entry as returned by ldap_first_entry(3) or ldap_next_entry(3) and returns a copy of the entry’s DN. Space for the DN will be obtained dynamically and should be freed by the caller using ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17181>17181</a></td>\n' +
            '<td>ldap_str2dn() parses a string representation of a distinguished name contained in str into its components, which are stored in dn as ldap_ava structures, arranged in LDAPAVA, LDAPRDN, and LDAPDN terms. Space for dn will be obtained dynamically and should be freed by the caller using ldap_dnfree(3). The LDAPDN is defined as:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17182>17182</a></td>\n' +
            '<td>typedef struct ldap_ava {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17183>17183</a></td>\n' +
            '<td>struct berval la_attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17184>17184</a></td>\n' +
            '<td>struct berval la_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17185>17185</a></td>\n' +
            '<td>unsigned la_flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17186>17186</a></td>\n' +
            '<td>} LDAPAVA;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17187>17187</a></td>\n' +
            '<td>typedef LDAPAVA** LDAPRDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17188>17188</a></td>\n' +
            '<td>typedef LDAPRDN* LDAPDN;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17189>17189</a></td>\n' +
            '<td>The attribute types and the attribute values are not normalized. The la_flags can be either LDAP_AVA_STRING or LDAP_AVA_BINARY, the latter meaning that the value is BER/DER encoded and thus must be represented as, quoting from RFC 4514, " ... an octothorpe character (’#’ ASCII 35) followed by the hexadecimal representation of each of the bytes of the BER encoding of the X.500 AttributeValue." The flags parameter to ldap_str2dn() can be</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17190>17190</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17191>17191</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17192>17192</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 3</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17193>17193</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17194>17194</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17195>17195</a></td>\n' +
            '<td>LDAP_DN_FORMAT_LDAPV 2</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17196>17196</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17197>17197</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17198>17198</a></td>\n' +
            '<td>LDAP_DN_FORMAT_DCE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17199>17199</a></td>\n' +
            '<td>which defines what DN syntax is expected (according to RFC 4514, RFC 1779 and DCE, respectively). The format can be ORed to the flags</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17200>17200</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17201>17201</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17202>17202</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17203>17203</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17204>17204</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17205>17205</a></td>\n' +
            '<td>...</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17206>17206</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17207>17207</a></td>\n' +
            '<td>LDAP_DN_PEDANTIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17208>17208</a></td>\n' +
            '<td>The latter is a shortcut for all the previous limitations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17209>17209</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACES does not allow extra spaces in the dn; the default is to silently eliminate spaces around AVA separators (’=’), RDN component separators (’+’ for LDAPv3/LDAPv2 or ’,’ for DCE) and RDN separators (’,’ LDAPv3/LDAPv2 or ’/’ for DCE).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17210>17210</a></td>\n' +
            '<td>LDAP_DN_P_NO_SPACE_AFTER_RDN does not allow a single space after RDN separators.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17211>17211</a></td>\n' +
            '<td>ldap_dn2str() performs the inverse operation, yielding in str a string representation of dn. It allows the same values for flags as ldap_str2dn(), plus</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17212>17212</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17213>17213</a></td>\n' +
            '<td>LDAP_DN_FORMAT_UFN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17214>17214</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17215>17215</a></td>\n' +
            '<td>LDAP_DN_FORMAT_AD_CANONICAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17216>17216</a></td>\n' +
            '<td>for user-friendly naming (RFC 1781) and AD canonical.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17217>17217</a></td>\n' +
            '<td>The following routines are viewed as deprecated in favor of ldap_str2dn() and ldap_dn2str(). They are provided to support legacy applications.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17218>17218</a></td>\n' +
            '<td>The ldap_explode_dn() routine takes a DN as returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as a Relative Distinguished Name, or RDN. ldap_explode_dn() returns a NULL-terminated array, each component of which contains an RDN from the DN. The notypes parameter is used to request that only the RDN values be returned, not their types. For example, the DN "cn=Bob, c=US" would return as either { "cn=Bob", "c=US", NULL } or { "Bob", "US", NULL }, depending on whether notypes was 0 or 1, respectively. Assertion values in RDN strings may included escaped characters. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17219>17219</a></td>\n' +
            '<td>Similarly, the ldap_explode_rdn() routine takes an RDN as returned by ldap_explode_dn(dn,0) and breaks it up into its "type=value" component parts (or just "value", if the notypes parameter is set). Note the value is not unescaped. The result can be freed by calling ldap_value_free(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17220>17220</a></td>\n' +
            '<td>ldap_dn2ufn() is used to turn a DN as returned by ldap_get_dn(3) into a more user-friendly form, stripping off all type names. See "Using the Directory to Achieve User Friendly Naming" (RFC 1781) for more details on the UFN format. Due to the ambiguous nature of the format, it is generally only used for display purposes. The space for the UFN returned is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17221>17221</a></td>\n' +
            '<td>ldap_dn2dcedn() is used to turn a DN as returned by ldap_get_dn(3) into a DCE-style DN, e.g. a string with most-significant to least significant rdns separated by slashes (’/’); rdn components are separated by commas (’,’). Only printable chars (e.g. LDAPv2 printable string) are allowed, at least in this implementation. ldap_dcedn2dn() performs the opposite operation. ldap_dn2ad_canonical() turns a DN into a AD canonical name, which is basically a DCE dn with attribute types omitted. The trailing domain, if present, is turned in a DNS-like domain. The space for the returned value is obtained dynamically and the user is responsible for freeing it via a call to ldap_memfree(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17222>17222</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17223>17223</a></td>\n' +
            '<td>If an error occurs in ldap_get_dn(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes. ldap_explode_dn(), ldap_explode_rdn(), ldap_dn2ufn(), ldap_dn2dcedn(), ldap_dcedn2dn(), and ldap_dn2ad_canonical() will return NULL with errno(3) set appropriately in case of trouble.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17224>17224</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17225>17225</a></td>\n' +
            '<td>These routines dynamically allocate memory that the caller must free.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17226>17226</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17227>17227</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_first_entry(3), ldap_memfree(3), ldap_value_free(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17228>17228</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17229>17229</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17230>17230</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17231>17231</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17232>17232</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17233>17233</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17234>17234</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17235>17235</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17236>17236</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17237>17237</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17238>17238</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17239>17239</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17240>17240</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17241>17241</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17242>17242</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17243>17243</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17244>17244</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17245>17245</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17246>17246</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17247>17247</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17248>17248</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17249>17249</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17250>17250</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17251>17251</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17252>17252</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17253>17253</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17254>17254</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17255>17255</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17256>17256</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17257>17257</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17258>17258</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17259>17259</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17260>17260</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17261>17261</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17262>17262</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17263>17263</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17264>17264</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17265>17265</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17266>17266</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17267>17267</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17268>17268</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17269>17269</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17270>17270</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17271>17271</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17272>17272</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17273>17273</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17274>17274</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17275>17275</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17276>17276</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17277>17277</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17278>17278</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17279>17279</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17280>17280</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17281>17281</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17282>17282</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17283>17283</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17284>17284</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17285>17285</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17286>17286</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17287>17287</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17288>17288</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17289>17289</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17290>17290</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17291>17291</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17292>17292</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17293>17293</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17294>17294</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17295>17295</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17296>17296</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17297>17297</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17298>17298</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17299>17299</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17300>17300</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17301>17301</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17302>17302</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17303>17303</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17304>17304</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17305>17305</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17306>17306</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17307>17307</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17308>17308</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17309>17309</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17310>17310</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17311>17311</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17312>17312</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17313>17313</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17314>17314</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17315>17315</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17316>17316</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17317>17317</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17318>17318</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17319>17319</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17320>17320</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17321>17321</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17322>17322</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17323>17323</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17324>17324</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17325>17325</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17326>17326</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17327>17327</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17328>17328</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17329>17329</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17330>17330</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17331>17331</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17332>17332</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17333>17333</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17334>17334</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17335>17335</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17336>17336</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17337>17337</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17338>17338</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17339>17339</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17340>17340</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17341>17341</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17342>17342</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17343>17343</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17344>17344</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17345>17345</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17346>17346</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17347>17347</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17348>17348</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17349>17349</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17350>17350</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17351>17351</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17352>17352</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17353>17353</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17354>17354</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17355>17355</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17356>17356</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17357>17357</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17358>17358</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17359>17359</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17360>17360</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17361>17361</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17362>17362</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17363>17363</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17364>17364</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17365>17365</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17366>17366</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17367>17367</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17368>17368</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17369>17369</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17370>17370</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17371>17371</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17372>17372</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17373>17373</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17374>17374</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17375>17375</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17376>17376</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17377>17377</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17378>17378</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17379>17379</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17380>17380</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17381>17381</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17382>17382</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17383>17383</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17384>17384</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17385>17385</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17386>17386</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17387>17387</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17388>17388</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17389>17389</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17390>17390</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17391>17391</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17392>17392</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17393>17393</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17394>17394</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17395>17395</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17396>17396</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17397>17397</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17398>17398</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17399>17399</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17400>17400</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17401>17401</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17402>17402</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17403>17403</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17404>17404</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17405>17405</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17406>17406</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17407>17407</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17408>17408</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17409>17409</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17410>17410</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17411>17411</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17412>17412</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17413>17413</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17414>17414</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17415>17415</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17416>17416</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17417>17417</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17418>17418</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17419>17419</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17420>17420</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17421>17421</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17422>17422</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17423>17423</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17424>17424</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17425>17425</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17426>17426</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17427>17427</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17428>17428</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17429>17429</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17430>17430</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17431>17431</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17432>17432</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17433>17433</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17434>17434</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17435>17435</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17436>17436</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17437>17437</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17438>17438</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17439>17439</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17440>17440</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17441>17441</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17442>17442</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17443>17443</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17444>17444</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17445>17445</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17446>17446</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17447>17447</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17448>17448</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17449>17449</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17450>17450</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17451>17451</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17452>17452</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17453>17453</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17454>17454</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17455>17455</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17456>17456</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17457>17457</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17458>17458</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17459>17459</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17460>17460</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17461>17461</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17462>17462</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17463>17463</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17464>17464</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17465>17465</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17466>17466</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17467>17467</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17468>17468</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17469>17469</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17470>17470</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17471>17471</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17472>17472</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17473>17473</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17474>17474</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17475>17475</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17476>17476</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17477>17477</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17478>17478</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17479>17479</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17480>17480</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17481>17481</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17482>17482</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17483>17483</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17484>17484</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17485>17485</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17486>17486</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17487>17487</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17488>17488</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17489>17489</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17490>17490</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17491>17491</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17492>17492</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17493>17493</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17494>17494</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17495>17495</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17496>17496</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17497>17497</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17498>17498</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17499>17499</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17500>17500</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17501>17501</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17502>17502</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17503>17503</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17504>17504</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17505>17505</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17506>17506</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17507>17507</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17508>17508</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17509>17509</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17510>17510</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17511>17511</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17512>17512</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17513>17513</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17514>17514</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17515>17515</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17516>17516</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17517>17517</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17518>17518</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17519>17519</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17520>17520</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17521>17521</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17522>17522</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17523>17523</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17524>17524</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17525>17525</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17526>17526</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17527>17527</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17528>17528</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17529>17529</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17530>17530</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17531>17531</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17532>17532</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17533>17533</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17534>17534</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17535>17535</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17536>17536</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17537>17537</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17538>17538</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17539>17539</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17540>17540</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17541>17541</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17542>17542</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17543>17543</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17544>17544</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17545>17545</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17546>17546</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17547>17547</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17548>17548</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17549>17549</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17550>17550</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17551>17551</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17552>17552</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17553>17553</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17554>17554</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17555>17555</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17556>17556</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17557>17557</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17558>17558</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17559>17559</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17560>17560</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17561>17561</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17562>17562</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17563>17563</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17564>17564</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17565>17565</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17566>17566</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17567>17567</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17568>17568</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17569>17569</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17570>17570</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17571>17571</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17572>17572</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17573>17573</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17574>17574</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17575>17575</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17576>17576</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17577>17577</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17578>17578</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17579>17579</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17580>17580</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17581>17581</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17582>17582</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17583>17583</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17584>17584</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17585>17585</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17586>17586</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17587>17587</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17588>17588</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17589>17589</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17590>17590</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17591>17591</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17592>17592</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17593>17593</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17594>17594</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17595>17595</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17596>17596</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17597>17597</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17598>17598</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17599>17599</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17600>17600</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17601>17601</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17602>17602</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17603>17603</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17604>17604</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17605>17605</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17606>17606</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17607>17607</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17608>17608</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17609>17609</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17610>17610</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17611>17611</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17612>17612</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17613>17613</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17614>17614</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17615>17615</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17616>17616</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17617>17617</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17618>17618</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17619>17619</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17620>17620</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17621>17621</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17622>17622</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17623>17623</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17624>17624</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17625>17625</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17626>17626</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17627>17627</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17628>17628</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17629>17629</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17630>17630</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17631>17631</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17632>17632</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17633>17633</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17634>17634</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17635>17635</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17636>17636</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17637>17637</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17638>17638</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17639>17639</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17640>17640</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17641>17641</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17642>17642</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17643>17643</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17644>17644</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17645>17645</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17646>17646</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17647>17647</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17648>17648</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17649>17649</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17650>17650</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17651>17651</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17652>17652</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17653>17653</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17654>17654</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17655>17655</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17656>17656</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17657>17657</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17658>17658</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17659>17659</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17660>17660</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17661>17661</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17662>17662</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17663>17663</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17664>17664</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17665>17665</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17666>17666</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17667>17667</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17668>17668</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17669>17669</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17670>17670</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17671>17671</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17672>17672</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17673>17673</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17674>17674</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17675>17675</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17676>17676</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17677>17677</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17678>17678</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17679>17679</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17680>17680</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17681>17681</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17682>17682</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17683>17683</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17684>17684</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17685>17685</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17686>17686</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17687>17687</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17688>17688</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17689>17689</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17690>17690</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17691>17691</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17692>17692</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17693>17693</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17694>17694</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17695>17695</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17696>17696</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17697>17697</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17698>17698</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17699>17699</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17700>17700</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17701>17701</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17702>17702</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17703>17703</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17704>17704</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17705>17705</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17706>17706</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17707>17707</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17708>17708</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17709>17709</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17710>17710</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17711>17711</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17712>17712</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17713>17713</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17714>17714</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17715>17715</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17716>17716</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17717>17717</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17718>17718</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17719>17719</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17720>17720</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17721>17721</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17722>17722</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17723>17723</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17724>17724</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17725>17725</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17726>17726</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17727>17727</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17728>17728</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17729>17729</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17730>17730</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17731>17731</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17732>17732</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17733>17733</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17734>17734</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17735>17735</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17736>17736</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17737>17737</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17738>17738</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17739>17739</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17740>17740</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17741>17741</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17742>17742</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17743>17743</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17744>17744</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17745>17745</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17746>17746</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17747>17747</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17748>17748</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17749>17749</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17750>17750</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17751>17751</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17752>17752</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17753>17753</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17754>17754</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17755>17755</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17756>17756</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17757>17757</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17758>17758</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17759>17759</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17760>17760</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17761>17761</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17762>17762</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17763>17763</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17764>17764</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17765>17765</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17766>17766</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17767>17767</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17768>17768</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17769>17769</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17770>17770</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17771>17771</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17772>17772</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17773>17773</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17774>17774</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17775>17775</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17776>17776</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17777>17777</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17778>17778</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17779>17779</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17780>17780</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17781>17781</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17782>17782</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17783>17783</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17784>17784</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17785>17785</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17786>17786</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17787>17787</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17788>17788</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17789>17789</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17790>17790</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17791>17791</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17792>17792</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17793>17793</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17794>17794</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17795>17795</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17796>17796</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17797>17797</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17798>17798</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17799>17799</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17800>17800</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17801>17801</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17802>17802</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17803>17803</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17804>17804</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17805>17805</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17806>17806</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17807>17807</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17808>17808</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17809>17809</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17810>17810</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17811>17811</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17812>17812</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17813>17813</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17814>17814</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17815>17815</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17816>17816</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17817>17817</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17818>17818</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17819>17819</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17820>17820</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17821>17821</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17822>17822</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17823>17823</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17824>17824</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17825>17825</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17826>17826</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17827>17827</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17828>17828</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17829>17829</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17830>17830</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17831>17831</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17832>17832</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17833>17833</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17834>17834</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17835>17835</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17836>17836</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17837>17837</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17838>17838</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17839>17839</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17840>17840</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17841>17841</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17842>17842</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17843>17843</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17844>17844</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17845>17845</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17846>17846</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17847>17847</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17848>17848</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17849>17849</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17850>17850</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17851>17851</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17852>17852</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17853>17853</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17854>17854</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17855>17855</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17856>17856</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17857>17857</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17858>17858</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17859>17859</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17860>17860</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17861>17861</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17862>17862</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17863>17863</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17864>17864</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17865>17865</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17866>17866</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17867>17867</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17868>17868</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17869>17869</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17870>17870</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17871>17871</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17872>17872</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17873>17873</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17874>17874</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17875>17875</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17876>17876</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17877>17877</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17878>17878</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17879>17879</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17880>17880</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17881>17881</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17882>17882</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17883>17883</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17884>17884</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17885>17885</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17886>17886</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17887>17887</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17888>17888</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17889>17889</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17890>17890</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17891>17891</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17892>17892</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17893>17893</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17894>17894</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17895>17895</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17896>17896</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17897>17897</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17898>17898</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17899>17899</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17900>17900</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17901>17901</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17902>17902</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17903>17903</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17904>17904</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17905>17905</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17906>17906</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17907>17907</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17908>17908</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17909>17909</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17910>17910</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17911>17911</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17912>17912</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17913>17913</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17914>17914</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17915>17915</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17916>17916</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17917>17917</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17918>17918</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17919>17919</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17920>17920</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17921>17921</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17922>17922</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17923>17923</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17924>17924</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17925>17925</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17926>17926</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17927>17927</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17928>17928</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17929>17929</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17930>17930</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17931>17931</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17932>17932</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17933>17933</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17934>17934</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17935>17935</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17936>17936</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17937>17937</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17938>17938</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17939>17939</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17940>17940</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17941>17941</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17942>17942</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17943>17943</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17944>17944</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17945>17945</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17946>17946</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17947>17947</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17948>17948</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17949>17949</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17950>17950</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17951>17951</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17952>17952</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17953>17953</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17954>17954</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17955>17955</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17956>17956</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17957>17957</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17958>17958</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17959>17959</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17960>17960</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17961>17961</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17962>17962</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17963>17963</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17964>17964</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17965>17965</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17966>17966</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17967>17967</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17968>17968</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17969>17969</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17970>17970</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17971>17971</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17972>17972</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17973>17973</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17974>17974</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17975>17975</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17976>17976</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17977>17977</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17978>17978</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17979>17979</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17980>17980</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17981>17981</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17982>17982</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17983>17983</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17984>17984</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17985>17985</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17986>17986</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17987>17987</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17988>17988</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17989>17989</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17990>17990</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17991>17991</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17992>17992</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17993>17993</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17994>17994</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17995>17995</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17996>17996</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17997>17997</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17998>17998</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=17999>17999</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18000>18000</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18001>18001</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18002>18002</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18003>18003</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18004>18004</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18005>18005</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18006>18006</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18007>18007</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18008>18008</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18009>18009</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18010>18010</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18011>18011</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18012>18012</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18013>18013</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18014>18014</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18015>18015</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18016>18016</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18017>18017</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18018>18018</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18019>18019</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18020>18020</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18021>18021</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18022>18022</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18023>18023</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18024>18024</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18025>18025</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18026>18026</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18027>18027</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18028>18028</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18029>18029</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18030>18030</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18031>18031</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18032>18032</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18033>18033</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18034>18034</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18035>18035</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18036>18036</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18037>18037</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18038>18038</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18039>18039</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18040>18040</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18041>18041</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18042>18042</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18043>18043</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18044>18044</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18045>18045</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18046>18046</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18047>18047</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18048>18048</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18049>18049</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18050>18050</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18051>18051</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18052>18052</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18053>18053</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18054>18054</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18055>18055</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18056>18056</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18057>18057</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18058>18058</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18059>18059</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18060>18060</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18061>18061</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18062>18062</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18063>18063</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18064>18064</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18065>18065</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18066>18066</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18067>18067</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18068>18068</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18069>18069</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18070>18070</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18071>18071</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18072>18072</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18073>18073</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18074>18074</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18075>18075</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18076>18076</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18077>18077</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18078>18078</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18079>18079</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18080>18080</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18081>18081</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18082>18082</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18083>18083</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18084>18084</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18085>18085</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18086>18086</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18087>18087</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18088>18088</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18089>18089</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18090>18090</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18091>18091</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18092>18092</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18093>18093</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18094>18094</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18095>18095</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18096>18096</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18097>18097</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18098>18098</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18099>18099</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18100>18100</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18101>18101</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18102>18102</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18103>18103</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18104>18104</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18105>18105</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18106>18106</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18107>18107</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18108>18108</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18109>18109</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18110>18110</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18111>18111</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18112>18112</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18113>18113</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18114>18114</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18115>18115</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18116>18116</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18117>18117</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18118>18118</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18119>18119</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18120>18120</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18121>18121</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18122>18122</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18123>18123</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18124>18124</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18125>18125</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18126>18126</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18127>18127</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18128>18128</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18129>18129</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18130>18130</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18131>18131</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18132>18132</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18133>18133</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18134>18134</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18135>18135</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18136>18136</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18137>18137</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18138>18138</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18139>18139</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18140>18140</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18141>18141</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18142>18142</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18143>18143</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18144>18144</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18145>18145</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18146>18146</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18147>18147</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18148>18148</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18149>18149</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18150>18150</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18151>18151</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18152>18152</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18153>18153</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18154>18154</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18155>18155</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18156>18156</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18157>18157</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18158>18158</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18159>18159</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18160>18160</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18161>18161</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18162>18162</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18163>18163</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18164>18164</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18165>18165</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18166>18166</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18167>18167</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18168>18168</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18169>18169</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18170>18170</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18171>18171</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18172>18172</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18173>18173</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18174>18174</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18175>18175</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18176>18176</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18177>18177</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18178>18178</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18179>18179</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18180>18180</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18181>18181</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18182>18182</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18183>18183</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18184>18184</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18185>18185</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18186>18186</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18187>18187</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18188>18188</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18189>18189</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18190>18190</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18191>18191</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18192>18192</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18193>18193</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18194>18194</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18195>18195</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18196>18196</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18197>18197</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18198>18198</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18199>18199</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18200>18200</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18201>18201</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18202>18202</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18203>18203</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18204>18204</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18205>18205</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18206>18206</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18207>18207</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18208>18208</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18209>18209</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18210>18210</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18211>18211</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18212>18212</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18213>18213</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18214>18214</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18215>18215</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18216>18216</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18217>18217</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18218>18218</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18219>18219</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18220>18220</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18221>18221</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18222>18222</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18223>18223</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18224>18224</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18225>18225</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18226>18226</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18227>18227</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18228>18228</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18229>18229</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18230>18230</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18231>18231</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18232>18232</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18233>18233</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18234>18234</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18235>18235</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18236>18236</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18237>18237</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18238>18238</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18239>18239</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18240>18240</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18241>18241</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18242>18242</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18243>18243</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18244>18244</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18245>18245</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18246>18246</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18247>18247</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18248>18248</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18249>18249</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18250>18250</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18251>18251</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18252>18252</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18253>18253</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18254>18254</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18255>18255</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18256>18256</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18257>18257</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18258>18258</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18259>18259</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18260>18260</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18261>18261</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18262>18262</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18263>18263</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18264>18264</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18265>18265</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18266>18266</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18267>18267</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18268>18268</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18269>18269</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18270>18270</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18271>18271</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18272>18272</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18273>18273</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18274>18274</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18275>18275</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18276>18276</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18277>18277</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18278>18278</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18279>18279</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18280>18280</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18281>18281</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18282>18282</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18283>18283</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18284>18284</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18285>18285</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18286>18286</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18287>18287</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18288>18288</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18289>18289</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18290>18290</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18291>18291</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18292>18292</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18293>18293</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18294>18294</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18295>18295</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18296>18296</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18297>18297</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18298>18298</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18299>18299</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18300>18300</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18301>18301</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18302>18302</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18303>18303</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18304>18304</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18305>18305</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18306>18306</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18307>18307</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18308>18308</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18309>18309</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18310>18310</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18311>18311</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18312>18312</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18313>18313</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18314>18314</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18315>18315</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18316>18316</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18317>18317</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18318>18318</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18319>18319</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18320>18320</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18321>18321</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18322>18322</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18323>18323</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18324>18324</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18325>18325</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18326>18326</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18327>18327</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18328>18328</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18329>18329</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18330>18330</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18331>18331</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18332>18332</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18333>18333</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18334>18334</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18335>18335</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18336>18336</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18337>18337</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18338>18338</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18339>18339</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18340>18340</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18341>18341</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18342>18342</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18343>18343</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18344>18344</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18345>18345</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18346>18346</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18347>18347</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18348>18348</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18349>18349</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18350>18350</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18351>18351</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18352>18352</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18353>18353</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18354>18354</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18355>18355</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18356>18356</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18357>18357</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18358>18358</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18359>18359</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18360>18360</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18361>18361</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18362>18362</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18363>18363</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18364>18364</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18365>18365</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18366>18366</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18367>18367</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18368>18368</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18369>18369</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18370>18370</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18371>18371</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18372>18372</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18373>18373</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18374>18374</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18375>18375</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18376>18376</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18377>18377</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18378>18378</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18379>18379</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18380>18380</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18381>18381</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18382>18382</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18383>18383</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18384>18384</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18385>18385</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18386>18386</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18387>18387</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18388>18388</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18389>18389</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18390>18390</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18391>18391</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18392>18392</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18393>18393</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18394>18394</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18395>18395</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18396>18396</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18397>18397</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18398>18398</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18399>18399</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18400>18400</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18401>18401</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18402>18402</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18403>18403</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18404>18404</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18405>18405</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18406>18406</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18407>18407</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18408>18408</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18409>18409</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18410>18410</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18411>18411</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18412>18412</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18413>18413</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18414>18414</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18415>18415</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18416>18416</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18417>18417</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18418>18418</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18419>18419</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18420>18420</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18421>18421</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18422>18422</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18423>18423</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18424>18424</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18425>18425</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18426>18426</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18427>18427</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18428>18428</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18429>18429</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18430>18430</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18431>18431</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18432>18432</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18433>18433</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18434>18434</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18435>18435</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18436>18436</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18437>18437</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18438>18438</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18439>18439</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18440>18440</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18441>18441</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18442>18442</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18443>18443</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18444>18444</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18445>18445</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18446>18446</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18447>18447</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18448>18448</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18449>18449</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18450>18450</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18451>18451</a></td>\n' +
            '<td>LDAP_MEMORY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18452>18452</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18453>18453</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18454>18454</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18455>18455</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18456>18456</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18457>18457</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18458>18458</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18459>18459</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18460>18460</a></td>\n' +
            '<td>ldap_memfree, ldap_memvfree, ldap_memalloc, ldap_memcalloc, ldap_memrealloc, ldap_strdup − LDAP memory allocation routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18461>18461</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18462>18462</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18463>18463</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18464>18464</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18465>18465</a></td>\n' +
            '<td>void ldap_memfree(void *p);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18466>18466</a></td>\n' +
            '<td>void ldap_memvfree(void **v);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18467>18467</a></td>\n' +
            '<td>void *ldap_memalloc(ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18468>18468</a></td>\n' +
            '<td>void *ldap_memcalloc(ber_len_t n, ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18469>18469</a></td>\n' +
            '<td>void *ldap_memrealloc(void *p, ber_len_t s);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18470>18470</a></td>\n' +
            '<td>char *ldap_strdup(LDAP_CONST char *p);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18471>18471</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18472>18472</a></td>\n' +
            '<td>These routines are used to allocate/deallocate memory used/returned by the LDAP library. ldap_memalloc(), ldap_memcalloc(), ldap_memrealloc(), and ldap_memfree() are used exactly like the standard malloc(3), calloc(3), realloc(3), and free(3) routines, respectively. The ldap_memvfree() routine is used to free a dynamically allocated array of pointers to arbitrary dynamically allocated objects. The ldap_strdup() routine is used exactly like the standard strdup(3) routine.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18473>18473</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18474>18474</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18475>18475</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18476>18476</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18477>18477</a></td>\n' +
            '<td>LDAP_SYNC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18478>18478</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18479>18479</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18480>18480</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18481>18481</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18482>18482</a></td>\n' +
            '<td>GENERAL USE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18483>18483</a></td>\n' +
            '<td>REFRESH ONLY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18484>18484</a></td>\n' +
            '<td>REFRESH AND PERSIST</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18485>18485</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18486>18486</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18487>18487</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18488>18488</a></td>\n' +
            '<td>AUTHOR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18489>18489</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18490>18490</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18491>18491</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18492>18492</a></td>\n' +
            '<td>ldap_sync_init, ldap_sync_init_refresh_only, ldap_sync_init_refresh_and_persist, ldap_sync_poll − LDAP sync routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18493>18493</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18494>18494</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18495>18495</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18496>18496</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18497>18497</a></td>\n' +
            '<td>int ldap_sync_init(ldap_sync_t *ls, int mode);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18498>18498</a></td>\n' +
            '<td>int ldap_sync_init_refresh_only(ldap_sync_t *ls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18499>18499</a></td>\n' +
            '<td>int ldap_sync_init_refresh_and_persist(ldap_sync_t *ls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18500>18500</a></td>\n' +
            '<td>int ldap_sync_poll(ldap_sync_t *ls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18501>18501</a></td>\n' +
            '<td>ldap_sync_t * ldap_sync_initialize(ldap_sync_t *ls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18502>18502</a></td>\n' +
            '<td>void ldap_sync_destroy(ldap_sync_t *ls, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18503>18503</a></td>\n' +
            '<td>typedef int (*ldap_sync_search_entry_f)(ldap_sync_t *ls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18504>18504</a></td>\n' +
            '<td>LDAPMessage *msg, struct berval *entryUUID,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18505>18505</a></td>\n' +
            '<td>ldap_sync_refresh_t phase);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18506>18506</a></td>\n' +
            '<td>typedef int (*ldap_sync_search_reference_f)(ldap_sync_t *ls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18507>18507</a></td>\n' +
            '<td>LDAPMessage *msg);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18508>18508</a></td>\n' +
            '<td>typedef int (*ldap_sync_intermediate_f)(ldap_sync_t *ls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18509>18509</a></td>\n' +
            '<td>LDAPMessage *msg, BerVarray syncUUIDs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18510>18510</a></td>\n' +
            '<td>ldap_sync_refresh_t phase);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18511>18511</a></td>\n' +
            '<td>typedef int (*ldap_sync_search_result_f)(ldap_sync_t *ls,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18512>18512</a></td>\n' +
            '<td>LDAPMessage *msg, int refreshDeletes);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18513>18513</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18514>18514</a></td>\n' +
            '<td>These routines provide an interface to the LDAP Content Synchronization operation (RFC 4533). They require an ldap_sync_t structure to be set up with parameters required for various phases of the operation; this includes setting some handlers for special events. All handlers take a pointer to the ldap_sync_t structure as the first argument, and a pointer to the LDAPMessage structure as received from the server by the client library, plus, occasionally, other specific arguments.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18515>18515</a></td>\n' +
            '<td>The members of the ldap_sync_t structure are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18516>18516</a></td>\n' +
            '<td>char *ls_base</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18517>18517</a></td>\n' +
            '<td>The search base; by default, the BASE option in ldap.conf(5).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18518>18518</a></td>\n' +
            '<td>int ls_scope</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18519>18519</a></td>\n' +
            '<td>The search scope (one of LDAP_SCOPE_BASE, LDAP_SCOPE_ONELEVEL, LDAP_SCOPE_SUBORDINATE or LDAP_SCOPE_SUBTREE; see ldap.h for details).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18520>18520</a></td>\n' +
            '<td>char *ls_filter</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18521>18521</a></td>\n' +
            '<td>The filter (RFC 4515); by default, (objectClass=*).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18522>18522</a></td>\n' +
            '<td>char **ls_attrs</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18523>18523</a></td>\n' +
            '<td>The requested attributes; by default NULL, indicating all user attributes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18524>18524</a></td>\n' +
            '<td>int ls_timelimit</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18525>18525</a></td>\n' +
            '<td>The requested time limit (in seconds); by default 0, to indicate no limit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18526>18526</a></td>\n' +
            '<td>int ls_sizelimit</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18527>18527</a></td>\n' +
            '<td>The requested size limit (in entries); by default 0, to indicate no limit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18528>18528</a></td>\n' +
            '<td>int ls_timeout</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18529>18529</a></td>\n' +
            '<td>The desired timeout during polling with ldap_sync_poll(3). A value of −1 means that polling is blocking, so ldap_sync_poll(3) will not return until a message is received; a value of 0 means that polling returns immediately, no matter if any response is available or not; a positive value represents the timeout the ldap_sync_poll(3) function will wait for response before returning, unless a message is received; in that case, ldap_sync_poll(3) returns as soon as the message is available.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18530>18530</a></td>\n' +
            '<td>ldap_sync_search_entry_f ls_search_entry</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18531>18531</a></td>\n' +
            '<td>A function that is called whenever an entry is returned. The msg argument is the LDAPMessage that contains the searchResultEntry; it can be parsed using the regular client API routines, like ldap_get_dn(3), ldap_first_attribute(3), and so on. The entryUUID argument contains the entryUUID of the entry. The phase argument indicates the type of operation: one of LDAP_SYNC_CAPI_PRESENT, LDAP_SYNC_CAPI_ADD, LDAP_SYNC_CAPI_MODIFY, LDAP_SYNC_CAPI_DELETE; in case of LDAP_SYNC_CAPI_PRESENT or LDAP_SYNC_CAPI_DELETE, only the DN is contained in the LDAPMessage; in case of LDAP_SYNC_CAPI_MODIFY, the whole entry is contained in the LDAPMessage, and the application is responsible of determining the differences between the new view of the entry provided by the caller and the data already known.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18532>18532</a></td>\n' +
            '<td>ldap_sync_search_reference_f ls_search_reference</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18533>18533</a></td>\n' +
            '<td>A function that is called whenever a search reference is returned. The msg argument is the LDAPMessage that contains the searchResultReference; it can be parsed using the regular client API routines, like ldap_parse_reference(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18534>18534</a></td>\n' +
            '<td>ldap_sync_intermediate_f ls_intermediate</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18535>18535</a></td>\n' +
            '<td>A function that is called whenever something relevant occurs during the refresh phase of the search, which is marked by an intermediateResponse message type. The msg argument is the LDAPMessage that contains the intermediate response; it can be parsed using the regular client API routines, like ldap_parse_intermediate(3). The syncUUIDs argument contains an array of UUIDs of the entries that depends on the value of the phase argument. In case of LDAP_SYNC_CAPI_PRESENTS, the "present" phase is being entered; this means that the following sequence of results will consist in entries in "present" sync state. In case of LDAP_SYNC_CAPI_DELETES, the "deletes" phase is being entered; this means that the following sequence of results will consist in entries in "delete" sync state. In case of LDAP_SYNC_CAPI_PRESENTS_IDSET, the message contains a set of UUIDs of entries that are present; it replaces a "presents" phase. In case of LDAP_SYNC_CAPI_DELETES_IDSET, the message contains a set of UUIDs of entries that have been deleted; it replaces a "deletes" phase. In case of LDAP_SYNC_CAPI_DONE, a "presents" phase with "refreshDone" set to "TRUE" has been returned to indicate that the refresh phase of refreshAndPersist is over, and the client should start polling. Except for the LDAP_SYNC_CAPI_PRESENTS_IDSET and LDAP_SYNC_CAPI_DELETES_IDSET cases, syncUUIDs is NULL.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18536>18536</a></td>\n' +
            '<td>ldap_sync_search_result_f ls_search_result</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18537>18537</a></td>\n' +
            '<td>A function that is called whenever a searchResultDone is returned. In refreshAndPersist this can only occur when the server decides that the search must be interrupted. The msg argument is the LDAPMessage that contains the response; it can be parsed using the regular client API routines, like ldap_parse_result(3). The refreshDeletes argument is not relevant in this case; it should always be −1.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18538>18538</a></td>\n' +
            '<td>void *ls_private</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18539>18539</a></td>\n' +
            '<td>A pointer to private data. The client may register here a pointer to data the handlers above may need.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18540>18540</a></td>\n' +
            '<td>LDAP *ls_ld</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18541>18541</a></td>\n' +
            '<td>A pointer to a LDAP structure that is used to connect to the server. It is the responsibility of the client to initialize the structure and to provide appropriate authentication and security in place.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18542>18542</a></td>\n' +
            '<td>GENERAL USE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18543>18543</a></td>\n' +
            '<td>A ldap_sync_t structure is initialized by calling ldap_sync_initialize(3). This simply clears out the contents of an already existing ldap_sync_t structure, and sets appropriate values for some members. After that, the caller is responsible for setting up the connection (member ls_ld), eventually setting up transport security (TLS), for binding and any other initialization. The caller must also fill all the documented search-related fields of the ldap_sync_t structure.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18544>18544</a></td>\n' +
            '<td>At the end of a session, the structure can be cleaned up by calling ldap_sync_destroy(3), which takes care of freeing all data assuming it was allocated by ldap_mem*(3) routines. Otherwise, the caller should take care of destroying and zeroing out the documented search-related fields, and call ldap_sync_destroy(3) to free undocumented members set by the API.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18545>18545</a></td>\n' +
            '<td>REFRESH ONLY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18546>18546</a></td>\n' +
            '<td>The refreshOnly functionality is obtained by periodically calling ldap_sync_init(3) with mode set to LDAP_SYNC_REFRESH_ONLY, or, which is equivalent, by directly calling ldap_sync_init_refresh_only(3). The state of the search, and the consistency of the search parameters, is preserved across calls by passing the ldap_sync_t structure as left by the previous call.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18547>18547</a></td>\n' +
            '<td>REFRESH AND PERSIST</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18548>18548</a></td>\n' +
            '<td>The refreshAndPersist functionality is obtained by calling ldap_sync_init(3) with mode set to LDAP_SYNC_REFRESH_AND_PERSIST, or, which is equivalent, by directly calling ldap_sync_init_refresh_and_persist(3) and, after a successful return, by repeatedly polling with ldap_sync_poll(3) according to the desired pattern.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18549>18549</a></td>\n' +
            '<td>A client may insert a call to ldap_sync_poll(3) into an external loop to check if any modification was returned; in this case, it might be appropriate to set ls_timeout to 0, or to set it to a finite, small value. Otherwise, if the client’s main purpose consists in waiting for responses, a timeout of −1 is most suitable, so that the function only returns after some data has been received and handled.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18550>18550</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18551>18551</a></td>\n' +
            '<td>All routines return any LDAP error resulting from a lower-level error in the API calls they are based on, or LDAP_SUCCESS in case of success. ldap_sync_poll(3) may return LDAP_SYNC_REFRESH_REQUIRED if a full refresh is requested by the server. In this case, it is appropriate to call ldap_sync_init(3) again, passing the same ldap_sync_t structure as resulted from any previous call.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18552>18552</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18553>18553</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18554>18554</a></td>\n' +
            '<td>ldap(3), ldap_search_ext(3), ldap_result(3); RFC 4533 (http://www.rfc-editor.org),</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18555>18555</a></td>\n' +
            '<td>AUTHOR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18556>18556</a></td>\n' +
            '<td>Designed and implemented by Pierangelo Masarati, based on RFC 4533 and loosely inspired by syncrepl code in slapd(8).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18557>18557</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18558>18558</a></td>\n' +
            '<td>Initially developed by SysNet s.n.c. OpenLDAP is developed and maintained by The OpenLDAP Project (http://www.openldap.org/). OpenLDAP is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18559>18559</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18560>18560</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18561>18561</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18562>18562</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18563>18563</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18564>18564</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18565>18565</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18566>18566</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18567>18567</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18568>18568</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18569>18569</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18570>18570</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18571>18571</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18572>18572</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18573>18573</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18574>18574</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18575>18575</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18576>18576</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18577>18577</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18578>18578</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18579>18579</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18580>18580</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18581>18581</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18582>18582</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18583>18583</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18584>18584</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18585>18585</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18586>18586</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18587>18587</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18588>18588</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18589>18589</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18590>18590</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18591>18591</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18592>18592</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18593>18593</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18594>18594</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18595>18595</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18596>18596</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18597>18597</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18598>18598</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18599>18599</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18600>18600</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18601>18601</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18602>18602</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18603>18603</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18604>18604</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18605>18605</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18606>18606</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18607>18607</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18608>18608</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18609>18609</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18610>18610</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18611>18611</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18612>18612</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18613>18613</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18614>18614</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18615>18615</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18616>18616</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18617>18617</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18618>18618</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18619>18619</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18620>18620</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18621>18621</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18622>18622</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18623>18623</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18624>18624</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18625>18625</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18626>18626</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18627>18627</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18628>18628</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18629>18629</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18630>18630</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18631>18631</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18632>18632</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18633>18633</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18634>18634</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18635>18635</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18636>18636</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18637>18637</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18638>18638</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18639>18639</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18640>18640</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18641>18641</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18642>18642</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18643>18643</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18644>18644</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18645>18645</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18646>18646</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18647>18647</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18648>18648</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18649>18649</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18650>18650</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18651>18651</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18652>18652</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18653>18653</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18654>18654</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18655>18655</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18656>18656</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18657>18657</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18658>18658</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18659>18659</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18660>18660</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18661>18661</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18662>18662</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18663>18663</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18664>18664</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18665>18665</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18666>18666</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18667>18667</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18668>18668</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18669>18669</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18670>18670</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18671>18671</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18672>18672</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18673>18673</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18674>18674</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18675>18675</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18676>18676</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18677>18677</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18678>18678</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18679>18679</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18680>18680</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18681>18681</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18682>18682</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18683>18683</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18684>18684</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18685>18685</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18686>18686</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18687>18687</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18688>18688</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18689>18689</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18690>18690</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18691>18691</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18692>18692</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18693>18693</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18694>18694</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18695>18695</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18696>18696</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18697>18697</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18698>18698</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18699>18699</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18700>18700</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18701>18701</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18702>18702</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18703>18703</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18704>18704</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18705>18705</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18706>18706</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18707>18707</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18708>18708</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18709>18709</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18710>18710</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18711>18711</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18712>18712</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18713>18713</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18714>18714</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18715>18715</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18716>18716</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18717>18717</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18718>18718</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18719>18719</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18720>18720</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18721>18721</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18722>18722</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18723>18723</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18724>18724</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18725>18725</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18726>18726</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18727>18727</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18728>18728</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18729>18729</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18730>18730</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18731>18731</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18732>18732</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18733>18733</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18734>18734</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18735>18735</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18736>18736</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18737>18737</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18738>18738</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18739>18739</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18740>18740</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18741>18741</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18742>18742</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18743>18743</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18744>18744</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18745>18745</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18746>18746</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18747>18747</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18748>18748</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18749>18749</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18750>18750</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18751>18751</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18752>18752</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18753>18753</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18754>18754</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18755>18755</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18756>18756</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18757>18757</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18758>18758</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18759>18759</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18760>18760</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18761>18761</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18762>18762</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18763>18763</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18764>18764</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18765>18765</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18766>18766</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18767>18767</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18768>18768</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18769>18769</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18770>18770</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18771>18771</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18772>18772</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18773>18773</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18774>18774</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18775>18775</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18776>18776</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18777>18777</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18778>18778</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18779>18779</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18780>18780</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18781>18781</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18782>18782</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18783>18783</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18784>18784</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18785>18785</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18786>18786</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18787>18787</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18788>18788</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18789>18789</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18790>18790</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18791>18791</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18792>18792</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18793>18793</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18794>18794</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18795>18795</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18796>18796</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18797>18797</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18798>18798</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18799>18799</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18800>18800</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18801>18801</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18802>18802</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18803>18803</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18804>18804</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18805>18805</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18806>18806</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18807>18807</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18808>18808</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18809>18809</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18810>18810</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18811>18811</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18812>18812</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18813>18813</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18814>18814</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18815>18815</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18816>18816</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18817>18817</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18818>18818</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18819>18819</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18820>18820</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18821>18821</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18822>18822</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18823>18823</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18824>18824</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18825>18825</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18826>18826</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18827>18827</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18828>18828</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18829>18829</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18830>18830</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18831>18831</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18832>18832</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18833>18833</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18834>18834</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18835>18835</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18836>18836</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18837>18837</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18838>18838</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18839>18839</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18840>18840</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18841>18841</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18842>18842</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18843>18843</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18844>18844</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18845>18845</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18846>18846</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18847>18847</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18848>18848</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18849>18849</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18850>18850</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18851>18851</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18852>18852</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18853>18853</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18854>18854</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18855>18855</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18856>18856</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18857>18857</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18858>18858</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18859>18859</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18860>18860</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18861>18861</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18862>18862</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18863>18863</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18864>18864</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18865>18865</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18866>18866</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18867>18867</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18868>18868</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18869>18869</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18870>18870</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18871>18871</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18872>18872</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18873>18873</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18874>18874</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18875>18875</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18876>18876</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18877>18877</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18878>18878</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18879>18879</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18880>18880</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18881>18881</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18882>18882</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18883>18883</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18884>18884</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18885>18885</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18886>18886</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18887>18887</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18888>18888</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18889>18889</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18890>18890</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18891>18891</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18892>18892</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18893>18893</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18894>18894</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18895>18895</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18896>18896</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18897>18897</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18898>18898</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18899>18899</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18900>18900</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18901>18901</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18902>18902</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18903>18903</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18904>18904</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18905>18905</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18906>18906</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18907>18907</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18908>18908</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18909>18909</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18910>18910</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18911>18911</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18912>18912</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18913>18913</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18914>18914</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18915>18915</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18916>18916</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18917>18917</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18918>18918</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18919>18919</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18920>18920</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18921>18921</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18922>18922</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18923>18923</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18924>18924</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18925>18925</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18926>18926</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18927>18927</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18928>18928</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18929>18929</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18930>18930</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18931>18931</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18932>18932</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18933>18933</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18934>18934</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18935>18935</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18936>18936</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18937>18937</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18938>18938</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18939>18939</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18940>18940</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18941>18941</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18942>18942</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18943>18943</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18944>18944</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18945>18945</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18946>18946</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18947>18947</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18948>18948</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18949>18949</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18950>18950</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18951>18951</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18952>18952</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18953>18953</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18954>18954</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18955>18955</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18956>18956</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18957>18957</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18958>18958</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18959>18959</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18960>18960</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18961>18961</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18962>18962</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18963>18963</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18964>18964</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18965>18965</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18966>18966</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18967>18967</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18968>18968</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18969>18969</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18970>18970</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18971>18971</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18972>18972</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18973>18973</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18974>18974</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18975>18975</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18976>18976</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18977>18977</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18978>18978</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18979>18979</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18980>18980</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18981>18981</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18982>18982</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18983>18983</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18984>18984</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18985>18985</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18986>18986</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18987>18987</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18988>18988</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18989>18989</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18990>18990</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18991>18991</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18992>18992</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18993>18993</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18994>18994</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18995>18995</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18996>18996</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18997>18997</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18998>18998</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=18999>18999</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19000>19000</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19001>19001</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19002>19002</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19003>19003</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19004>19004</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19005>19005</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19006>19006</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19007>19007</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19008>19008</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19009>19009</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19010>19010</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19011>19011</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19012>19012</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19013>19013</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19014>19014</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19015>19015</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19016>19016</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19017>19017</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19018>19018</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19019>19019</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19020>19020</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19021>19021</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19022>19022</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19023>19023</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19024>19024</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19025>19025</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19026>19026</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19027>19027</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19028>19028</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19029>19029</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19030>19030</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19031>19031</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19032>19032</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19033>19033</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19034>19034</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19035>19035</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19036>19036</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19037>19037</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19038>19038</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19039>19039</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19040>19040</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19041>19041</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19042>19042</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19043>19043</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19044>19044</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19045>19045</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19046>19046</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19047>19047</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19048>19048</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19049>19049</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19050>19050</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19051>19051</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19052>19052</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19053>19053</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19054>19054</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19055>19055</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19056>19056</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19057>19057</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19058>19058</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19059>19059</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19060>19060</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19061>19061</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19062>19062</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19063>19063</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19064>19064</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19065>19065</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19066>19066</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19067>19067</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19068>19068</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19069>19069</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19070>19070</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19071>19071</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19072>19072</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19073>19073</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19074>19074</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19075>19075</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19076>19076</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19077>19077</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19078>19078</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19079>19079</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19080>19080</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19081>19081</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19082>19082</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19083>19083</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19084>19084</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19085>19085</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19086>19086</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19087>19087</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19088>19088</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19089>19089</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19090>19090</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19091>19091</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19092>19092</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19093>19093</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19094>19094</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19095>19095</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19096>19096</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19097>19097</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19098>19098</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19099>19099</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19100>19100</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19101>19101</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19102>19102</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19103>19103</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19104>19104</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19105>19105</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19106>19106</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19107>19107</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19108>19108</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19109>19109</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19110>19110</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19111>19111</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19112>19112</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19113>19113</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19114>19114</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19115>19115</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19116>19116</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19117>19117</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19118>19118</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19119>19119</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19120>19120</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19121>19121</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19122>19122</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19123>19123</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19124>19124</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19125>19125</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19126>19126</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19127>19127</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19128>19128</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19129>19129</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19130>19130</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19131>19131</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19132>19132</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19133>19133</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19134>19134</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19135>19135</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19136>19136</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19137>19137</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19138>19138</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19139>19139</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19140>19140</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19141>19141</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19142>19142</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19143>19143</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19144>19144</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19145>19145</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19146>19146</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19147>19147</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19148>19148</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19149>19149</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19150>19150</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19151>19151</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19152>19152</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19153>19153</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19154>19154</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19155>19155</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19156>19156</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19157>19157</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19158>19158</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19159>19159</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19160>19160</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19161>19161</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19162>19162</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19163>19163</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19164>19164</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19165>19165</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19166>19166</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19167>19167</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19168>19168</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19169>19169</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19170>19170</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19171>19171</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19172>19172</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19173>19173</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19174>19174</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19175>19175</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19176>19176</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19177>19177</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19178>19178</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19179>19179</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19180>19180</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19181>19181</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19182>19182</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19183>19183</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19184>19184</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19185>19185</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19186>19186</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19187>19187</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19188>19188</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19189>19189</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19190>19190</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19191>19191</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19192>19192</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19193>19193</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19194>19194</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19195>19195</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19196>19196</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19197>19197</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19198>19198</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19199>19199</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19200>19200</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19201>19201</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19202>19202</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19203>19203</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19204>19204</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19205>19205</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19206>19206</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19207>19207</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19208>19208</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19209>19209</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19210>19210</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19211>19211</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19212>19212</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19213>19213</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19214>19214</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19215>19215</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19216>19216</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19217>19217</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19218>19218</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19219>19219</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19220>19220</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19221>19221</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19222>19222</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19223>19223</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19224>19224</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19225>19225</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19226>19226</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19227>19227</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19228>19228</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19229>19229</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19230>19230</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19231>19231</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19232>19232</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19233>19233</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19234>19234</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19235>19235</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19236>19236</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19237>19237</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19238>19238</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19239>19239</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19240>19240</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19241>19241</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19242>19242</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19243>19243</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19244>19244</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19245>19245</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19246>19246</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19247>19247</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19248>19248</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19249>19249</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19250>19250</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19251>19251</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19252>19252</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19253>19253</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19254>19254</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19255>19255</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19256>19256</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19257>19257</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19258>19258</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19259>19259</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19260>19260</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19261>19261</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19262>19262</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19263>19263</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19264>19264</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19265>19265</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19266>19266</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19267>19267</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19268>19268</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19269>19269</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19270>19270</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19271>19271</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19272>19272</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19273>19273</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19274>19274</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19275>19275</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19276>19276</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19277>19277</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19278>19278</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19279>19279</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19280>19280</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19281>19281</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19282>19282</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19283>19283</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19284>19284</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19285>19285</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19286>19286</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19287>19287</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19288>19288</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19289>19289</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19290>19290</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19291>19291</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19292>19292</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19293>19293</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19294>19294</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19295>19295</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19296>19296</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19297>19297</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19298>19298</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19299>19299</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19300>19300</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19301>19301</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19302>19302</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19303>19303</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19304>19304</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19305>19305</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19306>19306</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19307>19307</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19308>19308</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19309>19309</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19310>19310</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19311>19311</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19312>19312</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19313>19313</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19314>19314</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19315>19315</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19316>19316</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19317>19317</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19318>19318</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19319>19319</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19320>19320</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19321>19321</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19322>19322</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19323>19323</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19324>19324</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19325>19325</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19326>19326</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19327>19327</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19328>19328</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19329>19329</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19330>19330</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19331>19331</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19332>19332</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19333>19333</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19334>19334</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19335>19335</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19336>19336</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19337>19337</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19338>19338</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19339>19339</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19340>19340</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19341>19341</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19342>19342</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19343>19343</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19344>19344</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19345>19345</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19346>19346</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19347>19347</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19348>19348</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19349>19349</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19350>19350</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19351>19351</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19352>19352</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19353>19353</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19354>19354</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19355>19355</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19356>19356</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19357>19357</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19358>19358</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19359>19359</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19360>19360</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19361>19361</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19362>19362</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19363>19363</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19364>19364</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19365>19365</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19366>19366</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19367>19367</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19368>19368</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19369>19369</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19370>19370</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19371>19371</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19372>19372</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19373>19373</a></td>\n' +
            '<td>LDAP_SCHEMA</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19374>19374</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19375>19375</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19376>19376</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19377>19377</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19378>19378</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19379>19379</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19380>19380</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19381>19381</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19382>19382</a></td>\n' +
            '<td>ldap_str2syntax, ldap_syntax2str, ldap_syntax2name, ldap_syntax_free, ldap_str2matchingrule, ldap_matchingrule2str, ldap_matchingrule2name, ldap_matchingrule_free, ldap_str2attributetype, ldap_attributetype2str, ldap_attributetype2name, ldap_attributetype_free, ldap_str2objectclass, ldap_objectclass2str, ldap_objectclass2name, ldap_objectclass_free, ldap_scherr2str − Schema definition handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19383>19383</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19384>19384</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19385>19385</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19386>19386</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19387>19387</a></td>\n' +
            '<td>#include &lt;ldap_schema.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19388>19388</a></td>\n' +
            '<td>LDAPSyntax * ldap_str2syntax(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19389>19389</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19390>19390</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19391>19391</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19392>19392</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19393>19393</a></td>\n' +
            '<td>char * ldap_syntax2str(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19394>19394</a></td>\n' +
            '<td>const LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19395>19395</a></td>\n' +
            '<td>const char * ldap_syntax2name(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19396>19396</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19397>19397</a></td>\n' +
            '<td>ldap_syntax_free(syn)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19398>19398</a></td>\n' +
            '<td>LDAPSyntax * syn;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19399>19399</a></td>\n' +
            '<td>LDAPMatchingRule * ldap_str2matchingrule(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19400>19400</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19401>19401</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19402>19402</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19403>19403</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19404>19404</a></td>\n' +
            '<td>char * ldap_matchingrule2str(mr);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19405>19405</a></td>\n' +
            '<td>const LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19406>19406</a></td>\n' +
            '<td>const char * ldap_matchingrule2name(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19407>19407</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19408>19408</a></td>\n' +
            '<td>ldap_matchingrule_free(mr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19409>19409</a></td>\n' +
            '<td>LDAPMatchingRule * mr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19410>19410</a></td>\n' +
            '<td>LDAPAttributeType * ldap_str2attributetype(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19411>19411</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19412>19412</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19413>19413</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19414>19414</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19415>19415</a></td>\n' +
            '<td>char * ldap_attributetype2str(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19416>19416</a></td>\n' +
            '<td>const LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19417>19417</a></td>\n' +
            '<td>const char * ldap_attributetype2name(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19418>19418</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19419>19419</a></td>\n' +
            '<td>ldap_attributetype_free(at)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19420>19420</a></td>\n' +
            '<td>LDAPAttributeType * at;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19421>19421</a></td>\n' +
            '<td>LDAPObjectClass * ldap_str2objectclass(s, code, errp, flags)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19422>19422</a></td>\n' +
            '<td>const char * s;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19423>19423</a></td>\n' +
            '<td>int * code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19424>19424</a></td>\n' +
            '<td>const char ** errp;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19425>19425</a></td>\n' +
            '<td>const int flags;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19426>19426</a></td>\n' +
            '<td>char * ldap_objectclass2str(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19427>19427</a></td>\n' +
            '<td>const LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19428>19428</a></td>\n' +
            '<td>const char * ldap_objectclass2name(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19429>19429</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19430>19430</a></td>\n' +
            '<td>ldap_objectclass_free(oc)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19431>19431</a></td>\n' +
            '<td>LDAPObjectClass * oc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19432>19432</a></td>\n' +
            '<td>char * ldap_scherr2str(code)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19433>19433</a></td>\n' +
            '<td>int code;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19434>19434</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19435>19435</a></td>\n' +
            '<td>These routines are used to parse schema definitions in the syntax defined in RFC 4512 into structs and handle these structs. These routines handle four kinds of definitions: syntaxes, matching rules, attribute types and object classes. For each definition kind, four routines are provided.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19436>19436</a></td>\n' +
            '<td>ldap_str2xxx() takes a definition in RFC 4512 format in argument s as a NUL-terminated string and returns, if possible, a pointer to a newly allocated struct of the appropriate kind. The caller is responsible for freeing the struct by calling ldap_xxx_free() when not needed any longer. The routine returns NULL if some problem happened. In this case, the integer pointed at by argument code will receive an error code (see below the description of ldap_scherr2str() for an explanation of the values) and a pointer to a NUL-terminated string will be placed where requested by argument errp , indicating where in argument s the error happened, so it must not be freed by the caller. Argument flags is a bit mask of parsing options controlling the relaxation of the syntax recognized. The following values are defined:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19437>19437</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NONE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19438>19438</a></td>\n' +
            '<td>strict parsing according to RFC 4512.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19439>19439</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_NO_OID</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19440>19440</a></td>\n' +
            '<td>permit definitions that do not contain an initial OID.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19441>19441</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_QUOTED</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19442>19442</a></td>\n' +
            '<td>permit quotes around some items that should not have them.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19443>19443</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19444>19444</a></td>\n' +
            '<td>permit a descr instead of a numeric OID in places where the syntax expect the latter.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19445>19445</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_DESCR_PREFIX</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19446>19446</a></td>\n' +
            '<td>permit that the initial numeric OID contains a prefix in descr format.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19447>19447</a></td>\n' +
            '<td>LDAP_SCHEMA_ALLOW_ALL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19448>19448</a></td>\n' +
            '<td>be very liberal, include all options.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19449>19449</a></td>\n' +
            '<td>The structures returned are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19450>19450</a></td>\n' +
            '<td>typedef struct ldap_schema_extension_item {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19451>19451</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19452>19452</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19453>19453</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19454>19454</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19455>19455</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19456>19456</a></td>\n' +
            '<td>char *lsei_name;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19457>19457</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19458>19458</a></td>\n' +
            '<td>/* Extension name */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19459>19459</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19460>19460</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19461>19461</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19462>19462</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19463>19463</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19464>19464</a></td>\n' +
            '<td>char **lsei_values;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19465>19465</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19466>19466</a></td>\n' +
            '<td>/* Extension values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19467>19467</a></td>\n' +
            '<td>} LDAPSchemaExtensionItem;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19468>19468</a></td>\n' +
            '<td>typedef struct ldap_syntax {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19469>19469</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19470>19470</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19471>19471</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19472>19472</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19473>19473</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19474>19474</a></td>\n' +
            '<td>char *syn_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19475>19475</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19476>19476</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19477>19477</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19478>19478</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19479>19479</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19480>19480</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19481>19481</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19482>19482</a></td>\n' +
            '<td>char **syn_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19483>19483</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19484>19484</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19485>19485</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19486>19486</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19487>19487</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19488>19488</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19489>19489</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19490>19490</a></td>\n' +
            '<td>char *syn_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19491>19491</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19492>19492</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19493>19493</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19494>19494</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **syn_extension s; /* Extension */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19495>19495</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19496>19496</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19497>19497</a></td>\n' +
            '<td>} LDAPSyntax;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19498>19498</a></td>\n' +
            '<td>typedef struct ldap_matchingrule {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19499>19499</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19500>19500</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19501>19501</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19502>19502</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19503>19503</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19504>19504</a></td>\n' +
            '<td>char *mr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19505>19505</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19506>19506</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19507>19507</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19508>19508</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19509>19509</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19510>19510</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19511>19511</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19512>19512</a></td>\n' +
            '<td>char **mr_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19513>19513</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19514>19514</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19515>19515</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19516>19516</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19517>19517</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19518>19518</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19519>19519</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19520>19520</a></td>\n' +
            '<td>char *mr_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19521>19521</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19522>19522</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19523>19523</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19524>19524</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19525>19525</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19526>19526</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19527>19527</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19528>19528</a></td>\n' +
            '<td>int mr_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19529>19529</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19530>19530</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19531>19531</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19532>19532</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19533>19533</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19534>19534</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19535>19535</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19536>19536</a></td>\n' +
            '<td>char *mr_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19537>19537</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19538>19538</a></td>\n' +
            '<td>/* Syntax of asserted values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19539>19539</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19540>19540</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **mr_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19541>19541</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19542>19542</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19543>19543</a></td>\n' +
            '<td>} LDAPMatchingRule;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19544>19544</a></td>\n' +
            '<td>typedef struct ldap_attributetype {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19545>19545</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19546>19546</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19547>19547</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19548>19548</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19549>19549</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19550>19550</a></td>\n' +
            '<td>char *at_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19551>19551</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19552>19552</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19553>19553</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19554>19554</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19555>19555</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19556>19556</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19557>19557</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19558>19558</a></td>\n' +
            '<td>char **at_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19559>19559</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19560>19560</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19561>19561</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19562>19562</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19563>19563</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19564>19564</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19565>19565</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19566>19566</a></td>\n' +
            '<td>char *at_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19567>19567</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19568>19568</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19569>19569</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19570>19570</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19571>19571</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19572>19572</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19573>19573</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19574>19574</a></td>\n' +
            '<td>int at_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19575>19575</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19576>19576</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19577>19577</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19578>19578</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19579>19579</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19580>19580</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19581>19581</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19582>19582</a></td>\n' +
            '<td>char *at_sup_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19583>19583</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19584>19584</a></td>\n' +
            '<td>/* OID of superior type */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19585>19585</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19586>19586</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19587>19587</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19588>19588</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19589>19589</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19590>19590</a></td>\n' +
            '<td>char *at_equality_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19591>19591</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19592>19592</a></td>\n' +
            '<td>/* OID of equality matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19593>19593</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19594>19594</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19595>19595</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19596>19596</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19597>19597</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19598>19598</a></td>\n' +
            '<td>char *at_ordering_oi d;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19599>19599</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19600>19600</a></td>\n' +
            '<td>/* OID of ordering matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19601>19601</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19602>19602</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19603>19603</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19604>19604</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19605>19605</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19606>19606</a></td>\n' +
            '<td>char *at_substr_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19607>19607</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19608>19608</a></td>\n' +
            '<td>/* OID of substrings matching rule */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19609>19609</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19610>19610</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19611>19611</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19612>19612</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19613>19613</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19614>19614</a></td>\n' +
            '<td>char *at_syntax_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19615>19615</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19616>19616</a></td>\n' +
            '<td>/* OID of syntax of values */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19617>19617</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19618>19618</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19619>19619</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19620>19620</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19621>19621</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19622>19622</a></td>\n' +
            '<td>int at_syntax_len;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19623>19623</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19624>19624</a></td>\n' +
            '<td>/* Suggested minimum maximum length */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19625>19625</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19626>19626</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19627>19627</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19628>19628</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19629>19629</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19630>19630</a></td>\n' +
            '<td>int at_single_value;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19631>19631</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19632>19632</a></td>\n' +
            '<td>/* Is single-valued? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19633>19633</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19634>19634</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19635>19635</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19636>19636</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19637>19637</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19638>19638</a></td>\n' +
            '<td>int at_collective;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19639>19639</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19640>19640</a></td>\n' +
            '<td>/* Is collective? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19641>19641</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19642>19642</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19643>19643</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19644>19644</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19645>19645</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19646>19646</a></td>\n' +
            '<td>int at_no_user_mod;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19647>19647</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19648>19648</a></td>\n' +
            '<td>/* Are changes forbidden through LDAP? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19649>19649</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19650>19650</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19651>19651</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19652>19652</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19653>19653</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19654>19654</a></td>\n' +
            '<td>int at_usage;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19655>19655</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19656>19656</a></td>\n' +
            '<td>/* Usage, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19657>19657</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19658>19658</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **at_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19659>19659</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19660>19660</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19661>19661</a></td>\n' +
            '<td>} LDAPAttributeType;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19662>19662</a></td>\n' +
            '<td>typedef struct ldap_objectclass {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19663>19663</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19664>19664</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19665>19665</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19666>19666</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19667>19667</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19668>19668</a></td>\n' +
            '<td>char *oc_oid;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19669>19669</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19670>19670</a></td>\n' +
            '<td>/* OID */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19671>19671</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19672>19672</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19673>19673</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19674>19674</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19675>19675</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19676>19676</a></td>\n' +
            '<td>char **oc_names;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19677>19677</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19678>19678</a></td>\n' +
            '<td>/* Names */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19679>19679</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19680>19680</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19681>19681</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19682>19682</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19683>19683</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19684>19684</a></td>\n' +
            '<td>char *oc_desc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19685>19685</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19686>19686</a></td>\n' +
            '<td>/* Description */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19687>19687</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19688>19688</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19689>19689</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19690>19690</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19691>19691</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19692>19692</a></td>\n' +
            '<td>int oc_obsolete;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19693>19693</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19694>19694</a></td>\n' +
            '<td>/* Is obsolete? */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19695>19695</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19696>19696</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19697>19697</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19698>19698</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19699>19699</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19700>19700</a></td>\n' +
            '<td>char **oc_sup_oids;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19701>19701</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19702>19702</a></td>\n' +
            '<td>/* OIDs of superior classes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19703>19703</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19704>19704</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19705>19705</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19706>19706</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19707>19707</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19708>19708</a></td>\n' +
            '<td>int oc_kind;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19709>19709</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19710>19710</a></td>\n' +
            '<td>/* Kind, see below */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19711>19711</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19712>19712</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19713>19713</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19714>19714</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19715>19715</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19716>19716</a></td>\n' +
            '<td>char **oc_at_oids_ must;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19717>19717</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19718>19718</a></td>\n' +
            '<td>/* OIDs of required attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19719>19719</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19720>19720</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19721>19721</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19722>19722</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19723>19723</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19724>19724</a></td>\n' +
            '<td>char **oc_at_oids_ may;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19725>19725</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19726>19726</a></td>\n' +
            '<td>/* OIDs of optional attribute types */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19727>19727</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19728>19728</a></td>\n' +
            '<td>LDAPSchemaExtensio nItem **oc_extensions ; /* Extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19729>19729</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19730>19730</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19731>19731</a></td>\n' +
            '<td>} LDAPObjectClass;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19732>19732</a></td>\n' +
            '<td>Some integer fields (those described with a question mark) have a truth value, for these fields the possible values are:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19733>19733</a></td>\n' +
            '<td>LDAP_SCHEMA_NO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19734>19734</a></td>\n' +
            '<td>The answer to the question is no.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19735>19735</a></td>\n' +
            '<td>LDAP_SCHEMA_YES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19736>19736</a></td>\n' +
            '<td>The answer to the question is yes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19737>19737</a></td>\n' +
            '<td>For attribute types, the following usages are possible:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19738>19738</a></td>\n' +
            '<td>LDAP_SCHEMA_USER_APPLICATIONS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19739>19739</a></td>\n' +
            '<td>the attribute type is non-operational.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19740>19740</a></td>\n' +
            '<td>LDAP_SCHEMA_DIRECTORY_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19741>19741</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory itself, i.e. it has the same value on all servers that master the entry containing this attribute type.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19742>19742</a></td>\n' +
            '<td>LDAP_SCHEMA_DISTRIBUTED_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19743>19743</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to replication, shadowing or other distributed directory aspect. TBC.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19744>19744</a></td>\n' +
            '<td>LDAP_SCHEMA_DSA_OPERATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19745>19745</a></td>\n' +
            '<td>the attribute type is operational and is pertinent to the directory server itself, i.e. it may have different values for the same entry when retrieved from different servers that master the entry.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19746>19746</a></td>\n' +
            '<td>Object classes can be of three kinds:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19747>19747</a></td>\n' +
            '<td>LDAP_SCHEMA_ABSTRACT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19748>19748</a></td>\n' +
            '<td>the object class is abstract, i.e. there cannot be entries of this class alone.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19749>19749</a></td>\n' +
            '<td>LDAP_SCHEMA_STRUCTURAL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19750>19750</a></td>\n' +
            '<td>the object class is structural, i.e. it describes the main role of the entry. On some servers, once the entry is created the set of structural object classes assigned cannot be changed: none of those present can be removed and none other can be added.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19751>19751</a></td>\n' +
            '<td>LDAP_SCHEMA_AUXILIARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19752>19752</a></td>\n' +
            '<td>the object class is auxiliary, i.e. it is intended to go with other, structural, object classes. These can be added or removed at any time if attribute types are added or removed at the same time as needed by the set of object classes resulting from the operation.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19753>19753</a></td>\n' +
            '<td>Routines ldap_xxx2name() return a canonical name for the definition.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19754>19754</a></td>\n' +
            '<td>Routines ldap_xxx2str() return a string representation in the format described by RFC 4512 of the struct passed in the argument. The string is a newly allocated string that must be freed by the caller. These routines may return NULL if no memory can be allocated for the string.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19755>19755</a></td>\n' +
            '<td>ldap_scherr2str() returns a NUL-terminated string with a text description of the error found. This is a pointer to a static area, so it must not be freed by the caller. The argument code comes from one of the parsing routines and can adopt the following values:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19756>19756</a></td>\n' +
            '<td>LDAP_SCHERR_OUTOFMEM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19757>19757</a></td>\n' +
            '<td>Out of memory.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19758>19758</a></td>\n' +
            '<td>LDAP_SCHERR_UNEXPTOKEN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19759>19759</a></td>\n' +
            '<td>Unexpected token.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19760>19760</a></td>\n' +
            '<td>LDAP_SCHERR_NOLEFTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19761>19761</a></td>\n' +
            '<td>Missing opening parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19762>19762</a></td>\n' +
            '<td>LDAP_SCHERR_NORIGHTPAREN</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19763>19763</a></td>\n' +
            '<td>Missing closing parenthesis.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19764>19764</a></td>\n' +
            '<td>LDAP_SCHERR_NODIGIT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19765>19765</a></td>\n' +
            '<td>Expecting digit.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19766>19766</a></td>\n' +
            '<td>LDAP_SCHERR_BADNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19767>19767</a></td>\n' +
            '<td>Expecting a name.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19768>19768</a></td>\n' +
            '<td>LDAP_SCHERR_BADDESC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19769>19769</a></td>\n' +
            '<td>Bad description.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19770>19770</a></td>\n' +
            '<td>LDAP_SCHERR_BADSUP</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19771>19771</a></td>\n' +
            '<td>Bad superiors.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19772>19772</a></td>\n' +
            '<td>LDAP_SCHERR_DUPOPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19773>19773</a></td>\n' +
            '<td>Duplicate option.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19774>19774</a></td>\n' +
            '<td>LDAP_SCHERR_EMPTY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19775>19775</a></td>\n' +
            '<td>Unexpected end of data.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19776>19776</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19777>19777</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19778>19778</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19779>19779</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19780>19780</a></td>\n' +
            '<td>LDAP_TLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19781>19781</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19782>19782</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19783>19783</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19784>19784</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19785>19785</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19786>19786</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19787>19787</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19788>19788</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19789>19789</a></td>\n' +
            '<td>ldap_start_tls, ldap_start_tls_s, ldap_tls_inplace, ldap_install_tls − LDAP TLS initialization routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19790>19790</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19791>19791</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19792>19792</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19793>19793</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19794>19794</a></td>\n' +
            '<td>int ldap_start_tls(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19795>19795</a></td>\n' +
            '<td>int ldap_start_tls_s(LDAP *ld, LDAPControl **serverctrls, LDAPControl **clientctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19796>19796</a></td>\n' +
            '<td>int ldap_tls_inplace(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19797>19797</a></td>\n' +
            '<td>int ldap_install_tls(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19798>19798</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19799>19799</a></td>\n' +
            '<td>These routines are used to initiate TLS processing on an LDAP session. ldap_start_tls_s() sends a StartTLS request to a server, waits for the reply, and then installs TLS handlers on the session if the request succeeded. The routine returns LDAP_SUCCESS if everything succeeded, otherwise it returns an LDAP error code. ldap_start_tls() sends a StartTLS request to a server and does nothing else. It returns LDAP_SUCCESS if the request was sent successfully. ldap_tls_inplace() returns 1 if TLS handlers have been installed on the specified session, 0 otherwise. ldap_install_tls() installs the TLS handlers on the given session. It returns LDAP_LOCAL_ERROR if TLS is already installed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19800>19800</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19801>19801</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19802>19802</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19803>19803</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19804>19804</a></td>\n' +
            '<td>LDAP_TLS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19805>19805</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19806>19806</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19807>19807</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19808>19808</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19809>19809</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19810>19810</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19811>19811</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19812>19812</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19813>19813</a></td>\n' +
            '<td>ldap_start_tls, ldap_start_tls_s, ldap_tls_inplace, ldap_install_tls − LDAP TLS initialization routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19814>19814</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19815>19815</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19816>19816</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19817>19817</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19818>19818</a></td>\n' +
            '<td>int ldap_start_tls(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19819>19819</a></td>\n' +
            '<td>int ldap_start_tls_s(LDAP *ld, LDAPControl **serverctrls, LDAPControl **clientctrls);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19820>19820</a></td>\n' +
            '<td>int ldap_tls_inplace(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19821>19821</a></td>\n' +
            '<td>int ldap_install_tls(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19822>19822</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19823>19823</a></td>\n' +
            '<td>These routines are used to initiate TLS processing on an LDAP session. ldap_start_tls_s() sends a StartTLS request to a server, waits for the reply, and then installs TLS handlers on the session if the request succeeded. The routine returns LDAP_SUCCESS if everything succeeded, otherwise it returns an LDAP error code. ldap_start_tls() sends a StartTLS request to a server and does nothing else. It returns LDAP_SUCCESS if the request was sent successfully. ldap_tls_inplace() returns 1 if TLS handlers have been installed on the specified session, 0 otherwise. ldap_install_tls() installs the TLS handlers on the given session. It returns LDAP_LOCAL_ERROR if TLS is already installed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19824>19824</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19825>19825</a></td>\n' +
            '<td>ldap(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19826>19826</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19827>19827</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19828>19828</a></td>\n' +
            '<td>LDAP_BIND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19829>19829</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19830>19830</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19831>19831</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19832>19832</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19833>19833</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19834>19834</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19835>19835</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19836>19836</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19837>19837</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19838>19838</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19839>19839</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19840>19840</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19841>19841</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19842>19842</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19843>19843</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19844>19844</a></td>\n' +
            '<td>ldap_bind, ldap_bind_s, ldap_simple_bind, ldap_simple_bind_s, ldap_sasl_bind, ldap_sasl_bind_s, ldap_sasl_interactive_bind_s, ldap_parse_sasl_bind_result, ldap_unbind, ldap_unbind_s, ldap_unbind_ext, ldap_unbind_ext_s, ldap_set_rebind_proc − LDAP bind routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19845>19845</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19846>19846</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19847>19847</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19848>19848</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19849>19849</a></td>\n' +
            '<td>int ldap_bind(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19850>19850</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19851>19851</a></td>\n' +
            '<td>int ldap_bind_s(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19852>19852</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19853>19853</a></td>\n' +
            '<td>int ldap_simple_bind(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19854>19854</a></td>\n' +
            '<td>int ldap_simple_bind_s(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19855>19855</a></td>\n' +
            '<td>int ldap_sasl_bind(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19856>19856</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19857>19857</a></td>\n' +
            '<td>LDAPControl *cctrls[], int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19858>19858</a></td>\n' +
            '<td>int ldap_sasl_bind_s(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19859>19859</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19860>19860</a></td>\n' +
            '<td>LDAPControl *cctrls[], struct berval **servercredp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19861>19861</a></td>\n' +
            '<td>int ldap_parse_sasl_bind_result(LDAP *ld, LDAPMessage *res,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19862>19862</a></td>\n' +
            '<td>struct berval **servercredp, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19863>19863</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind_s(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19864>19864</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19865>19865</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19866>19866</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19867>19867</a></td>\n' +
            '<td>void *defaults);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19868>19868</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19869>19869</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19870>19870</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19871>19871</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19872>19872</a></td>\n' +
            '<td>void *defaults, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19873>19873</a></td>\n' +
            '<td>const char **rmechp, int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19874>19874</a></td>\n' +
            '<td>int (LDAP_SASL_INTERACT_PROC)(LDAP *ld, unsigned flags, void *defaults, void *sasl_interact);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19875>19875</a></td>\n' +
            '<td>int ldap_unbind(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19876>19876</a></td>\n' +
            '<td>int ldap_unbind_s(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19877>19877</a></td>\n' +
            '<td>int ldap_unbind_ext(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19878>19878</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19879>19879</a></td>\n' +
            '<td>int ldap_unbind_ext_s(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19880>19880</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19881>19881</a></td>\n' +
            '<td>int ldap_set_rebind_proc (LDAP *ld, LDAP_REBIND_PROC *ldap_proc, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19882>19882</a></td>\n' +
            '<td>int (LDAP_REBIND_PROC)(LDAP *ld, LDAP_CONST char *url, ber_tag_t request, ber_int_t msgid, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19883>19883</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19884>19884</a></td>\n' +
            '<td>These routines provide various interfaces to the LDAP bind operation. After an association with an LDAP server is made using ldap_init(3), an LDAP bind operation should be performed before other operations are attempted over the connection. An LDAP bind is required when using Version 2 of the LDAP protocol; it is optional for Version 3 but is usually needed due to security considerations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19885>19885</a></td>\n' +
            '<td>There are three types of bind calls, ones providing simple authentication, ones providing SASL authentication, and general routines capable of doing either simple or SASL authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19886>19886</a></td>\n' +
            '<td>SASL (Simple Authentication and Security Layer) can negotiate one of many different kinds of authentication. Both synchronous and asynchronous versions of each variant of the bind call are provided. All routines take ld as their first parameter, as returned from ldap_init(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19887>19887</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19888>19888</a></td>\n' +
            '<td>The simplest form of the bind call is ldap_simple_bind_s(). It takes the DN to bind as in who, and the userPassword associated with the entry in passwd. It returns an LDAP error indication (see ldap_error(3)). The ldap_simple_bind() call is asynchronous, taking the same parameters but only initiating the bind operation and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19889>19889</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19890>19890</a></td>\n' +
            '<td>The ldap_bind() and ldap_bind_s() routines can be used when the authentication method to use needs to be selected at runtime. They both take an extra method parameter selecting the authentication method to use. It should be set to LDAP_AUTH_SIMPLE to select simple authentication. ldap_bind() returns the message id of the request it initiates. ldap_bind_s() returns an LDAP error indication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19891>19891</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19892>19892</a></td>\n' +
            '<td>For SASL binds the server always ignores any provided DN, so the dn parameter should always be NULL. ldap_sasl_bind_s() sends a single SASL bind request with the given SASL mechanism and credentials in the cred parameter. The format of the credentials depends on the particular SASL mechanism in use. For mechanisms that provide mutual authentication the server’s credentials will be returned in the servercredp parameter. The routine returns an LDAP error indication (see ldap_error(3)). The ldap_sasl_bind() call is asynchronous, taking the same parameters but only sending the request and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3). The result must be additionally parsed by ldap_parse_sasl_bind_result() to obtain any server credentials sent from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19893>19893</a></td>\n' +
            '<td>Many SASL mechanisms require multiple message exchanges to perform a complete authentication. Applications should generally use ldap_sasl_interactive_bind_s() rather than calling the basic ldap_sasl_bind() functions directly. The mechs parameter should contain a space-separated list of candidate mechanisms to use. If this parameter is NULL or empty the library will query the supportedSASLMechanisms attribute from the server’s rootDSE for the list of SASL mechanisms the server supports. The flags parameter controls the interaction used to retrieve any necessary SASL authentication parameters and should be one of:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19894>19894</a></td>\n' +
            '<td>LDAP_SASL_AUTOMATIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19895>19895</a></td>\n' +
            '<td>use defaults if available, prompt otherwise</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19896>19896</a></td>\n' +
            '<td>LDAP_SASL_INTERACTIVE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19897>19897</a></td>\n' +
            '<td>always prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19898>19898</a></td>\n' +
            '<td>LDAP_SASL_QUIET</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19899>19899</a></td>\n' +
            '<td>never prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19900>19900</a></td>\n' +
            '<td>The interact function uses the provided defaults to handle requests from the SASL library for particular authentication parameters. There is no defined format for the defaults information; it is up to the caller to use whatever format is appropriate for the supplied interact function. The sasl_interact parameter comes from the underlying SASL library. When used with Cyrus SASL this is an array of sasl_interact_t structures. The Cyrus SASL library will prompt for a variety of inputs, including:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19901>19901</a></td>\n' +
            '<td>SASL_CB_GETREALM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19902>19902</a></td>\n' +
            '<td>the realm for the authentication attempt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19903>19903</a></td>\n' +
            '<td>SASL_CB_AUTHNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19904>19904</a></td>\n' +
            '<td>the username to authenticate</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19905>19905</a></td>\n' +
            '<td>SASL_CB_PASS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19906>19906</a></td>\n' +
            '<td>the password for the provided username</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19907>19907</a></td>\n' +
            '<td>SASL_CB_USER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19908>19908</a></td>\n' +
            '<td>the username to use for proxy authorization</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19909>19909</a></td>\n' +
            '<td>SASL_CB_NOECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19910>19910</a></td>\n' +
            '<td>generic prompt for input with input echoing disabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19911>19911</a></td>\n' +
            '<td>SASL_CB_ECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19912>19912</a></td>\n' +
            '<td>generic prompt for input with input echoing enabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19913>19913</a></td>\n' +
            '<td>SASL_CB_LIST_END</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19914>19914</a></td>\n' +
            '<td>indicates the end of the array of prompts</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19915>19915</a></td>\n' +
            '<td>See the Cyrus SASL documentation for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19916>19916</a></td>\n' +
            '<td>Applications which need to manage connections asynchronously may use ldap_sasl_interactive_bind() instead of the synchronous version. A valid mechs parameter must be supplied, otherwise the library will be forced to query the server for a list of supported mechanisms, and this query will be performed synchronously. The other parameters are the same as for the synchronous function, with three additional parameters. The actual SASL mechanism that was used, and the message ID for use with ldap_result() will be returned in rmechp and msgidp, respectively. The value in rmechp must not be modified by the caller and must be passed back on each subsequent call. The message obtained from ldap_result() must be passed in the result parameter. This parameter must be NULL when initiating a new Bind. The caller must free the result message after each call using ldap_msgfree(). The ldap_sasl_interactive_bind() function returns an LDAP result code. If the code is LDAP_SASL_BIND_IN_PROGRESS then the Bind is not complete yet, and this function must be called again with the next result from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19917>19917</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19918>19918</a></td>\n' +
            '<td>The ldap_set_rebind_proc function() sets the process to use for binding when an operation returns a referral. This function is used when an application needs to bind to another server in order to follow a referral or search continuation reference.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19919>19919</a></td>\n' +
            '<td>The function takes ld, the rebind function, and the params, the arbitrary data like state information which the client might need to properly rebind. The LDAP_OPT_REFERRALS option in the ld must be set to ON for the libraries to use the rebind function. Use the ldap_set_option function to set the value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19920>19920</a></td>\n' +
            '<td>The rebind function parameters are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19921>19921</a></td>\n' +
            '<td>The ld parameter must be used by the application when binding to the referred server if the application wants the libraries to follow the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19922>19922</a></td>\n' +
            '<td>The url parameter points to the URL referral string received from the LDAP server. The LDAP application can use the ldap_url_parse(3) function to parse the string into its components.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19923>19923</a></td>\n' +
            '<td>The request parameter specifies the type of request that generated the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19924>19924</a></td>\n' +
            '<td>The msgid parameter specifies the message ID of the request generating the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19925>19925</a></td>\n' +
            '<td>The params parameter is the same value as passed originally to the ldap_set_rebind_proc() function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19926>19926</a></td>\n' +
            '<td>The LDAP libraries set all the parameters when they call the rebind function. The application should not attempt to free either the ld or the url structures in the rebind function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19927>19927</a></td>\n' +
            '<td>The application must supply to the rebind function the required authentication information such as, user name, password, and certificates. The rebind function must use a synchronous bind method.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19928>19928</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19929>19929</a></td>\n' +
            '<td>The ldap_unbind() call is used to unbind from the directory, terminate the current association, and free the resources contained in the ld structure. Once it is called, the connection to the LDAP server is closed, and the ld structure is invalid. The ldap_unbind_s() call is just another name for ldap_unbind(); both of these calls are synchronous in nature.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19930>19930</a></td>\n' +
            '<td>The ldap_unbind_ext() and ldap_unbind_ext_s() allows the operations to specify controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19931>19931</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19932>19932</a></td>\n' +
            '<td>Asynchronous routines will return −1 in case of error, setting the ld_errno parameter of the ld structure. Synchronous routines return whatever ld_errno is set to. See ldap_error(3) for more information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19933>19933</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19934>19934</a></td>\n' +
            '<td>If an anonymous bind is sufficient for the application, the rebind process need not be provided. The LDAP libraries with the LDAP_OPT_REFERRALS option set to ON (default value) will automatically follow referrals using an anonymous bind.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19935>19935</a></td>\n' +
            '<td>If the application needs stronger authentication than an anonymous bind, you need to provide a rebind process for that authentication method. The bind method must be synchronous.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19936>19936</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19937>19937</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_open(3), ldap_set_option(3), ldap_url_parse(3) RFC 4422 (http://www.rfc-editor.org), Cyrus SASL (http://asg.web.cmu.edu/sasl/)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19938>19938</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19939>19939</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19940>19940</a></td>\n' +
            '<td>LDAP_BIND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19941>19941</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19942>19942</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19943>19943</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19944>19944</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19945>19945</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19946>19946</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19947>19947</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19948>19948</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19949>19949</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19950>19950</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19951>19951</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19952>19952</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19953>19953</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19954>19954</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19955>19955</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19956>19956</a></td>\n' +
            '<td>ldap_bind, ldap_bind_s, ldap_simple_bind, ldap_simple_bind_s, ldap_sasl_bind, ldap_sasl_bind_s, ldap_sasl_interactive_bind_s, ldap_parse_sasl_bind_result, ldap_unbind, ldap_unbind_s, ldap_unbind_ext, ldap_unbind_ext_s, ldap_set_rebind_proc − LDAP bind routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19957>19957</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19958>19958</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19959>19959</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19960>19960</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19961>19961</a></td>\n' +
            '<td>int ldap_bind(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19962>19962</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19963>19963</a></td>\n' +
            '<td>int ldap_bind_s(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19964>19964</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19965>19965</a></td>\n' +
            '<td>int ldap_simple_bind(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19966>19966</a></td>\n' +
            '<td>int ldap_simple_bind_s(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19967>19967</a></td>\n' +
            '<td>int ldap_sasl_bind(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19968>19968</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19969>19969</a></td>\n' +
            '<td>LDAPControl *cctrls[], int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19970>19970</a></td>\n' +
            '<td>int ldap_sasl_bind_s(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19971>19971</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19972>19972</a></td>\n' +
            '<td>LDAPControl *cctrls[], struct berval **servercredp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19973>19973</a></td>\n' +
            '<td>int ldap_parse_sasl_bind_result(LDAP *ld, LDAPMessage *res,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19974>19974</a></td>\n' +
            '<td>struct berval **servercredp, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19975>19975</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind_s(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19976>19976</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19977>19977</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19978>19978</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19979>19979</a></td>\n' +
            '<td>void *defaults);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19980>19980</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19981>19981</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19982>19982</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19983>19983</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19984>19984</a></td>\n' +
            '<td>void *defaults, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19985>19985</a></td>\n' +
            '<td>const char **rmechp, int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19986>19986</a></td>\n' +
            '<td>int (LDAP_SASL_INTERACT_PROC)(LDAP *ld, unsigned flags, void *defaults, void *sasl_interact);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19987>19987</a></td>\n' +
            '<td>int ldap_unbind(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19988>19988</a></td>\n' +
            '<td>int ldap_unbind_s(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19989>19989</a></td>\n' +
            '<td>int ldap_unbind_ext(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19990>19990</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19991>19991</a></td>\n' +
            '<td>int ldap_unbind_ext_s(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19992>19992</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19993>19993</a></td>\n' +
            '<td>int ldap_set_rebind_proc (LDAP *ld, LDAP_REBIND_PROC *ldap_proc, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19994>19994</a></td>\n' +
            '<td>int (LDAP_REBIND_PROC)(LDAP *ld, LDAP_CONST char *url, ber_tag_t request, ber_int_t msgid, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19995>19995</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19996>19996</a></td>\n' +
            '<td>These routines provide various interfaces to the LDAP bind operation. After an association with an LDAP server is made using ldap_init(3), an LDAP bind operation should be performed before other operations are attempted over the connection. An LDAP bind is required when using Version 2 of the LDAP protocol; it is optional for Version 3 but is usually needed due to security considerations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19997>19997</a></td>\n' +
            '<td>There are three types of bind calls, ones providing simple authentication, ones providing SASL authentication, and general routines capable of doing either simple or SASL authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19998>19998</a></td>\n' +
            '<td>SASL (Simple Authentication and Security Layer) can negotiate one of many different kinds of authentication. Both synchronous and asynchronous versions of each variant of the bind call are provided. All routines take ld as their first parameter, as returned from ldap_init(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=19999>19999</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20000>20000</a></td>\n' +
            '<td>The simplest form of the bind call is ldap_simple_bind_s(). It takes the DN to bind as in who, and the userPassword associated with the entry in passwd. It returns an LDAP error indication (see ldap_error(3)). The ldap_simple_bind() call is asynchronous, taking the same parameters but only initiating the bind operation and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20001>20001</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20002>20002</a></td>\n' +
            '<td>The ldap_bind() and ldap_bind_s() routines can be used when the authentication method to use needs to be selected at runtime. They both take an extra method parameter selecting the authentication method to use. It should be set to LDAP_AUTH_SIMPLE to select simple authentication. ldap_bind() returns the message id of the request it initiates. ldap_bind_s() returns an LDAP error indication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20003>20003</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20004>20004</a></td>\n' +
            '<td>For SASL binds the server always ignores any provided DN, so the dn parameter should always be NULL. ldap_sasl_bind_s() sends a single SASL bind request with the given SASL mechanism and credentials in the cred parameter. The format of the credentials depends on the particular SASL mechanism in use. For mechanisms that provide mutual authentication the server’s credentials will be returned in the servercredp parameter. The routine returns an LDAP error indication (see ldap_error(3)). The ldap_sasl_bind() call is asynchronous, taking the same parameters but only sending the request and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3). The result must be additionally parsed by ldap_parse_sasl_bind_result() to obtain any server credentials sent from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20005>20005</a></td>\n' +
            '<td>Many SASL mechanisms require multiple message exchanges to perform a complete authentication. Applications should generally use ldap_sasl_interactive_bind_s() rather than calling the basic ldap_sasl_bind() functions directly. The mechs parameter should contain a space-separated list of candidate mechanisms to use. If this parameter is NULL or empty the library will query the supportedSASLMechanisms attribute from the server’s rootDSE for the list of SASL mechanisms the server supports. The flags parameter controls the interaction used to retrieve any necessary SASL authentication parameters and should be one of:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20006>20006</a></td>\n' +
            '<td>LDAP_SASL_AUTOMATIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20007>20007</a></td>\n' +
            '<td>use defaults if available, prompt otherwise</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20008>20008</a></td>\n' +
            '<td>LDAP_SASL_INTERACTIVE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20009>20009</a></td>\n' +
            '<td>always prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20010>20010</a></td>\n' +
            '<td>LDAP_SASL_QUIET</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20011>20011</a></td>\n' +
            '<td>never prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20012>20012</a></td>\n' +
            '<td>The interact function uses the provided defaults to handle requests from the SASL library for particular authentication parameters. There is no defined format for the defaults information; it is up to the caller to use whatever format is appropriate for the supplied interact function. The sasl_interact parameter comes from the underlying SASL library. When used with Cyrus SASL this is an array of sasl_interact_t structures. The Cyrus SASL library will prompt for a variety of inputs, including:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20013>20013</a></td>\n' +
            '<td>SASL_CB_GETREALM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20014>20014</a></td>\n' +
            '<td>the realm for the authentication attempt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20015>20015</a></td>\n' +
            '<td>SASL_CB_AUTHNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20016>20016</a></td>\n' +
            '<td>the username to authenticate</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20017>20017</a></td>\n' +
            '<td>SASL_CB_PASS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20018>20018</a></td>\n' +
            '<td>the password for the provided username</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20019>20019</a></td>\n' +
            '<td>SASL_CB_USER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20020>20020</a></td>\n' +
            '<td>the username to use for proxy authorization</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20021>20021</a></td>\n' +
            '<td>SASL_CB_NOECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20022>20022</a></td>\n' +
            '<td>generic prompt for input with input echoing disabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20023>20023</a></td>\n' +
            '<td>SASL_CB_ECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20024>20024</a></td>\n' +
            '<td>generic prompt for input with input echoing enabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20025>20025</a></td>\n' +
            '<td>SASL_CB_LIST_END</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20026>20026</a></td>\n' +
            '<td>indicates the end of the array of prompts</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20027>20027</a></td>\n' +
            '<td>See the Cyrus SASL documentation for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20028>20028</a></td>\n' +
            '<td>Applications which need to manage connections asynchronously may use ldap_sasl_interactive_bind() instead of the synchronous version. A valid mechs parameter must be supplied, otherwise the library will be forced to query the server for a list of supported mechanisms, and this query will be performed synchronously. The other parameters are the same as for the synchronous function, with three additional parameters. The actual SASL mechanism that was used, and the message ID for use with ldap_result() will be returned in rmechp and msgidp, respectively. The value in rmechp must not be modified by the caller and must be passed back on each subsequent call. The message obtained from ldap_result() must be passed in the result parameter. This parameter must be NULL when initiating a new Bind. The caller must free the result message after each call using ldap_msgfree(). The ldap_sasl_interactive_bind() function returns an LDAP result code. If the code is LDAP_SASL_BIND_IN_PROGRESS then the Bind is not complete yet, and this function must be called again with the next result from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20029>20029</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20030>20030</a></td>\n' +
            '<td>The ldap_set_rebind_proc function() sets the process to use for binding when an operation returns a referral. This function is used when an application needs to bind to another server in order to follow a referral or search continuation reference.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20031>20031</a></td>\n' +
            '<td>The function takes ld, the rebind function, and the params, the arbitrary data like state information which the client might need to properly rebind. The LDAP_OPT_REFERRALS option in the ld must be set to ON for the libraries to use the rebind function. Use the ldap_set_option function to set the value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20032>20032</a></td>\n' +
            '<td>The rebind function parameters are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20033>20033</a></td>\n' +
            '<td>The ld parameter must be used by the application when binding to the referred server if the application wants the libraries to follow the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20034>20034</a></td>\n' +
            '<td>The url parameter points to the URL referral string received from the LDAP server. The LDAP application can use the ldap_url_parse(3) function to parse the string into its components.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20035>20035</a></td>\n' +
            '<td>The request parameter specifies the type of request that generated the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20036>20036</a></td>\n' +
            '<td>The msgid parameter specifies the message ID of the request generating the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20037>20037</a></td>\n' +
            '<td>The params parameter is the same value as passed originally to the ldap_set_rebind_proc() function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20038>20038</a></td>\n' +
            '<td>The LDAP libraries set all the parameters when they call the rebind function. The application should not attempt to free either the ld or the url structures in the rebind function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20039>20039</a></td>\n' +
            '<td>The application must supply to the rebind function the required authentication information such as, user name, password, and certificates. The rebind function must use a synchronous bind method.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20040>20040</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20041>20041</a></td>\n' +
            '<td>The ldap_unbind() call is used to unbind from the directory, terminate the current association, and free the resources contained in the ld structure. Once it is called, the connection to the LDAP server is closed, and the ld structure is invalid. The ldap_unbind_s() call is just another name for ldap_unbind(); both of these calls are synchronous in nature.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20042>20042</a></td>\n' +
            '<td>The ldap_unbind_ext() and ldap_unbind_ext_s() allows the operations to specify controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20043>20043</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20044>20044</a></td>\n' +
            '<td>Asynchronous routines will return −1 in case of error, setting the ld_errno parameter of the ld structure. Synchronous routines return whatever ld_errno is set to. See ldap_error(3) for more information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20045>20045</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20046>20046</a></td>\n' +
            '<td>If an anonymous bind is sufficient for the application, the rebind process need not be provided. The LDAP libraries with the LDAP_OPT_REFERRALS option set to ON (default value) will automatically follow referrals using an anonymous bind.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20047>20047</a></td>\n' +
            '<td>If the application needs stronger authentication than an anonymous bind, you need to provide a rebind process for that authentication method. The bind method must be synchronous.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20048>20048</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20049>20049</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_open(3), ldap_set_option(3), ldap_url_parse(3) RFC 4422 (http://www.rfc-editor.org), Cyrus SASL (http://asg.web.cmu.edu/sasl/)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20050>20050</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20051>20051</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20052>20052</a></td>\n' +
            '<td>LDAP_BIND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20053>20053</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20054>20054</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20055>20055</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20056>20056</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20057>20057</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20058>20058</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20059>20059</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20060>20060</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20061>20061</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20062>20062</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20063>20063</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20064>20064</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20065>20065</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20066>20066</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20067>20067</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20068>20068</a></td>\n' +
            '<td>ldap_bind, ldap_bind_s, ldap_simple_bind, ldap_simple_bind_s, ldap_sasl_bind, ldap_sasl_bind_s, ldap_sasl_interactive_bind_s, ldap_parse_sasl_bind_result, ldap_unbind, ldap_unbind_s, ldap_unbind_ext, ldap_unbind_ext_s, ldap_set_rebind_proc − LDAP bind routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20069>20069</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20070>20070</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20071>20071</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20072>20072</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20073>20073</a></td>\n' +
            '<td>int ldap_bind(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20074>20074</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20075>20075</a></td>\n' +
            '<td>int ldap_bind_s(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20076>20076</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20077>20077</a></td>\n' +
            '<td>int ldap_simple_bind(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20078>20078</a></td>\n' +
            '<td>int ldap_simple_bind_s(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20079>20079</a></td>\n' +
            '<td>int ldap_sasl_bind(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20080>20080</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20081>20081</a></td>\n' +
            '<td>LDAPControl *cctrls[], int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20082>20082</a></td>\n' +
            '<td>int ldap_sasl_bind_s(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20083>20083</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20084>20084</a></td>\n' +
            '<td>LDAPControl *cctrls[], struct berval **servercredp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20085>20085</a></td>\n' +
            '<td>int ldap_parse_sasl_bind_result(LDAP *ld, LDAPMessage *res,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20086>20086</a></td>\n' +
            '<td>struct berval **servercredp, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20087>20087</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind_s(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20088>20088</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20089>20089</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20090>20090</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20091>20091</a></td>\n' +
            '<td>void *defaults);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20092>20092</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20093>20093</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20094>20094</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20095>20095</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20096>20096</a></td>\n' +
            '<td>void *defaults, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20097>20097</a></td>\n' +
            '<td>const char **rmechp, int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20098>20098</a></td>\n' +
            '<td>int (LDAP_SASL_INTERACT_PROC)(LDAP *ld, unsigned flags, void *defaults, void *sasl_interact);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20099>20099</a></td>\n' +
            '<td>int ldap_unbind(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20100>20100</a></td>\n' +
            '<td>int ldap_unbind_s(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20101>20101</a></td>\n' +
            '<td>int ldap_unbind_ext(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20102>20102</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20103>20103</a></td>\n' +
            '<td>int ldap_unbind_ext_s(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20104>20104</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20105>20105</a></td>\n' +
            '<td>int ldap_set_rebind_proc (LDAP *ld, LDAP_REBIND_PROC *ldap_proc, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20106>20106</a></td>\n' +
            '<td>int (LDAP_REBIND_PROC)(LDAP *ld, LDAP_CONST char *url, ber_tag_t request, ber_int_t msgid, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20107>20107</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20108>20108</a></td>\n' +
            '<td>These routines provide various interfaces to the LDAP bind operation. After an association with an LDAP server is made using ldap_init(3), an LDAP bind operation should be performed before other operations are attempted over the connection. An LDAP bind is required when using Version 2 of the LDAP protocol; it is optional for Version 3 but is usually needed due to security considerations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20109>20109</a></td>\n' +
            '<td>There are three types of bind calls, ones providing simple authentication, ones providing SASL authentication, and general routines capable of doing either simple or SASL authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20110>20110</a></td>\n' +
            '<td>SASL (Simple Authentication and Security Layer) can negotiate one of many different kinds of authentication. Both synchronous and asynchronous versions of each variant of the bind call are provided. All routines take ld as their first parameter, as returned from ldap_init(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20111>20111</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20112>20112</a></td>\n' +
            '<td>The simplest form of the bind call is ldap_simple_bind_s(). It takes the DN to bind as in who, and the userPassword associated with the entry in passwd. It returns an LDAP error indication (see ldap_error(3)). The ldap_simple_bind() call is asynchronous, taking the same parameters but only initiating the bind operation and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20113>20113</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20114>20114</a></td>\n' +
            '<td>The ldap_bind() and ldap_bind_s() routines can be used when the authentication method to use needs to be selected at runtime. They both take an extra method parameter selecting the authentication method to use. It should be set to LDAP_AUTH_SIMPLE to select simple authentication. ldap_bind() returns the message id of the request it initiates. ldap_bind_s() returns an LDAP error indication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20115>20115</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20116>20116</a></td>\n' +
            '<td>For SASL binds the server always ignores any provided DN, so the dn parameter should always be NULL. ldap_sasl_bind_s() sends a single SASL bind request with the given SASL mechanism and credentials in the cred parameter. The format of the credentials depends on the particular SASL mechanism in use. For mechanisms that provide mutual authentication the server’s credentials will be returned in the servercredp parameter. The routine returns an LDAP error indication (see ldap_error(3)). The ldap_sasl_bind() call is asynchronous, taking the same parameters but only sending the request and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3). The result must be additionally parsed by ldap_parse_sasl_bind_result() to obtain any server credentials sent from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20117>20117</a></td>\n' +
            '<td>Many SASL mechanisms require multiple message exchanges to perform a complete authentication. Applications should generally use ldap_sasl_interactive_bind_s() rather than calling the basic ldap_sasl_bind() functions directly. The mechs parameter should contain a space-separated list of candidate mechanisms to use. If this parameter is NULL or empty the library will query the supportedSASLMechanisms attribute from the server’s rootDSE for the list of SASL mechanisms the server supports. The flags parameter controls the interaction used to retrieve any necessary SASL authentication parameters and should be one of:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20118>20118</a></td>\n' +
            '<td>LDAP_SASL_AUTOMATIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20119>20119</a></td>\n' +
            '<td>use defaults if available, prompt otherwise</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20120>20120</a></td>\n' +
            '<td>LDAP_SASL_INTERACTIVE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20121>20121</a></td>\n' +
            '<td>always prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20122>20122</a></td>\n' +
            '<td>LDAP_SASL_QUIET</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20123>20123</a></td>\n' +
            '<td>never prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20124>20124</a></td>\n' +
            '<td>The interact function uses the provided defaults to handle requests from the SASL library for particular authentication parameters. There is no defined format for the defaults information; it is up to the caller to use whatever format is appropriate for the supplied interact function. The sasl_interact parameter comes from the underlying SASL library. When used with Cyrus SASL this is an array of sasl_interact_t structures. The Cyrus SASL library will prompt for a variety of inputs, including:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20125>20125</a></td>\n' +
            '<td>SASL_CB_GETREALM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20126>20126</a></td>\n' +
            '<td>the realm for the authentication attempt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20127>20127</a></td>\n' +
            '<td>SASL_CB_AUTHNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20128>20128</a></td>\n' +
            '<td>the username to authenticate</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20129>20129</a></td>\n' +
            '<td>SASL_CB_PASS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20130>20130</a></td>\n' +
            '<td>the password for the provided username</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20131>20131</a></td>\n' +
            '<td>SASL_CB_USER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20132>20132</a></td>\n' +
            '<td>the username to use for proxy authorization</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20133>20133</a></td>\n' +
            '<td>SASL_CB_NOECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20134>20134</a></td>\n' +
            '<td>generic prompt for input with input echoing disabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20135>20135</a></td>\n' +
            '<td>SASL_CB_ECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20136>20136</a></td>\n' +
            '<td>generic prompt for input with input echoing enabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20137>20137</a></td>\n' +
            '<td>SASL_CB_LIST_END</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20138>20138</a></td>\n' +
            '<td>indicates the end of the array of prompts</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20139>20139</a></td>\n' +
            '<td>See the Cyrus SASL documentation for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20140>20140</a></td>\n' +
            '<td>Applications which need to manage connections asynchronously may use ldap_sasl_interactive_bind() instead of the synchronous version. A valid mechs parameter must be supplied, otherwise the library will be forced to query the server for a list of supported mechanisms, and this query will be performed synchronously. The other parameters are the same as for the synchronous function, with three additional parameters. The actual SASL mechanism that was used, and the message ID for use with ldap_result() will be returned in rmechp and msgidp, respectively. The value in rmechp must not be modified by the caller and must be passed back on each subsequent call. The message obtained from ldap_result() must be passed in the result parameter. This parameter must be NULL when initiating a new Bind. The caller must free the result message after each call using ldap_msgfree(). The ldap_sasl_interactive_bind() function returns an LDAP result code. If the code is LDAP_SASL_BIND_IN_PROGRESS then the Bind is not complete yet, and this function must be called again with the next result from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20141>20141</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20142>20142</a></td>\n' +
            '<td>The ldap_set_rebind_proc function() sets the process to use for binding when an operation returns a referral. This function is used when an application needs to bind to another server in order to follow a referral or search continuation reference.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20143>20143</a></td>\n' +
            '<td>The function takes ld, the rebind function, and the params, the arbitrary data like state information which the client might need to properly rebind. The LDAP_OPT_REFERRALS option in the ld must be set to ON for the libraries to use the rebind function. Use the ldap_set_option function to set the value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20144>20144</a></td>\n' +
            '<td>The rebind function parameters are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20145>20145</a></td>\n' +
            '<td>The ld parameter must be used by the application when binding to the referred server if the application wants the libraries to follow the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20146>20146</a></td>\n' +
            '<td>The url parameter points to the URL referral string received from the LDAP server. The LDAP application can use the ldap_url_parse(3) function to parse the string into its components.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20147>20147</a></td>\n' +
            '<td>The request parameter specifies the type of request that generated the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20148>20148</a></td>\n' +
            '<td>The msgid parameter specifies the message ID of the request generating the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20149>20149</a></td>\n' +
            '<td>The params parameter is the same value as passed originally to the ldap_set_rebind_proc() function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20150>20150</a></td>\n' +
            '<td>The LDAP libraries set all the parameters when they call the rebind function. The application should not attempt to free either the ld or the url structures in the rebind function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20151>20151</a></td>\n' +
            '<td>The application must supply to the rebind function the required authentication information such as, user name, password, and certificates. The rebind function must use a synchronous bind method.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20152>20152</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20153>20153</a></td>\n' +
            '<td>The ldap_unbind() call is used to unbind from the directory, terminate the current association, and free the resources contained in the ld structure. Once it is called, the connection to the LDAP server is closed, and the ld structure is invalid. The ldap_unbind_s() call is just another name for ldap_unbind(); both of these calls are synchronous in nature.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20154>20154</a></td>\n' +
            '<td>The ldap_unbind_ext() and ldap_unbind_ext_s() allows the operations to specify controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20155>20155</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20156>20156</a></td>\n' +
            '<td>Asynchronous routines will return −1 in case of error, setting the ld_errno parameter of the ld structure. Synchronous routines return whatever ld_errno is set to. See ldap_error(3) for more information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20157>20157</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20158>20158</a></td>\n' +
            '<td>If an anonymous bind is sufficient for the application, the rebind process need not be provided. The LDAP libraries with the LDAP_OPT_REFERRALS option set to ON (default value) will automatically follow referrals using an anonymous bind.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20159>20159</a></td>\n' +
            '<td>If the application needs stronger authentication than an anonymous bind, you need to provide a rebind process for that authentication method. The bind method must be synchronous.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20160>20160</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20161>20161</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_open(3), ldap_set_option(3), ldap_url_parse(3) RFC 4422 (http://www.rfc-editor.org), Cyrus SASL (http://asg.web.cmu.edu/sasl/)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20162>20162</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20163>20163</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20164>20164</a></td>\n' +
            '<td>LDAP_BIND</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20165>20165</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20166>20166</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20167>20167</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20168>20168</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20169>20169</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20170>20170</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20171>20171</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20172>20172</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20173>20173</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20174>20174</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20175>20175</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20176>20176</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20177>20177</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20178>20178</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20179>20179</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20180>20180</a></td>\n' +
            '<td>ldap_bind, ldap_bind_s, ldap_simple_bind, ldap_simple_bind_s, ldap_sasl_bind, ldap_sasl_bind_s, ldap_sasl_interactive_bind_s, ldap_parse_sasl_bind_result, ldap_unbind, ldap_unbind_s, ldap_unbind_ext, ldap_unbind_ext_s, ldap_set_rebind_proc − LDAP bind routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20181>20181</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20182>20182</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20183>20183</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20184>20184</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20185>20185</a></td>\n' +
            '<td>int ldap_bind(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20186>20186</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20187>20187</a></td>\n' +
            '<td>int ldap_bind_s(LDAP *ld, const char *who, const char *cred,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20188>20188</a></td>\n' +
            '<td>int method);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20189>20189</a></td>\n' +
            '<td>int ldap_simple_bind(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20190>20190</a></td>\n' +
            '<td>int ldap_simple_bind_s(LDAP *ld, const char *who, const char *passwd);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20191>20191</a></td>\n' +
            '<td>int ldap_sasl_bind(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20192>20192</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20193>20193</a></td>\n' +
            '<td>LDAPControl *cctrls[], int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20194>20194</a></td>\n' +
            '<td>int ldap_sasl_bind_s(LDAP *ld, const char *dn, const char *mechanism,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20195>20195</a></td>\n' +
            '<td>struct berval *cred, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20196>20196</a></td>\n' +
            '<td>LDAPControl *cctrls[], struct berval **servercredp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20197>20197</a></td>\n' +
            '<td>int ldap_parse_sasl_bind_result(LDAP *ld, LDAPMessage *res,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20198>20198</a></td>\n' +
            '<td>struct berval **servercredp, int freeit);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20199>20199</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind_s(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20200>20200</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20201>20201</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20202>20202</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20203>20203</a></td>\n' +
            '<td>void *defaults);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20204>20204</a></td>\n' +
            '<td>int ldap_sasl_interactive_bind(LDAP *ld, const char *dn,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20205>20205</a></td>\n' +
            '<td>const char *mechs,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20206>20206</a></td>\n' +
            '<td>LDAPControl *sctrls[], LDAPControl *cctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20207>20207</a></td>\n' +
            '<td>unsigned flags, LDAP_SASL_INTERACT_PROC *interact,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20208>20208</a></td>\n' +
            '<td>void *defaults, LDAPMessage *result,</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20209>20209</a></td>\n' +
            '<td>const char **rmechp, int *msgidp);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20210>20210</a></td>\n' +
            '<td>int (LDAP_SASL_INTERACT_PROC)(LDAP *ld, unsigned flags, void *defaults, void *sasl_interact);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20211>20211</a></td>\n' +
            '<td>int ldap_unbind(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20212>20212</a></td>\n' +
            '<td>int ldap_unbind_s(LDAP *ld);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20213>20213</a></td>\n' +
            '<td>int ldap_unbind_ext(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20214>20214</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20215>20215</a></td>\n' +
            '<td>int ldap_unbind_ext_s(LDAP *ld, LDAPControl *sctrls[],</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20216>20216</a></td>\n' +
            '<td>LDAPControl *cctrls[]);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20217>20217</a></td>\n' +
            '<td>int ldap_set_rebind_proc (LDAP *ld, LDAP_REBIND_PROC *ldap_proc, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20218>20218</a></td>\n' +
            '<td>int (LDAP_REBIND_PROC)(LDAP *ld, LDAP_CONST char *url, ber_tag_t request, ber_int_t msgid, void *params);</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20219>20219</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20220>20220</a></td>\n' +
            '<td>These routines provide various interfaces to the LDAP bind operation. After an association with an LDAP server is made using ldap_init(3), an LDAP bind operation should be performed before other operations are attempted over the connection. An LDAP bind is required when using Version 2 of the LDAP protocol; it is optional for Version 3 but is usually needed due to security considerations.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20221>20221</a></td>\n' +
            '<td>There are three types of bind calls, ones providing simple authentication, ones providing SASL authentication, and general routines capable of doing either simple or SASL authentication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20222>20222</a></td>\n' +
            '<td>SASL (Simple Authentication and Security Layer) can negotiate one of many different kinds of authentication. Both synchronous and asynchronous versions of each variant of the bind call are provided. All routines take ld as their first parameter, as returned from ldap_init(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20223>20223</a></td>\n' +
            '<td>SIMPLE AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20224>20224</a></td>\n' +
            '<td>The simplest form of the bind call is ldap_simple_bind_s(). It takes the DN to bind as in who, and the userPassword associated with the entry in passwd. It returns an LDAP error indication (see ldap_error(3)). The ldap_simple_bind() call is asynchronous, taking the same parameters but only initiating the bind operation and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3).</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20225>20225</a></td>\n' +
            '<td>GENERAL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20226>20226</a></td>\n' +
            '<td>The ldap_bind() and ldap_bind_s() routines can be used when the authentication method to use needs to be selected at runtime. They both take an extra method parameter selecting the authentication method to use. It should be set to LDAP_AUTH_SIMPLE to select simple authentication. ldap_bind() returns the message id of the request it initiates. ldap_bind_s() returns an LDAP error indication.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20227>20227</a></td>\n' +
            '<td>SASL AUTHENTICATION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20228>20228</a></td>\n' +
            '<td>For SASL binds the server always ignores any provided DN, so the dn parameter should always be NULL. ldap_sasl_bind_s() sends a single SASL bind request with the given SASL mechanism and credentials in the cred parameter. The format of the credentials depends on the particular SASL mechanism in use. For mechanisms that provide mutual authentication the server’s credentials will be returned in the servercredp parameter. The routine returns an LDAP error indication (see ldap_error(3)). The ldap_sasl_bind() call is asynchronous, taking the same parameters but only sending the request and returning the message id of the request it sent. The result of the operation can be obtained by a subsequent call to ldap_result(3). The result must be additionally parsed by ldap_parse_sasl_bind_result() to obtain any server credentials sent from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20229>20229</a></td>\n' +
            '<td>Many SASL mechanisms require multiple message exchanges to perform a complete authentication. Applications should generally use ldap_sasl_interactive_bind_s() rather than calling the basic ldap_sasl_bind() functions directly. The mechs parameter should contain a space-separated list of candidate mechanisms to use. If this parameter is NULL or empty the library will query the supportedSASLMechanisms attribute from the server’s rootDSE for the list of SASL mechanisms the server supports. The flags parameter controls the interaction used to retrieve any necessary SASL authentication parameters and should be one of:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20230>20230</a></td>\n' +
            '<td>LDAP_SASL_AUTOMATIC</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20231>20231</a></td>\n' +
            '<td>use defaults if available, prompt otherwise</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20232>20232</a></td>\n' +
            '<td>LDAP_SASL_INTERACTIVE</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20233>20233</a></td>\n' +
            '<td>always prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20234>20234</a></td>\n' +
            '<td>LDAP_SASL_QUIET</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20235>20235</a></td>\n' +
            '<td>never prompt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20236>20236</a></td>\n' +
            '<td>The interact function uses the provided defaults to handle requests from the SASL library for particular authentication parameters. There is no defined format for the defaults information; it is up to the caller to use whatever format is appropriate for the supplied interact function. The sasl_interact parameter comes from the underlying SASL library. When used with Cyrus SASL this is an array of sasl_interact_t structures. The Cyrus SASL library will prompt for a variety of inputs, including:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20237>20237</a></td>\n' +
            '<td>SASL_CB_GETREALM</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20238>20238</a></td>\n' +
            '<td>the realm for the authentication attempt</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20239>20239</a></td>\n' +
            '<td>SASL_CB_AUTHNAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20240>20240</a></td>\n' +
            '<td>the username to authenticate</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20241>20241</a></td>\n' +
            '<td>SASL_CB_PASS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20242>20242</a></td>\n' +
            '<td>the password for the provided username</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20243>20243</a></td>\n' +
            '<td>SASL_CB_USER</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20244>20244</a></td>\n' +
            '<td>the username to use for proxy authorization</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20245>20245</a></td>\n' +
            '<td>SASL_CB_NOECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20246>20246</a></td>\n' +
            '<td>generic prompt for input with input echoing disabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20247>20247</a></td>\n' +
            '<td>SASL_CB_ECHOPROMPT</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20248>20248</a></td>\n' +
            '<td>generic prompt for input with input echoing enabled</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20249>20249</a></td>\n' +
            '<td>SASL_CB_LIST_END</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20250>20250</a></td>\n' +
            '<td>indicates the end of the array of prompts</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20251>20251</a></td>\n' +
            '<td>See the Cyrus SASL documentation for more details.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20252>20252</a></td>\n' +
            '<td>Applications which need to manage connections asynchronously may use ldap_sasl_interactive_bind() instead of the synchronous version. A valid mechs parameter must be supplied, otherwise the library will be forced to query the server for a list of supported mechanisms, and this query will be performed synchronously. The other parameters are the same as for the synchronous function, with three additional parameters. The actual SASL mechanism that was used, and the message ID for use with ldap_result() will be returned in rmechp and msgidp, respectively. The value in rmechp must not be modified by the caller and must be passed back on each subsequent call. The message obtained from ldap_result() must be passed in the result parameter. This parameter must be NULL when initiating a new Bind. The caller must free the result message after each call using ldap_msgfree(). The ldap_sasl_interactive_bind() function returns an LDAP result code. If the code is LDAP_SASL_BIND_IN_PROGRESS then the Bind is not complete yet, and this function must be called again with the next result from the server.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20253>20253</a></td>\n' +
            '<td>REBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20254>20254</a></td>\n' +
            '<td>The ldap_set_rebind_proc function() sets the process to use for binding when an operation returns a referral. This function is used when an application needs to bind to another server in order to follow a referral or search continuation reference.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20255>20255</a></td>\n' +
            '<td>The function takes ld, the rebind function, and the params, the arbitrary data like state information which the client might need to properly rebind. The LDAP_OPT_REFERRALS option in the ld must be set to ON for the libraries to use the rebind function. Use the ldap_set_option function to set the value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20256>20256</a></td>\n' +
            '<td>The rebind function parameters are as follows:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20257>20257</a></td>\n' +
            '<td>The ld parameter must be used by the application when binding to the referred server if the application wants the libraries to follow the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20258>20258</a></td>\n' +
            '<td>The url parameter points to the URL referral string received from the LDAP server. The LDAP application can use the ldap_url_parse(3) function to parse the string into its components.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20259>20259</a></td>\n' +
            '<td>The request parameter specifies the type of request that generated the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20260>20260</a></td>\n' +
            '<td>The msgid parameter specifies the message ID of the request generating the referral.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20261>20261</a></td>\n' +
            '<td>The params parameter is the same value as passed originally to the ldap_set_rebind_proc() function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20262>20262</a></td>\n' +
            '<td>The LDAP libraries set all the parameters when they call the rebind function. The application should not attempt to free either the ld or the url structures in the rebind function.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20263>20263</a></td>\n' +
            '<td>The application must supply to the rebind function the required authentication information such as, user name, password, and certificates. The rebind function must use a synchronous bind method.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20264>20264</a></td>\n' +
            '<td>UNBINDING</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20265>20265</a></td>\n' +
            '<td>The ldap_unbind() call is used to unbind from the directory, terminate the current association, and free the resources contained in the ld structure. Once it is called, the connection to the LDAP server is closed, and the ld structure is invalid. The ldap_unbind_s() call is just another name for ldap_unbind(); both of these calls are synchronous in nature.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20266>20266</a></td>\n' +
            '<td>The ldap_unbind_ext() and ldap_unbind_ext_s() allows the operations to specify controls.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20267>20267</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20268>20268</a></td>\n' +
            '<td>Asynchronous routines will return −1 in case of error, setting the ld_errno parameter of the ld structure. Synchronous routines return whatever ld_errno is set to. See ldap_error(3) for more information.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20269>20269</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20270>20270</a></td>\n' +
            '<td>If an anonymous bind is sufficient for the application, the rebind process need not be provided. The LDAP libraries with the LDAP_OPT_REFERRALS option set to ON (default value) will automatically follow referrals using an anonymous bind.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20271>20271</a></td>\n' +
            '<td>If the application needs stronger authentication than an anonymous bind, you need to provide a rebind process for that authentication method. The bind method must be synchronous.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20272>20272</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20273>20273</a></td>\n' +
            '<td>ldap(3), ldap_error(3), ldap_open(3), ldap_set_option(3), ldap_url_parse(3) RFC 4422 (http://www.rfc-editor.org), Cyrus SASL (http://asg.web.cmu.edu/sasl/)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20274>20274</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20275>20275</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20276>20276</a></td>\n' +
            '<td>LDAP_URL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20277>20277</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20278>20278</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20279>20279</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20280>20280</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20281>20281</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20282>20282</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20283>20283</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20284>20284</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20285>20285</a></td>\n' +
            '<td>ldap_is_ldap_url, ldap_url_parse, ldap_free_urldesc − LDAP Uniform Resource Locator routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20286>20286</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20287>20287</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20288>20288</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20289>20289</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20290>20290</a></td>\n' +
            '<td>int ldap_is_ldap_url( const char *url )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20291>20291</a></td>\n' +
            '<td>int ldap_url_parse( const char *url, LDAPURLDesc **ludpp )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20292>20292</a></td>\n' +
            '<td>typedef struct ldap_url_desc {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20293>20293</a></td>\n' +
            '<td>char * lud_scheme; /* URI scheme */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20294>20294</a></td>\n' +
            '<td>char * lud_host; /* LDAP host to contact */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20295>20295</a></td>\n' +
            '<td>int lud_port; /* port on host */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20296>20296</a></td>\n' +
            '<td>char * lud_dn; /* base for search */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20297>20297</a></td>\n' +
            '<td>char ** lud_attrs; /* list of attributes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20298>20298</a></td>\n' +
            '<td>int lud_scope; /* a LDAP_SCOPE_... value */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20299>20299</a></td>\n' +
            '<td>char * lud_filter; /* LDAP search filter */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20300>20300</a></td>\n' +
            '<td>char ** lud_exts; /* LDAP extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20301>20301</a></td>\n' +
            '<td>int lud_crit_exts; /* true if any extension is critical */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20302>20302</a></td>\n' +
            '<td>/* may contain additional fields for internal use */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20303>20303</a></td>\n' +
            '<td>} LDAPURLDesc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20304>20304</a></td>\n' +
            '<td>void ldap_free_urldesc( LDAPURLDesc *ludp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20305>20305</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20306>20306</a></td>\n' +
            '<td>These routines support the use of LDAP URLs (Uniform Resource Locators) as detailed in RFC 4516. LDAP URLs look like this:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20307>20307</a></td>\n' +
            '<td>ldap://hostport/dn[?attrs[?scope[?filter[?exts]]]]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20308>20308</a></td>\n' +
            '<td>where:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20309>20309</a></td>\n' +
            '<td>hostport is a host name with an optional ":portnumber"</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20310>20310</a></td>\n' +
            '<td>dn is the search base</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20311>20311</a></td>\n' +
            '<td>attrs is a comma separated list of attributes to request</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20312>20312</a></td>\n' +
            '<td>scope is one of these three strings:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20313>20313</a></td>\n' +
            '<td>base one sub (default=base)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20314>20314</a></td>\n' +
            '<td>filter is filter</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20315>20315</a></td>\n' +
            '<td>exts are recognized set of LDAP and/or API extensions.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20316>20316</a></td>\n' +
            '<td>Example:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20317>20317</a></td>\n' +
            '<td>ldap://ldap.example.net/dc=example,dc=net?cn,sn?sub?(cn=*)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20318>20318</a></td>\n' +
            '<td>URLs that are wrapped in angle-brackets and/or preceded by "URL:" are also tolerated. Alternative LDAP schemes such as ldaps:// and ldapi:// may be parsed using the below routines as well.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20319>20319</a></td>\n' +
            '<td>ldap_is_ldap_url() returns a non-zero value if url looks like an LDAP URL (as opposed to some other kind of URL). It can be used as a quick check for an LDAP URL; the ldap_url_parse() routine should be used if a more thorough check is needed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20320>20320</a></td>\n' +
            '<td>ldap_url_parse() breaks down an LDAP URL passed in url into its component pieces. If successful, zero is returned, an LDAP URL description is allocated, filled in, and ludpp is set to point to it. If an error occurs, a non-zero URL error code is returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20321>20321</a></td>\n' +
            '<td>ldap_free_urldesc() should be called to free an LDAP URL description that was obtained from a call to ldap_url_parse().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20322>20322</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20323>20323</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20324>20324</a></td>\n' +
            '<td>RFC 4516 &lt;http://www.rfc-editor.org/rfc/rfc4516.txt&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20325>20325</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20326>20326</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20327>20327</a></td>\n' +
            '<td>LDAP_URL</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20328>20328</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20329>20329</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20330>20330</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20331>20331</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20332>20332</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20333>20333</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20334>20334</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20335>20335</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20336>20336</a></td>\n' +
            '<td>ldap_is_ldap_url, ldap_url_parse, ldap_free_urldesc − LDAP Uniform Resource Locator routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20337>20337</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20338>20338</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20339>20339</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20340>20340</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20341>20341</a></td>\n' +
            '<td>int ldap_is_ldap_url( const char *url )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20342>20342</a></td>\n' +
            '<td>int ldap_url_parse( const char *url, LDAPURLDesc **ludpp )</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20343>20343</a></td>\n' +
            '<td>typedef struct ldap_url_desc {</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20344>20344</a></td>\n' +
            '<td>char * lud_scheme; /* URI scheme */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20345>20345</a></td>\n' +
            '<td>char * lud_host; /* LDAP host to contact */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20346>20346</a></td>\n' +
            '<td>int lud_port; /* port on host */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20347>20347</a></td>\n' +
            '<td>char * lud_dn; /* base for search */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20348>20348</a></td>\n' +
            '<td>char ** lud_attrs; /* list of attributes */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20349>20349</a></td>\n' +
            '<td>int lud_scope; /* a LDAP_SCOPE_... value */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20350>20350</a></td>\n' +
            '<td>char * lud_filter; /* LDAP search filter */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20351>20351</a></td>\n' +
            '<td>char ** lud_exts; /* LDAP extensions */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20352>20352</a></td>\n' +
            '<td>int lud_crit_exts; /* true if any extension is critical */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20353>20353</a></td>\n' +
            '<td>/* may contain additional fields for internal use */</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20354>20354</a></td>\n' +
            '<td>} LDAPURLDesc;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20355>20355</a></td>\n' +
            '<td>void ldap_free_urldesc( LDAPURLDesc *ludp );</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20356>20356</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20357>20357</a></td>\n' +
            '<td>These routines support the use of LDAP URLs (Uniform Resource Locators) as detailed in RFC 4516. LDAP URLs look like this:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20358>20358</a></td>\n' +
            '<td>ldap://hostport/dn[?attrs[?scope[?filter[?exts]]]]</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20359>20359</a></td>\n' +
            '<td>where:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20360>20360</a></td>\n' +
            '<td>hostport is a host name with an optional ":portnumber"</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20361>20361</a></td>\n' +
            '<td>dn is the search base</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20362>20362</a></td>\n' +
            '<td>attrs is a comma separated list of attributes to request</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20363>20363</a></td>\n' +
            '<td>scope is one of these three strings:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20364>20364</a></td>\n' +
            '<td>base one sub (default=base)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20365>20365</a></td>\n' +
            '<td>filter is filter</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20366>20366</a></td>\n' +
            '<td>exts are recognized set of LDAP and/or API extensions.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20367>20367</a></td>\n' +
            '<td>Example:</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20368>20368</a></td>\n' +
            '<td>ldap://ldap.example.net/dc=example,dc=net?cn,sn?sub?(cn=*)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20369>20369</a></td>\n' +
            '<td>URLs that are wrapped in angle-brackets and/or preceded by "URL:" are also tolerated. Alternative LDAP schemes such as ldaps:// and ldapi:// may be parsed using the below routines as well.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20370>20370</a></td>\n' +
            '<td>ldap_is_ldap_url() returns a non-zero value if url looks like an LDAP URL (as opposed to some other kind of URL). It can be used as a quick check for an LDAP URL; the ldap_url_parse() routine should be used if a more thorough check is needed.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20371>20371</a></td>\n' +
            '<td>ldap_url_parse() breaks down an LDAP URL passed in url into its component pieces. If successful, zero is returned, an LDAP URL description is allocated, filled in, and ludpp is set to point to it. If an error occurs, a non-zero URL error code is returned.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20372>20372</a></td>\n' +
            '<td>ldap_free_urldesc() should be called to free an LDAP URL description that was obtained from a call to ldap_url_parse().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20373>20373</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20374>20374</a></td>\n' +
            '<td>ldap(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20375>20375</a></td>\n' +
            '<td>RFC 4516 &lt;http://www.rfc-editor.org/rfc/rfc4516.txt&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20376>20376</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20377>20377</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20378>20378</a></td>\n' +
            '<td>LDAP_GET_VALUES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20379>20379</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20380>20380</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20381>20381</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20382>20382</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20383>20383</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20384>20384</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20385>20385</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20386>20386</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20387>20387</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20388>20388</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20389>20389</a></td>\n' +
            '<td>ldap_get_values, ldap_get_values_len, ldap_count_values − LDAP attribute value handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20390>20390</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20391>20391</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20392>20392</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20393>20393</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20394>20394</a></td>\n' +
            '<td>char **ldap_get_values(ld, entry, attr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20395>20395</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20396>20396</a></td>\n' +
            '<td>LDAPMessage *entry;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20397>20397</a></td>\n' +
            '<td>char *attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20398>20398</a></td>\n' +
            '<td>struct berval **ldap_get_values_len(ld, entry, attr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20399>20399</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20400>20400</a></td>\n' +
            '<td>LDAPMessage *entry;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20401>20401</a></td>\n' +
            '<td>char *attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20402>20402</a></td>\n' +
            '<td>int ldap_count_values(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20403>20403</a></td>\n' +
            '<td>char **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20404>20404</a></td>\n' +
            '<td>int ldap_count_values_len(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20405>20405</a></td>\n' +
            '<td>struct berval **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20406>20406</a></td>\n' +
            '<td>void ldap_value_free(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20407>20407</a></td>\n' +
            '<td>char **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20408>20408</a></td>\n' +
            '<td>void ldap_value_free_len(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20409>20409</a></td>\n' +
            '<td>struct berval **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20410>20410</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20411>20411</a></td>\n' +
            '<td>These routines are used to retrieve and manipulate attribute values from an LDAP entry as returned by ldap_first_entry(3) or ldap_next_entry(3). ldap_get_values() takes the entry and the attribute attr whose values are desired and returns a NULL-terminated array of the attribute’s values. attr may be an attribute type as returned from ldap_first_attribute(3) or ldap_next_attribute(3), or if the attribute type is known it can simply be given.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20412>20412</a></td>\n' +
            '<td>The number of values in the array can be counted by calling ldap_count_values(). The array of values returned can be freed by calling ldap_value_free().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20413>20413</a></td>\n' +
            '<td>If the attribute values are binary in nature, and thus not suitable to be returned as an array of char *’s, the ldap_get_values_len() routine can be used instead. It takes the same parameters as ldap_get_values(), but returns a NULL-terminated array of pointers to berval structures, each containing the length of and a pointer to a value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20414>20414</a></td>\n' +
            '<td>The number of values in the array can be counted by calling ldap_count_values_len(). The array of values returned can be freed by calling ldap_value_free_len().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20415>20415</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20416>20416</a></td>\n' +
            '<td>If an error occurs in ldap_get_values() or ldap_get_values_len(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20417>20417</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20418>20418</a></td>\n' +
            '<td>These routines dynamically allocate memory which the caller must free using the supplied routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20419>20419</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20420>20420</a></td>\n' +
            '<td>ldap(3), ldap_first_entry(3), ldap_first_attribute(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20421>20421</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20422>20422</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20423>20423</a></td>\n' +
            '<td>LDAP_GET_VALUES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20424>20424</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20425>20425</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20426>20426</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20427>20427</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20428>20428</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20429>20429</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20430>20430</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20431>20431</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20432>20432</a></td>\n' +
            '<td></td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20433>20433</a></td>\n' +
            '<td>NAME</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20434>20434</a></td>\n' +
            '<td>ldap_get_values, ldap_get_values_len, ldap_count_values − LDAP attribute value handling routines</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20435>20435</a></td>\n' +
            '<td>LIBRARY</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20436>20436</a></td>\n' +
            '<td>OpenLDAP LDAP (libldap, −lldap)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20437>20437</a></td>\n' +
            '<td>SYNOPSIS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20438>20438</a></td>\n' +
            '<td>#include &lt;ldap.h&gt;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20439>20439</a></td>\n' +
            '<td>char **ldap_get_values(ld, entry, attr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20440>20440</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20441>20441</a></td>\n' +
            '<td>LDAPMessage *entry;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20442>20442</a></td>\n' +
            '<td>char *attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20443>20443</a></td>\n' +
            '<td>struct berval **ldap_get_values_len(ld, entry, attr)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20444>20444</a></td>\n' +
            '<td>LDAP *ld;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20445>20445</a></td>\n' +
            '<td>LDAPMessage *entry;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20446>20446</a></td>\n' +
            '<td>char *attr;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20447>20447</a></td>\n' +
            '<td>int ldap_count_values(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20448>20448</a></td>\n' +
            '<td>char **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20449>20449</a></td>\n' +
            '<td>int ldap_count_values_len(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20450>20450</a></td>\n' +
            '<td>struct berval **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20451>20451</a></td>\n' +
            '<td>void ldap_value_free(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20452>20452</a></td>\n' +
            '<td>char **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20453>20453</a></td>\n' +
            '<td>void ldap_value_free_len(vals)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20454>20454</a></td>\n' +
            '<td>struct berval **vals;</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20455>20455</a></td>\n' +
            '<td>DESCRIPTION</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20456>20456</a></td>\n' +
            '<td>These routines are used to retrieve and manipulate attribute values from an LDAP entry as returned by ldap_first_entry(3) or ldap_next_entry(3). ldap_get_values() takes the entry and the attribute attr whose values are desired and returns a NULL-terminated array of the attribute’s values. attr may be an attribute type as returned from ldap_first_attribute(3) or ldap_next_attribute(3), or if the attribute type is known it can simply be given.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20457>20457</a></td>\n' +
            '<td>The number of values in the array can be counted by calling ldap_count_values(). The array of values returned can be freed by calling ldap_value_free().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20458>20458</a></td>\n' +
            '<td>If the attribute values are binary in nature, and thus not suitable to be returned as an array of char *’s, the ldap_get_values_len() routine can be used instead. It takes the same parameters as ldap_get_values(), but returns a NULL-terminated array of pointers to berval structures, each containing the length of and a pointer to a value.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20459>20459</a></td>\n' +
            '<td>The number of values in the array can be counted by calling ldap_count_values_len(). The array of values returned can be freed by calling ldap_value_free_len().</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20460>20460</a></td>\n' +
            '<td>ERRORS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20461>20461</a></td>\n' +
            '<td>If an error occurs in ldap_get_values() or ldap_get_values_len(), NULL is returned and the ld_errno field in the ld parameter is set to indicate the error. See ldap_error(3) for a description of possible error codes.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20462>20462</a></td>\n' +
            '<td>NOTES</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20463>20463</a></td>\n' +
            '<td>These routines dynamically allocate memory which the caller must free using the supplied routines.</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20464>20464</a></td>\n' +
            '<td>SEE ALSO</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20465>20465</a></td>\n' +
            '<td>ldap(3), ldap_first_entry(3), ldap_first_attribute(3), ldap_error(3)</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20466>20466</a></td>\n' +
            '<td>ACKNOWLEDGEMENTS</td>\n' +
        '</tr>\n' +
        '<tr>\n' +
            '<td><a name=20467>20467</a></td>\n' +
            '<td>OpenLDAP Software is developed and maintained by The OpenLDAP Project &lt;http://www.openldap.org/&gt;. OpenLDAP Software is derived from University of Michigan LDAP 3.3 Release.</td>\n' +
        '</tr>\n' +
    '</tbody></table>';
}
